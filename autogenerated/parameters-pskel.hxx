// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef PARAMETERS_PSKEL_HXX
#define PARAMETERS_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class Parameters_pskel;
  class Parameters_Parameter_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class Parameters_pskel: public ::fhir::Resource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    parameter ();

    virtual void
    post_Parameters ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Parameters_Parameter_pskel& /* parameter */);

    // Individual element parsers.
    //
    void
    parameter_parser (::fhir::Parameters_Parameter_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Parameters_pskel (::fhir::Resource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Parameters_pskel* Parameters_impl_;
    Parameters_pskel (Parameters_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Parameters_Parameter_pskel* parameter_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Parameters_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Parameters_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    resource ();

    virtual void
    part ();

    virtual void
    post_Parameters_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */,
             ::fhir::ResourceContainer_pskel& /* resource */,
             ::fhir::Parameters_Parameter_pskel& /* part */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    void
    resource_parser (::fhir::ResourceContainer_pskel&);

    void
    part_parser (::fhir::Parameters_Parameter_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Parameters_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Parameters_Parameter_pskel* Parameters_Parameter_impl_;
    Parameters_Parameter_pskel (Parameters_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;
    ::fhir::ResourceContainer_pskel* resource_parser_;
    ::fhir::Parameters_Parameter_pskel* part_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Parameters_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PARAMETERS_PSKEL_HXX
