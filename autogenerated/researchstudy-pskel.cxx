// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "researchstudy-pskel.hxx"

namespace fhir
{
  // ResearchStudy_pskel
  //

  void ResearchStudy_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ResearchStudy_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ResearchStudy_pskel::
  protocol_parser (::fhir::Reference_pskel& p)
  {
    this->protocol_parser_ = &p;
  }

  void ResearchStudy_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void ResearchStudy_pskel::
  status_parser (::fhir::ResearchStudyStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ResearchStudy_pskel::
  primaryPurposeType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->primaryPurposeType_parser_ = &p;
  }

  void ResearchStudy_pskel::
  phase_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->phase_parser_ = &p;
  }

  void ResearchStudy_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ResearchStudy_pskel::
  focus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->focus_parser_ = &p;
  }

  void ResearchStudy_pskel::
  condition_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void ResearchStudy_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void ResearchStudy_pskel::
  relatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->relatedArtifact_parser_ = &p;
  }

  void ResearchStudy_pskel::
  keyword_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->keyword_parser_ = &p;
  }

  void ResearchStudy_pskel::
  location_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void ResearchStudy_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ResearchStudy_pskel::
  enrollment_parser (::fhir::Reference_pskel& p)
  {
    this->enrollment_parser_ = &p;
  }

  void ResearchStudy_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void ResearchStudy_pskel::
  sponsor_parser (::fhir::Reference_pskel& p)
  {
    this->sponsor_parser_ = &p;
  }

  void ResearchStudy_pskel::
  principalInvestigator_parser (::fhir::Reference_pskel& p)
  {
    this->principalInvestigator_parser_ = &p;
  }

  void ResearchStudy_pskel::
  site_parser (::fhir::Reference_pskel& p)
  {
    this->site_parser_ = &p;
  }

  void ResearchStudy_pskel::
  reasonStopped_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonStopped_parser_ = &p;
  }

  void ResearchStudy_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void ResearchStudy_pskel::
  arm_parser (::fhir::ResearchStudy_Arm_pskel& p)
  {
    this->arm_parser_ = &p;
  }

  void ResearchStudy_pskel::
  objective_parser (::fhir::ResearchStudy_Objective_pskel& p)
  {
    this->objective_parser_ = &p;
  }

  void ResearchStudy_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& title,
           ::fhir::Reference_pskel& protocol,
           ::fhir::Reference_pskel& partOf,
           ::fhir::ResearchStudyStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& primaryPurposeType,
           ::fhir::CodeableConcept_pskel& phase,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& focus,
           ::fhir::CodeableConcept_pskel& condition,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::RelatedArtifact_pskel& relatedArtifact,
           ::fhir::CodeableConcept_pskel& keyword,
           ::fhir::CodeableConcept_pskel& location,
           ::fhir::markdown_pskel& description,
           ::fhir::Reference_pskel& enrollment,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& sponsor,
           ::fhir::Reference_pskel& principalInvestigator,
           ::fhir::Reference_pskel& site,
           ::fhir::CodeableConcept_pskel& reasonStopped,
           ::fhir::Annotation_pskel& note,
           ::fhir::ResearchStudy_Arm_pskel& arm,
           ::fhir::ResearchStudy_Objective_pskel& objective)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->title_parser_ = &title;
    this->protocol_parser_ = &protocol;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->primaryPurposeType_parser_ = &primaryPurposeType;
    this->phase_parser_ = &phase;
    this->category_parser_ = &category;
    this->focus_parser_ = &focus;
    this->condition_parser_ = &condition;
    this->contact_parser_ = &contact;
    this->relatedArtifact_parser_ = &relatedArtifact;
    this->keyword_parser_ = &keyword;
    this->location_parser_ = &location;
    this->description_parser_ = &description;
    this->enrollment_parser_ = &enrollment;
    this->period_parser_ = &period;
    this->sponsor_parser_ = &sponsor;
    this->principalInvestigator_parser_ = &principalInvestigator;
    this->site_parser_ = &site;
    this->reasonStopped_parser_ = &reasonStopped;
    this->note_parser_ = &note;
    this->arm_parser_ = &arm;
    this->objective_parser_ = &objective;
  }

  ResearchStudy_pskel::
  ResearchStudy_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ResearchStudy_impl_ (0),
    identifier_parser_ (0),
    title_parser_ (0),
    protocol_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    primaryPurposeType_parser_ (0),
    phase_parser_ (0),
    category_parser_ (0),
    focus_parser_ (0),
    condition_parser_ (0),
    contact_parser_ (0),
    relatedArtifact_parser_ (0),
    keyword_parser_ (0),
    location_parser_ (0),
    description_parser_ (0),
    enrollment_parser_ (0),
    period_parser_ (0),
    sponsor_parser_ (0),
    principalInvestigator_parser_ (0),
    site_parser_ (0),
    reasonStopped_parser_ (0),
    note_parser_ (0),
    arm_parser_ (0),
    objective_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ResearchStudy_pskel::
  ResearchStudy_pskel (ResearchStudy_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ResearchStudy_impl_ (impl),
    identifier_parser_ (0),
    title_parser_ (0),
    protocol_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    primaryPurposeType_parser_ (0),
    phase_parser_ (0),
    category_parser_ (0),
    focus_parser_ (0),
    condition_parser_ (0),
    contact_parser_ (0),
    relatedArtifact_parser_ (0),
    keyword_parser_ (0),
    location_parser_ (0),
    description_parser_ (0),
    enrollment_parser_ (0),
    period_parser_ (0),
    sponsor_parser_ (0),
    principalInvestigator_parser_ (0),
    site_parser_ (0),
    reasonStopped_parser_ (0),
    note_parser_ (0),
    arm_parser_ (0),
    objective_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ResearchStudy_Arm_pskel
  //

  void ResearchStudy_Arm_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ResearchStudy_Arm_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ResearchStudy_Arm_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ResearchStudy_Arm_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::string_pskel& description)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->type_parser_ = &type;
    this->description_parser_ = &description;
  }

  ResearchStudy_Arm_pskel::
  ResearchStudy_Arm_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ResearchStudy_Arm_impl_ (0),
    name_parser_ (0),
    type_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ResearchStudy_Arm_pskel::
  ResearchStudy_Arm_pskel (ResearchStudy_Arm_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ResearchStudy_Arm_impl_ (impl),
    name_parser_ (0),
    type_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ResearchStudy_Objective_pskel
  //

  void ResearchStudy_Objective_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ResearchStudy_Objective_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ResearchStudy_Objective_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::CodeableConcept_pskel& type)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->type_parser_ = &type;
  }

  ResearchStudy_Objective_pskel::
  ResearchStudy_Objective_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ResearchStudy_Objective_impl_ (0),
    name_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ResearchStudy_Objective_pskel::
  ResearchStudy_Objective_pskel (ResearchStudy_Objective_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ResearchStudy_Objective_impl_ (impl),
    name_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ResearchStudyStatus_list_pskel
  //

  ResearchStudyStatus_list_pskel::
  ResearchStudyStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ResearchStudyStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ResearchStudyStatus_list_pskel_enums_, 11UL);
  }

  ResearchStudyStatus_list_pskel::
  ResearchStudyStatus_list_pskel (ResearchStudyStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ResearchStudyStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ResearchStudyStatus_list_pskel_enums_, 11UL);
  }

  // ResearchStudyStatus_pskel
  //

  void ResearchStudyStatus_pskel::
  value_parser (::fhir::ResearchStudyStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ResearchStudyStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ResearchStudyStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ResearchStudyStatus_pskel::
  ResearchStudyStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ResearchStudyStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  ResearchStudyStatus_pskel::
  ResearchStudyStatus_pskel (ResearchStudyStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ResearchStudyStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ResearchStudy_pskel
  //

  void ResearchStudy_pskel::
  identifier ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->identifier ();
  }

  void ResearchStudy_pskel::
  title ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->title ();
  }

  void ResearchStudy_pskel::
  protocol ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->protocol ();
  }

  void ResearchStudy_pskel::
  partOf ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->partOf ();
  }

  void ResearchStudy_pskel::
  status ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->status ();
  }

  void ResearchStudy_pskel::
  primaryPurposeType ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->primaryPurposeType ();
  }

  void ResearchStudy_pskel::
  phase ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->phase ();
  }

  void ResearchStudy_pskel::
  category ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->category ();
  }

  void ResearchStudy_pskel::
  focus ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->focus ();
  }

  void ResearchStudy_pskel::
  condition ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->condition ();
  }

  void ResearchStudy_pskel::
  contact ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->contact ();
  }

  void ResearchStudy_pskel::
  relatedArtifact ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->relatedArtifact ();
  }

  void ResearchStudy_pskel::
  keyword ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->keyword ();
  }

  void ResearchStudy_pskel::
  location ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->location ();
  }

  void ResearchStudy_pskel::
  description ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->description ();
  }

  void ResearchStudy_pskel::
  enrollment ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->enrollment ();
  }

  void ResearchStudy_pskel::
  period ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->period ();
  }

  void ResearchStudy_pskel::
  sponsor ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->sponsor ();
  }

  void ResearchStudy_pskel::
  principalInvestigator ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->principalInvestigator ();
  }

  void ResearchStudy_pskel::
  site ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->site ();
  }

  void ResearchStudy_pskel::
  reasonStopped ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->reasonStopped ();
  }

  void ResearchStudy_pskel::
  note ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->note ();
  }

  void ResearchStudy_pskel::
  arm ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->arm ();
  }

  void ResearchStudy_pskel::
  objective ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->objective ();
  }

  void ResearchStudy_pskel::
  post_ResearchStudy ()
  {
    if (this->ResearchStudy_impl_)
      this->ResearchStudy_impl_->post_ResearchStudy ();
    else
      post_DomainResource ();
  }

  void ResearchStudy_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->protocol_parser_)
      this->protocol_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->primaryPurposeType_parser_)
      this->primaryPurposeType_parser_->_reset ();

    if (this->phase_parser_)
      this->phase_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->focus_parser_)
      this->focus_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->relatedArtifact_parser_)
      this->relatedArtifact_parser_->_reset ();

    if (this->keyword_parser_)
      this->keyword_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->enrollment_parser_)
      this->enrollment_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->sponsor_parser_)
      this->sponsor_parser_->_reset ();

    if (this->principalInvestigator_parser_)
      this->principalInvestigator_parser_->_reset ();

    if (this->site_parser_)
      this->site_parser_->_reset ();

    if (this->reasonStopped_parser_)
      this->reasonStopped_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->arm_parser_)
      this->arm_parser_->_reset ();

    if (this->objective_parser_)
      this->objective_parser_->_reset ();

    this->resetting_ = false;
  }

  // ResearchStudy_Arm_pskel
  //

  void ResearchStudy_Arm_pskel::
  name ()
  {
    if (this->ResearchStudy_Arm_impl_)
      this->ResearchStudy_Arm_impl_->name ();
  }

  void ResearchStudy_Arm_pskel::
  type ()
  {
    if (this->ResearchStudy_Arm_impl_)
      this->ResearchStudy_Arm_impl_->type ();
  }

  void ResearchStudy_Arm_pskel::
  description ()
  {
    if (this->ResearchStudy_Arm_impl_)
      this->ResearchStudy_Arm_impl_->description ();
  }

  void ResearchStudy_Arm_pskel::
  post_ResearchStudy_Arm ()
  {
    if (this->ResearchStudy_Arm_impl_)
      this->ResearchStudy_Arm_impl_->post_ResearchStudy_Arm ();
    else
      post_BackboneElement ();
  }

  void ResearchStudy_Arm_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    this->resetting_ = false;
  }

  // ResearchStudy_Objective_pskel
  //

  void ResearchStudy_Objective_pskel::
  name ()
  {
    if (this->ResearchStudy_Objective_impl_)
      this->ResearchStudy_Objective_impl_->name ();
  }

  void ResearchStudy_Objective_pskel::
  type ()
  {
    if (this->ResearchStudy_Objective_impl_)
      this->ResearchStudy_Objective_impl_->type ();
  }

  void ResearchStudy_Objective_pskel::
  post_ResearchStudy_Objective ()
  {
    if (this->ResearchStudy_Objective_impl_)
      this->ResearchStudy_Objective_impl_->post_ResearchStudy_Objective ();
    else
      post_BackboneElement ();
  }

  void ResearchStudy_Objective_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = false;
  }

  // ResearchStudyStatus_list_pskel
  //

  void ResearchStudyStatus_list_pskel::
  post_ResearchStudyStatus_list ()
  {
    if (this->ResearchStudyStatus_list_impl_)
      this->ResearchStudyStatus_list_impl_->post_ResearchStudyStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const ResearchStudyStatus_list_pskel::_xsde_ResearchStudyStatus_list_pskel_enums_[11UL] = 
  {
    "active",
    "administratively-completed",
    "approved",
    "closed-to-accrual",
    "closed-to-accrual-and-intervention",
    "completed",
    "disapproved",
    "in-review",
    "temporarily-closed-to-accrual",
    "temporarily-closed-to-accrual-and-intervention",
    "withdrawn"
  };

  // ResearchStudyStatus_pskel
  //

  void ResearchStudyStatus_pskel::
  value ()
  {
    if (this->ResearchStudyStatus_impl_)
      this->ResearchStudyStatus_impl_->value ();
  }

  void ResearchStudyStatus_pskel::
  post_ResearchStudyStatus ()
  {
    if (this->ResearchStudyStatus_impl_)
      this->ResearchStudyStatus_impl_->post_ResearchStudyStatus ();
    else
      post_Element ();
  }

  void ResearchStudyStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ResearchStudy_pskel.
  //
  bool ResearchStudy_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "protocol" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ResearchStudy_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ResearchStudy_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ResearchStudy_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ResearchStudy_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ResearchStudy_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "protocol" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->protocol_parser_)
            {
              this->protocol_parser_->pre ();
              ctx.nested_parser (this->protocol_parser_);
            }
          }
          else
          {
            if (this->protocol_parser_ != 0)
            {
              this->protocol_parser_->post_Reference ();
              this->protocol ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ResearchStudyStatus ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "primaryPurposeType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->primaryPurposeType_parser_)
            {
              this->primaryPurposeType_parser_->pre ();
              ctx.nested_parser (this->primaryPurposeType_parser_);
            }
          }
          else
          {
            if (this->primaryPurposeType_parser_ != 0)
            {
              this->primaryPurposeType_parser_->post_CodeableConcept ();
              this->primaryPurposeType ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "phase" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->phase_parser_)
            {
              this->phase_parser_->pre ();
              ctx.nested_parser (this->phase_parser_);
            }
          }
          else
          {
            if (this->phase_parser_ != 0)
            {
              this->phase_parser_->post_CodeableConcept ();
              this->phase ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "focus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focus_parser_)
            {
              this->focus_parser_->pre ();
              ctx.nested_parser (this->focus_parser_);
            }
          }
          else
          {
            if (this->focus_parser_ != 0)
            {
              this->focus_parser_->post_CodeableConcept ();
              this->focus ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_CodeableConcept ();
              this->condition ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "relatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatedArtifact_parser_)
            {
              this->relatedArtifact_parser_->pre ();
              ctx.nested_parser (this->relatedArtifact_parser_);
            }
          }
          else
          {
            if (this->relatedArtifact_parser_ != 0)
            {
              this->relatedArtifact_parser_->post_RelatedArtifact ();
              this->relatedArtifact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "keyword" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->keyword_parser_)
            {
              this->keyword_parser_->pre ();
              ctx.nested_parser (this->keyword_parser_);
            }
          }
          else
          {
            if (this->keyword_parser_ != 0)
            {
              this->keyword_parser_->post_CodeableConcept ();
              this->keyword ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_CodeableConcept ();
              this->location ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "enrollment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enrollment_parser_)
            {
              this->enrollment_parser_->pre ();
              ctx.nested_parser (this->enrollment_parser_);
            }
          }
          else
          {
            if (this->enrollment_parser_ != 0)
            {
              this->enrollment_parser_->post_Reference ();
              this->enrollment ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "sponsor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sponsor_parser_)
            {
              this->sponsor_parser_->pre ();
              ctx.nested_parser (this->sponsor_parser_);
            }
          }
          else
          {
            if (this->sponsor_parser_ != 0)
            {
              this->sponsor_parser_->post_Reference ();
              this->sponsor ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "principalInvestigator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->principalInvestigator_parser_)
            {
              this->principalInvestigator_parser_->pre ();
              ctx.nested_parser (this->principalInvestigator_parser_);
            }
          }
          else
          {
            if (this->principalInvestigator_parser_ != 0)
            {
              this->principalInvestigator_parser_->post_Reference ();
              this->principalInvestigator ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "site" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->site_parser_)
            {
              this->site_parser_->pre ();
              ctx.nested_parser (this->site_parser_);
            }
          }
          else
          {
            if (this->site_parser_ != 0)
            {
              this->site_parser_->post_Reference ();
              this->site ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "reasonStopped" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonStopped_parser_)
            {
              this->reasonStopped_parser_->pre ();
              ctx.nested_parser (this->reasonStopped_parser_);
            }
          }
          else
          {
            if (this->reasonStopped_parser_ != 0)
            {
              this->reasonStopped_parser_->post_CodeableConcept ();
              this->reasonStopped ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "arm" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->arm_parser_)
            {
              this->arm_parser_->pre ();
              ctx.nested_parser (this->arm_parser_);
            }
          }
          else
          {
            if (this->arm_parser_ != 0)
            {
              this->arm_parser_->post_ResearchStudy_Arm ();
              this->arm ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "objective" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->objective_parser_)
            {
              this->objective_parser_->pre ();
              ctx.nested_parser (this->objective_parser_);
            }
          }
          else
          {
            if (this->objective_parser_ != 0)
            {
              this->objective_parser_->post_ResearchStudy_Objective ();
              this->objective ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ResearchStudy_Arm_pskel.
  //
  bool ResearchStudy_Arm_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ResearchStudy_Arm_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ResearchStudy_Arm_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ResearchStudy_Arm_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ResearchStudy_Arm_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ResearchStudy_Arm_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ResearchStudy_Objective_pskel.
  //
  bool ResearchStudy_Objective_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ResearchStudy_Objective_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ResearchStudy_Objective_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ResearchStudy_Objective_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ResearchStudy_Objective_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ResearchStudy_Objective_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ResearchStudyStatus_pskel.
  //
  bool ResearchStudyStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ResearchStudyStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

