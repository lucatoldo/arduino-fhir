// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef MEDICATIONREQUEST_PSKEL_HXX
#define MEDICATIONREQUEST_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class MedicationRequest_pskel;
  class MedicationRequest_DispenseRequest_pskel;
  class MedicationRequest_InitialFill_pskel;
  class MedicationRequest_Substitution_pskel;
  class medicationrequestStatus_list_pskel;
  class medicationrequestStatus_pskel;
  class medicationRequestIntent_list_pskel;
  class medicationRequestIntent_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class MedicationRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    intent ();

    virtual void
    category ();

    virtual void
    priority ();

    virtual void
    doNotPerform ();

    virtual void
    reportedBoolean ();

    virtual void
    reportedReference ();

    virtual void
    medicationCodeableConcept ();

    virtual void
    medicationReference ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    supportingInformation ();

    virtual void
    authoredOn ();

    virtual void
    requester ();

    virtual void
    performer ();

    virtual void
    performerType ();

    virtual void
    recorder ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    groupIdentifier ();

    virtual void
    courseOfTherapyType ();

    virtual void
    insurance ();

    virtual void
    note ();

    virtual void
    dosageInstruction ();

    virtual void
    dispenseRequest ();

    virtual void
    substitution ();

    virtual void
    priorPrescription ();

    virtual void
    detectedIssue ();

    virtual void
    eventHistory ();

    virtual void
    post_MedicationRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::medicationrequestStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::medicationRequestIntent_pskel& /* intent */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::boolean_pskel& /* reportedBoolean */,
             ::fhir::Reference_pskel& /* reportedReference */,
             ::fhir::CodeableConcept_pskel& /* medicationCodeableConcept */,
             ::fhir::Reference_pskel& /* medicationReference */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Reference_pskel& /* supportingInformation */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* performerType */,
             ::fhir::Reference_pskel& /* recorder */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Identifier_pskel& /* groupIdentifier */,
             ::fhir::CodeableConcept_pskel& /* courseOfTherapyType */,
             ::fhir::Reference_pskel& /* insurance */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Dosage_pskel& /* dosageInstruction */,
             ::fhir::MedicationRequest_DispenseRequest_pskel& /* dispenseRequest */,
             ::fhir::MedicationRequest_Substitution_pskel& /* substitution */,
             ::fhir::Reference_pskel& /* priorPrescription */,
             ::fhir::Reference_pskel& /* detectedIssue */,
             ::fhir::Reference_pskel& /* eventHistory */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::medicationrequestStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    intent_parser (::fhir::medicationRequestIntent_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    reportedBoolean_parser (::fhir::boolean_pskel&);

    void
    reportedReference_parser (::fhir::Reference_pskel&);

    void
    medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationReference_parser (::fhir::Reference_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    supportingInformation_parser (::fhir::Reference_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    performerType_parser (::fhir::CodeableConcept_pskel&);

    void
    recorder_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    groupIdentifier_parser (::fhir::Identifier_pskel&);

    void
    courseOfTherapyType_parser (::fhir::CodeableConcept_pskel&);

    void
    insurance_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    dosageInstruction_parser (::fhir::Dosage_pskel&);

    void
    dispenseRequest_parser (::fhir::MedicationRequest_DispenseRequest_pskel&);

    void
    substitution_parser (::fhir::MedicationRequest_Substitution_pskel&);

    void
    priorPrescription_parser (::fhir::Reference_pskel&);

    void
    detectedIssue_parser (::fhir::Reference_pskel&);

    void
    eventHistory_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_pskel* MedicationRequest_impl_;
    MedicationRequest_pskel (MedicationRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::medicationrequestStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::medicationRequestIntent_pskel* intent_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::boolean_pskel* reportedBoolean_parser_;
    ::fhir::Reference_pskel* reportedReference_parser_;
    ::fhir::CodeableConcept_pskel* medicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* medicationReference_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Reference_pskel* supportingInformation_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* performerType_parser_;
    ::fhir::Reference_pskel* recorder_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Identifier_pskel* groupIdentifier_parser_;
    ::fhir::CodeableConcept_pskel* courseOfTherapyType_parser_;
    ::fhir::Reference_pskel* insurance_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Dosage_pskel* dosageInstruction_parser_;
    ::fhir::MedicationRequest_DispenseRequest_pskel* dispenseRequest_parser_;
    ::fhir::MedicationRequest_Substitution_pskel* substitution_parser_;
    ::fhir::Reference_pskel* priorPrescription_parser_;
    ::fhir::Reference_pskel* detectedIssue_parser_;
    ::fhir::Reference_pskel* eventHistory_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationRequest_DispenseRequest_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    initialFill ();

    virtual void
    dispenseInterval ();

    virtual void
    validityPeriod ();

    virtual void
    numberOfRepeatsAllowed ();

    virtual void
    quantity ();

    virtual void
    expectedSupplyDuration ();

    virtual void
    performer ();

    virtual void
    post_MedicationRequest_DispenseRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::MedicationRequest_InitialFill_pskel& /* initialFill */,
             ::fhir::Duration_pskel& /* dispenseInterval */,
             ::fhir::Period_pskel& /* validityPeriod */,
             ::fhir::unsignedInt_pskel& /* numberOfRepeatsAllowed */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Duration_pskel& /* expectedSupplyDuration */,
             ::fhir::Reference_pskel& /* performer */);

    // Individual element parsers.
    //
    void
    initialFill_parser (::fhir::MedicationRequest_InitialFill_pskel&);

    void
    dispenseInterval_parser (::fhir::Duration_pskel&);

    void
    validityPeriod_parser (::fhir::Period_pskel&);

    void
    numberOfRepeatsAllowed_parser (::fhir::unsignedInt_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    expectedSupplyDuration_parser (::fhir::Duration_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_DispenseRequest_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_DispenseRequest_pskel* MedicationRequest_DispenseRequest_impl_;
    MedicationRequest_DispenseRequest_pskel (MedicationRequest_DispenseRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::MedicationRequest_InitialFill_pskel* initialFill_parser_;
    ::fhir::Duration_pskel* dispenseInterval_parser_;
    ::fhir::Period_pskel* validityPeriod_parser_;
    ::fhir::unsignedInt_pskel* numberOfRepeatsAllowed_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Duration_pskel* expectedSupplyDuration_parser_;
    ::fhir::Reference_pskel* performer_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_DispenseRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationRequest_InitialFill_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    quantity ();

    virtual void
    duration ();

    virtual void
    post_MedicationRequest_InitialFill ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Duration_pskel& /* duration */);

    // Individual element parsers.
    //
    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    duration_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_InitialFill_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_InitialFill_pskel* MedicationRequest_InitialFill_impl_;
    MedicationRequest_InitialFill_pskel (MedicationRequest_InitialFill_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Duration_pskel* duration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_InitialFill_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationRequest_Substitution_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    allowedBoolean ();

    virtual void
    allowedCodeableConcept ();

    virtual void
    reason ();

    virtual void
    post_MedicationRequest_Substitution ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* allowedBoolean */,
             ::fhir::CodeableConcept_pskel& /* allowedCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* reason */);

    // Individual element parsers.
    //
    void
    allowedBoolean_parser (::fhir::boolean_pskel&);

    void
    allowedCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_Substitution_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_Substitution_pskel* MedicationRequest_Substitution_impl_;
    MedicationRequest_Substitution_pskel (MedicationRequest_Substitution_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* allowedBoolean_parser_;
    ::fhir::CodeableConcept_pskel* allowedCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_Substitution_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class medicationrequestStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_medicationrequestStatus_list ();

    // Constructor.
    //
    medicationrequestStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationrequestStatus_list_pskel* medicationrequestStatus_list_impl_;
    medicationrequestStatus_list_pskel (medicationrequestStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_medicationrequestStatus_list_pskel_enums_[8UL];
  };

  class medicationrequestStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_medicationrequestStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::medicationrequestStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::medicationrequestStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    medicationrequestStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationrequestStatus_pskel* medicationrequestStatus_impl_;
    medicationrequestStatus_pskel (medicationrequestStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::medicationrequestStatus_list_pskel* value_parser_;
  };

  class medicationRequestIntent_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_medicationRequestIntent_list ();

    // Constructor.
    //
    medicationRequestIntent_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationRequestIntent_list_pskel* medicationRequestIntent_list_impl_;
    medicationRequestIntent_list_pskel (medicationRequestIntent_list_pskel*, void*);

    protected:
    static const char* const _xsde_medicationRequestIntent_list_pskel_enums_[8UL];
  };

  class medicationRequestIntent_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_medicationRequestIntent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::medicationRequestIntent_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::medicationRequestIntent_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    medicationRequestIntent_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationRequestIntent_pskel* medicationRequestIntent_impl_;
    medicationRequestIntent_pskel (medicationRequestIntent_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::medicationRequestIntent_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MEDICATIONREQUEST_PSKEL_HXX
