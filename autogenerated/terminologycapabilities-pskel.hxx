// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef TERMINOLOGYCAPABILITIES_PSKEL_HXX
#define TERMINOLOGYCAPABILITIES_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class TerminologyCapabilities_pskel;
  class TerminologyCapabilities_Software_pskel;
  class TerminologyCapabilities_Implementation_pskel;
  class TerminologyCapabilities_CodeSystem_pskel;
  class TerminologyCapabilities_Version_pskel;
  class TerminologyCapabilities_Filter_pskel;
  class TerminologyCapabilities_Expansion_pskel;
  class TerminologyCapabilities_Parameter_pskel;
  class TerminologyCapabilities_ValidateCode_pskel;
  class TerminologyCapabilities_Translation_pskel;
  class TerminologyCapabilities_Closure_pskel;
  class CodeSearchSupport_list_pskel;
  class CodeSearchSupport_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class TerminologyCapabilities_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    kind ();

    virtual void
    software ();

    virtual void
    implementation ();

    virtual void
    lockedDate ();

    virtual void
    codeSystem ();

    virtual void
    expansion ();

    virtual void
    codeSearch ();

    virtual void
    validateCode ();

    virtual void
    translation ();

    virtual void
    closure ();

    virtual void
    post_TerminologyCapabilities ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::CapabilityStatementKind_pskel& /* kind */,
             ::fhir::TerminologyCapabilities_Software_pskel& /* software */,
             ::fhir::TerminologyCapabilities_Implementation_pskel& /* implementation */,
             ::fhir::boolean_pskel& /* lockedDate */,
             ::fhir::TerminologyCapabilities_CodeSystem_pskel& /* codeSystem */,
             ::fhir::TerminologyCapabilities_Expansion_pskel& /* expansion */,
             ::fhir::CodeSearchSupport_pskel& /* codeSearch */,
             ::fhir::TerminologyCapabilities_ValidateCode_pskel& /* validateCode */,
             ::fhir::TerminologyCapabilities_Translation_pskel& /* translation */,
             ::fhir::TerminologyCapabilities_Closure_pskel& /* closure */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    kind_parser (::fhir::CapabilityStatementKind_pskel&);

    void
    software_parser (::fhir::TerminologyCapabilities_Software_pskel&);

    void
    implementation_parser (::fhir::TerminologyCapabilities_Implementation_pskel&);

    void
    lockedDate_parser (::fhir::boolean_pskel&);

    void
    codeSystem_parser (::fhir::TerminologyCapabilities_CodeSystem_pskel&);

    void
    expansion_parser (::fhir::TerminologyCapabilities_Expansion_pskel&);

    void
    codeSearch_parser (::fhir::CodeSearchSupport_pskel&);

    void
    validateCode_parser (::fhir::TerminologyCapabilities_ValidateCode_pskel&);

    void
    translation_parser (::fhir::TerminologyCapabilities_Translation_pskel&);

    void
    closure_parser (::fhir::TerminologyCapabilities_Closure_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_pskel* TerminologyCapabilities_impl_;
    TerminologyCapabilities_pskel (TerminologyCapabilities_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::CapabilityStatementKind_pskel* kind_parser_;
    ::fhir::TerminologyCapabilities_Software_pskel* software_parser_;
    ::fhir::TerminologyCapabilities_Implementation_pskel* implementation_parser_;
    ::fhir::boolean_pskel* lockedDate_parser_;
    ::fhir::TerminologyCapabilities_CodeSystem_pskel* codeSystem_parser_;
    ::fhir::TerminologyCapabilities_Expansion_pskel* expansion_parser_;
    ::fhir::CodeSearchSupport_pskel* codeSearch_parser_;
    ::fhir::TerminologyCapabilities_ValidateCode_pskel* validateCode_parser_;
    ::fhir::TerminologyCapabilities_Translation_pskel* translation_parser_;
    ::fhir::TerminologyCapabilities_Closure_pskel* closure_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Software_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    version ();

    virtual void
    post_TerminologyCapabilities_Software ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* version */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Software_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Software_pskel* TerminologyCapabilities_Software_impl_;
    TerminologyCapabilities_Software_pskel (TerminologyCapabilities_Software_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* version_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Software_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Implementation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    url ();

    virtual void
    post_TerminologyCapabilities_Implementation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::url_pskel& /* url */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Implementation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Implementation_pskel* TerminologyCapabilities_Implementation_impl_;
    TerminologyCapabilities_Implementation_pskel (TerminologyCapabilities_Implementation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::url_pskel* url_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Implementation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_CodeSystem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    uri ();

    virtual void
    version ();

    virtual void
    subsumption ();

    virtual void
    post_TerminologyCapabilities_CodeSystem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* uri */,
             ::fhir::TerminologyCapabilities_Version_pskel& /* version */,
             ::fhir::boolean_pskel& /* subsumption */);

    // Individual element parsers.
    //
    void
    uri_parser (::fhir::canonical_pskel&);

    void
    version_parser (::fhir::TerminologyCapabilities_Version_pskel&);

    void
    subsumption_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_CodeSystem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_CodeSystem_pskel* TerminologyCapabilities_CodeSystem_impl_;
    TerminologyCapabilities_CodeSystem_pskel (TerminologyCapabilities_CodeSystem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* uri_parser_;
    ::fhir::TerminologyCapabilities_Version_pskel* version_parser_;
    ::fhir::boolean_pskel* subsumption_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_CodeSystem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Version_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    isDefault ();

    virtual void
    compositional ();

    virtual void
    language ();

    virtual void
    filter ();

    virtual void
    property ();

    virtual void
    post_TerminologyCapabilities_Version ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* code */,
             ::fhir::boolean_pskel& /* isDefault */,
             ::fhir::boolean_pskel& /* compositional */,
             ::fhir::code_pskel& /* language */,
             ::fhir::TerminologyCapabilities_Filter_pskel& /* filter */,
             ::fhir::code_pskel& /* property */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::string_pskel&);

    void
    isDefault_parser (::fhir::boolean_pskel&);

    void
    compositional_parser (::fhir::boolean_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    void
    filter_parser (::fhir::TerminologyCapabilities_Filter_pskel&);

    void
    property_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Version_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Version_pskel* TerminologyCapabilities_Version_impl_;
    TerminologyCapabilities_Version_pskel (TerminologyCapabilities_Version_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* code_parser_;
    ::fhir::boolean_pskel* isDefault_parser_;
    ::fhir::boolean_pskel* compositional_parser_;
    ::fhir::code_pskel* language_parser_;
    ::fhir::TerminologyCapabilities_Filter_pskel* filter_parser_;
    ::fhir::code_pskel* property_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Version_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Filter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    op ();

    virtual void
    post_TerminologyCapabilities_Filter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::code_pskel& /* op */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    op_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Filter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Filter_pskel* TerminologyCapabilities_Filter_impl_;
    TerminologyCapabilities_Filter_pskel (TerminologyCapabilities_Filter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::code_pskel* op_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Filter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Expansion_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    hierarchical ();

    virtual void
    paging ();

    virtual void
    incomplete ();

    virtual void
    parameter ();

    virtual void
    textFilter ();

    virtual void
    post_TerminologyCapabilities_Expansion ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* hierarchical */,
             ::fhir::boolean_pskel& /* paging */,
             ::fhir::boolean_pskel& /* incomplete */,
             ::fhir::TerminologyCapabilities_Parameter_pskel& /* parameter */,
             ::fhir::markdown_pskel& /* textFilter */);

    // Individual element parsers.
    //
    void
    hierarchical_parser (::fhir::boolean_pskel&);

    void
    paging_parser (::fhir::boolean_pskel&);

    void
    incomplete_parser (::fhir::boolean_pskel&);

    void
    parameter_parser (::fhir::TerminologyCapabilities_Parameter_pskel&);

    void
    textFilter_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Expansion_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Expansion_pskel* TerminologyCapabilities_Expansion_impl_;
    TerminologyCapabilities_Expansion_pskel (TerminologyCapabilities_Expansion_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* hierarchical_parser_;
    ::fhir::boolean_pskel* paging_parser_;
    ::fhir::boolean_pskel* incomplete_parser_;
    ::fhir::TerminologyCapabilities_Parameter_pskel* parameter_parser_;
    ::fhir::markdown_pskel* textFilter_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Expansion_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    documentation ();

    virtual void
    post_TerminologyCapabilities_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* name */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::code_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Parameter_pskel* TerminologyCapabilities_Parameter_impl_;
    TerminologyCapabilities_Parameter_pskel (TerminologyCapabilities_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* name_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_ValidateCode_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    translations ();

    virtual void
    post_TerminologyCapabilities_ValidateCode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* translations */);

    // Individual element parsers.
    //
    void
    translations_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_ValidateCode_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_ValidateCode_pskel* TerminologyCapabilities_ValidateCode_impl_;
    TerminologyCapabilities_ValidateCode_pskel (TerminologyCapabilities_ValidateCode_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* translations_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_ValidateCode_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Translation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    needsMap ();

    virtual void
    post_TerminologyCapabilities_Translation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* needsMap */);

    // Individual element parsers.
    //
    void
    needsMap_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Translation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Translation_pskel* TerminologyCapabilities_Translation_impl_;
    TerminologyCapabilities_Translation_pskel (TerminologyCapabilities_Translation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* needsMap_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Translation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Closure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    translation ();

    virtual void
    post_TerminologyCapabilities_Closure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* translation */);

    // Individual element parsers.
    //
    void
    translation_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Closure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Closure_pskel* TerminologyCapabilities_Closure_impl_;
    TerminologyCapabilities_Closure_pskel (TerminologyCapabilities_Closure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* translation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Closure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeSearchSupport_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CodeSearchSupport_list ();

    // Constructor.
    //
    CodeSearchSupport_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSearchSupport_list_pskel* CodeSearchSupport_list_impl_;
    CodeSearchSupport_list_pskel (CodeSearchSupport_list_pskel*, void*);

    protected:
    static const char* const _xsde_CodeSearchSupport_list_pskel_enums_[2UL];
  };

  class CodeSearchSupport_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CodeSearchSupport ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CodeSearchSupport_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CodeSearchSupport_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSearchSupport_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSearchSupport_pskel* CodeSearchSupport_impl_;
    CodeSearchSupport_pskel (CodeSearchSupport_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CodeSearchSupport_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TERMINOLOGYCAPABILITIES_PSKEL_HXX
