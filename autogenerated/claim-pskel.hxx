// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef CLAIM_PSKEL_HXX
#define CLAIM_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class Claim_pskel;
  class Claim_Related_pskel;
  class Claim_Payee_pskel;
  class Claim_CareTeam_pskel;
  class Claim_SupportingInfo_pskel;
  class Claim_Diagnosis_pskel;
  class Claim_Procedure_pskel;
  class Claim_Insurance_pskel;
  class Claim_Accident_pskel;
  class Claim_Item_pskel;
  class Claim_Detail_pskel;
  class Claim_SubDetail_pskel;
  class Use_list_pskel;
  class Use_pskel;
  class FinancialResourceStatusCodes_list_pskel;
  class FinancialResourceStatusCodes_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class Claim_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    use ();

    virtual void
    patient ();

    virtual void
    billablePeriod ();

    virtual void
    created ();

    virtual void
    enterer ();

    virtual void
    insurer ();

    virtual void
    provider ();

    virtual void
    priority ();

    virtual void
    fundsReserve ();

    virtual void
    related ();

    virtual void
    prescription ();

    virtual void
    originalPrescription ();

    virtual void
    payee ();

    virtual void
    referral ();

    virtual void
    facility ();

    virtual void
    careTeam ();

    virtual void
    supportingInfo ();

    virtual void
    diagnosis ();

    virtual void
    procedure ();

    virtual void
    insurance ();

    virtual void
    accident ();

    virtual void
    item ();

    virtual void
    total ();

    virtual void
    post_Claim ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Use_pskel& /* use */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Period_pskel& /* billablePeriod */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* enterer */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* fundsReserve */,
             ::fhir::Claim_Related_pskel& /* related */,
             ::fhir::Reference_pskel& /* prescription */,
             ::fhir::Reference_pskel& /* originalPrescription */,
             ::fhir::Claim_Payee_pskel& /* payee */,
             ::fhir::Reference_pskel& /* referral */,
             ::fhir::Reference_pskel& /* facility */,
             ::fhir::Claim_CareTeam_pskel& /* careTeam */,
             ::fhir::Claim_SupportingInfo_pskel& /* supportingInfo */,
             ::fhir::Claim_Diagnosis_pskel& /* diagnosis */,
             ::fhir::Claim_Procedure_pskel& /* procedure */,
             ::fhir::Claim_Insurance_pskel& /* insurance */,
             ::fhir::Claim_Accident_pskel& /* accident */,
             ::fhir::Claim_Item_pskel& /* item */,
             ::fhir::Money_pskel& /* total */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    use_parser (::fhir::Use_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    billablePeriod_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    enterer_parser (::fhir::Reference_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    fundsReserve_parser (::fhir::CodeableConcept_pskel&);

    void
    related_parser (::fhir::Claim_Related_pskel&);

    void
    prescription_parser (::fhir::Reference_pskel&);

    void
    originalPrescription_parser (::fhir::Reference_pskel&);

    void
    payee_parser (::fhir::Claim_Payee_pskel&);

    void
    referral_parser (::fhir::Reference_pskel&);

    void
    facility_parser (::fhir::Reference_pskel&);

    void
    careTeam_parser (::fhir::Claim_CareTeam_pskel&);

    void
    supportingInfo_parser (::fhir::Claim_SupportingInfo_pskel&);

    void
    diagnosis_parser (::fhir::Claim_Diagnosis_pskel&);

    void
    procedure_parser (::fhir::Claim_Procedure_pskel&);

    void
    insurance_parser (::fhir::Claim_Insurance_pskel&);

    void
    accident_parser (::fhir::Claim_Accident_pskel&);

    void
    item_parser (::fhir::Claim_Item_pskel&);

    void
    total_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_pskel* Claim_impl_;
    Claim_pskel (Claim_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Use_pskel* use_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Period_pskel* billablePeriod_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* enterer_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* fundsReserve_parser_;
    ::fhir::Claim_Related_pskel* related_parser_;
    ::fhir::Reference_pskel* prescription_parser_;
    ::fhir::Reference_pskel* originalPrescription_parser_;
    ::fhir::Claim_Payee_pskel* payee_parser_;
    ::fhir::Reference_pskel* referral_parser_;
    ::fhir::Reference_pskel* facility_parser_;
    ::fhir::Claim_CareTeam_pskel* careTeam_parser_;
    ::fhir::Claim_SupportingInfo_pskel* supportingInfo_parser_;
    ::fhir::Claim_Diagnosis_pskel* diagnosis_parser_;
    ::fhir::Claim_Procedure_pskel* procedure_parser_;
    ::fhir::Claim_Insurance_pskel* insurance_parser_;
    ::fhir::Claim_Accident_pskel* accident_parser_;
    ::fhir::Claim_Item_pskel* item_parser_;
    ::fhir::Money_pskel* total_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Related_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    claim ();

    virtual void
    relationship ();

    virtual void
    reference ();

    virtual void
    post_Claim_Related ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* claim */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::Identifier_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    claim_parser (::fhir::Reference_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    reference_parser (::fhir::Identifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Related_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Related_pskel* Claim_Related_impl_;
    Claim_Related_pskel (Claim_Related_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* claim_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::Identifier_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Related_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Payee_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    party ();

    virtual void
    post_Claim_Payee ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* party */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    party_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Payee_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Payee_pskel* Claim_Payee_impl_;
    Claim_Payee_pskel (Claim_Payee_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* party_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Payee_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_CareTeam_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    provider ();

    virtual void
    responsible ();

    virtual void
    role ();

    virtual void
    qualification ();

    virtual void
    post_Claim_CareTeam ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::boolean_pskel& /* responsible */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::CodeableConcept_pskel& /* qualification */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    responsible_parser (::fhir::boolean_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    qualification_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_CareTeam_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_CareTeam_pskel* Claim_CareTeam_impl_;
    Claim_CareTeam_pskel (Claim_CareTeam_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::boolean_pskel* responsible_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::CodeableConcept_pskel* qualification_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_CareTeam_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_SupportingInfo_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    timingDate ();

    virtual void
    timingPeriod ();

    virtual void
    valueBoolean ();

    virtual void
    valueString ();

    virtual void
    valueQuantity ();

    virtual void
    valueAttachment ();

    virtual void
    valueReference ();

    virtual void
    reason ();

    virtual void
    post_Claim_SupportingInfo ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::date_pskel& /* timingDate */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::CodeableConcept_pskel& /* reason */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    timingDate_parser (::fhir::date_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_SupportingInfo_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_SupportingInfo_pskel* Claim_SupportingInfo_impl_;
    Claim_SupportingInfo_pskel (Claim_SupportingInfo_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::date_pskel* timingDate_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_SupportingInfo_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Diagnosis_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    diagnosisCodeableConcept ();

    virtual void
    diagnosisReference ();

    virtual void
    type ();

    virtual void
    onAdmission ();

    virtual void
    packageCode ();

    virtual void
    post_Claim_Diagnosis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* diagnosisCodeableConcept */,
             ::fhir::Reference_pskel& /* diagnosisReference */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* onAdmission */,
             ::fhir::CodeableConcept_pskel& /* packageCode */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    diagnosisCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    diagnosisReference_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    onAdmission_parser (::fhir::CodeableConcept_pskel&);

    void
    packageCode_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Diagnosis_pskel* Claim_Diagnosis_impl_;
    Claim_Diagnosis_pskel (Claim_Diagnosis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* diagnosisCodeableConcept_parser_;
    ::fhir::Reference_pskel* diagnosisReference_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* onAdmission_parser_;
    ::fhir::CodeableConcept_pskel* packageCode_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Diagnosis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Procedure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    type ();

    virtual void
    date ();

    virtual void
    procedureCodeableConcept ();

    virtual void
    procedureReference ();

    virtual void
    udi ();

    virtual void
    post_Claim_Procedure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* procedureCodeableConcept */,
             ::fhir::Reference_pskel& /* procedureReference */,
             ::fhir::Reference_pskel& /* udi */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    procedureCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    procedureReference_parser (::fhir::Reference_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Procedure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Procedure_pskel* Claim_Procedure_impl_;
    Claim_Procedure_pskel (Claim_Procedure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* procedureCodeableConcept_parser_;
    ::fhir::Reference_pskel* procedureReference_parser_;
    ::fhir::Reference_pskel* udi_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Procedure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Insurance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    focal ();

    virtual void
    identifier ();

    virtual void
    coverage ();

    virtual void
    businessArrangement ();

    virtual void
    preAuthRef ();

    virtual void
    claimResponse ();

    virtual void
    post_Claim_Insurance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::boolean_pskel& /* focal */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::string_pskel& /* businessArrangement */,
             ::fhir::string_pskel& /* preAuthRef */,
             ::fhir::Reference_pskel& /* claimResponse */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    focal_parser (::fhir::boolean_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    businessArrangement_parser (::fhir::string_pskel&);

    void
    preAuthRef_parser (::fhir::string_pskel&);

    void
    claimResponse_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Insurance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Insurance_pskel* Claim_Insurance_impl_;
    Claim_Insurance_pskel (Claim_Insurance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::boolean_pskel* focal_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::string_pskel* businessArrangement_parser_;
    ::fhir::string_pskel* preAuthRef_parser_;
    ::fhir::Reference_pskel* claimResponse_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Insurance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Accident_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    date ();

    virtual void
    type ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    post_Claim_Accident ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::date_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */);

    // Individual element parsers.
    //
    void
    date_parser (::fhir::date_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Accident_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Accident_pskel* Claim_Accident_impl_;
    Claim_Accident_pskel (Claim_Accident_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::date_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Accident_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    careTeamSequence ();

    virtual void
    diagnosisSequence ();

    virtual void
    procedureSequence ();

    virtual void
    informationSequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    locationCodeableConcept ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    bodySite ();

    virtual void
    subSite ();

    virtual void
    encounter ();

    virtual void
    detail ();

    virtual void
    post_Claim_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::positiveInt_pskel& /* careTeamSequence */,
             ::fhir::positiveInt_pskel& /* diagnosisSequence */,
             ::fhir::positiveInt_pskel& /* procedureSequence */,
             ::fhir::positiveInt_pskel& /* informationSequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::CodeableConcept_pskel& /* locationCodeableConcept */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* subSite */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Claim_Detail_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    careTeamSequence_parser (::fhir::positiveInt_pskel&);

    void
    diagnosisSequence_parser (::fhir::positiveInt_pskel&);

    void
    procedureSequence_parser (::fhir::positiveInt_pskel&);

    void
    informationSequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    locationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    subSite_parser (::fhir::CodeableConcept_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    detail_parser (::fhir::Claim_Detail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Item_pskel* Claim_Item_impl_;
    Claim_Item_pskel (Claim_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::positiveInt_pskel* careTeamSequence_parser_;
    ::fhir::positiveInt_pskel* diagnosisSequence_parser_;
    ::fhir::positiveInt_pskel* procedureSequence_parser_;
    ::fhir::positiveInt_pskel* informationSequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::CodeableConcept_pskel* locationCodeableConcept_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* subSite_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Claim_Detail_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    subDetail ();

    virtual void
    post_Claim_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */,
             ::fhir::Claim_SubDetail_pskel& /* subDetail */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    void
    subDetail_parser (::fhir::Claim_SubDetail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Detail_pskel* Claim_Detail_impl_;
    Claim_Detail_pskel (Claim_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;
    ::fhir::Claim_SubDetail_pskel* subDetail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_SubDetail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    post_Claim_SubDetail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_SubDetail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_SubDetail_pskel* Claim_SubDetail_impl_;
    Claim_SubDetail_pskel (Claim_SubDetail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_SubDetail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Use_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Use_list ();

    // Constructor.
    //
    Use_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    Use_list_pskel* Use_list_impl_;
    Use_list_pskel (Use_list_pskel*, void*);

    protected:
    static const char* const _xsde_Use_list_pskel_enums_[3UL];
  };

  class Use_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_Use ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Use_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::Use_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Use_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Use_pskel* Use_impl_;
    Use_pskel (Use_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::Use_list_pskel* value_parser_;
  };

  class FinancialResourceStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FinancialResourceStatusCodes_list ();

    // Constructor.
    //
    FinancialResourceStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FinancialResourceStatusCodes_list_pskel* FinancialResourceStatusCodes_list_impl_;
    FinancialResourceStatusCodes_list_pskel (FinancialResourceStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_FinancialResourceStatusCodes_list_pskel_enums_[4UL];
  };

  class FinancialResourceStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FinancialResourceStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FinancialResourceStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FinancialResourceStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FinancialResourceStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FinancialResourceStatusCodes_pskel* FinancialResourceStatusCodes_impl_;
    FinancialResourceStatusCodes_pskel (FinancialResourceStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FinancialResourceStatusCodes_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CLAIM_PSKEL_HXX
