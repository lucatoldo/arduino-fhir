// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "careplan-pskel.hxx"

namespace fhir
{
  // CarePlan_pskel
  //

  void CarePlan_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void CarePlan_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void CarePlan_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void CarePlan_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void CarePlan_pskel::
  replaces_parser (::fhir::Reference_pskel& p)
  {
    this->replaces_parser_ = &p;
  }

  void CarePlan_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void CarePlan_pskel::
  status_parser (::fhir::RequestStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void CarePlan_pskel::
  intent_parser (::fhir::CarePlanIntent_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void CarePlan_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void CarePlan_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void CarePlan_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void CarePlan_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void CarePlan_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void CarePlan_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void CarePlan_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void CarePlan_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void CarePlan_pskel::
  contributor_parser (::fhir::Reference_pskel& p)
  {
    this->contributor_parser_ = &p;
  }

  void CarePlan_pskel::
  careTeam_parser (::fhir::Reference_pskel& p)
  {
    this->careTeam_parser_ = &p;
  }

  void CarePlan_pskel::
  addresses_parser (::fhir::Reference_pskel& p)
  {
    this->addresses_parser_ = &p;
  }

  void CarePlan_pskel::
  supportingInfo_parser (::fhir::Reference_pskel& p)
  {
    this->supportingInfo_parser_ = &p;
  }

  void CarePlan_pskel::
  goal_parser (::fhir::Reference_pskel& p)
  {
    this->goal_parser_ = &p;
  }

  void CarePlan_pskel::
  activity_parser (::fhir::CarePlan_Activity_pskel& p)
  {
    this->activity_parser_ = &p;
  }

  void CarePlan_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void CarePlan_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& replaces,
           ::fhir::Reference_pskel& partOf,
           ::fhir::RequestStatus_pskel& status,
           ::fhir::CarePlanIntent_pskel& intent,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& description,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::Period_pskel& period,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& author,
           ::fhir::Reference_pskel& contributor,
           ::fhir::Reference_pskel& careTeam,
           ::fhir::Reference_pskel& addresses,
           ::fhir::Reference_pskel& supportingInfo,
           ::fhir::Reference_pskel& goal,
           ::fhir::CarePlan_Activity_pskel& activity,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->basedOn_parser_ = &basedOn;
    this->replaces_parser_ = &replaces;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->intent_parser_ = &intent;
    this->category_parser_ = &category;
    this->title_parser_ = &title;
    this->description_parser_ = &description;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->period_parser_ = &period;
    this->created_parser_ = &created;
    this->author_parser_ = &author;
    this->contributor_parser_ = &contributor;
    this->careTeam_parser_ = &careTeam;
    this->addresses_parser_ = &addresses;
    this->supportingInfo_parser_ = &supportingInfo;
    this->goal_parser_ = &goal;
    this->activity_parser_ = &activity;
    this->note_parser_ = &note;
  }

  CarePlan_pskel::
  CarePlan_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    CarePlan_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    replaces_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    category_parser_ (0),
    title_parser_ (0),
    description_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    period_parser_ (0),
    created_parser_ (0),
    author_parser_ (0),
    contributor_parser_ (0),
    careTeam_parser_ (0),
    addresses_parser_ (0),
    supportingInfo_parser_ (0),
    goal_parser_ (0),
    activity_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CarePlan_pskel::
  CarePlan_pskel (CarePlan_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    CarePlan_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    replaces_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    category_parser_ (0),
    title_parser_ (0),
    description_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    period_parser_ (0),
    created_parser_ (0),
    author_parser_ (0),
    contributor_parser_ (0),
    careTeam_parser_ (0),
    addresses_parser_ (0),
    supportingInfo_parser_ (0),
    goal_parser_ (0),
    activity_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CarePlan_Activity_pskel
  //

  void CarePlan_Activity_pskel::
  outcomeCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->outcomeCodeableConcept_parser_ = &p;
  }

  void CarePlan_Activity_pskel::
  outcomeReference_parser (::fhir::Reference_pskel& p)
  {
    this->outcomeReference_parser_ = &p;
  }

  void CarePlan_Activity_pskel::
  progress_parser (::fhir::Annotation_pskel& p)
  {
    this->progress_parser_ = &p;
  }

  void CarePlan_Activity_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void CarePlan_Activity_pskel::
  detail_parser (::fhir::CarePlan_Detail_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void CarePlan_Activity_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& outcomeCodeableConcept,
           ::fhir::Reference_pskel& outcomeReference,
           ::fhir::Annotation_pskel& progress,
           ::fhir::Reference_pskel& reference,
           ::fhir::CarePlan_Detail_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->outcomeCodeableConcept_parser_ = &outcomeCodeableConcept;
    this->outcomeReference_parser_ = &outcomeReference;
    this->progress_parser_ = &progress;
    this->reference_parser_ = &reference;
    this->detail_parser_ = &detail;
  }

  CarePlan_Activity_pskel::
  CarePlan_Activity_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CarePlan_Activity_impl_ (0),
    outcomeCodeableConcept_parser_ (0),
    outcomeReference_parser_ (0),
    progress_parser_ (0),
    reference_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CarePlan_Activity_pskel::
  CarePlan_Activity_pskel (CarePlan_Activity_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CarePlan_Activity_impl_ (impl),
    outcomeCodeableConcept_parser_ (0),
    outcomeReference_parser_ (0),
    progress_parser_ (0),
    reference_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CarePlan_Detail_pskel
  //

  void CarePlan_Detail_pskel::
  kind_parser (::fhir::CarePlanActivityKind_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  goal_parser (::fhir::Reference_pskel& p)
  {
    this->goal_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  status_parser (::fhir::CarePlanActivityStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  doNotPerform_parser (::fhir::boolean_pskel& p)
  {
    this->doNotPerform_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  scheduledTiming_parser (::fhir::Timing_pskel& p)
  {
    this->scheduledTiming_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  scheduledPeriod_parser (::fhir::Period_pskel& p)
  {
    this->scheduledPeriod_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  scheduledString_parser (::fhir::string_pskel& p)
  {
    this->scheduledString_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  productCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productCodeableConcept_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  productReference_parser (::fhir::Reference_pskel& p)
  {
    this->productReference_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  dailyAmount_parser (::fhir::Quantity_pskel& p)
  {
    this->dailyAmount_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void CarePlan_Detail_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CarePlanActivityKind_pskel& kind,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Reference_pskel& goal,
           ::fhir::CarePlanActivityStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::boolean_pskel& doNotPerform,
           ::fhir::Timing_pskel& scheduledTiming,
           ::fhir::Period_pskel& scheduledPeriod,
           ::fhir::string_pskel& scheduledString,
           ::fhir::Reference_pskel& location,
           ::fhir::Reference_pskel& performer,
           ::fhir::CodeableConcept_pskel& productCodeableConcept,
           ::fhir::Reference_pskel& productReference,
           ::fhir::Quantity_pskel& dailyAmount,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::string_pskel& description)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->kind_parser_ = &kind;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->code_parser_ = &code;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->goal_parser_ = &goal;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->doNotPerform_parser_ = &doNotPerform;
    this->scheduledTiming_parser_ = &scheduledTiming;
    this->scheduledPeriod_parser_ = &scheduledPeriod;
    this->scheduledString_parser_ = &scheduledString;
    this->location_parser_ = &location;
    this->performer_parser_ = &performer;
    this->productCodeableConcept_parser_ = &productCodeableConcept;
    this->productReference_parser_ = &productReference;
    this->dailyAmount_parser_ = &dailyAmount;
    this->quantity_parser_ = &quantity;
    this->description_parser_ = &description;
  }

  CarePlan_Detail_pskel::
  CarePlan_Detail_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CarePlan_Detail_impl_ (0),
    kind_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    code_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    goal_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    doNotPerform_parser_ (0),
    scheduledTiming_parser_ (0),
    scheduledPeriod_parser_ (0),
    scheduledString_parser_ (0),
    location_parser_ (0),
    performer_parser_ (0),
    productCodeableConcept_parser_ (0),
    productReference_parser_ (0),
    dailyAmount_parser_ (0),
    quantity_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CarePlan_Detail_pskel::
  CarePlan_Detail_pskel (CarePlan_Detail_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CarePlan_Detail_impl_ (impl),
    kind_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    code_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    goal_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    doNotPerform_parser_ (0),
    scheduledTiming_parser_ (0),
    scheduledPeriod_parser_ (0),
    scheduledString_parser_ (0),
    location_parser_ (0),
    performer_parser_ (0),
    productCodeableConcept_parser_ (0),
    productReference_parser_ (0),
    dailyAmount_parser_ (0),
    quantity_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CarePlanActivityKind_list_pskel
  //

  CarePlanActivityKind_list_pskel::
  CarePlanActivityKind_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CarePlanActivityKind_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CarePlanActivityKind_list_pskel_enums_, 8UL);
  }

  CarePlanActivityKind_list_pskel::
  CarePlanActivityKind_list_pskel (CarePlanActivityKind_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CarePlanActivityKind_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CarePlanActivityKind_list_pskel_enums_, 8UL);
  }

  // CarePlanActivityKind_pskel
  //

  void CarePlanActivityKind_pskel::
  value_parser (::fhir::CarePlanActivityKind_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CarePlanActivityKind_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CarePlanActivityKind_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CarePlanActivityKind_pskel::
  CarePlanActivityKind_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CarePlanActivityKind_impl_ (0),
    value_parser_ (0)
  {
  }

  CarePlanActivityKind_pskel::
  CarePlanActivityKind_pskel (CarePlanActivityKind_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CarePlanActivityKind_impl_ (impl),
    value_parser_ (0)
  {
  }

  // CarePlanActivityStatus_list_pskel
  //

  CarePlanActivityStatus_list_pskel::
  CarePlanActivityStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CarePlanActivityStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CarePlanActivityStatus_list_pskel_enums_, 9UL);
  }

  CarePlanActivityStatus_list_pskel::
  CarePlanActivityStatus_list_pskel (CarePlanActivityStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CarePlanActivityStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CarePlanActivityStatus_list_pskel_enums_, 9UL);
  }

  // CarePlanActivityStatus_pskel
  //

  void CarePlanActivityStatus_pskel::
  value_parser (::fhir::CarePlanActivityStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CarePlanActivityStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CarePlanActivityStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CarePlanActivityStatus_pskel::
  CarePlanActivityStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CarePlanActivityStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  CarePlanActivityStatus_pskel::
  CarePlanActivityStatus_pskel (CarePlanActivityStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CarePlanActivityStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // CarePlanIntent_list_pskel
  //

  CarePlanIntent_list_pskel::
  CarePlanIntent_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CarePlanIntent_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CarePlanIntent_list_pskel_enums_, 4UL);
  }

  CarePlanIntent_list_pskel::
  CarePlanIntent_list_pskel (CarePlanIntent_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CarePlanIntent_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CarePlanIntent_list_pskel_enums_, 4UL);
  }

  // CarePlanIntent_pskel
  //

  void CarePlanIntent_pskel::
  value_parser (::fhir::CarePlanIntent_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CarePlanIntent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CarePlanIntent_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CarePlanIntent_pskel::
  CarePlanIntent_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CarePlanIntent_impl_ (0),
    value_parser_ (0)
  {
  }

  CarePlanIntent_pskel::
  CarePlanIntent_pskel (CarePlanIntent_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CarePlanIntent_impl_ (impl),
    value_parser_ (0)
  {
  }

  // RequestStatus_list_pskel
  //

  RequestStatus_list_pskel::
  RequestStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    RequestStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_RequestStatus_list_pskel_enums_, 7UL);
  }

  RequestStatus_list_pskel::
  RequestStatus_list_pskel (RequestStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    RequestStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_RequestStatus_list_pskel_enums_, 7UL);
  }

  // RequestStatus_pskel
  //

  void RequestStatus_pskel::
  value_parser (::fhir::RequestStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void RequestStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::RequestStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  RequestStatus_pskel::
  RequestStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    RequestStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  RequestStatus_pskel::
  RequestStatus_pskel (RequestStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    RequestStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // CarePlan_pskel
  //

  void CarePlan_pskel::
  identifier ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->identifier ();
  }

  void CarePlan_pskel::
  instantiatesCanonical ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->instantiatesCanonical ();
  }

  void CarePlan_pskel::
  instantiatesUri ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->instantiatesUri ();
  }

  void CarePlan_pskel::
  basedOn ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->basedOn ();
  }

  void CarePlan_pskel::
  replaces ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->replaces ();
  }

  void CarePlan_pskel::
  partOf ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->partOf ();
  }

  void CarePlan_pskel::
  status ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->status ();
  }

  void CarePlan_pskel::
  intent ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->intent ();
  }

  void CarePlan_pskel::
  category ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->category ();
  }

  void CarePlan_pskel::
  title ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->title ();
  }

  void CarePlan_pskel::
  description ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->description ();
  }

  void CarePlan_pskel::
  subject ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->subject ();
  }

  void CarePlan_pskel::
  encounter ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->encounter ();
  }

  void CarePlan_pskel::
  period ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->period ();
  }

  void CarePlan_pskel::
  created ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->created ();
  }

  void CarePlan_pskel::
  author ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->author ();
  }

  void CarePlan_pskel::
  contributor ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->contributor ();
  }

  void CarePlan_pskel::
  careTeam ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->careTeam ();
  }

  void CarePlan_pskel::
  addresses ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->addresses ();
  }

  void CarePlan_pskel::
  supportingInfo ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->supportingInfo ();
  }

  void CarePlan_pskel::
  goal ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->goal ();
  }

  void CarePlan_pskel::
  activity ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->activity ();
  }

  void CarePlan_pskel::
  note ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->note ();
  }

  void CarePlan_pskel::
  post_CarePlan ()
  {
    if (this->CarePlan_impl_)
      this->CarePlan_impl_->post_CarePlan ();
    else
      post_DomainResource ();
  }

  void CarePlan_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->replaces_parser_)
      this->replaces_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->contributor_parser_)
      this->contributor_parser_->_reset ();

    if (this->careTeam_parser_)
      this->careTeam_parser_->_reset ();

    if (this->addresses_parser_)
      this->addresses_parser_->_reset ();

    if (this->supportingInfo_parser_)
      this->supportingInfo_parser_->_reset ();

    if (this->goal_parser_)
      this->goal_parser_->_reset ();

    if (this->activity_parser_)
      this->activity_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // CarePlan_Activity_pskel
  //

  void CarePlan_Activity_pskel::
  outcomeCodeableConcept ()
  {
    if (this->CarePlan_Activity_impl_)
      this->CarePlan_Activity_impl_->outcomeCodeableConcept ();
  }

  void CarePlan_Activity_pskel::
  outcomeReference ()
  {
    if (this->CarePlan_Activity_impl_)
      this->CarePlan_Activity_impl_->outcomeReference ();
  }

  void CarePlan_Activity_pskel::
  progress ()
  {
    if (this->CarePlan_Activity_impl_)
      this->CarePlan_Activity_impl_->progress ();
  }

  void CarePlan_Activity_pskel::
  reference ()
  {
    if (this->CarePlan_Activity_impl_)
      this->CarePlan_Activity_impl_->reference ();
  }

  void CarePlan_Activity_pskel::
  detail ()
  {
    if (this->CarePlan_Activity_impl_)
      this->CarePlan_Activity_impl_->detail ();
  }

  void CarePlan_Activity_pskel::
  post_CarePlan_Activity ()
  {
    if (this->CarePlan_Activity_impl_)
      this->CarePlan_Activity_impl_->post_CarePlan_Activity ();
    else
      post_BackboneElement ();
  }

  void CarePlan_Activity_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->outcomeCodeableConcept_parser_)
      this->outcomeCodeableConcept_parser_->_reset ();

    if (this->outcomeReference_parser_)
      this->outcomeReference_parser_->_reset ();

    if (this->progress_parser_)
      this->progress_parser_->_reset ();

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // CarePlan_Detail_pskel
  //

  void CarePlan_Detail_pskel::
  kind ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->kind ();
  }

  void CarePlan_Detail_pskel::
  instantiatesCanonical ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->instantiatesCanonical ();
  }

  void CarePlan_Detail_pskel::
  instantiatesUri ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->instantiatesUri ();
  }

  void CarePlan_Detail_pskel::
  code ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->code ();
  }

  void CarePlan_Detail_pskel::
  reasonCode ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->reasonCode ();
  }

  void CarePlan_Detail_pskel::
  reasonReference ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->reasonReference ();
  }

  void CarePlan_Detail_pskel::
  goal ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->goal ();
  }

  void CarePlan_Detail_pskel::
  status ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->status ();
  }

  void CarePlan_Detail_pskel::
  statusReason ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->statusReason ();
  }

  void CarePlan_Detail_pskel::
  doNotPerform ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->doNotPerform ();
  }

  void CarePlan_Detail_pskel::
  scheduledTiming ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->scheduledTiming ();
  }

  void CarePlan_Detail_pskel::
  scheduledPeriod ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->scheduledPeriod ();
  }

  void CarePlan_Detail_pskel::
  scheduledString ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->scheduledString ();
  }

  void CarePlan_Detail_pskel::
  location ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->location ();
  }

  void CarePlan_Detail_pskel::
  performer ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->performer ();
  }

  void CarePlan_Detail_pskel::
  productCodeableConcept ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->productCodeableConcept ();
  }

  void CarePlan_Detail_pskel::
  productReference ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->productReference ();
  }

  void CarePlan_Detail_pskel::
  dailyAmount ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->dailyAmount ();
  }

  void CarePlan_Detail_pskel::
  quantity ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->quantity ();
  }

  void CarePlan_Detail_pskel::
  description ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->description ();
  }

  void CarePlan_Detail_pskel::
  post_CarePlan_Detail ()
  {
    if (this->CarePlan_Detail_impl_)
      this->CarePlan_Detail_impl_->post_CarePlan_Detail ();
    else
      post_BackboneElement ();
  }

  void CarePlan_Detail_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->goal_parser_)
      this->goal_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->doNotPerform_parser_)
      this->doNotPerform_parser_->_reset ();

    if (this->scheduledTiming_parser_)
      this->scheduledTiming_parser_->_reset ();

    if (this->scheduledPeriod_parser_)
      this->scheduledPeriod_parser_->_reset ();

    if (this->scheduledString_parser_)
      this->scheduledString_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->productCodeableConcept_parser_)
      this->productCodeableConcept_parser_->_reset ();

    if (this->productReference_parser_)
      this->productReference_parser_->_reset ();

    if (this->dailyAmount_parser_)
      this->dailyAmount_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    this->resetting_ = false;
  }

  // CarePlanActivityKind_list_pskel
  //

  void CarePlanActivityKind_list_pskel::
  post_CarePlanActivityKind_list ()
  {
    if (this->CarePlanActivityKind_list_impl_)
      this->CarePlanActivityKind_list_impl_->post_CarePlanActivityKind_list ();
    else
      post_code_primitive ();
  }

  const char* const CarePlanActivityKind_list_pskel::_xsde_CarePlanActivityKind_list_pskel_enums_[8UL] = 
  {
    "Appointment",
    "CommunicationRequest",
    "DeviceRequest",
    "MedicationRequest",
    "NutritionOrder",
    "ServiceRequest",
    "Task",
    "VisionPrescription"
  };

  // CarePlanActivityKind_pskel
  //

  void CarePlanActivityKind_pskel::
  value ()
  {
    if (this->CarePlanActivityKind_impl_)
      this->CarePlanActivityKind_impl_->value ();
  }

  void CarePlanActivityKind_pskel::
  post_CarePlanActivityKind ()
  {
    if (this->CarePlanActivityKind_impl_)
      this->CarePlanActivityKind_impl_->post_CarePlanActivityKind ();
    else
      post_Element ();
  }

  void CarePlanActivityKind_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // CarePlanActivityStatus_list_pskel
  //

  void CarePlanActivityStatus_list_pskel::
  post_CarePlanActivityStatus_list ()
  {
    if (this->CarePlanActivityStatus_list_impl_)
      this->CarePlanActivityStatus_list_impl_->post_CarePlanActivityStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const CarePlanActivityStatus_list_pskel::_xsde_CarePlanActivityStatus_list_pskel_enums_[9UL] = 
  {
    "cancelled",
    "completed",
    "entered-in-error",
    "in-progress",
    "not-started",
    "on-hold",
    "scheduled",
    "stopped",
    "unknown"
  };

  // CarePlanActivityStatus_pskel
  //

  void CarePlanActivityStatus_pskel::
  value ()
  {
    if (this->CarePlanActivityStatus_impl_)
      this->CarePlanActivityStatus_impl_->value ();
  }

  void CarePlanActivityStatus_pskel::
  post_CarePlanActivityStatus ()
  {
    if (this->CarePlanActivityStatus_impl_)
      this->CarePlanActivityStatus_impl_->post_CarePlanActivityStatus ();
    else
      post_Element ();
  }

  void CarePlanActivityStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // CarePlanIntent_list_pskel
  //

  void CarePlanIntent_list_pskel::
  post_CarePlanIntent_list ()
  {
    if (this->CarePlanIntent_list_impl_)
      this->CarePlanIntent_list_impl_->post_CarePlanIntent_list ();
    else
      post_code_primitive ();
  }

  const char* const CarePlanIntent_list_pskel::_xsde_CarePlanIntent_list_pskel_enums_[4UL] = 
  {
    "option",
    "order",
    "plan",
    "proposal"
  };

  // CarePlanIntent_pskel
  //

  void CarePlanIntent_pskel::
  value ()
  {
    if (this->CarePlanIntent_impl_)
      this->CarePlanIntent_impl_->value ();
  }

  void CarePlanIntent_pskel::
  post_CarePlanIntent ()
  {
    if (this->CarePlanIntent_impl_)
      this->CarePlanIntent_impl_->post_CarePlanIntent ();
    else
      post_Element ();
  }

  void CarePlanIntent_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // RequestStatus_list_pskel
  //

  void RequestStatus_list_pskel::
  post_RequestStatus_list ()
  {
    if (this->RequestStatus_list_impl_)
      this->RequestStatus_list_impl_->post_RequestStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const RequestStatus_list_pskel::_xsde_RequestStatus_list_pskel_enums_[7UL] = 
  {
    "active",
    "completed",
    "draft",
    "entered-in-error",
    "on-hold",
    "revoked",
    "unknown"
  };

  // RequestStatus_pskel
  //

  void RequestStatus_pskel::
  value ()
  {
    if (this->RequestStatus_impl_)
      this->RequestStatus_impl_->value ();
  }

  void RequestStatus_pskel::
  post_RequestStatus ()
  {
    if (this->RequestStatus_impl_)
      this->RequestStatus_impl_->post_RequestStatus ();
    else
      post_Element ();
  }

  void RequestStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for CarePlan_pskel.
  //
  bool CarePlan_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "replaces" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CarePlan_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CarePlan_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CarePlan_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void CarePlan_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CarePlan_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "replaces" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->replaces_parser_)
            {
              this->replaces_parser_->pre ();
              ctx.nested_parser (this->replaces_parser_);
            }
          }
          else
          {
            if (this->replaces_parser_ != 0)
            {
              this->replaces_parser_->post_Reference ();
              this->replaces ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_RequestStatus ();
              this->status ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_CarePlanIntent ();
              this->intent ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "contributor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contributor_parser_)
            {
              this->contributor_parser_->pre ();
              ctx.nested_parser (this->contributor_parser_);
            }
          }
          else
          {
            if (this->contributor_parser_ != 0)
            {
              this->contributor_parser_->post_Reference ();
              this->contributor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "careTeam" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->careTeam_parser_)
            {
              this->careTeam_parser_->pre ();
              ctx.nested_parser (this->careTeam_parser_);
            }
          }
          else
          {
            if (this->careTeam_parser_ != 0)
            {
              this->careTeam_parser_->post_Reference ();
              this->careTeam ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "addresses" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->addresses_parser_)
            {
              this->addresses_parser_->pre ();
              ctx.nested_parser (this->addresses_parser_);
            }
          }
          else
          {
            if (this->addresses_parser_ != 0)
            {
              this->addresses_parser_->post_Reference ();
              this->addresses ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "supportingInfo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInfo_parser_)
            {
              this->supportingInfo_parser_->pre ();
              ctx.nested_parser (this->supportingInfo_parser_);
            }
          }
          else
          {
            if (this->supportingInfo_parser_ != 0)
            {
              this->supportingInfo_parser_->post_Reference ();
              this->supportingInfo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "goal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->goal_parser_)
            {
              this->goal_parser_->pre ();
              ctx.nested_parser (this->goal_parser_);
            }
          }
          else
          {
            if (this->goal_parser_ != 0)
            {
              this->goal_parser_->post_Reference ();
              this->goal ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "activity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->activity_parser_)
            {
              this->activity_parser_->pre ();
              ctx.nested_parser (this->activity_parser_);
            }
          }
          else
          {
            if (this->activity_parser_ != 0)
            {
              this->activity_parser_->post_CarePlan_Activity ();
              this->activity ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CarePlan_Activity_pskel.
  //
  bool CarePlan_Activity_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "outcomeCodeableConcept" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "outcomeReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "progress" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "reference" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "detail" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CarePlan_Activity_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CarePlan_Activity_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CarePlan_Activity_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CarePlan_Activity_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void CarePlan_Activity_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "outcomeCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcomeCodeableConcept_parser_)
            {
              this->outcomeCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->outcomeCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->outcomeCodeableConcept_parser_ != 0)
            {
              this->outcomeCodeableConcept_parser_->post_CodeableConcept ();
              this->outcomeCodeableConcept ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "outcomeReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcomeReference_parser_)
            {
              this->outcomeReference_parser_->pre ();
              ctx.nested_parser (this->outcomeReference_parser_);
            }
          }
          else
          {
            if (this->outcomeReference_parser_ != 0)
            {
              this->outcomeReference_parser_->post_Reference ();
              this->outcomeReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "progress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->progress_parser_)
            {
              this->progress_parser_->pre ();
              ctx.nested_parser (this->progress_parser_);
            }
          }
          else
          {
            if (this->progress_parser_ != 0)
            {
              this->progress_parser_->post_Annotation ();
              this->progress ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_CarePlan_Detail ();
              this->detail ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CarePlan_Detail_pskel.
  //
  bool CarePlan_Detail_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "reasonCode" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "reasonReference" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "goal" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CarePlan_Detail_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CarePlan_Detail_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CarePlan_Detail_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CarePlan_Detail_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CarePlan_Detail_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_CarePlanActivityKind ();
              this->kind ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "goal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->goal_parser_)
            {
              this->goal_parser_->pre ();
              ctx.nested_parser (this->goal_parser_);
            }
          }
          else
          {
            if (this->goal_parser_ != 0)
            {
              this->goal_parser_->post_Reference ();
              this->goal ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CarePlanActivityStatus ();
              this->status ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "doNotPerform" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doNotPerform_parser_)
            {
              this->doNotPerform_parser_->pre ();
              ctx.nested_parser (this->doNotPerform_parser_);
            }
          }
          else
          {
            if (this->doNotPerform_parser_ != 0)
            {
              this->doNotPerform_parser_->post_boolean ();
              this->doNotPerform ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "scheduledTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scheduledTiming_parser_)
            {
              this->scheduledTiming_parser_->pre ();
              ctx.nested_parser (this->scheduledTiming_parser_);
            }
          }
          else
          {
            if (this->scheduledTiming_parser_ != 0)
            {
              this->scheduledTiming_parser_->post_Timing ();
              this->scheduledTiming ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "scheduledPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scheduledPeriod_parser_)
            {
              this->scheduledPeriod_parser_->pre ();
              ctx.nested_parser (this->scheduledPeriod_parser_);
            }
          }
          else
          {
            if (this->scheduledPeriod_parser_ != 0)
            {
              this->scheduledPeriod_parser_->post_Period ();
              this->scheduledPeriod ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "scheduledString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scheduledString_parser_)
            {
              this->scheduledString_parser_->pre ();
              ctx.nested_parser (this->scheduledString_parser_);
            }
          }
          else
          {
            if (this->scheduledString_parser_ != 0)
            {
              this->scheduledString_parser_->post_string ();
              this->scheduledString ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "productCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productCodeableConcept_parser_)
            {
              this->productCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->productCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->productCodeableConcept_parser_ != 0)
            {
              this->productCodeableConcept_parser_->post_CodeableConcept ();
              this->productCodeableConcept ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "productReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productReference_parser_)
            {
              this->productReference_parser_->pre ();
              ctx.nested_parser (this->productReference_parser_);
            }
          }
          else
          {
            if (this->productReference_parser_ != 0)
            {
              this->productReference_parser_->post_Reference ();
              this->productReference ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "dailyAmount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dailyAmount_parser_)
            {
              this->dailyAmount_parser_->pre ();
              ctx.nested_parser (this->dailyAmount_parser_);
            }
          }
          else
          {
            if (this->dailyAmount_parser_ != 0)
            {
              this->dailyAmount_parser_->post_Quantity ();
              this->dailyAmount ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for CarePlanActivityKind_pskel.
  //
  bool CarePlanActivityKind_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CarePlanActivityKind_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for CarePlanActivityStatus_pskel.
  //
  bool CarePlanActivityStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CarePlanActivityStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for CarePlanIntent_pskel.
  //
  bool CarePlanIntent_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CarePlanIntent_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for RequestStatus_pskel.
  //
  bool RequestStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_RequestStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

