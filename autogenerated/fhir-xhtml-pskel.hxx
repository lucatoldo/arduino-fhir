// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef FHIR_XHTML_PSKEL_HXX
#define FHIR_XHTML_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace xhtml
{
  class ContentType_pskel;
  class ContentTypes_pskel;
  class Charset_pskel;
  class Charsets_pskel;
  class LanguageCode_pskel;
  class Character_pskel;
  class Number_pskel;
  class tabindexNumber_pskel;
  class LinkTypes_pskel;
  class MediaDesc_pskel;
  class URI_pskel;
  class UriList_pskel;
  class Datetime_pskel;
  class Script_pskel;
  class StyleSheet_pskel;
  class Text_pskel;
  class Length_pskel;
  class MultiLength_pskel;
  class Pixels_pskel;
  class Shape_pskel;
  class Coords_pskel;
  class Inline_pskel;
  class Block_pskel;
  class Flow_pskel;
  class a_content_pskel;
  class pre_content_pskel;
  class TFrame_pskel;
  class TRules_pskel;
  class Scope_pskel;
  class dir_pskel;
  class div_pskel;
  class p_pskel;
  class h1_pskel;
  class h2_pskel;
  class h3_pskel;
  class h4_pskel;
  class h5_pskel;
  class h6_pskel;
  class ul_pskel;
  class ol_pskel;
  class li_pskel;
  class dl_pskel;
  class dt_pskel;
  class dd_pskel;
  class address_pskel;
  class hr_pskel;
  class pre_pskel;
  class blockquote_pskel;
  class a_pskel;
  class span_pskel;
  class bdo_pskel;
  class br_pskel;
  class em_pskel;
  class strong_pskel;
  class dfn_pskel;
  class code_pskel;
  class samp_pskel;
  class kbd_pskel;
  class var_pskel;
  class cite_pskel;
  class abbr_pskel;
  class acronym_pskel;
  class q_pskel;
  class sub_pskel;
  class sup_pskel;
  class tt_pskel;
  class i_pskel;
  class b_pskel;
  class big_pskel;
  class small_pskel;
  class img_pskel;
  class map_pskel;
  class area_pskel;
  class align_pskel;
  class valign_pskel;
  class table_pskel;
  class caption_pskel;
  class thead_pskel;
  class tfoot_pskel;
  class tbody_pskel;
  class colgroup_pskel;
  class col_pskel;
  class tr_pskel;
  class th_pskel;
  class td_pskel;
  class ismap_pskel;
  class nohref_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "xml-pskel.hxx"

namespace xhtml
{
  class ContentType_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContentType ();

    // Constructor.
    //
    ContentType_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    ContentType_pskel* ContentType_impl_;
    ContentType_pskel (ContentType_pskel*, void*);
  };

  class ContentTypes_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContentTypes ();

    // Constructor.
    //
    ContentTypes_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    ContentTypes_pskel* ContentTypes_impl_;
    ContentTypes_pskel (ContentTypes_pskel*, void*);
  };

  class Charset_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Charset ();

    // Constructor.
    //
    Charset_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    Charset_pskel* Charset_impl_;
    Charset_pskel (Charset_pskel*, void*);
  };

  class Charsets_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Charsets ();

    // Constructor.
    //
    Charsets_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    Charsets_pskel* Charsets_impl_;
    Charsets_pskel (Charsets_pskel*, void*);
  };

  class LanguageCode_pskel: public ::xml_schema::language_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LanguageCode ();

    // Constructor.
    //
    LanguageCode_pskel (::xml_schema::language_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_language ();

    protected:
    LanguageCode_pskel* LanguageCode_impl_;
    LanguageCode_pskel (LanguageCode_pskel*, void*);
  };

  class Character_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Character ();

    // Constructor.
    //
    Character_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    Character_pskel* Character_impl_;
    Character_pskel (Character_pskel*, void*);
  };

  class Number_pskel: public ::xml_schema::non_negative_integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Number ();

    // Constructor.
    //
    Number_pskel (::xml_schema::non_negative_integer_pskel* tiein);

    // Implementation details.
    //
    virtual unsigned long
    post_non_negative_integer ();

    protected:
    Number_pskel* Number_impl_;
    Number_pskel (Number_pskel*, void*);
  };

  class tabindexNumber_pskel: public ::xhtml::Number_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_tabindexNumber ();

    // Constructor.
    //
    tabindexNumber_pskel (::xhtml::Number_pskel* tiein);

    // Implementation details.
    //
    protected:
    tabindexNumber_pskel* tabindexNumber_impl_;
    tabindexNumber_pskel (tabindexNumber_pskel*, void*);
  };

  class LinkTypes_pskel: public ::xml_schema::nmtokens_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LinkTypes ();

    // Constructor.
    //
    LinkTypes_pskel (::xml_schema::nmtokens_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::string_sequence*
    post_nmtokens ();

    protected:
    LinkTypes_pskel* LinkTypes_impl_;
    LinkTypes_pskel (LinkTypes_pskel*, void*);
  };

  class MediaDesc_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MediaDesc ();

    // Constructor.
    //
    MediaDesc_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    MediaDesc_pskel* MediaDesc_impl_;
    MediaDesc_pskel (MediaDesc_pskel*, void*);
  };

  class URI_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_URI ();

    // Constructor.
    //
    URI_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    URI_pskel* URI_impl_;
    URI_pskel (URI_pskel*, void*);
  };

  class UriList_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_UriList ();

    // Constructor.
    //
    UriList_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    UriList_pskel* UriList_impl_;
    UriList_pskel (UriList_pskel*, void*);
  };

  class Datetime_pskel: public ::xml_schema::date_time_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Datetime ();

    // Constructor.
    //
    Datetime_pskel (::xml_schema::date_time_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::date_time
    post_date_time ();

    protected:
    Datetime_pskel* Datetime_impl_;
    Datetime_pskel (Datetime_pskel*, void*);
  };

  class Script_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Script ();

    // Constructor.
    //
    Script_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    Script_pskel* Script_impl_;
    Script_pskel (Script_pskel*, void*);
  };

  class StyleSheet_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StyleSheet ();

    // Constructor.
    //
    StyleSheet_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    StyleSheet_pskel* StyleSheet_impl_;
    StyleSheet_pskel (StyleSheet_pskel*, void*);
  };

  class Text_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Text ();

    // Constructor.
    //
    Text_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    Text_pskel* Text_impl_;
    Text_pskel (Text_pskel*, void*);
  };

  class Length_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Length ();

    // Constructor.
    //
    Length_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    Length_pskel* Length_impl_;
    Length_pskel (Length_pskel*, void*);
  };

  class MultiLength_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MultiLength ();

    // Constructor.
    //
    MultiLength_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    MultiLength_pskel* MultiLength_impl_;
    MultiLength_pskel (MultiLength_pskel*, void*);
  };

  class Pixels_pskel: public ::xml_schema::non_negative_integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Pixels ();

    // Constructor.
    //
    Pixels_pskel (::xml_schema::non_negative_integer_pskel* tiein);

    // Implementation details.
    //
    virtual unsigned long
    post_non_negative_integer ();

    protected:
    Pixels_pskel* Pixels_impl_;
    Pixels_pskel (Pixels_pskel*, void*);
  };

  class Shape_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Shape ();

    // Constructor.
    //
    Shape_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    Shape_pskel* Shape_impl_;
    Shape_pskel (Shape_pskel*, void*);

    protected:
    static const char* const _xsde_Shape_pskel_enums_[4UL];
  };

  class Coords_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Coords ();

    // Constructor.
    //
    Coords_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    Coords_pskel* Coords_impl_;
    Coords_pskel (Coords_pskel*, void*);
  };

  class Inline_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    enum choice_arm_tag
    {
      choice_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    enum choice1_arm_tag
    {
      a_tag,
      choice1_tag,
      choice2_tag,
      choice3_tag
    };

    virtual void
    choice1_arm (choice1_arm_tag);

    virtual void
    a ();

    enum choice2_arm_tag
    {
      choice4_tag,
      img_tag
    };

    virtual void
    choice2_arm (choice2_arm_tag);

    enum choice3_arm_tag
    {
      br_tag,
      span_tag,
      bdo_tag,
      map_tag
    };

    virtual void
    choice3_arm (choice3_arm_tag);

    virtual void
    br ();

    virtual void
    span ();

    virtual void
    bdo ();

    virtual void
    map ();

    virtual void
    img ();

    enum choice4_arm_tag
    {
      tt_tag,
      i_tag,
      b_tag,
      big_tag,
      small_tag
    };

    virtual void
    choice4_arm (choice4_arm_tag);

    virtual void
    tt ();

    virtual void
    i ();

    virtual void
    b ();

    virtual void
    big ();

    virtual void
    small ();

    enum choice5_arm_tag
    {
      em_tag,
      strong_tag,
      dfn_tag,
      code_tag,
      q_tag,
      samp_tag,
      kbd_tag,
      var_tag,
      cite_tag,
      abbr_tag,
      acronym_tag,
      sub_tag,
      sup_tag
    };

    virtual void
    choice5_arm (choice5_arm_tag);

    virtual void
    em ();

    virtual void
    strong ();

    virtual void
    dfn ();

    virtual void
    code ();

    virtual void
    q ();

    virtual void
    samp ();

    virtual void
    kbd ();

    virtual void
    var ();

    virtual void
    cite ();

    virtual void
    abbr ();

    virtual void
    acronym ();

    virtual void
    sub ();

    virtual void
    sup ();

    virtual void
    post_Inline ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */);

    // Individual element parsers.
    //
    void
    a_parser (::xhtml::a_pskel&);

    void
    br_parser (::xhtml::br_pskel&);

    void
    span_parser (::xhtml::span_pskel&);

    void
    bdo_parser (::xhtml::bdo_pskel&);

    void
    map_parser (::xhtml::map_pskel&);

    void
    img_parser (::xhtml::img_pskel&);

    void
    tt_parser (::xhtml::tt_pskel&);

    void
    i_parser (::xhtml::i_pskel&);

    void
    b_parser (::xhtml::b_pskel&);

    void
    big_parser (::xhtml::big_pskel&);

    void
    small_parser (::xhtml::small_pskel&);

    void
    em_parser (::xhtml::em_pskel&);

    void
    strong_parser (::xhtml::strong_pskel&);

    void
    dfn_parser (::xhtml::dfn_pskel&);

    void
    code_parser (::xhtml::code_pskel&);

    void
    q_parser (::xhtml::q_pskel&);

    void
    samp_parser (::xhtml::samp_pskel&);

    void
    kbd_parser (::xhtml::kbd_pskel&);

    void
    var_parser (::xhtml::var_pskel&);

    void
    cite_parser (::xhtml::cite_pskel&);

    void
    abbr_parser (::xhtml::abbr_pskel&);

    void
    acronym_parser (::xhtml::acronym_pskel&);

    void
    sub_parser (::xhtml::sub_pskel&);

    void
    sup_parser (::xhtml::sup_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Inline_pskel ();

    // Implementation details.
    //
    protected:
    Inline_pskel* Inline_impl_;
    Inline_pskel (Inline_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xhtml::a_pskel* a_parser_;
    ::xhtml::br_pskel* br_parser_;
    ::xhtml::span_pskel* span_parser_;
    ::xhtml::bdo_pskel* bdo_parser_;
    ::xhtml::map_pskel* map_parser_;
    ::xhtml::img_pskel* img_parser_;
    ::xhtml::tt_pskel* tt_parser_;
    ::xhtml::i_pskel* i_parser_;
    ::xhtml::b_pskel* b_parser_;
    ::xhtml::big_pskel* big_parser_;
    ::xhtml::small_pskel* small_parser_;
    ::xhtml::em_pskel* em_parser_;
    ::xhtml::strong_pskel* strong_parser_;
    ::xhtml::dfn_pskel* dfn_parser_;
    ::xhtml::code_pskel* code_parser_;
    ::xhtml::q_pskel* q_parser_;
    ::xhtml::samp_pskel* samp_parser_;
    ::xhtml::kbd_pskel* kbd_parser_;
    ::xhtml::var_pskel* var_parser_;
    ::xhtml::cite_pskel* cite_parser_;
    ::xhtml::abbr_pskel* abbr_parser_;
    ::xhtml::acronym_pskel* acronym_parser_;
    ::xhtml::sub_pskel* sub_parser_;
    ::xhtml::sup_pskel* sup_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::Inline_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[5UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_5 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_4 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_1 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_2 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_3 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class Block_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    enum choice_arm_tag
    {
      choice_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    enum choice1_arm_tag
    {
      p_tag,
      choice1_tag,
      div_tag,
      choice2_tag,
      choice3_tag,
      table_tag
    };

    virtual void
    choice1_arm (choice1_arm_tag);

    virtual void
    p ();

    enum choice2_arm_tag
    {
      h1_tag,
      h2_tag,
      h3_tag,
      h4_tag,
      h5_tag,
      h6_tag
    };

    virtual void
    choice2_arm (choice2_arm_tag);

    virtual void
    h1 ();

    virtual void
    h2 ();

    virtual void
    h3 ();

    virtual void
    h4 ();

    virtual void
    h5 ();

    virtual void
    h6 ();

    virtual void
    div ();

    enum choice3_arm_tag
    {
      ul_tag,
      ol_tag,
      dl_tag
    };

    virtual void
    choice3_arm (choice3_arm_tag);

    virtual void
    ul ();

    virtual void
    ol ();

    virtual void
    dl ();

    enum choice4_arm_tag
    {
      pre_tag,
      hr_tag,
      blockquote_tag,
      address_tag
    };

    virtual void
    choice4_arm (choice4_arm_tag);

    virtual void
    pre ();

    virtual void
    hr ();

    virtual void
    blockquote ();

    virtual void
    address ();

    virtual void
    table ();

    virtual void
    post_Block ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */);

    // Individual element parsers.
    //
    void
    p_parser (::xhtml::p_pskel&);

    void
    h1_parser (::xhtml::h1_pskel&);

    void
    h2_parser (::xhtml::h2_pskel&);

    void
    h3_parser (::xhtml::h3_pskel&);

    void
    h4_parser (::xhtml::h4_pskel&);

    void
    h5_parser (::xhtml::h5_pskel&);

    void
    h6_parser (::xhtml::h6_pskel&);

    void
    div_parser (::xhtml::div_pskel&);

    void
    ul_parser (::xhtml::ul_pskel&);

    void
    ol_parser (::xhtml::ol_pskel&);

    void
    dl_parser (::xhtml::dl_pskel&);

    void
    pre_parser (::xhtml::pre_pskel&);

    void
    hr_parser (::xhtml::hr_pskel&);

    void
    blockquote_parser (::xhtml::blockquote_pskel&);

    void
    address_parser (::xhtml::address_pskel&);

    void
    table_parser (::xhtml::table_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Block_pskel ();

    // Implementation details.
    //
    protected:
    Block_pskel* Block_impl_;
    Block_pskel (Block_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xhtml::p_pskel* p_parser_;
    ::xhtml::h1_pskel* h1_parser_;
    ::xhtml::h2_pskel* h2_parser_;
    ::xhtml::h3_pskel* h3_parser_;
    ::xhtml::h4_pskel* h4_parser_;
    ::xhtml::h5_pskel* h5_parser_;
    ::xhtml::h6_pskel* h6_parser_;
    ::xhtml::div_pskel* div_parser_;
    ::xhtml::ul_pskel* ul_parser_;
    ::xhtml::ol_pskel* ol_parser_;
    ::xhtml::dl_pskel* dl_parser_;
    ::xhtml::pre_pskel* pre_parser_;
    ::xhtml::hr_pskel* hr_parser_;
    ::xhtml::blockquote_pskel* blockquote_parser_;
    ::xhtml::address_pskel* address_parser_;
    ::xhtml::table_pskel* table_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::Block_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[4UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_4 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_3 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_1 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_2 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class Flow_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    enum choice_arm_tag
    {
      choice_tag,
      choice1_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    enum choice1_arm_tag
    {
      p_tag,
      choice2_tag,
      div_tag,
      choice3_tag,
      choice4_tag,
      table_tag
    };

    virtual void
    choice1_arm (choice1_arm_tag);

    virtual void
    p ();

    enum choice2_arm_tag
    {
      h1_tag,
      h2_tag,
      h3_tag,
      h4_tag,
      h5_tag,
      h6_tag
    };

    virtual void
    choice2_arm (choice2_arm_tag);

    virtual void
    h1 ();

    virtual void
    h2 ();

    virtual void
    h3 ();

    virtual void
    h4 ();

    virtual void
    h5 ();

    virtual void
    h6 ();

    virtual void
    div ();

    enum choice3_arm_tag
    {
      ul_tag,
      ol_tag,
      dl_tag
    };

    virtual void
    choice3_arm (choice3_arm_tag);

    virtual void
    ul ();

    virtual void
    ol ();

    virtual void
    dl ();

    enum choice4_arm_tag
    {
      pre_tag,
      hr_tag,
      blockquote_tag,
      address_tag
    };

    virtual void
    choice4_arm (choice4_arm_tag);

    virtual void
    pre ();

    virtual void
    hr ();

    virtual void
    blockquote ();

    virtual void
    address ();

    virtual void
    table ();

    enum choice5_arm_tag
    {
      a_tag,
      choice5_tag,
      choice6_tag,
      choice7_tag
    };

    virtual void
    choice5_arm (choice5_arm_tag);

    virtual void
    a ();

    enum choice6_arm_tag
    {
      choice8_tag,
      img_tag
    };

    virtual void
    choice6_arm (choice6_arm_tag);

    enum choice7_arm_tag
    {
      br_tag,
      span_tag,
      bdo_tag,
      map_tag
    };

    virtual void
    choice7_arm (choice7_arm_tag);

    virtual void
    br ();

    virtual void
    span ();

    virtual void
    bdo ();

    virtual void
    map ();

    virtual void
    img ();

    enum choice8_arm_tag
    {
      tt_tag,
      i_tag,
      b_tag,
      big_tag,
      small_tag
    };

    virtual void
    choice8_arm (choice8_arm_tag);

    virtual void
    tt ();

    virtual void
    i ();

    virtual void
    b ();

    virtual void
    big ();

    virtual void
    small ();

    enum choice9_arm_tag
    {
      em_tag,
      strong_tag,
      dfn_tag,
      code_tag,
      q_tag,
      samp_tag,
      kbd_tag,
      var_tag,
      cite_tag,
      abbr_tag,
      acronym_tag,
      sub_tag,
      sup_tag
    };

    virtual void
    choice9_arm (choice9_arm_tag);

    virtual void
    em ();

    virtual void
    strong ();

    virtual void
    dfn ();

    virtual void
    code ();

    virtual void
    q ();

    virtual void
    samp ();

    virtual void
    kbd ();

    virtual void
    var ();

    virtual void
    cite ();

    virtual void
    abbr ();

    virtual void
    acronym ();

    virtual void
    sub ();

    virtual void
    sup ();

    virtual void
    post_Flow ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */);

    // Individual element parsers.
    //
    void
    p_parser (::xhtml::p_pskel&);

    void
    h1_parser (::xhtml::h1_pskel&);

    void
    h2_parser (::xhtml::h2_pskel&);

    void
    h3_parser (::xhtml::h3_pskel&);

    void
    h4_parser (::xhtml::h4_pskel&);

    void
    h5_parser (::xhtml::h5_pskel&);

    void
    h6_parser (::xhtml::h6_pskel&);

    void
    div_parser (::xhtml::div_pskel&);

    void
    ul_parser (::xhtml::ul_pskel&);

    void
    ol_parser (::xhtml::ol_pskel&);

    void
    dl_parser (::xhtml::dl_pskel&);

    void
    pre_parser (::xhtml::pre_pskel&);

    void
    hr_parser (::xhtml::hr_pskel&);

    void
    blockquote_parser (::xhtml::blockquote_pskel&);

    void
    address_parser (::xhtml::address_pskel&);

    void
    table_parser (::xhtml::table_pskel&);

    void
    a_parser (::xhtml::a_pskel&);

    void
    br_parser (::xhtml::br_pskel&);

    void
    span_parser (::xhtml::span_pskel&);

    void
    bdo_parser (::xhtml::bdo_pskel&);

    void
    map_parser (::xhtml::map_pskel&);

    void
    img_parser (::xhtml::img_pskel&);

    void
    tt_parser (::xhtml::tt_pskel&);

    void
    i_parser (::xhtml::i_pskel&);

    void
    b_parser (::xhtml::b_pskel&);

    void
    big_parser (::xhtml::big_pskel&);

    void
    small_parser (::xhtml::small_pskel&);

    void
    em_parser (::xhtml::em_pskel&);

    void
    strong_parser (::xhtml::strong_pskel&);

    void
    dfn_parser (::xhtml::dfn_pskel&);

    void
    code_parser (::xhtml::code_pskel&);

    void
    q_parser (::xhtml::q_pskel&);

    void
    samp_parser (::xhtml::samp_pskel&);

    void
    kbd_parser (::xhtml::kbd_pskel&);

    void
    var_parser (::xhtml::var_pskel&);

    void
    cite_parser (::xhtml::cite_pskel&);

    void
    abbr_parser (::xhtml::abbr_pskel&);

    void
    acronym_parser (::xhtml::acronym_pskel&);

    void
    sub_parser (::xhtml::sub_pskel&);

    void
    sup_parser (::xhtml::sup_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Flow_pskel ();

    // Implementation details.
    //
    protected:
    Flow_pskel* Flow_impl_;
    Flow_pskel (Flow_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xhtml::p_pskel* p_parser_;
    ::xhtml::h1_pskel* h1_parser_;
    ::xhtml::h2_pskel* h2_parser_;
    ::xhtml::h3_pskel* h3_parser_;
    ::xhtml::h4_pskel* h4_parser_;
    ::xhtml::h5_pskel* h5_parser_;
    ::xhtml::h6_pskel* h6_parser_;
    ::xhtml::div_pskel* div_parser_;
    ::xhtml::ul_pskel* ul_parser_;
    ::xhtml::ol_pskel* ol_parser_;
    ::xhtml::dl_pskel* dl_parser_;
    ::xhtml::pre_pskel* pre_parser_;
    ::xhtml::hr_pskel* hr_parser_;
    ::xhtml::blockquote_pskel* blockquote_parser_;
    ::xhtml::address_pskel* address_parser_;
    ::xhtml::table_pskel* table_parser_;
    ::xhtml::a_pskel* a_parser_;
    ::xhtml::br_pskel* br_parser_;
    ::xhtml::span_pskel* span_parser_;
    ::xhtml::bdo_pskel* bdo_parser_;
    ::xhtml::map_pskel* map_parser_;
    ::xhtml::img_pskel* img_parser_;
    ::xhtml::tt_pskel* tt_parser_;
    ::xhtml::i_pskel* i_parser_;
    ::xhtml::b_pskel* b_parser_;
    ::xhtml::big_pskel* big_parser_;
    ::xhtml::small_pskel* small_parser_;
    ::xhtml::em_pskel* em_parser_;
    ::xhtml::strong_pskel* strong_parser_;
    ::xhtml::dfn_pskel* dfn_parser_;
    ::xhtml::code_pskel* code_parser_;
    ::xhtml::q_pskel* q_parser_;
    ::xhtml::samp_pskel* samp_parser_;
    ::xhtml::kbd_pskel* kbd_parser_;
    ::xhtml::var_pskel* var_parser_;
    ::xhtml::cite_pskel* cite_parser_;
    ::xhtml::abbr_pskel* abbr_parser_;
    ::xhtml::acronym_pskel* acronym_parser_;
    ::xhtml::sub_pskel* sub_parser_;
    ::xhtml::sup_pskel* sup_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::Flow_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[5UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_9 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_3 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_1 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_2 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_8 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_5 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_4 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_6 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_7 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class a_content_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    enum choice_arm_tag
    {
      choice_tag,
      choice1_tag,
      choice2_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    enum choice1_arm_tag
    {
      choice3_tag,
      img_tag
    };

    virtual void
    choice1_arm (choice1_arm_tag);

    enum choice2_arm_tag
    {
      br_tag,
      span_tag,
      bdo_tag,
      map_tag
    };

    virtual void
    choice2_arm (choice2_arm_tag);

    virtual void
    br ();

    virtual void
    span ();

    virtual void
    bdo ();

    virtual void
    map ();

    virtual void
    img ();

    enum choice3_arm_tag
    {
      tt_tag,
      i_tag,
      b_tag,
      big_tag,
      small_tag
    };

    virtual void
    choice3_arm (choice3_arm_tag);

    virtual void
    tt ();

    virtual void
    i ();

    virtual void
    b ();

    virtual void
    big ();

    virtual void
    small ();

    enum choice4_arm_tag
    {
      em_tag,
      strong_tag,
      dfn_tag,
      code_tag,
      q_tag,
      samp_tag,
      kbd_tag,
      var_tag,
      cite_tag,
      abbr_tag,
      acronym_tag,
      sub_tag,
      sup_tag
    };

    virtual void
    choice4_arm (choice4_arm_tag);

    virtual void
    em ();

    virtual void
    strong ();

    virtual void
    dfn ();

    virtual void
    code ();

    virtual void
    q ();

    virtual void
    samp ();

    virtual void
    kbd ();

    virtual void
    var ();

    virtual void
    cite ();

    virtual void
    abbr ();

    virtual void
    acronym ();

    virtual void
    sub ();

    virtual void
    sup ();

    virtual void
    post_a_content ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */);

    // Individual element parsers.
    //
    void
    br_parser (::xhtml::br_pskel&);

    void
    span_parser (::xhtml::span_pskel&);

    void
    bdo_parser (::xhtml::bdo_pskel&);

    void
    map_parser (::xhtml::map_pskel&);

    void
    img_parser (::xhtml::img_pskel&);

    void
    tt_parser (::xhtml::tt_pskel&);

    void
    i_parser (::xhtml::i_pskel&);

    void
    b_parser (::xhtml::b_pskel&);

    void
    big_parser (::xhtml::big_pskel&);

    void
    small_parser (::xhtml::small_pskel&);

    void
    em_parser (::xhtml::em_pskel&);

    void
    strong_parser (::xhtml::strong_pskel&);

    void
    dfn_parser (::xhtml::dfn_pskel&);

    void
    code_parser (::xhtml::code_pskel&);

    void
    q_parser (::xhtml::q_pskel&);

    void
    samp_parser (::xhtml::samp_pskel&);

    void
    kbd_parser (::xhtml::kbd_pskel&);

    void
    var_parser (::xhtml::var_pskel&);

    void
    cite_parser (::xhtml::cite_pskel&);

    void
    abbr_parser (::xhtml::abbr_pskel&);

    void
    acronym_parser (::xhtml::acronym_pskel&);

    void
    sub_parser (::xhtml::sub_pskel&);

    void
    sup_parser (::xhtml::sup_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    a_content_pskel ();

    // Implementation details.
    //
    protected:
    a_content_pskel* a_content_impl_;
    a_content_pskel (a_content_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xhtml::br_pskel* br_parser_;
    ::xhtml::span_pskel* span_parser_;
    ::xhtml::bdo_pskel* bdo_parser_;
    ::xhtml::map_pskel* map_parser_;
    ::xhtml::img_pskel* img_parser_;
    ::xhtml::tt_pskel* tt_parser_;
    ::xhtml::i_pskel* i_parser_;
    ::xhtml::b_pskel* b_parser_;
    ::xhtml::big_pskel* big_parser_;
    ::xhtml::small_pskel* small_parser_;
    ::xhtml::em_pskel* em_parser_;
    ::xhtml::strong_pskel* strong_parser_;
    ::xhtml::dfn_pskel* dfn_parser_;
    ::xhtml::code_pskel* code_parser_;
    ::xhtml::q_pskel* q_parser_;
    ::xhtml::samp_pskel* samp_parser_;
    ::xhtml::kbd_pskel* kbd_parser_;
    ::xhtml::var_pskel* var_parser_;
    ::xhtml::cite_pskel* cite_parser_;
    ::xhtml::abbr_pskel* abbr_parser_;
    ::xhtml::acronym_pskel* acronym_parser_;
    ::xhtml::sub_pskel* sub_parser_;
    ::xhtml::sup_pskel* sup_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::a_content_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[4UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_4 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_1 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_2 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_3 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class pre_content_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    enum choice_arm_tag
    {
      a_tag,
      choice_tag,
      choice1_tag,
      choice2_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    virtual void
    a ();

    enum choice1_arm_tag
    {
      tt_tag,
      i_tag,
      b_tag,
      big_tag,
      small_tag
    };

    virtual void
    choice1_arm (choice1_arm_tag);

    virtual void
    tt ();

    virtual void
    i ();

    virtual void
    b ();

    virtual void
    big ();

    virtual void
    small ();

    enum choice2_arm_tag
    {
      em_tag,
      strong_tag,
      dfn_tag,
      code_tag,
      q_tag,
      samp_tag,
      kbd_tag,
      var_tag,
      cite_tag,
      abbr_tag,
      acronym_tag,
      sub_tag,
      sup_tag
    };

    virtual void
    choice2_arm (choice2_arm_tag);

    virtual void
    em ();

    virtual void
    strong ();

    virtual void
    dfn ();

    virtual void
    code ();

    virtual void
    q ();

    virtual void
    samp ();

    virtual void
    kbd ();

    virtual void
    var ();

    virtual void
    cite ();

    virtual void
    abbr ();

    virtual void
    acronym ();

    virtual void
    sub ();

    virtual void
    sup ();

    enum choice3_arm_tag
    {
      br_tag,
      span_tag,
      bdo_tag,
      map_tag
    };

    virtual void
    choice3_arm (choice3_arm_tag);

    virtual void
    br ();

    virtual void
    span ();

    virtual void
    bdo ();

    virtual void
    map ();

    virtual void
    post_pre_content ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */);

    // Individual element parsers.
    //
    void
    a_parser (::xhtml::a_pskel&);

    void
    tt_parser (::xhtml::tt_pskel&);

    void
    i_parser (::xhtml::i_pskel&);

    void
    b_parser (::xhtml::b_pskel&);

    void
    big_parser (::xhtml::big_pskel&);

    void
    small_parser (::xhtml::small_pskel&);

    void
    em_parser (::xhtml::em_pskel&);

    void
    strong_parser (::xhtml::strong_pskel&);

    void
    dfn_parser (::xhtml::dfn_pskel&);

    void
    code_parser (::xhtml::code_pskel&);

    void
    q_parser (::xhtml::q_pskel&);

    void
    samp_parser (::xhtml::samp_pskel&);

    void
    kbd_parser (::xhtml::kbd_pskel&);

    void
    var_parser (::xhtml::var_pskel&);

    void
    cite_parser (::xhtml::cite_pskel&);

    void
    abbr_parser (::xhtml::abbr_pskel&);

    void
    acronym_parser (::xhtml::acronym_pskel&);

    void
    sub_parser (::xhtml::sub_pskel&);

    void
    sup_parser (::xhtml::sup_pskel&);

    void
    br_parser (::xhtml::br_pskel&);

    void
    span_parser (::xhtml::span_pskel&);

    void
    bdo_parser (::xhtml::bdo_pskel&);

    void
    map_parser (::xhtml::map_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    pre_content_pskel ();

    // Implementation details.
    //
    protected:
    pre_content_pskel* pre_content_impl_;
    pre_content_pskel (pre_content_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xhtml::a_pskel* a_parser_;
    ::xhtml::tt_pskel* tt_parser_;
    ::xhtml::i_pskel* i_parser_;
    ::xhtml::b_pskel* b_parser_;
    ::xhtml::big_pskel* big_parser_;
    ::xhtml::small_pskel* small_parser_;
    ::xhtml::em_pskel* em_parser_;
    ::xhtml::strong_pskel* strong_parser_;
    ::xhtml::dfn_pskel* dfn_parser_;
    ::xhtml::code_pskel* code_parser_;
    ::xhtml::q_pskel* q_parser_;
    ::xhtml::samp_pskel* samp_parser_;
    ::xhtml::kbd_pskel* kbd_parser_;
    ::xhtml::var_pskel* var_parser_;
    ::xhtml::cite_pskel* cite_parser_;
    ::xhtml::abbr_pskel* abbr_parser_;
    ::xhtml::acronym_pskel* acronym_parser_;
    ::xhtml::sub_pskel* sub_parser_;
    ::xhtml::sup_pskel* sup_parser_;
    ::xhtml::br_pskel* br_parser_;
    ::xhtml::span_pskel* span_parser_;
    ::xhtml::bdo_pskel* bdo_parser_;
    ::xhtml::map_pskel* map_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::pre_content_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_3 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_1 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_2 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class TFrame_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TFrame ();

    // Constructor.
    //
    TFrame_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    TFrame_pskel* TFrame_impl_;
    TFrame_pskel (TFrame_pskel*, void*);

    protected:
    static const char* const _xsde_TFrame_pskel_enums_[9UL];
  };

  class TRules_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TRules ();

    // Constructor.
    //
    TRules_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    TRules_pskel* TRules_impl_;
    TRules_pskel (TRules_pskel*, void*);

    protected:
    static const char* const _xsde_TRules_pskel_enums_[5UL];
  };

  class Scope_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Scope ();

    // Constructor.
    //
    Scope_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    Scope_pskel* Scope_impl_;
    Scope_pskel (Scope_pskel*, void*);

    protected:
    static const char* const _xsde_Scope_pskel_enums_[4UL];
  };

  class dir_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_dir ();

    // Constructor.
    //
    dir_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    dir_pskel* dir_impl_;
    dir_pskel (dir_pskel*, void*);

    protected:
    static const char* const _xsde_dir_pskel_enums_[2UL];
  };

  class div_pskel: public ::xhtml::Flow_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_div ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    div_pskel (::xhtml::Flow_pskel* tiein);

    // Implementation details.
    //
    protected:
    div_pskel* div_impl_;
    div_pskel (div_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class p_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_p ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    p_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    p_pskel* p_impl_;
    p_pskel (p_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class h1_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_h1 ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    h1_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    h1_pskel* h1_impl_;
    h1_pskel (h1_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class h2_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_h2 ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    h2_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    h2_pskel* h2_impl_;
    h2_pskel (h2_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class h3_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_h3 ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    h3_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    h3_pskel* h3_impl_;
    h3_pskel (h3_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class h4_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_h4 ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    h4_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    h4_pskel* h4_impl_;
    h4_pskel (h4_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class h5_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_h5 ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    h5_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    h5_pskel* h5_impl_;
    h5_pskel (h5_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class h6_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_h6 ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    h6_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    h6_pskel* h6_impl_;
    h6_pskel (h6_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class ul_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    // Elements.
    //
    virtual void
    li ();

    virtual void
    post_ul ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::li_pskel& /* li */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    // Individual element parsers.
    //
    void
    li_parser (::xhtml::li_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ul_pskel ();

    // Implementation details.
    //
    protected:
    ul_pskel* ul_impl_;
    ul_pskel (ul_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::li_pskel* li_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::ul_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ol_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    // Elements.
    //
    virtual void
    li ();

    virtual void
    post_ol ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::li_pskel& /* li */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    // Individual element parsers.
    //
    void
    li_parser (::xhtml::li_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ol_pskel ();

    // Implementation details.
    //
    protected:
    ol_pskel* ol_impl_;
    ol_pskel (ol_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::li_pskel* li_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::ol_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class li_pskel: public ::xhtml::Flow_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_li ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    li_pskel (::xhtml::Flow_pskel* tiein);

    // Implementation details.
    //
    protected:
    li_pskel* li_impl_;
    li_pskel (li_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class dl_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    // Elements.
    //
    enum choice_arm_tag
    {
      dt_tag,
      dd_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    virtual void
    dt ();

    virtual void
    dd ();

    virtual void
    post_dl ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::dt_pskel& /* dt */,
             ::xhtml::dd_pskel& /* dd */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    // Individual element parsers.
    //
    void
    dt_parser (::xhtml::dt_pskel&);

    void
    dd_parser (::xhtml::dd_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dl_pskel ();

    // Implementation details.
    //
    protected:
    dl_pskel* dl_impl_;
    dl_pskel (dl_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::dt_pskel* dt_parser_;
    ::xhtml::dd_pskel* dd_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::dl_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class dt_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_dt ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dt_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    dt_pskel* dt_impl_;
    dt_pskel (dt_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class dd_pskel: public ::xhtml::Flow_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_dd ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dd_pskel (::xhtml::Flow_pskel* tiein);

    // Implementation details.
    //
    protected:
    dd_pskel* dd_impl_;
    dd_pskel (dd_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class address_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_address ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    address_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    address_pskel* address_impl_;
    address_pskel (address_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class hr_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_hr ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    hr_pskel ();

    // Implementation details.
    //
    protected:
    hr_pskel* hr_impl_;
    hr_pskel (hr_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class pre_pskel: public ::xhtml::pre_content_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    space ();

    virtual void
    post_pre ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::namespace_::space_pskel& /* space */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    space_parser (::namespace_::space_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    pre_pskel (::xhtml::pre_content_pskel* tiein);

    // Implementation details.
    //
    protected:
    pre_pskel* pre_impl_;
    pre_pskel (pre_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::namespace_::space_pskel* space_parser_;
  };

  class blockquote_pskel: public ::xhtml::Block_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    cite ();

    virtual void
    post_blockquote ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::URI_pskel& /* cite */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    cite_parser (::xhtml::URI_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    blockquote_pskel (::xhtml::Block_pskel* tiein);

    // Implementation details.
    //
    protected:
    blockquote_pskel* blockquote_impl_;
    blockquote_pskel (blockquote_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::URI_pskel* cite_parser_;
  };

  class a_pskel: public ::xhtml::a_content_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    accesskey ();

    virtual void
    tabindex ();

    virtual void
    charset ();

    virtual void
    type ();

    virtual void
    name (const ::std::string&);

    virtual void
    href ();

    virtual void
    hreflang ();

    virtual void
    rel ();

    virtual void
    rev ();

    virtual void
    shape ();

    virtual void
    coords ();

    virtual void
    post_a ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::Character_pskel& /* accesskey */,
             ::xhtml::tabindexNumber_pskel& /* tabindex */,
             ::xhtml::Charset_pskel& /* charset */,
             ::xhtml::ContentType_pskel& /* type */,
             ::xml_schema::nmtoken_pskel& /* name */,
             ::xhtml::URI_pskel& /* href */,
             ::xhtml::LanguageCode_pskel& /* hreflang */,
             ::xhtml::LinkTypes_pskel& /* rel */,
             ::xhtml::LinkTypes_pskel& /* rev */,
             ::xhtml::Shape_pskel& /* shape */,
             ::xhtml::Coords_pskel& /* coords */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    accesskey_parser (::xhtml::Character_pskel&);

    void
    tabindex_parser (::xhtml::tabindexNumber_pskel&);

    void
    charset_parser (::xhtml::Charset_pskel&);

    void
    type_parser (::xhtml::ContentType_pskel&);

    void
    name_parser (::xml_schema::nmtoken_pskel&);

    void
    href_parser (::xhtml::URI_pskel&);

    void
    hreflang_parser (::xhtml::LanguageCode_pskel&);

    void
    rel_parser (::xhtml::LinkTypes_pskel&);

    void
    rev_parser (::xhtml::LinkTypes_pskel&);

    void
    shape_parser (::xhtml::Shape_pskel&);

    void
    coords_parser (::xhtml::Coords_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    a_pskel (::xhtml::a_content_pskel* tiein);

    // Implementation details.
    //
    protected:
    a_pskel* a_impl_;
    a_pskel (a_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::Character_pskel* accesskey_parser_;
    ::xhtml::tabindexNumber_pskel* tabindex_parser_;
    ::xhtml::Charset_pskel* charset_parser_;
    ::xhtml::ContentType_pskel* type_parser_;
    ::xml_schema::nmtoken_pskel* name_parser_;
    ::xhtml::URI_pskel* href_parser_;
    ::xhtml::LanguageCode_pskel* hreflang_parser_;
    ::xhtml::LinkTypes_pskel* rel_parser_;
    ::xhtml::LinkTypes_pskel* rev_parser_;
    ::xhtml::Shape_pskel* shape_parser_;
    ::xhtml::Coords_pskel* coords_parser_;
  };

  class span_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_span ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    span_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    span_pskel* span_impl_;
    span_pskel (span_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class bdo_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_bdo ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    bdo_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    bdo_pskel* bdo_impl_;
    bdo_pskel (bdo_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;

    protected:
    struct v_state_attr_
    {
      bool dir;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class br_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    post_br ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    br_pskel ();

    // Implementation details.
    //
    protected:
    br_pskel* br_impl_;
    br_pskel (br_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
  };

  class em_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_em ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    em_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    em_pskel* em_impl_;
    em_pskel (em_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class strong_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_strong ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    strong_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    strong_pskel* strong_impl_;
    strong_pskel (strong_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class dfn_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_dfn ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dfn_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    dfn_pskel* dfn_impl_;
    dfn_pskel (dfn_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class code_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_code ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    code_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    code_pskel* code_impl_;
    code_pskel (code_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class samp_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_samp ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    samp_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    samp_pskel* samp_impl_;
    samp_pskel (samp_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class kbd_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_kbd ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    kbd_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    kbd_pskel* kbd_impl_;
    kbd_pskel (kbd_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class var_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_var ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    var_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    var_pskel* var_impl_;
    var_pskel (var_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class cite_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_cite ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    cite_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    cite_pskel* cite_impl_;
    cite_pskel (cite_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class abbr_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_abbr ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    abbr_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    abbr_pskel* abbr_impl_;
    abbr_pskel (abbr_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class acronym_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_acronym ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    acronym_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    acronym_pskel* acronym_impl_;
    acronym_pskel (acronym_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class q_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    cite1 ();

    virtual void
    post_q ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::URI_pskel& /* cite */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    cite1_parser (::xhtml::URI_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    q_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    q_pskel* q_impl_;
    q_pskel (q_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::URI_pskel* cite1_parser_;
  };

  class sub_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_sub ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    sub_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    sub_pskel* sub_impl_;
    sub_pskel (sub_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class sup_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_sup ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    sup_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    sup_pskel* sup_impl_;
    sup_pskel (sup_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class tt_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_tt ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    tt_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    tt_pskel* tt_impl_;
    tt_pskel (tt_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class i_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_i ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    i_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    i_pskel* i_impl_;
    i_pskel (i_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class b_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_b ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    b_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    b_pskel* b_impl_;
    b_pskel (b_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class big_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_big ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    big_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    big_pskel* big_impl_;
    big_pskel (big_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class small_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_small ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    small_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    small_pskel* small_impl_;
    small_pskel (small_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class img_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    src ();

    virtual void
    alt ();

    virtual void
    longdesc ();

    virtual void
    height ();

    virtual void
    width ();

    virtual void
    usemap ();

    virtual void
    ismap ();

    virtual void
    post_img ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::URI_pskel& /* src */,
             ::xhtml::Text_pskel& /* alt */,
             ::xhtml::URI_pskel& /* longdesc */,
             ::xhtml::Length_pskel& /* height */,
             ::xhtml::Length_pskel& /* width */,
             ::xhtml::URI_pskel& /* usemap */,
             ::xhtml::ismap_pskel& /* ismap */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    src_parser (::xhtml::URI_pskel&);

    void
    alt_parser (::xhtml::Text_pskel&);

    void
    longdesc_parser (::xhtml::URI_pskel&);

    void
    height_parser (::xhtml::Length_pskel&);

    void
    width_parser (::xhtml::Length_pskel&);

    void
    usemap_parser (::xhtml::URI_pskel&);

    void
    ismap_parser (::xhtml::ismap_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    img_pskel ();

    // Implementation details.
    //
    protected:
    img_pskel* img_impl_;
    img_pskel (img_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::URI_pskel* src_parser_;
    ::xhtml::Text_pskel* alt_parser_;
    ::xhtml::URI_pskel* longdesc_parser_;
    ::xhtml::Length_pskel* height_parser_;
    ::xhtml::Length_pskel* width_parser_;
    ::xhtml::URI_pskel* usemap_parser_;
    ::xhtml::ismap_pskel* ismap_parser_;

    protected:
    struct v_state_attr_
    {
      bool src;
      bool alt;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class map_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    id (const ::std::string&);

    virtual void
    class_ (const ::std::string&);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    name (const ::std::string&);

    // Elements.
    //
    enum choice_arm_tag
    {
      choice_tag,
      area_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    enum choice1_arm_tag
    {
      choice1_tag
    };

    virtual void
    choice1_arm (choice1_arm_tag);

    enum choice2_arm_tag
    {
      p_tag,
      choice2_tag,
      div_tag,
      choice3_tag,
      choice4_tag,
      table_tag
    };

    virtual void
    choice2_arm (choice2_arm_tag);

    virtual void
    p ();

    enum choice3_arm_tag
    {
      h1_tag,
      h2_tag,
      h3_tag,
      h4_tag,
      h5_tag,
      h6_tag
    };

    virtual void
    choice3_arm (choice3_arm_tag);

    virtual void
    h1 ();

    virtual void
    h2 ();

    virtual void
    h3 ();

    virtual void
    h4 ();

    virtual void
    h5 ();

    virtual void
    h6 ();

    virtual void
    div ();

    enum choice4_arm_tag
    {
      ul_tag,
      ol_tag,
      dl_tag
    };

    virtual void
    choice4_arm (choice4_arm_tag);

    virtual void
    ul ();

    virtual void
    ol ();

    virtual void
    dl ();

    enum choice5_arm_tag
    {
      pre_tag,
      hr_tag,
      blockquote_tag,
      address_tag
    };

    virtual void
    choice5_arm (choice5_arm_tag);

    virtual void
    pre ();

    virtual void
    hr ();

    virtual void
    blockquote ();

    virtual void
    address ();

    virtual void
    table ();

    virtual void
    area ();

    virtual void
    post_map ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::any_simple_type_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xml_schema::nmtoken_pskel& /* name */,
             ::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xhtml::area_pskel& /* area */);

    // Individual attribute parsers.
    //
    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::any_simple_type_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    name_parser (::xml_schema::nmtoken_pskel&);

    // Individual element parsers.
    //
    void
    p_parser (::xhtml::p_pskel&);

    void
    h1_parser (::xhtml::h1_pskel&);

    void
    h2_parser (::xhtml::h2_pskel&);

    void
    h3_parser (::xhtml::h3_pskel&);

    void
    h4_parser (::xhtml::h4_pskel&);

    void
    h5_parser (::xhtml::h5_pskel&);

    void
    h6_parser (::xhtml::h6_pskel&);

    void
    div_parser (::xhtml::div_pskel&);

    void
    ul_parser (::xhtml::ul_pskel&);

    void
    ol_parser (::xhtml::ol_pskel&);

    void
    dl_parser (::xhtml::dl_pskel&);

    void
    pre_parser (::xhtml::pre_pskel&);

    void
    hr_parser (::xhtml::hr_pskel&);

    void
    blockquote_parser (::xhtml::blockquote_pskel&);

    void
    address_parser (::xhtml::address_pskel&);

    void
    table_parser (::xhtml::table_pskel&);

    void
    area_parser (::xhtml::area_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    map_pskel ();

    // Implementation details.
    //
    protected:
    map_pskel* map_impl_;
    map_pskel (map_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::any_simple_type_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xml_schema::nmtoken_pskel* name_parser_;
    ::xhtml::p_pskel* p_parser_;
    ::xhtml::h1_pskel* h1_parser_;
    ::xhtml::h2_pskel* h2_parser_;
    ::xhtml::h3_pskel* h3_parser_;
    ::xhtml::h4_pskel* h4_parser_;
    ::xhtml::h5_pskel* h5_parser_;
    ::xhtml::h6_pskel* h6_parser_;
    ::xhtml::div_pskel* div_parser_;
    ::xhtml::ul_pskel* ul_parser_;
    ::xhtml::ol_pskel* ol_parser_;
    ::xhtml::dl_pskel* dl_parser_;
    ::xhtml::pre_pskel* pre_parser_;
    ::xhtml::hr_pskel* hr_parser_;
    ::xhtml::blockquote_pskel* blockquote_parser_;
    ::xhtml::address_pskel* address_parser_;
    ::xhtml::table_pskel* table_parser_;
    ::xhtml::area_pskel* area_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::map_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[5UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_5 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_4 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_3 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_1 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_2 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class area_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    accesskey ();

    virtual void
    tabindex ();

    virtual void
    shape ();

    virtual void
    coords ();

    virtual void
    href ();

    virtual void
    nohref ();

    virtual void
    alt ();

    virtual void
    post_area ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::Character_pskel& /* accesskey */,
             ::xhtml::tabindexNumber_pskel& /* tabindex */,
             ::xhtml::Shape_pskel& /* shape */,
             ::xhtml::Coords_pskel& /* coords */,
             ::xhtml::URI_pskel& /* href */,
             ::xhtml::nohref_pskel& /* nohref */,
             ::xhtml::Text_pskel& /* alt */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    accesskey_parser (::xhtml::Character_pskel&);

    void
    tabindex_parser (::xhtml::tabindexNumber_pskel&);

    void
    shape_parser (::xhtml::Shape_pskel&);

    void
    coords_parser (::xhtml::Coords_pskel&);

    void
    href_parser (::xhtml::URI_pskel&);

    void
    nohref_parser (::xhtml::nohref_pskel&);

    void
    alt_parser (::xhtml::Text_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    area_pskel ();

    // Implementation details.
    //
    protected:
    area_pskel* area_impl_;
    area_pskel (area_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::Character_pskel* accesskey_parser_;
    ::xhtml::tabindexNumber_pskel* tabindex_parser_;
    ::xhtml::Shape_pskel* shape_parser_;
    ::xhtml::Coords_pskel* coords_parser_;
    ::xhtml::URI_pskel* href_parser_;
    ::xhtml::nohref_pskel* nohref_parser_;
    ::xhtml::Text_pskel* alt_parser_;

    protected:
    struct v_state_attr_
    {
      bool alt;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class align_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_align ();

    // Constructor.
    //
    align_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    align_pskel* align_impl_;
    align_pskel (align_pskel*, void*);

    protected:
    static const char* const _xsde_align_pskel_enums_[5UL];
  };

  class valign_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_valign ();

    // Constructor.
    //
    valign_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    valign_pskel* valign_impl_;
    valign_pskel (valign_pskel*, void*);

    protected:
    static const char* const _xsde_valign_pskel_enums_[4UL];
  };

  class table_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    summary ();

    virtual void
    width ();

    virtual void
    border ();

    virtual void
    frame ();

    virtual void
    rules ();

    virtual void
    cellspacing ();

    virtual void
    cellpadding ();

    // Elements.
    //
    virtual void
    caption ();

    enum choice_arm_tag
    {
      col_tag,
      colgroup_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    virtual void
    col ();

    virtual void
    colgroup ();

    virtual void
    thead ();

    virtual void
    tfoot ();

    enum choice1_arm_tag
    {
      tbody_tag,
      tr_tag
    };

    virtual void
    choice1_arm (choice1_arm_tag);

    virtual void
    tbody ();

    virtual void
    tr ();

    virtual void
    post_table ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::Text_pskel& /* summary */,
             ::xhtml::Length_pskel& /* width */,
             ::xhtml::Pixels_pskel& /* border */,
             ::xhtml::TFrame_pskel& /* frame */,
             ::xhtml::TRules_pskel& /* rules */,
             ::xhtml::Length_pskel& /* cellspacing */,
             ::xhtml::Length_pskel& /* cellpadding */,
             ::xhtml::caption_pskel& /* caption */,
             ::xhtml::col_pskel& /* col */,
             ::xhtml::colgroup_pskel& /* colgroup */,
             ::xhtml::thead_pskel& /* thead */,
             ::xhtml::tfoot_pskel& /* tfoot */,
             ::xhtml::tbody_pskel& /* tbody */,
             ::xhtml::tr_pskel& /* tr */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    summary_parser (::xhtml::Text_pskel&);

    void
    width_parser (::xhtml::Length_pskel&);

    void
    border_parser (::xhtml::Pixels_pskel&);

    void
    frame_parser (::xhtml::TFrame_pskel&);

    void
    rules_parser (::xhtml::TRules_pskel&);

    void
    cellspacing_parser (::xhtml::Length_pskel&);

    void
    cellpadding_parser (::xhtml::Length_pskel&);

    // Individual element parsers.
    //
    void
    caption_parser (::xhtml::caption_pskel&);

    void
    col_parser (::xhtml::col_pskel&);

    void
    colgroup_parser (::xhtml::colgroup_pskel&);

    void
    thead_parser (::xhtml::thead_pskel&);

    void
    tfoot_parser (::xhtml::tfoot_pskel&);

    void
    tbody_parser (::xhtml::tbody_pskel&);

    void
    tr_parser (::xhtml::tr_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    table_pskel ();

    // Implementation details.
    //
    protected:
    table_pskel* table_impl_;
    table_pskel (table_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::Text_pskel* summary_parser_;
    ::xhtml::Length_pskel* width_parser_;
    ::xhtml::Pixels_pskel* border_parser_;
    ::xhtml::TFrame_pskel* frame_parser_;
    ::xhtml::TRules_pskel* rules_parser_;
    ::xhtml::Length_pskel* cellspacing_parser_;
    ::xhtml::Length_pskel* cellpadding_parser_;
    ::xhtml::caption_pskel* caption_parser_;
    ::xhtml::col_pskel* col_parser_;
    ::xhtml::colgroup_pskel* colgroup_parser_;
    ::xhtml::thead_pskel* thead_parser_;
    ::xhtml::tfoot_pskel* tfoot_parser_;
    ::xhtml::tbody_pskel* tbody_parser_;
    ::xhtml::tr_pskel* tr_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::table_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

    void
    choice_1 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class caption_pskel: public ::xhtml::Inline_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    post_caption ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    caption_pskel (::xhtml::Inline_pskel* tiein);

    // Implementation details.
    //
    protected:
    caption_pskel* caption_impl_;
    caption_pskel (caption_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
  };

  class thead_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    // Elements.
    //
    virtual void
    tr ();

    virtual void
    post_thead ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */,
             ::xhtml::tr_pskel& /* tr */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    // Individual element parsers.
    //
    void
    tr_parser (::xhtml::tr_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    thead_pskel ();

    // Implementation details.
    //
    protected:
    thead_pskel* thead_impl_;
    thead_pskel (thead_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
    ::xhtml::tr_pskel* tr_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::thead_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class tfoot_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    // Elements.
    //
    virtual void
    tr ();

    virtual void
    post_tfoot ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */,
             ::xhtml::tr_pskel& /* tr */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    // Individual element parsers.
    //
    void
    tr_parser (::xhtml::tr_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    tfoot_pskel ();

    // Implementation details.
    //
    protected:
    tfoot_pskel* tfoot_impl_;
    tfoot_pskel (tfoot_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
    ::xhtml::tr_pskel* tr_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::tfoot_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class tbody_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    // Elements.
    //
    virtual void
    tr ();

    virtual void
    post_tbody ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */,
             ::xhtml::tr_pskel& /* tr */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    // Individual element parsers.
    //
    void
    tr_parser (::xhtml::tr_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    tbody_pskel ();

    // Implementation details.
    //
    protected:
    tbody_pskel* tbody_impl_;
    tbody_pskel (tbody_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
    ::xhtml::tr_pskel* tr_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::tbody_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class colgroup_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    span ();

    virtual void
    width ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    // Elements.
    //
    virtual void
    col ();

    virtual void
    post_colgroup ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::Number_pskel& /* span */,
             ::xhtml::MultiLength_pskel& /* width */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */,
             ::xhtml::col_pskel& /* col */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    span_parser (::xhtml::Number_pskel&);

    void
    width_parser (::xhtml::MultiLength_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    // Individual element parsers.
    //
    void
    col_parser (::xhtml::col_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    colgroup_pskel ();

    // Implementation details.
    //
    protected:
    colgroup_pskel* colgroup_impl_;
    colgroup_pskel (colgroup_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::Number_pskel* span_parser_;
    ::xhtml::MultiLength_pskel* width_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
    ::xhtml::col_pskel* col_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::colgroup_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class col_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    span ();

    virtual void
    width ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    virtual void
    post_col ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::Number_pskel& /* span */,
             ::xhtml::MultiLength_pskel& /* width */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    span_parser (::xhtml::Number_pskel&);

    void
    width_parser (::xhtml::MultiLength_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    col_pskel ();

    // Implementation details.
    //
    protected:
    col_pskel* col_impl_;
    col_pskel (col_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::Number_pskel* span_parser_;
    ::xhtml::MultiLength_pskel* width_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
  };

  class tr_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    // Elements.
    //
    enum choice_arm_tag
    {
      th_tag,
      td_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    virtual void
    th ();

    virtual void
    td ();

    virtual void
    post_tr ();

    // Parser construction API.
    //
    void
    parsers (::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */,
             ::xhtml::th_pskel& /* th */,
             ::xhtml::td_pskel& /* td */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    // Individual element parsers.
    //
    void
    th_parser (::xhtml::th_pskel&);

    void
    td_parser (::xhtml::td_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    tr_pskel ();

    // Implementation details.
    //
    protected:
    tr_pskel* tr_impl_;
    tr_pskel (tr_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
    ::xhtml::th_pskel* th_parser_;
    ::xhtml::td_pskel* td_parser_;

    public:
    struct v_state_descr_
    {
      void (::xhtml::tr_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
  };

  class th_pskel: public ::xhtml::Flow_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    abbr1 ();

    virtual void
    axis (const ::std::string&);

    virtual void
    headers (::xml_schema::string_sequence*);

    virtual void
    scope ();

    virtual void
    rowspan ();

    virtual void
    colspan ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    virtual void
    post_th ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::Text_pskel& /* abbr */,
             ::xml_schema::any_simple_type_pskel& /* axis */,
             ::xml_schema::idrefs_pskel& /* headers */,
             ::xhtml::Scope_pskel& /* scope */,
             ::xhtml::Number_pskel& /* rowspan */,
             ::xhtml::Number_pskel& /* colspan */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    abbr1_parser (::xhtml::Text_pskel&);

    void
    axis_parser (::xml_schema::any_simple_type_pskel&);

    void
    headers_parser (::xml_schema::idrefs_pskel&);

    void
    scope_parser (::xhtml::Scope_pskel&);

    void
    rowspan_parser (::xhtml::Number_pskel&);

    void
    colspan_parser (::xhtml::Number_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    th_pskel (::xhtml::Flow_pskel* tiein);

    // Implementation details.
    //
    protected:
    th_pskel* th_impl_;
    th_pskel (th_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::Text_pskel* abbr1_parser_;
    ::xml_schema::any_simple_type_pskel* axis_parser_;
    ::xml_schema::idrefs_pskel* headers_parser_;
    ::xhtml::Scope_pskel* scope_parser_;
    ::xhtml::Number_pskel* rowspan_parser_;
    ::xhtml::Number_pskel* colspan_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
  };

  class td_pskel: public ::xhtml::Flow_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    virtual void
    class_ (::xml_schema::string_sequence*);

    virtual void
    style ();

    virtual void
    title ();

    virtual void
    lang ();

    virtual void
    lang1 ();

    virtual void
    dir ();

    virtual void
    abbr1 ();

    virtual void
    axis (const ::std::string&);

    virtual void
    headers (::xml_schema::string_sequence*);

    virtual void
    scope ();

    virtual void
    rowspan ();

    virtual void
    colspan ();

    virtual void
    align ();

    virtual void
    char_ ();

    virtual void
    charoff ();

    virtual void
    valign ();

    virtual void
    post_td ();

    // Parser construction API.
    //
    void
    parsers (::xhtml::p_pskel& /* p */,
             ::xhtml::h1_pskel& /* h1 */,
             ::xhtml::h2_pskel& /* h2 */,
             ::xhtml::h3_pskel& /* h3 */,
             ::xhtml::h4_pskel& /* h4 */,
             ::xhtml::h5_pskel& /* h5 */,
             ::xhtml::h6_pskel& /* h6 */,
             ::xhtml::div_pskel& /* div */,
             ::xhtml::ul_pskel& /* ul */,
             ::xhtml::ol_pskel& /* ol */,
             ::xhtml::dl_pskel& /* dl */,
             ::xhtml::pre_pskel& /* pre */,
             ::xhtml::hr_pskel& /* hr */,
             ::xhtml::blockquote_pskel& /* blockquote */,
             ::xhtml::address_pskel& /* address */,
             ::xhtml::table_pskel& /* table */,
             ::xhtml::a_pskel& /* a */,
             ::xhtml::br_pskel& /* br */,
             ::xhtml::span_pskel& /* span */,
             ::xhtml::bdo_pskel& /* bdo */,
             ::xhtml::map_pskel& /* map */,
             ::xhtml::img_pskel& /* img */,
             ::xhtml::tt_pskel& /* tt */,
             ::xhtml::i_pskel& /* i */,
             ::xhtml::b_pskel& /* b */,
             ::xhtml::big_pskel& /* big */,
             ::xhtml::small_pskel& /* small */,
             ::xhtml::em_pskel& /* em */,
             ::xhtml::strong_pskel& /* strong */,
             ::xhtml::dfn_pskel& /* dfn */,
             ::xhtml::code_pskel& /* code */,
             ::xhtml::q_pskel& /* q */,
             ::xhtml::samp_pskel& /* samp */,
             ::xhtml::kbd_pskel& /* kbd */,
             ::xhtml::var_pskel& /* var */,
             ::xhtml::cite_pskel& /* cite */,
             ::xhtml::abbr_pskel& /* abbr */,
             ::xhtml::acronym_pskel& /* acronym */,
             ::xhtml::sub_pskel& /* sub */,
             ::xhtml::sup_pskel& /* sup */,
             ::xml_schema::id_pskel& /* id */,
             ::xml_schema::nmtokens_pskel& /* class */,
             ::xhtml::StyleSheet_pskel& /* style */,
             ::xhtml::Text_pskel& /* title */,
             ::xhtml::LanguageCode_pskel& /* lang */,
             ::namespace_::lang_pskel& /* lang */,
             ::xhtml::dir_pskel& /* dir */,
             ::xhtml::Text_pskel& /* abbr */,
             ::xml_schema::any_simple_type_pskel& /* axis */,
             ::xml_schema::idrefs_pskel& /* headers */,
             ::xhtml::Scope_pskel& /* scope */,
             ::xhtml::Number_pskel& /* rowspan */,
             ::xhtml::Number_pskel& /* colspan */,
             ::xhtml::align_pskel& /* align */,
             ::xhtml::Character_pskel& /* char */,
             ::xhtml::Length_pskel& /* charoff */,
             ::xhtml::valign_pskel& /* valign */);

    // Individual attribute parsers.
    //
    void
    id_parser (::xml_schema::id_pskel&);

    void
    class__parser (::xml_schema::nmtokens_pskel&);

    void
    style_parser (::xhtml::StyleSheet_pskel&);

    void
    title_parser (::xhtml::Text_pskel&);

    void
    lang_parser (::xhtml::LanguageCode_pskel&);

    void
    lang1_parser (::namespace_::lang_pskel&);

    void
    dir_parser (::xhtml::dir_pskel&);

    void
    abbr1_parser (::xhtml::Text_pskel&);

    void
    axis_parser (::xml_schema::any_simple_type_pskel&);

    void
    headers_parser (::xml_schema::idrefs_pskel&);

    void
    scope_parser (::xhtml::Scope_pskel&);

    void
    rowspan_parser (::xhtml::Number_pskel&);

    void
    colspan_parser (::xhtml::Number_pskel&);

    void
    align_parser (::xhtml::align_pskel&);

    void
    char__parser (::xhtml::Character_pskel&);

    void
    charoff_parser (::xhtml::Length_pskel&);

    void
    valign_parser (::xhtml::valign_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    td_pskel (::xhtml::Flow_pskel* tiein);

    // Implementation details.
    //
    protected:
    td_pskel* td_impl_;
    td_pskel (td_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::id_pskel* id_parser_;
    ::xml_schema::nmtokens_pskel* class__parser_;
    ::xhtml::StyleSheet_pskel* style_parser_;
    ::xhtml::Text_pskel* title_parser_;
    ::xhtml::LanguageCode_pskel* lang_parser_;
    ::namespace_::lang_pskel* lang1_parser_;
    ::xhtml::dir_pskel* dir_parser_;
    ::xhtml::Text_pskel* abbr1_parser_;
    ::xml_schema::any_simple_type_pskel* axis_parser_;
    ::xml_schema::idrefs_pskel* headers_parser_;
    ::xhtml::Scope_pskel* scope_parser_;
    ::xhtml::Number_pskel* rowspan_parser_;
    ::xhtml::Number_pskel* colspan_parser_;
    ::xhtml::align_pskel* align_parser_;
    ::xhtml::Character_pskel* char__parser_;
    ::xhtml::Length_pskel* charoff_parser_;
    ::xhtml::valign_pskel* valign_parser_;
  };

  class ismap_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ismap ();

    // Constructor.
    //
    ismap_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    ismap_pskel* ismap_impl_;
    ismap_pskel (ismap_pskel*, void*);

    protected:
    static const char* const _xsde_ismap_pskel_enums_[1UL];
  };

  class nohref_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_nohref ();

    // Constructor.
    //
    nohref_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    nohref_pskel* nohref_impl_;
    nohref_pskel (nohref_pskel*, void*);

    protected:
    static const char* const _xsde_nohref_pskel_enums_[1UL];
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // FHIR_XHTML_PSKEL_HXX
