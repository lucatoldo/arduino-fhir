// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "codesystem-pskel.hxx"

namespace fhir
{
  // CodeSystem_pskel
  //

  void CodeSystem_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void CodeSystem_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void CodeSystem_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void CodeSystem_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void CodeSystem_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void CodeSystem_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void CodeSystem_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void CodeSystem_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void CodeSystem_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void CodeSystem_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void CodeSystem_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void CodeSystem_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void CodeSystem_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void CodeSystem_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void CodeSystem_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void CodeSystem_pskel::
  caseSensitive_parser (::fhir::boolean_pskel& p)
  {
    this->caseSensitive_parser_ = &p;
  }

  void CodeSystem_pskel::
  valueSet_parser (::fhir::canonical_pskel& p)
  {
    this->valueSet_parser_ = &p;
  }

  void CodeSystem_pskel::
  hierarchyMeaning_parser (::fhir::CodeSystemHierarchyMeaning_pskel& p)
  {
    this->hierarchyMeaning_parser_ = &p;
  }

  void CodeSystem_pskel::
  compositional_parser (::fhir::boolean_pskel& p)
  {
    this->compositional_parser_ = &p;
  }

  void CodeSystem_pskel::
  versionNeeded_parser (::fhir::boolean_pskel& p)
  {
    this->versionNeeded_parser_ = &p;
  }

  void CodeSystem_pskel::
  content_parser (::fhir::CodeSystemContentMode_pskel& p)
  {
    this->content_parser_ = &p;
  }

  void CodeSystem_pskel::
  supplements_parser (::fhir::canonical_pskel& p)
  {
    this->supplements_parser_ = &p;
  }

  void CodeSystem_pskel::
  count_parser (::fhir::unsignedInt_pskel& p)
  {
    this->count_parser_ = &p;
  }

  void CodeSystem_pskel::
  filter_parser (::fhir::CodeSystem_Filter_pskel& p)
  {
    this->filter_parser_ = &p;
  }

  void CodeSystem_pskel::
  property_parser (::fhir::CodeSystem_Property_pskel& p)
  {
    this->property_parser_ = &p;
  }

  void CodeSystem_pskel::
  concept_parser (::fhir::CodeSystem_Concept_pskel& p)
  {
    this->concept_parser_ = &p;
  }

  void CodeSystem_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::markdown_pskel& copyright,
           ::fhir::boolean_pskel& caseSensitive,
           ::fhir::canonical_pskel& valueSet,
           ::fhir::CodeSystemHierarchyMeaning_pskel& hierarchyMeaning,
           ::fhir::boolean_pskel& compositional,
           ::fhir::boolean_pskel& versionNeeded,
           ::fhir::CodeSystemContentMode_pskel& content,
           ::fhir::canonical_pskel& supplements,
           ::fhir::unsignedInt_pskel& count,
           ::fhir::CodeSystem_Filter_pskel& filter,
           ::fhir::CodeSystem_Property_pskel& property,
           ::fhir::CodeSystem_Concept_pskel& concept)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->copyright_parser_ = &copyright;
    this->caseSensitive_parser_ = &caseSensitive;
    this->valueSet_parser_ = &valueSet;
    this->hierarchyMeaning_parser_ = &hierarchyMeaning;
    this->compositional_parser_ = &compositional;
    this->versionNeeded_parser_ = &versionNeeded;
    this->content_parser_ = &content;
    this->supplements_parser_ = &supplements;
    this->count_parser_ = &count;
    this->filter_parser_ = &filter;
    this->property_parser_ = &property;
    this->concept_parser_ = &concept;
  }

  CodeSystem_pskel::
  CodeSystem_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    CodeSystem_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    caseSensitive_parser_ (0),
    valueSet_parser_ (0),
    hierarchyMeaning_parser_ (0),
    compositional_parser_ (0),
    versionNeeded_parser_ (0),
    content_parser_ (0),
    supplements_parser_ (0),
    count_parser_ (0),
    filter_parser_ (0),
    property_parser_ (0),
    concept_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CodeSystem_pskel::
  CodeSystem_pskel (CodeSystem_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    CodeSystem_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    caseSensitive_parser_ (0),
    valueSet_parser_ (0),
    hierarchyMeaning_parser_ (0),
    compositional_parser_ (0),
    versionNeeded_parser_ (0),
    content_parser_ (0),
    supplements_parser_ (0),
    count_parser_ (0),
    filter_parser_ (0),
    property_parser_ (0),
    concept_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CodeSystem_Filter_pskel
  //

  void CodeSystem_Filter_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void CodeSystem_Filter_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void CodeSystem_Filter_pskel::
  operator__parser (::fhir::FilterOperator_pskel& p)
  {
    this->operator__parser_ = &p;
  }

  void CodeSystem_Filter_pskel::
  value_parser (::fhir::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CodeSystem_Filter_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::string_pskel& description,
           ::fhir::FilterOperator_pskel& operator_,
           ::fhir::string_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->description_parser_ = &description;
    this->operator__parser_ = &operator_;
    this->value_parser_ = &value;
  }

  CodeSystem_Filter_pskel::
  CodeSystem_Filter_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CodeSystem_Filter_impl_ (0),
    code_parser_ (0),
    description_parser_ (0),
    operator__parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CodeSystem_Filter_pskel::
  CodeSystem_Filter_pskel (CodeSystem_Filter_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CodeSystem_Filter_impl_ (impl),
    code_parser_ (0),
    description_parser_ (0),
    operator__parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CodeSystem_Property_pskel
  //

  void CodeSystem_Property_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void CodeSystem_Property_pskel::
  uri_parser (::fhir::uri_pskel& p)
  {
    this->uri_parser_ = &p;
  }

  void CodeSystem_Property_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void CodeSystem_Property_pskel::
  type_parser (::fhir::PropertyType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void CodeSystem_Property_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::uri_pskel& uri,
           ::fhir::string_pskel& description,
           ::fhir::PropertyType_pskel& type)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->uri_parser_ = &uri;
    this->description_parser_ = &description;
    this->type_parser_ = &type;
  }

  CodeSystem_Property_pskel::
  CodeSystem_Property_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CodeSystem_Property_impl_ (0),
    code_parser_ (0),
    uri_parser_ (0),
    description_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CodeSystem_Property_pskel::
  CodeSystem_Property_pskel (CodeSystem_Property_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CodeSystem_Property_impl_ (impl),
    code_parser_ (0),
    uri_parser_ (0),
    description_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CodeSystem_Concept_pskel
  //

  void CodeSystem_Concept_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void CodeSystem_Concept_pskel::
  display_parser (::fhir::string_pskel& p)
  {
    this->display_parser_ = &p;
  }

  void CodeSystem_Concept_pskel::
  definition_parser (::fhir::string_pskel& p)
  {
    this->definition_parser_ = &p;
  }

  void CodeSystem_Concept_pskel::
  designation_parser (::fhir::CodeSystem_Designation_pskel& p)
  {
    this->designation_parser_ = &p;
  }

  void CodeSystem_Concept_pskel::
  property_parser (::fhir::CodeSystem_Property1_pskel& p)
  {
    this->property_parser_ = &p;
  }

  void CodeSystem_Concept_pskel::
  concept_parser (::fhir::CodeSystem_Concept_pskel& p)
  {
    this->concept_parser_ = &p;
  }

  void CodeSystem_Concept_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::string_pskel& display,
           ::fhir::string_pskel& definition,
           ::fhir::CodeSystem_Designation_pskel& designation,
           ::fhir::CodeSystem_Property1_pskel& property,
           ::fhir::CodeSystem_Concept_pskel& concept)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->display_parser_ = &display;
    this->definition_parser_ = &definition;
    this->designation_parser_ = &designation;
    this->property_parser_ = &property;
    this->concept_parser_ = &concept;
  }

  CodeSystem_Concept_pskel::
  CodeSystem_Concept_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CodeSystem_Concept_impl_ (0),
    code_parser_ (0),
    display_parser_ (0),
    definition_parser_ (0),
    designation_parser_ (0),
    property_parser_ (0),
    concept_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CodeSystem_Concept_pskel::
  CodeSystem_Concept_pskel (CodeSystem_Concept_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CodeSystem_Concept_impl_ (impl),
    code_parser_ (0),
    display_parser_ (0),
    definition_parser_ (0),
    designation_parser_ (0),
    property_parser_ (0),
    concept_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CodeSystem_Designation_pskel
  //

  void CodeSystem_Designation_pskel::
  language_parser (::fhir::code_pskel& p)
  {
    this->language_parser_ = &p;
  }

  void CodeSystem_Designation_pskel::
  use_parser (::fhir::Coding_pskel& p)
  {
    this->use_parser_ = &p;
  }

  void CodeSystem_Designation_pskel::
  value_parser (::fhir::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CodeSystem_Designation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& language,
           ::fhir::Coding_pskel& use,
           ::fhir::string_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->language_parser_ = &language;
    this->use_parser_ = &use;
    this->value_parser_ = &value;
  }

  CodeSystem_Designation_pskel::
  CodeSystem_Designation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CodeSystem_Designation_impl_ (0),
    language_parser_ (0),
    use_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CodeSystem_Designation_pskel::
  CodeSystem_Designation_pskel (CodeSystem_Designation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CodeSystem_Designation_impl_ (impl),
    language_parser_ (0),
    use_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CodeSystem_Property1_pskel
  //

  void CodeSystem_Property1_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  valueCode_parser (::fhir::code_pskel& p)
  {
    this->valueCode_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  valueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->valueCoding_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  valueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->valueDecimal_parser_ = &p;
  }

  void CodeSystem_Property1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::code_pskel& valueCode,
           ::fhir::Coding_pskel& valueCoding,
           ::fhir::string_pskel& valueString,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::decimal_pskel& valueDecimal)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->valueCode_parser_ = &valueCode;
    this->valueCoding_parser_ = &valueCoding;
    this->valueString_parser_ = &valueString;
    this->valueInteger_parser_ = &valueInteger;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valueDecimal_parser_ = &valueDecimal;
  }

  CodeSystem_Property1_pskel::
  CodeSystem_Property1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CodeSystem_Property1_impl_ (0),
    code_parser_ (0),
    valueCode_parser_ (0),
    valueCoding_parser_ (0),
    valueString_parser_ (0),
    valueInteger_parser_ (0),
    valueBoolean_parser_ (0),
    valueDateTime_parser_ (0),
    valueDecimal_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CodeSystem_Property1_pskel::
  CodeSystem_Property1_pskel (CodeSystem_Property1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CodeSystem_Property1_impl_ (impl),
    code_parser_ (0),
    valueCode_parser_ (0),
    valueCoding_parser_ (0),
    valueString_parser_ (0),
    valueInteger_parser_ (0),
    valueBoolean_parser_ (0),
    valueDateTime_parser_ (0),
    valueDecimal_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // FilterOperator_list_pskel
  //

  FilterOperator_list_pskel::
  FilterOperator_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    FilterOperator_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_FilterOperator_list_pskel_enums_, 9UL);
  }

  FilterOperator_list_pskel::
  FilterOperator_list_pskel (FilterOperator_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    FilterOperator_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_FilterOperator_list_pskel_enums_, 9UL);
  }

  // FilterOperator_pskel
  //

  void FilterOperator_pskel::
  value_parser (::fhir::FilterOperator_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void FilterOperator_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::FilterOperator_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  FilterOperator_pskel::
  FilterOperator_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    FilterOperator_impl_ (0),
    value_parser_ (0)
  {
  }

  FilterOperator_pskel::
  FilterOperator_pskel (FilterOperator_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    FilterOperator_impl_ (impl),
    value_parser_ (0)
  {
  }

  // PropertyType_list_pskel
  //

  PropertyType_list_pskel::
  PropertyType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    PropertyType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_PropertyType_list_pskel_enums_, 7UL);
  }

  PropertyType_list_pskel::
  PropertyType_list_pskel (PropertyType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    PropertyType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_PropertyType_list_pskel_enums_, 7UL);
  }

  // PropertyType_pskel
  //

  void PropertyType_pskel::
  value_parser (::fhir::PropertyType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void PropertyType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::PropertyType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  PropertyType_pskel::
  PropertyType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    PropertyType_impl_ (0),
    value_parser_ (0)
  {
  }

  PropertyType_pskel::
  PropertyType_pskel (PropertyType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    PropertyType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // CodeSystemHierarchyMeaning_list_pskel
  //

  CodeSystemHierarchyMeaning_list_pskel::
  CodeSystemHierarchyMeaning_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CodeSystemHierarchyMeaning_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CodeSystemHierarchyMeaning_list_pskel_enums_, 4UL);
  }

  CodeSystemHierarchyMeaning_list_pskel::
  CodeSystemHierarchyMeaning_list_pskel (CodeSystemHierarchyMeaning_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CodeSystemHierarchyMeaning_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CodeSystemHierarchyMeaning_list_pskel_enums_, 4UL);
  }

  // CodeSystemHierarchyMeaning_pskel
  //

  void CodeSystemHierarchyMeaning_pskel::
  value_parser (::fhir::CodeSystemHierarchyMeaning_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CodeSystemHierarchyMeaning_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CodeSystemHierarchyMeaning_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CodeSystemHierarchyMeaning_pskel::
  CodeSystemHierarchyMeaning_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CodeSystemHierarchyMeaning_impl_ (0),
    value_parser_ (0)
  {
  }

  CodeSystemHierarchyMeaning_pskel::
  CodeSystemHierarchyMeaning_pskel (CodeSystemHierarchyMeaning_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CodeSystemHierarchyMeaning_impl_ (impl),
    value_parser_ (0)
  {
  }

  // CodeSystemContentMode_list_pskel
  //

  CodeSystemContentMode_list_pskel::
  CodeSystemContentMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CodeSystemContentMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CodeSystemContentMode_list_pskel_enums_, 5UL);
  }

  CodeSystemContentMode_list_pskel::
  CodeSystemContentMode_list_pskel (CodeSystemContentMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CodeSystemContentMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CodeSystemContentMode_list_pskel_enums_, 5UL);
  }

  // CodeSystemContentMode_pskel
  //

  void CodeSystemContentMode_pskel::
  value_parser (::fhir::CodeSystemContentMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CodeSystemContentMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CodeSystemContentMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CodeSystemContentMode_pskel::
  CodeSystemContentMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CodeSystemContentMode_impl_ (0),
    value_parser_ (0)
  {
  }

  CodeSystemContentMode_pskel::
  CodeSystemContentMode_pskel (CodeSystemContentMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CodeSystemContentMode_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // CodeSystem_pskel
  //

  void CodeSystem_pskel::
  url ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->url ();
  }

  void CodeSystem_pskel::
  identifier ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->identifier ();
  }

  void CodeSystem_pskel::
  version ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->version ();
  }

  void CodeSystem_pskel::
  name ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->name ();
  }

  void CodeSystem_pskel::
  title ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->title ();
  }

  void CodeSystem_pskel::
  status ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->status ();
  }

  void CodeSystem_pskel::
  experimental ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->experimental ();
  }

  void CodeSystem_pskel::
  date ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->date ();
  }

  void CodeSystem_pskel::
  publisher ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->publisher ();
  }

  void CodeSystem_pskel::
  contact ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->contact ();
  }

  void CodeSystem_pskel::
  description ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->description ();
  }

  void CodeSystem_pskel::
  useContext ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->useContext ();
  }

  void CodeSystem_pskel::
  jurisdiction ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->jurisdiction ();
  }

  void CodeSystem_pskel::
  purpose ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->purpose ();
  }

  void CodeSystem_pskel::
  copyright ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->copyright ();
  }

  void CodeSystem_pskel::
  caseSensitive ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->caseSensitive ();
  }

  void CodeSystem_pskel::
  valueSet ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->valueSet ();
  }

  void CodeSystem_pskel::
  hierarchyMeaning ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->hierarchyMeaning ();
  }

  void CodeSystem_pskel::
  compositional ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->compositional ();
  }

  void CodeSystem_pskel::
  versionNeeded ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->versionNeeded ();
  }

  void CodeSystem_pskel::
  content ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->content ();
  }

  void CodeSystem_pskel::
  supplements ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->supplements ();
  }

  void CodeSystem_pskel::
  count ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->count ();
  }

  void CodeSystem_pskel::
  filter ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->filter ();
  }

  void CodeSystem_pskel::
  property ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->property ();
  }

  void CodeSystem_pskel::
  concept ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->concept ();
  }

  void CodeSystem_pskel::
  post_CodeSystem ()
  {
    if (this->CodeSystem_impl_)
      this->CodeSystem_impl_->post_CodeSystem ();
    else
      post_DomainResource ();
  }

  void CodeSystem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->caseSensitive_parser_)
      this->caseSensitive_parser_->_reset ();

    if (this->valueSet_parser_)
      this->valueSet_parser_->_reset ();

    if (this->hierarchyMeaning_parser_)
      this->hierarchyMeaning_parser_->_reset ();

    if (this->compositional_parser_)
      this->compositional_parser_->_reset ();

    if (this->versionNeeded_parser_)
      this->versionNeeded_parser_->_reset ();

    if (this->content_parser_)
      this->content_parser_->_reset ();

    if (this->supplements_parser_)
      this->supplements_parser_->_reset ();

    if (this->count_parser_)
      this->count_parser_->_reset ();

    if (this->filter_parser_)
      this->filter_parser_->_reset ();

    if (this->property_parser_)
      this->property_parser_->_reset ();

    if (this->concept_parser_)
      this->concept_parser_->_reset ();

    this->resetting_ = false;
  }

  // CodeSystem_Filter_pskel
  //

  void CodeSystem_Filter_pskel::
  code ()
  {
    if (this->CodeSystem_Filter_impl_)
      this->CodeSystem_Filter_impl_->code ();
  }

  void CodeSystem_Filter_pskel::
  description ()
  {
    if (this->CodeSystem_Filter_impl_)
      this->CodeSystem_Filter_impl_->description ();
  }

  void CodeSystem_Filter_pskel::
  operator_ ()
  {
    if (this->CodeSystem_Filter_impl_)
      this->CodeSystem_Filter_impl_->operator_ ();
  }

  void CodeSystem_Filter_pskel::
  value ()
  {
    if (this->CodeSystem_Filter_impl_)
      this->CodeSystem_Filter_impl_->value ();
  }

  void CodeSystem_Filter_pskel::
  post_CodeSystem_Filter ()
  {
    if (this->CodeSystem_Filter_impl_)
      this->CodeSystem_Filter_impl_->post_CodeSystem_Filter ();
    else
      post_BackboneElement ();
  }

  void CodeSystem_Filter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->operator__parser_)
      this->operator__parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }

  // CodeSystem_Property_pskel
  //

  void CodeSystem_Property_pskel::
  code ()
  {
    if (this->CodeSystem_Property_impl_)
      this->CodeSystem_Property_impl_->code ();
  }

  void CodeSystem_Property_pskel::
  uri ()
  {
    if (this->CodeSystem_Property_impl_)
      this->CodeSystem_Property_impl_->uri ();
  }

  void CodeSystem_Property_pskel::
  description ()
  {
    if (this->CodeSystem_Property_impl_)
      this->CodeSystem_Property_impl_->description ();
  }

  void CodeSystem_Property_pskel::
  type ()
  {
    if (this->CodeSystem_Property_impl_)
      this->CodeSystem_Property_impl_->type ();
  }

  void CodeSystem_Property_pskel::
  post_CodeSystem_Property ()
  {
    if (this->CodeSystem_Property_impl_)
      this->CodeSystem_Property_impl_->post_CodeSystem_Property ();
    else
      post_BackboneElement ();
  }

  void CodeSystem_Property_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->uri_parser_)
      this->uri_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = false;
  }

  // CodeSystem_Concept_pskel
  //

  void CodeSystem_Concept_pskel::
  code ()
  {
    if (this->CodeSystem_Concept_impl_)
      this->CodeSystem_Concept_impl_->code ();
  }

  void CodeSystem_Concept_pskel::
  display ()
  {
    if (this->CodeSystem_Concept_impl_)
      this->CodeSystem_Concept_impl_->display ();
  }

  void CodeSystem_Concept_pskel::
  definition ()
  {
    if (this->CodeSystem_Concept_impl_)
      this->CodeSystem_Concept_impl_->definition ();
  }

  void CodeSystem_Concept_pskel::
  designation ()
  {
    if (this->CodeSystem_Concept_impl_)
      this->CodeSystem_Concept_impl_->designation ();
  }

  void CodeSystem_Concept_pskel::
  property ()
  {
    if (this->CodeSystem_Concept_impl_)
      this->CodeSystem_Concept_impl_->property ();
  }

  void CodeSystem_Concept_pskel::
  concept ()
  {
    if (this->CodeSystem_Concept_impl_)
      this->CodeSystem_Concept_impl_->concept ();
  }

  void CodeSystem_Concept_pskel::
  post_CodeSystem_Concept ()
  {
    if (this->CodeSystem_Concept_impl_)
      this->CodeSystem_Concept_impl_->post_CodeSystem_Concept ();
    else
      post_BackboneElement ();
  }

  void CodeSystem_Concept_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->display_parser_)
      this->display_parser_->_reset ();

    if (this->definition_parser_)
      this->definition_parser_->_reset ();

    if (this->designation_parser_)
      this->designation_parser_->_reset ();

    if (this->property_parser_)
      this->property_parser_->_reset ();

    if (this->concept_parser_)
      this->concept_parser_->_reset ();

    this->resetting_ = false;
  }

  // CodeSystem_Designation_pskel
  //

  void CodeSystem_Designation_pskel::
  language ()
  {
    if (this->CodeSystem_Designation_impl_)
      this->CodeSystem_Designation_impl_->language ();
  }

  void CodeSystem_Designation_pskel::
  use ()
  {
    if (this->CodeSystem_Designation_impl_)
      this->CodeSystem_Designation_impl_->use ();
  }

  void CodeSystem_Designation_pskel::
  value ()
  {
    if (this->CodeSystem_Designation_impl_)
      this->CodeSystem_Designation_impl_->value ();
  }

  void CodeSystem_Designation_pskel::
  post_CodeSystem_Designation ()
  {
    if (this->CodeSystem_Designation_impl_)
      this->CodeSystem_Designation_impl_->post_CodeSystem_Designation ();
    else
      post_BackboneElement ();
  }

  void CodeSystem_Designation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->language_parser_)
      this->language_parser_->_reset ();

    if (this->use_parser_)
      this->use_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }

  // CodeSystem_Property1_pskel
  //

  void CodeSystem_Property1_pskel::
  code ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->code ();
  }

  void CodeSystem_Property1_pskel::
  valueCode ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->valueCode ();
  }

  void CodeSystem_Property1_pskel::
  valueCoding ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->valueCoding ();
  }

  void CodeSystem_Property1_pskel::
  valueString ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->valueString ();
  }

  void CodeSystem_Property1_pskel::
  valueInteger ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->valueInteger ();
  }

  void CodeSystem_Property1_pskel::
  valueBoolean ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->valueBoolean ();
  }

  void CodeSystem_Property1_pskel::
  valueDateTime ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->valueDateTime ();
  }

  void CodeSystem_Property1_pskel::
  valueDecimal ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->valueDecimal ();
  }

  void CodeSystem_Property1_pskel::
  post_CodeSystem_Property1 ()
  {
    if (this->CodeSystem_Property1_impl_)
      this->CodeSystem_Property1_impl_->post_CodeSystem_Property1 ();
    else
      post_BackboneElement ();
  }

  void CodeSystem_Property1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->valueCode_parser_)
      this->valueCode_parser_->_reset ();

    if (this->valueCoding_parser_)
      this->valueCoding_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valueDecimal_parser_)
      this->valueDecimal_parser_->_reset ();

    this->resetting_ = false;
  }

  // FilterOperator_list_pskel
  //

  void FilterOperator_list_pskel::
  post_FilterOperator_list ()
  {
    if (this->FilterOperator_list_impl_)
      this->FilterOperator_list_impl_->post_FilterOperator_list ();
    else
      post_code_primitive ();
  }

  const char* const FilterOperator_list_pskel::_xsde_FilterOperator_list_pskel_enums_[9UL] = 
  {
    "=",
    "descendent-of",
    "exists",
    "generalizes",
    "in",
    "is-a",
    "is-not-a",
    "not-in",
    "regex"
  };

  // FilterOperator_pskel
  //

  void FilterOperator_pskel::
  value ()
  {
    if (this->FilterOperator_impl_)
      this->FilterOperator_impl_->value ();
  }

  void FilterOperator_pskel::
  post_FilterOperator ()
  {
    if (this->FilterOperator_impl_)
      this->FilterOperator_impl_->post_FilterOperator ();
    else
      post_Element ();
  }

  void FilterOperator_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // PropertyType_list_pskel
  //

  void PropertyType_list_pskel::
  post_PropertyType_list ()
  {
    if (this->PropertyType_list_impl_)
      this->PropertyType_list_impl_->post_PropertyType_list ();
    else
      post_code_primitive ();
  }

  const char* const PropertyType_list_pskel::_xsde_PropertyType_list_pskel_enums_[7UL] = 
  {
    "Coding",
    "boolean",
    "code",
    "dateTime",
    "decimal",
    "integer",
    "string"
  };

  // PropertyType_pskel
  //

  void PropertyType_pskel::
  value ()
  {
    if (this->PropertyType_impl_)
      this->PropertyType_impl_->value ();
  }

  void PropertyType_pskel::
  post_PropertyType ()
  {
    if (this->PropertyType_impl_)
      this->PropertyType_impl_->post_PropertyType ();
    else
      post_Element ();
  }

  void PropertyType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // CodeSystemHierarchyMeaning_list_pskel
  //

  void CodeSystemHierarchyMeaning_list_pskel::
  post_CodeSystemHierarchyMeaning_list ()
  {
    if (this->CodeSystemHierarchyMeaning_list_impl_)
      this->CodeSystemHierarchyMeaning_list_impl_->post_CodeSystemHierarchyMeaning_list ();
    else
      post_code_primitive ();
  }

  const char* const CodeSystemHierarchyMeaning_list_pskel::_xsde_CodeSystemHierarchyMeaning_list_pskel_enums_[4UL] = 
  {
    "classified-with",
    "grouped-by",
    "is-a",
    "part-of"
  };

  // CodeSystemHierarchyMeaning_pskel
  //

  void CodeSystemHierarchyMeaning_pskel::
  value ()
  {
    if (this->CodeSystemHierarchyMeaning_impl_)
      this->CodeSystemHierarchyMeaning_impl_->value ();
  }

  void CodeSystemHierarchyMeaning_pskel::
  post_CodeSystemHierarchyMeaning ()
  {
    if (this->CodeSystemHierarchyMeaning_impl_)
      this->CodeSystemHierarchyMeaning_impl_->post_CodeSystemHierarchyMeaning ();
    else
      post_Element ();
  }

  void CodeSystemHierarchyMeaning_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // CodeSystemContentMode_list_pskel
  //

  void CodeSystemContentMode_list_pskel::
  post_CodeSystemContentMode_list ()
  {
    if (this->CodeSystemContentMode_list_impl_)
      this->CodeSystemContentMode_list_impl_->post_CodeSystemContentMode_list ();
    else
      post_code_primitive ();
  }

  const char* const CodeSystemContentMode_list_pskel::_xsde_CodeSystemContentMode_list_pskel_enums_[5UL] = 
  {
    "complete",
    "example",
    "fragment",
    "not-present",
    "supplement"
  };

  // CodeSystemContentMode_pskel
  //

  void CodeSystemContentMode_pskel::
  value ()
  {
    if (this->CodeSystemContentMode_impl_)
      this->CodeSystemContentMode_impl_->value ();
  }

  void CodeSystemContentMode_pskel::
  post_CodeSystemContentMode ()
  {
    if (this->CodeSystemContentMode_impl_)
      this->CodeSystemContentMode_impl_->post_CodeSystemContentMode ();
    else
      post_Element ();
  }

  void CodeSystemContentMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for CodeSystem_pskel.
  //
  bool CodeSystem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CodeSystem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CodeSystem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CodeSystem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void CodeSystem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CodeSystem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "caseSensitive" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->caseSensitive_parser_)
            {
              this->caseSensitive_parser_->pre ();
              ctx.nested_parser (this->caseSensitive_parser_);
            }
          }
          else
          {
            if (this->caseSensitive_parser_ != 0)
            {
              this->caseSensitive_parser_->post_boolean ();
              this->caseSensitive ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "valueSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSet_parser_)
            {
              this->valueSet_parser_->pre ();
              ctx.nested_parser (this->valueSet_parser_);
            }
          }
          else
          {
            if (this->valueSet_parser_ != 0)
            {
              this->valueSet_parser_->post_canonical ();
              this->valueSet ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "hierarchyMeaning" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->hierarchyMeaning_parser_)
            {
              this->hierarchyMeaning_parser_->pre ();
              ctx.nested_parser (this->hierarchyMeaning_parser_);
            }
          }
          else
          {
            if (this->hierarchyMeaning_parser_ != 0)
            {
              this->hierarchyMeaning_parser_->post_CodeSystemHierarchyMeaning ();
              this->hierarchyMeaning ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "compositional" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->compositional_parser_)
            {
              this->compositional_parser_->pre ();
              ctx.nested_parser (this->compositional_parser_);
            }
          }
          else
          {
            if (this->compositional_parser_ != 0)
            {
              this->compositional_parser_->post_boolean ();
              this->compositional ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "versionNeeded" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->versionNeeded_parser_)
            {
              this->versionNeeded_parser_->pre ();
              ctx.nested_parser (this->versionNeeded_parser_);
            }
          }
          else
          {
            if (this->versionNeeded_parser_ != 0)
            {
              this->versionNeeded_parser_->post_boolean ();
              this->versionNeeded ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "content" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->content_parser_)
            {
              this->content_parser_->pre ();
              ctx.nested_parser (this->content_parser_);
            }
          }
          else
          {
            if (this->content_parser_ != 0)
            {
              this->content_parser_->post_CodeSystemContentMode ();
              this->content ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "supplements" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supplements_parser_)
            {
              this->supplements_parser_->pre ();
              ctx.nested_parser (this->supplements_parser_);
            }
          }
          else
          {
            if (this->supplements_parser_ != 0)
            {
              this->supplements_parser_->post_canonical ();
              this->supplements ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "count" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->count_parser_)
            {
              this->count_parser_->pre ();
              ctx.nested_parser (this->count_parser_);
            }
          }
          else
          {
            if (this->count_parser_ != 0)
            {
              this->count_parser_->post_unsignedInt ();
              this->count ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "filter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->filter_parser_)
            {
              this->filter_parser_->pre ();
              ctx.nested_parser (this->filter_parser_);
            }
          }
          else
          {
            if (this->filter_parser_ != 0)
            {
              this->filter_parser_->post_CodeSystem_Filter ();
              this->filter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "property" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->property_parser_)
            {
              this->property_parser_->pre ();
              ctx.nested_parser (this->property_parser_);
            }
          }
          else
          {
            if (this->property_parser_ != 0)
            {
              this->property_parser_->post_CodeSystem_Property ();
              this->property ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "concept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->concept_parser_)
            {
              this->concept_parser_->pre ();
              ctx.nested_parser (this->concept_parser_);
            }
          }
          else
          {
            if (this->concept_parser_ != 0)
            {
              this->concept_parser_->post_CodeSystem_Concept ();
              this->concept ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CodeSystem_Filter_pskel.
  //
  bool CodeSystem_Filter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CodeSystem_Filter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CodeSystem_Filter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CodeSystem_Filter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CodeSystem_Filter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CodeSystem_Filter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "operator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operator__parser_)
            {
              this->operator__parser_->pre ();
              ctx.nested_parser (this->operator__parser_);
            }
          }
          else
          {
            if (this->operator__parser_ != 0)
            {
              this->operator__parser_->post_FilterOperator ();
              this->operator_ ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_string ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CodeSystem_Property_pskel.
  //
  bool CodeSystem_Property_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CodeSystem_Property_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CodeSystem_Property_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CodeSystem_Property_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CodeSystem_Property_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CodeSystem_Property_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uri_parser_)
            {
              this->uri_parser_->pre ();
              ctx.nested_parser (this->uri_parser_);
            }
          }
          else
          {
            if (this->uri_parser_ != 0)
            {
              this->uri_parser_->post_uri ();
              this->uri ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_PropertyType ();
              this->type ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CodeSystem_Concept_pskel.
  //
  bool CodeSystem_Concept_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CodeSystem_Concept_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CodeSystem_Concept_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CodeSystem_Concept_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CodeSystem_Concept_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CodeSystem_Concept_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "display" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->display_parser_)
            {
              this->display_parser_->pre ();
              ctx.nested_parser (this->display_parser_);
            }
          }
          else
          {
            if (this->display_parser_ != 0)
            {
              this->display_parser_->post_string ();
              this->display ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "definition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definition_parser_)
            {
              this->definition_parser_->pre ();
              ctx.nested_parser (this->definition_parser_);
            }
          }
          else
          {
            if (this->definition_parser_ != 0)
            {
              this->definition_parser_->post_string ();
              this->definition ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "designation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->designation_parser_)
            {
              this->designation_parser_->pre ();
              ctx.nested_parser (this->designation_parser_);
            }
          }
          else
          {
            if (this->designation_parser_ != 0)
            {
              this->designation_parser_->post_CodeSystem_Designation ();
              this->designation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "property" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->property_parser_)
            {
              this->property_parser_->pre ();
              ctx.nested_parser (this->property_parser_);
            }
          }
          else
          {
            if (this->property_parser_ != 0)
            {
              this->property_parser_->post_CodeSystem_Property1 ();
              this->property ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "concept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->concept_parser_)
            {
              this->concept_parser_->pre ();
              ctx.nested_parser (this->concept_parser_);
            }
          }
          else
          {
            if (this->concept_parser_ != 0)
            {
              this->concept_parser_->post_CodeSystem_Concept ();
              this->concept ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CodeSystem_Designation_pskel.
  //
  bool CodeSystem_Designation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "language" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "use" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "value" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CodeSystem_Designation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CodeSystem_Designation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CodeSystem_Designation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CodeSystem_Designation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CodeSystem_Designation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "language" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->language_parser_)
            {
              this->language_parser_->pre ();
              ctx.nested_parser (this->language_parser_);
            }
          }
          else
          {
            if (this->language_parser_ != 0)
            {
              this->language_parser_->post_code ();
              this->language ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "use" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->use_parser_)
            {
              this->use_parser_->pre ();
              ctx.nested_parser (this->use_parser_);
            }
          }
          else
          {
            if (this->use_parser_ != 0)
            {
              this->use_parser_->post_Coding ();
              this->use ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_string ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CodeSystem_Property1_pskel.
  //
  bool CodeSystem_Property1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CodeSystem_Property1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CodeSystem_Property1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CodeSystem_Property1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CodeSystem_Property1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CodeSystem_Property1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCode_parser_)
            {
              this->valueCode_parser_->pre ();
              ctx.nested_parser (this->valueCode_parser_);
            }
          }
          else
          {
            if (this->valueCode_parser_ != 0)
            {
              this->valueCode_parser_->post_code ();
              this->valueCode ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCoding_parser_)
            {
              this->valueCoding_parser_->pre ();
              ctx.nested_parser (this->valueCoding_parser_);
            }
          }
          else
          {
            if (this->valueCoding_parser_ != 0)
            {
              this->valueCoding_parser_->post_Coding ();
              this->valueCoding ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDecimal_parser_)
            {
              this->valueDecimal_parser_->pre ();
              ctx.nested_parser (this->valueDecimal_parser_);
            }
          }
          else
          {
            if (this->valueDecimal_parser_ != 0)
            {
              this->valueDecimal_parser_->post_decimal ();
              this->valueDecimal ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for FilterOperator_pskel.
  //
  bool FilterOperator_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_FilterOperator_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for PropertyType_pskel.
  //
  bool PropertyType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_PropertyType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for CodeSystemHierarchyMeaning_pskel.
  //
  bool CodeSystemHierarchyMeaning_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CodeSystemHierarchyMeaning_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for CodeSystemContentMode_pskel.
  //
  bool CodeSystemContentMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CodeSystemContentMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

