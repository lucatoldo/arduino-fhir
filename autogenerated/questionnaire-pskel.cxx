// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "questionnaire-pskel.hxx"

namespace fhir
{
  // Questionnaire_pskel
  //

  void Questionnaire_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void Questionnaire_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Questionnaire_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void Questionnaire_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Questionnaire_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void Questionnaire_pskel::
  derivedFrom_parser (::fhir::canonical_pskel& p)
  {
    this->derivedFrom_parser_ = &p;
  }

  void Questionnaire_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Questionnaire_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void Questionnaire_pskel::
  subjectType_parser (::fhir::code_pskel& p)
  {
    this->subjectType_parser_ = &p;
  }

  void Questionnaire_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void Questionnaire_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void Questionnaire_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void Questionnaire_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Questionnaire_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void Questionnaire_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void Questionnaire_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void Questionnaire_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void Questionnaire_pskel::
  approvalDate_parser (::fhir::date_pskel& p)
  {
    this->approvalDate_parser_ = &p;
  }

  void Questionnaire_pskel::
  lastReviewDate_parser (::fhir::date_pskel& p)
  {
    this->lastReviewDate_parser_ = &p;
  }

  void Questionnaire_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void Questionnaire_pskel::
  code_parser (::fhir::Coding_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Questionnaire_pskel::
  item_parser (::fhir::Questionnaire_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void Questionnaire_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::canonical_pskel& derivedFrom,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::code_pskel& subjectType,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::markdown_pskel& copyright,
           ::fhir::date_pskel& approvalDate,
           ::fhir::date_pskel& lastReviewDate,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::Coding_pskel& code,
           ::fhir::Questionnaire_Item_pskel& item)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->derivedFrom_parser_ = &derivedFrom;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->subjectType_parser_ = &subjectType;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->copyright_parser_ = &copyright;
    this->approvalDate_parser_ = &approvalDate;
    this->lastReviewDate_parser_ = &lastReviewDate;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->code_parser_ = &code;
    this->item_parser_ = &item;
  }

  Questionnaire_pskel::
  Questionnaire_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Questionnaire_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    derivedFrom_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    subjectType_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    code_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Questionnaire_pskel::
  Questionnaire_pskel (Questionnaire_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Questionnaire_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    derivedFrom_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    subjectType_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    code_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Questionnaire_Item_pskel
  //

  void Questionnaire_Item_pskel::
  linkId_parser (::fhir::string_pskel& p)
  {
    this->linkId_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  definition_parser (::fhir::uri_pskel& p)
  {
    this->definition_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  code_parser (::fhir::Coding_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  prefix_parser (::fhir::string_pskel& p)
  {
    this->prefix_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  type_parser (::fhir::QuestionnaireItemType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  enableWhen_parser (::fhir::Questionnaire_EnableWhen_pskel& p)
  {
    this->enableWhen_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  enableBehavior_parser (::fhir::EnableWhenBehavior_pskel& p)
  {
    this->enableBehavior_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  required_parser (::fhir::boolean_pskel& p)
  {
    this->required_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  repeats_parser (::fhir::boolean_pskel& p)
  {
    this->repeats_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  readOnly_parser (::fhir::boolean_pskel& p)
  {
    this->readOnly_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  maxLength_parser (::fhir::integer_pskel& p)
  {
    this->maxLength_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  answerValueSet_parser (::fhir::canonical_pskel& p)
  {
    this->answerValueSet_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  answerOption_parser (::fhir::Questionnaire_AnswerOption_pskel& p)
  {
    this->answerOption_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  initial_parser (::fhir::Questionnaire_Initial_pskel& p)
  {
    this->initial_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  item_parser (::fhir::Questionnaire_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void Questionnaire_Item_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& linkId,
           ::fhir::uri_pskel& definition,
           ::fhir::Coding_pskel& code,
           ::fhir::string_pskel& prefix,
           ::fhir::string_pskel& text,
           ::fhir::QuestionnaireItemType_pskel& type,
           ::fhir::Questionnaire_EnableWhen_pskel& enableWhen,
           ::fhir::EnableWhenBehavior_pskel& enableBehavior,
           ::fhir::boolean_pskel& required,
           ::fhir::boolean_pskel& repeats,
           ::fhir::boolean_pskel& readOnly,
           ::fhir::integer_pskel& maxLength,
           ::fhir::canonical_pskel& answerValueSet,
           ::fhir::Questionnaire_AnswerOption_pskel& answerOption,
           ::fhir::Questionnaire_Initial_pskel& initial,
           ::fhir::Questionnaire_Item_pskel& item)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->linkId_parser_ = &linkId;
    this->definition_parser_ = &definition;
    this->code_parser_ = &code;
    this->prefix_parser_ = &prefix;
    this->text_parser_ = &text;
    this->type_parser_ = &type;
    this->enableWhen_parser_ = &enableWhen;
    this->enableBehavior_parser_ = &enableBehavior;
    this->required_parser_ = &required;
    this->repeats_parser_ = &repeats;
    this->readOnly_parser_ = &readOnly;
    this->maxLength_parser_ = &maxLength;
    this->answerValueSet_parser_ = &answerValueSet;
    this->answerOption_parser_ = &answerOption;
    this->initial_parser_ = &initial;
    this->item_parser_ = &item;
  }

  Questionnaire_Item_pskel::
  Questionnaire_Item_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Questionnaire_Item_impl_ (0),
    linkId_parser_ (0),
    definition_parser_ (0),
    code_parser_ (0),
    prefix_parser_ (0),
    text_parser_ (0),
    type_parser_ (0),
    enableWhen_parser_ (0),
    enableBehavior_parser_ (0),
    required_parser_ (0),
    repeats_parser_ (0),
    readOnly_parser_ (0),
    maxLength_parser_ (0),
    answerValueSet_parser_ (0),
    answerOption_parser_ (0),
    initial_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Questionnaire_Item_pskel::
  Questionnaire_Item_pskel (Questionnaire_Item_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Questionnaire_Item_impl_ (impl),
    linkId_parser_ (0),
    definition_parser_ (0),
    code_parser_ (0),
    prefix_parser_ (0),
    text_parser_ (0),
    type_parser_ (0),
    enableWhen_parser_ (0),
    enableBehavior_parser_ (0),
    required_parser_ (0),
    repeats_parser_ (0),
    readOnly_parser_ (0),
    maxLength_parser_ (0),
    answerValueSet_parser_ (0),
    answerOption_parser_ (0),
    initial_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Questionnaire_EnableWhen_pskel
  //

  void Questionnaire_EnableWhen_pskel::
  question_parser (::fhir::string_pskel& p)
  {
    this->question_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  operator__parser (::fhir::QuestionnaireItemOperator_pskel& p)
  {
    this->operator__parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->answerBoolean_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->answerDecimal_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerInteger_parser (::fhir::integer_pskel& p)
  {
    this->answerInteger_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerDate_parser (::fhir::date_pskel& p)
  {
    this->answerDate_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->answerDateTime_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerTime_parser (::fhir::time_pskel& p)
  {
    this->answerTime_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerString_parser (::fhir::string_pskel& p)
  {
    this->answerString_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerCoding_parser (::fhir::Coding_pskel& p)
  {
    this->answerCoding_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->answerQuantity_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  answerReference_parser (::fhir::Reference_pskel& p)
  {
    this->answerReference_parser_ = &p;
  }

  void Questionnaire_EnableWhen_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& question,
           ::fhir::QuestionnaireItemOperator_pskel& operator_,
           ::fhir::boolean_pskel& answerBoolean,
           ::fhir::decimal_pskel& answerDecimal,
           ::fhir::integer_pskel& answerInteger,
           ::fhir::date_pskel& answerDate,
           ::fhir::dateTime_pskel& answerDateTime,
           ::fhir::time_pskel& answerTime,
           ::fhir::string_pskel& answerString,
           ::fhir::Coding_pskel& answerCoding,
           ::fhir::Quantity_pskel& answerQuantity,
           ::fhir::Reference_pskel& answerReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->question_parser_ = &question;
    this->operator__parser_ = &operator_;
    this->answerBoolean_parser_ = &answerBoolean;
    this->answerDecimal_parser_ = &answerDecimal;
    this->answerInteger_parser_ = &answerInteger;
    this->answerDate_parser_ = &answerDate;
    this->answerDateTime_parser_ = &answerDateTime;
    this->answerTime_parser_ = &answerTime;
    this->answerString_parser_ = &answerString;
    this->answerCoding_parser_ = &answerCoding;
    this->answerQuantity_parser_ = &answerQuantity;
    this->answerReference_parser_ = &answerReference;
  }

  Questionnaire_EnableWhen_pskel::
  Questionnaire_EnableWhen_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Questionnaire_EnableWhen_impl_ (0),
    question_parser_ (0),
    operator__parser_ (0),
    answerBoolean_parser_ (0),
    answerDecimal_parser_ (0),
    answerInteger_parser_ (0),
    answerDate_parser_ (0),
    answerDateTime_parser_ (0),
    answerTime_parser_ (0),
    answerString_parser_ (0),
    answerCoding_parser_ (0),
    answerQuantity_parser_ (0),
    answerReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Questionnaire_EnableWhen_pskel::
  Questionnaire_EnableWhen_pskel (Questionnaire_EnableWhen_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Questionnaire_EnableWhen_impl_ (impl),
    question_parser_ (0),
    operator__parser_ (0),
    answerBoolean_parser_ (0),
    answerDecimal_parser_ (0),
    answerInteger_parser_ (0),
    answerDate_parser_ (0),
    answerDateTime_parser_ (0),
    answerTime_parser_ (0),
    answerString_parser_ (0),
    answerCoding_parser_ (0),
    answerQuantity_parser_ (0),
    answerReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Questionnaire_AnswerOption_pskel
  //

  void Questionnaire_AnswerOption_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void Questionnaire_AnswerOption_pskel::
  valueDate_parser (::fhir::date_pskel& p)
  {
    this->valueDate_parser_ = &p;
  }

  void Questionnaire_AnswerOption_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void Questionnaire_AnswerOption_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void Questionnaire_AnswerOption_pskel::
  valueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->valueCoding_parser_ = &p;
  }

  void Questionnaire_AnswerOption_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void Questionnaire_AnswerOption_pskel::
  initialSelected_parser (::fhir::boolean_pskel& p)
  {
    this->initialSelected_parser_ = &p;
  }

  void Questionnaire_AnswerOption_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::date_pskel& valueDate,
           ::fhir::time_pskel& valueTime,
           ::fhir::string_pskel& valueString,
           ::fhir::Coding_pskel& valueCoding,
           ::fhir::Reference_pskel& valueReference,
           ::fhir::boolean_pskel& initialSelected)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->valueInteger_parser_ = &valueInteger;
    this->valueDate_parser_ = &valueDate;
    this->valueTime_parser_ = &valueTime;
    this->valueString_parser_ = &valueString;
    this->valueCoding_parser_ = &valueCoding;
    this->valueReference_parser_ = &valueReference;
    this->initialSelected_parser_ = &initialSelected;
  }

  Questionnaire_AnswerOption_pskel::
  Questionnaire_AnswerOption_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Questionnaire_AnswerOption_impl_ (0),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueCoding_parser_ (0),
    valueReference_parser_ (0),
    initialSelected_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Questionnaire_AnswerOption_pskel::
  Questionnaire_AnswerOption_pskel (Questionnaire_AnswerOption_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Questionnaire_AnswerOption_impl_ (impl),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueCoding_parser_ (0),
    valueReference_parser_ (0),
    initialSelected_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Questionnaire_Initial_pskel
  //

  void Questionnaire_Initial_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->valueDecimal_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueDate_parser (::fhir::date_pskel& p)
  {
    this->valueDate_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueUri_parser (::fhir::uri_pskel& p)
  {
    this->valueUri_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->valueAttachment_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->valueCoding_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void Questionnaire_Initial_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::decimal_pskel& valueDecimal,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::date_pskel& valueDate,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::time_pskel& valueTime,
           ::fhir::string_pskel& valueString,
           ::fhir::uri_pskel& valueUri,
           ::fhir::Attachment_pskel& valueAttachment,
           ::fhir::Coding_pskel& valueCoding,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Reference_pskel& valueReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueDecimal_parser_ = &valueDecimal;
    this->valueInteger_parser_ = &valueInteger;
    this->valueDate_parser_ = &valueDate;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valueTime_parser_ = &valueTime;
    this->valueString_parser_ = &valueString;
    this->valueUri_parser_ = &valueUri;
    this->valueAttachment_parser_ = &valueAttachment;
    this->valueCoding_parser_ = &valueCoding;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueReference_parser_ = &valueReference;
  }

  Questionnaire_Initial_pskel::
  Questionnaire_Initial_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Questionnaire_Initial_impl_ (0),
    valueBoolean_parser_ (0),
    valueDecimal_parser_ (0),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueUri_parser_ (0),
    valueAttachment_parser_ (0),
    valueCoding_parser_ (0),
    valueQuantity_parser_ (0),
    valueReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Questionnaire_Initial_pskel::
  Questionnaire_Initial_pskel (Questionnaire_Initial_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Questionnaire_Initial_impl_ (impl),
    valueBoolean_parser_ (0),
    valueDecimal_parser_ (0),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueUri_parser_ (0),
    valueAttachment_parser_ (0),
    valueCoding_parser_ (0),
    valueQuantity_parser_ (0),
    valueReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // QuestionnaireItemType_list_pskel
  //

  QuestionnaireItemType_list_pskel::
  QuestionnaireItemType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    QuestionnaireItemType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_QuestionnaireItemType_list_pskel_enums_, 16UL);
  }

  QuestionnaireItemType_list_pskel::
  QuestionnaireItemType_list_pskel (QuestionnaireItemType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    QuestionnaireItemType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_QuestionnaireItemType_list_pskel_enums_, 16UL);
  }

  // QuestionnaireItemType_pskel
  //

  void QuestionnaireItemType_pskel::
  value_parser (::fhir::QuestionnaireItemType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void QuestionnaireItemType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::QuestionnaireItemType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  QuestionnaireItemType_pskel::
  QuestionnaireItemType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    QuestionnaireItemType_impl_ (0),
    value_parser_ (0)
  {
  }

  QuestionnaireItemType_pskel::
  QuestionnaireItemType_pskel (QuestionnaireItemType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    QuestionnaireItemType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // EnableWhenBehavior_list_pskel
  //

  EnableWhenBehavior_list_pskel::
  EnableWhenBehavior_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EnableWhenBehavior_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EnableWhenBehavior_list_pskel_enums_, 2UL);
  }

  EnableWhenBehavior_list_pskel::
  EnableWhenBehavior_list_pskel (EnableWhenBehavior_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EnableWhenBehavior_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EnableWhenBehavior_list_pskel_enums_, 2UL);
  }

  // EnableWhenBehavior_pskel
  //

  void EnableWhenBehavior_pskel::
  value_parser (::fhir::EnableWhenBehavior_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EnableWhenBehavior_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EnableWhenBehavior_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EnableWhenBehavior_pskel::
  EnableWhenBehavior_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EnableWhenBehavior_impl_ (0),
    value_parser_ (0)
  {
  }

  EnableWhenBehavior_pskel::
  EnableWhenBehavior_pskel (EnableWhenBehavior_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EnableWhenBehavior_impl_ (impl),
    value_parser_ (0)
  {
  }

  // QuestionnaireItemOperator_list_pskel
  //

  QuestionnaireItemOperator_list_pskel::
  QuestionnaireItemOperator_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    QuestionnaireItemOperator_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_QuestionnaireItemOperator_list_pskel_enums_, 7UL);
  }

  QuestionnaireItemOperator_list_pskel::
  QuestionnaireItemOperator_list_pskel (QuestionnaireItemOperator_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    QuestionnaireItemOperator_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_QuestionnaireItemOperator_list_pskel_enums_, 7UL);
  }

  // QuestionnaireItemOperator_pskel
  //

  void QuestionnaireItemOperator_pskel::
  value_parser (::fhir::QuestionnaireItemOperator_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void QuestionnaireItemOperator_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::QuestionnaireItemOperator_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  QuestionnaireItemOperator_pskel::
  QuestionnaireItemOperator_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    QuestionnaireItemOperator_impl_ (0),
    value_parser_ (0)
  {
  }

  QuestionnaireItemOperator_pskel::
  QuestionnaireItemOperator_pskel (QuestionnaireItemOperator_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    QuestionnaireItemOperator_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Questionnaire_pskel
  //

  void Questionnaire_pskel::
  url ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->url ();
  }

  void Questionnaire_pskel::
  identifier ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->identifier ();
  }

  void Questionnaire_pskel::
  version ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->version ();
  }

  void Questionnaire_pskel::
  name ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->name ();
  }

  void Questionnaire_pskel::
  title ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->title ();
  }

  void Questionnaire_pskel::
  derivedFrom ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->derivedFrom ();
  }

  void Questionnaire_pskel::
  status ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->status ();
  }

  void Questionnaire_pskel::
  experimental ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->experimental ();
  }

  void Questionnaire_pskel::
  subjectType ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->subjectType ();
  }

  void Questionnaire_pskel::
  date ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->date ();
  }

  void Questionnaire_pskel::
  publisher ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->publisher ();
  }

  void Questionnaire_pskel::
  contact ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->contact ();
  }

  void Questionnaire_pskel::
  description ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->description ();
  }

  void Questionnaire_pskel::
  useContext ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->useContext ();
  }

  void Questionnaire_pskel::
  jurisdiction ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->jurisdiction ();
  }

  void Questionnaire_pskel::
  purpose ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->purpose ();
  }

  void Questionnaire_pskel::
  copyright ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->copyright ();
  }

  void Questionnaire_pskel::
  approvalDate ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->approvalDate ();
  }

  void Questionnaire_pskel::
  lastReviewDate ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->lastReviewDate ();
  }

  void Questionnaire_pskel::
  effectivePeriod ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->effectivePeriod ();
  }

  void Questionnaire_pskel::
  code ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->code ();
  }

  void Questionnaire_pskel::
  item ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->item ();
  }

  void Questionnaire_pskel::
  post_Questionnaire ()
  {
    if (this->Questionnaire_impl_)
      this->Questionnaire_impl_->post_Questionnaire ();
    else
      post_DomainResource ();
  }

  void Questionnaire_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->derivedFrom_parser_)
      this->derivedFrom_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->subjectType_parser_)
      this->subjectType_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->approvalDate_parser_)
      this->approvalDate_parser_->_reset ();

    if (this->lastReviewDate_parser_)
      this->lastReviewDate_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // Questionnaire_Item_pskel
  //

  void Questionnaire_Item_pskel::
  linkId ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->linkId ();
  }

  void Questionnaire_Item_pskel::
  definition ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->definition ();
  }

  void Questionnaire_Item_pskel::
  code ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->code ();
  }

  void Questionnaire_Item_pskel::
  prefix ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->prefix ();
  }

  void Questionnaire_Item_pskel::
  text ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->text ();
  }

  void Questionnaire_Item_pskel::
  type ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->type ();
  }

  void Questionnaire_Item_pskel::
  enableWhen ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->enableWhen ();
  }

  void Questionnaire_Item_pskel::
  enableBehavior ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->enableBehavior ();
  }

  void Questionnaire_Item_pskel::
  required ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->required ();
  }

  void Questionnaire_Item_pskel::
  repeats ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->repeats ();
  }

  void Questionnaire_Item_pskel::
  readOnly ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->readOnly ();
  }

  void Questionnaire_Item_pskel::
  maxLength ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->maxLength ();
  }

  void Questionnaire_Item_pskel::
  answerValueSet ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->answerValueSet ();
  }

  void Questionnaire_Item_pskel::
  answerOption ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->answerOption ();
  }

  void Questionnaire_Item_pskel::
  initial ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->initial ();
  }

  void Questionnaire_Item_pskel::
  item ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->item ();
  }

  void Questionnaire_Item_pskel::
  post_Questionnaire_Item ()
  {
    if (this->Questionnaire_Item_impl_)
      this->Questionnaire_Item_impl_->post_Questionnaire_Item ();
    else
      post_BackboneElement ();
  }

  void Questionnaire_Item_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->linkId_parser_)
      this->linkId_parser_->_reset ();

    if (this->definition_parser_)
      this->definition_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->prefix_parser_)
      this->prefix_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->enableWhen_parser_)
      this->enableWhen_parser_->_reset ();

    if (this->enableBehavior_parser_)
      this->enableBehavior_parser_->_reset ();

    if (this->required_parser_)
      this->required_parser_->_reset ();

    if (this->repeats_parser_)
      this->repeats_parser_->_reset ();

    if (this->readOnly_parser_)
      this->readOnly_parser_->_reset ();

    if (this->maxLength_parser_)
      this->maxLength_parser_->_reset ();

    if (this->answerValueSet_parser_)
      this->answerValueSet_parser_->_reset ();

    if (this->answerOption_parser_)
      this->answerOption_parser_->_reset ();

    if (this->initial_parser_)
      this->initial_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // Questionnaire_EnableWhen_pskel
  //

  void Questionnaire_EnableWhen_pskel::
  question ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->question ();
  }

  void Questionnaire_EnableWhen_pskel::
  operator_ ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->operator_ ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerBoolean ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerBoolean ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerDecimal ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerDecimal ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerInteger ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerInteger ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerDate ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerDate ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerDateTime ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerDateTime ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerTime ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerTime ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerString ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerString ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerCoding ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerCoding ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerQuantity ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerQuantity ();
  }

  void Questionnaire_EnableWhen_pskel::
  answerReference ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->answerReference ();
  }

  void Questionnaire_EnableWhen_pskel::
  post_Questionnaire_EnableWhen ()
  {
    if (this->Questionnaire_EnableWhen_impl_)
      this->Questionnaire_EnableWhen_impl_->post_Questionnaire_EnableWhen ();
    else
      post_BackboneElement ();
  }

  void Questionnaire_EnableWhen_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->question_parser_)
      this->question_parser_->_reset ();

    if (this->operator__parser_)
      this->operator__parser_->_reset ();

    if (this->answerBoolean_parser_)
      this->answerBoolean_parser_->_reset ();

    if (this->answerDecimal_parser_)
      this->answerDecimal_parser_->_reset ();

    if (this->answerInteger_parser_)
      this->answerInteger_parser_->_reset ();

    if (this->answerDate_parser_)
      this->answerDate_parser_->_reset ();

    if (this->answerDateTime_parser_)
      this->answerDateTime_parser_->_reset ();

    if (this->answerTime_parser_)
      this->answerTime_parser_->_reset ();

    if (this->answerString_parser_)
      this->answerString_parser_->_reset ();

    if (this->answerCoding_parser_)
      this->answerCoding_parser_->_reset ();

    if (this->answerQuantity_parser_)
      this->answerQuantity_parser_->_reset ();

    if (this->answerReference_parser_)
      this->answerReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Questionnaire_AnswerOption_pskel
  //

  void Questionnaire_AnswerOption_pskel::
  valueInteger ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->valueInteger ();
  }

  void Questionnaire_AnswerOption_pskel::
  valueDate ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->valueDate ();
  }

  void Questionnaire_AnswerOption_pskel::
  valueTime ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->valueTime ();
  }

  void Questionnaire_AnswerOption_pskel::
  valueString ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->valueString ();
  }

  void Questionnaire_AnswerOption_pskel::
  valueCoding ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->valueCoding ();
  }

  void Questionnaire_AnswerOption_pskel::
  valueReference ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->valueReference ();
  }

  void Questionnaire_AnswerOption_pskel::
  initialSelected ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->initialSelected ();
  }

  void Questionnaire_AnswerOption_pskel::
  post_Questionnaire_AnswerOption ()
  {
    if (this->Questionnaire_AnswerOption_impl_)
      this->Questionnaire_AnswerOption_impl_->post_Questionnaire_AnswerOption ();
    else
      post_BackboneElement ();
  }

  void Questionnaire_AnswerOption_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueDate_parser_)
      this->valueDate_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueCoding_parser_)
      this->valueCoding_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    if (this->initialSelected_parser_)
      this->initialSelected_parser_->_reset ();

    this->resetting_ = false;
  }

  // Questionnaire_Initial_pskel
  //

  void Questionnaire_Initial_pskel::
  valueBoolean ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueBoolean ();
  }

  void Questionnaire_Initial_pskel::
  valueDecimal ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueDecimal ();
  }

  void Questionnaire_Initial_pskel::
  valueInteger ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueInteger ();
  }

  void Questionnaire_Initial_pskel::
  valueDate ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueDate ();
  }

  void Questionnaire_Initial_pskel::
  valueDateTime ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueDateTime ();
  }

  void Questionnaire_Initial_pskel::
  valueTime ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueTime ();
  }

  void Questionnaire_Initial_pskel::
  valueString ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueString ();
  }

  void Questionnaire_Initial_pskel::
  valueUri ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueUri ();
  }

  void Questionnaire_Initial_pskel::
  valueAttachment ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueAttachment ();
  }

  void Questionnaire_Initial_pskel::
  valueCoding ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueCoding ();
  }

  void Questionnaire_Initial_pskel::
  valueQuantity ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueQuantity ();
  }

  void Questionnaire_Initial_pskel::
  valueReference ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->valueReference ();
  }

  void Questionnaire_Initial_pskel::
  post_Questionnaire_Initial ()
  {
    if (this->Questionnaire_Initial_impl_)
      this->Questionnaire_Initial_impl_->post_Questionnaire_Initial ();
    else
      post_BackboneElement ();
  }

  void Questionnaire_Initial_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueDecimal_parser_)
      this->valueDecimal_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueDate_parser_)
      this->valueDate_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueUri_parser_)
      this->valueUri_parser_->_reset ();

    if (this->valueAttachment_parser_)
      this->valueAttachment_parser_->_reset ();

    if (this->valueCoding_parser_)
      this->valueCoding_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // QuestionnaireItemType_list_pskel
  //

  void QuestionnaireItemType_list_pskel::
  post_QuestionnaireItemType_list ()
  {
    if (this->QuestionnaireItemType_list_impl_)
      this->QuestionnaireItemType_list_impl_->post_QuestionnaireItemType_list ();
    else
      post_code_primitive ();
  }

  const char* const QuestionnaireItemType_list_pskel::_xsde_QuestionnaireItemType_list_pskel_enums_[16UL] = 
  {
    "attachment",
    "boolean",
    "choice",
    "date",
    "dateTime",
    "decimal",
    "display",
    "group",
    "integer",
    "open-choice",
    "quantity",
    "reference",
    "string",
    "text",
    "time",
    "url"
  };

  // QuestionnaireItemType_pskel
  //

  void QuestionnaireItemType_pskel::
  value ()
  {
    if (this->QuestionnaireItemType_impl_)
      this->QuestionnaireItemType_impl_->value ();
  }

  void QuestionnaireItemType_pskel::
  post_QuestionnaireItemType ()
  {
    if (this->QuestionnaireItemType_impl_)
      this->QuestionnaireItemType_impl_->post_QuestionnaireItemType ();
    else
      post_Element ();
  }

  void QuestionnaireItemType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // EnableWhenBehavior_list_pskel
  //

  void EnableWhenBehavior_list_pskel::
  post_EnableWhenBehavior_list ()
  {
    if (this->EnableWhenBehavior_list_impl_)
      this->EnableWhenBehavior_list_impl_->post_EnableWhenBehavior_list ();
    else
      post_code_primitive ();
  }

  const char* const EnableWhenBehavior_list_pskel::_xsde_EnableWhenBehavior_list_pskel_enums_[2UL] = 
  {
    "all",
    "any"
  };

  // EnableWhenBehavior_pskel
  //

  void EnableWhenBehavior_pskel::
  value ()
  {
    if (this->EnableWhenBehavior_impl_)
      this->EnableWhenBehavior_impl_->value ();
  }

  void EnableWhenBehavior_pskel::
  post_EnableWhenBehavior ()
  {
    if (this->EnableWhenBehavior_impl_)
      this->EnableWhenBehavior_impl_->post_EnableWhenBehavior ();
    else
      post_Element ();
  }

  void EnableWhenBehavior_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // QuestionnaireItemOperator_list_pskel
  //

  void QuestionnaireItemOperator_list_pskel::
  post_QuestionnaireItemOperator_list ()
  {
    if (this->QuestionnaireItemOperator_list_impl_)
      this->QuestionnaireItemOperator_list_impl_->post_QuestionnaireItemOperator_list ();
    else
      post_code_primitive ();
  }

  const char* const QuestionnaireItemOperator_list_pskel::_xsde_QuestionnaireItemOperator_list_pskel_enums_[7UL] = 
  {
    "!=",
    "<",
    "<=",
    "=",
    ">",
    ">=",
    "exists"
  };

  // QuestionnaireItemOperator_pskel
  //

  void QuestionnaireItemOperator_pskel::
  value ()
  {
    if (this->QuestionnaireItemOperator_impl_)
      this->QuestionnaireItemOperator_impl_->value ();
  }

  void QuestionnaireItemOperator_pskel::
  post_QuestionnaireItemOperator ()
  {
    if (this->QuestionnaireItemOperator_impl_)
      this->QuestionnaireItemOperator_impl_->post_QuestionnaireItemOperator ();
    else
      post_Element ();
  }

  void QuestionnaireItemOperator_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Questionnaire_pskel.
  //
  bool Questionnaire_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "derivedFrom" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Questionnaire_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Questionnaire_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Questionnaire_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Questionnaire_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Questionnaire_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "derivedFrom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->derivedFrom_parser_)
            {
              this->derivedFrom_parser_->pre ();
              ctx.nested_parser (this->derivedFrom_parser_);
            }
          }
          else
          {
            if (this->derivedFrom_parser_ != 0)
            {
              this->derivedFrom_parser_->post_canonical ();
              this->derivedFrom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "subjectType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectType_parser_)
            {
              this->subjectType_parser_->pre ();
              ctx.nested_parser (this->subjectType_parser_);
            }
          }
          else
          {
            if (this->subjectType_parser_ != 0)
            {
              this->subjectType_parser_->post_code ();
              this->subjectType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "approvalDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->approvalDate_parser_)
            {
              this->approvalDate_parser_->pre ();
              ctx.nested_parser (this->approvalDate_parser_);
            }
          }
          else
          {
            if (this->approvalDate_parser_ != 0)
            {
              this->approvalDate_parser_->post_date ();
              this->approvalDate ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "lastReviewDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastReviewDate_parser_)
            {
              this->lastReviewDate_parser_->pre ();
              ctx.nested_parser (this->lastReviewDate_parser_);
            }
          }
          else
          {
            if (this->lastReviewDate_parser_ != 0)
            {
              this->lastReviewDate_parser_->post_date ();
              this->lastReviewDate ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_Coding ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_Questionnaire_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Questionnaire_Item_pskel.
  //
  bool Questionnaire_Item_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Questionnaire_Item_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Questionnaire_Item_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Questionnaire_Item_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Questionnaire_Item_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Questionnaire_Item_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->linkId_parser_)
            {
              this->linkId_parser_->pre ();
              ctx.nested_parser (this->linkId_parser_);
            }
          }
          else
          {
            if (this->linkId_parser_ != 0)
            {
              this->linkId_parser_->post_string ();
              this->linkId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "definition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definition_parser_)
            {
              this->definition_parser_->pre ();
              ctx.nested_parser (this->definition_parser_);
            }
          }
          else
          {
            if (this->definition_parser_ != 0)
            {
              this->definition_parser_->post_uri ();
              this->definition ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_Coding ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "prefix" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prefix_parser_)
            {
              this->prefix_parser_->pre ();
              ctx.nested_parser (this->prefix_parser_);
            }
          }
          else
          {
            if (this->prefix_parser_ != 0)
            {
              this->prefix_parser_->post_string ();
              this->prefix ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_QuestionnaireItemType ();
              this->type ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "enableWhen" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enableWhen_parser_)
            {
              this->enableWhen_parser_->pre ();
              ctx.nested_parser (this->enableWhen_parser_);
            }
          }
          else
          {
            if (this->enableWhen_parser_ != 0)
            {
              this->enableWhen_parser_->post_Questionnaire_EnableWhen ();
              this->enableWhen ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "enableBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enableBehavior_parser_)
            {
              this->enableBehavior_parser_->pre ();
              ctx.nested_parser (this->enableBehavior_parser_);
            }
          }
          else
          {
            if (this->enableBehavior_parser_ != 0)
            {
              this->enableBehavior_parser_->post_EnableWhenBehavior ();
              this->enableBehavior ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "required" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->required_parser_)
            {
              this->required_parser_->pre ();
              ctx.nested_parser (this->required_parser_);
            }
          }
          else
          {
            if (this->required_parser_ != 0)
            {
              this->required_parser_->post_boolean ();
              this->required ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "repeats" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->repeats_parser_)
            {
              this->repeats_parser_->pre ();
              ctx.nested_parser (this->repeats_parser_);
            }
          }
          else
          {
            if (this->repeats_parser_ != 0)
            {
              this->repeats_parser_->post_boolean ();
              this->repeats ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "readOnly" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->readOnly_parser_)
            {
              this->readOnly_parser_->pre ();
              ctx.nested_parser (this->readOnly_parser_);
            }
          }
          else
          {
            if (this->readOnly_parser_ != 0)
            {
              this->readOnly_parser_->post_boolean ();
              this->readOnly ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "maxLength" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maxLength_parser_)
            {
              this->maxLength_parser_->pre ();
              ctx.nested_parser (this->maxLength_parser_);
            }
          }
          else
          {
            if (this->maxLength_parser_ != 0)
            {
              this->maxLength_parser_->post_integer ();
              this->maxLength ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "answerValueSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerValueSet_parser_)
            {
              this->answerValueSet_parser_->pre ();
              ctx.nested_parser (this->answerValueSet_parser_);
            }
          }
          else
          {
            if (this->answerValueSet_parser_ != 0)
            {
              this->answerValueSet_parser_->post_canonical ();
              this->answerValueSet ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "answerOption" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerOption_parser_)
            {
              this->answerOption_parser_->pre ();
              ctx.nested_parser (this->answerOption_parser_);
            }
          }
          else
          {
            if (this->answerOption_parser_ != 0)
            {
              this->answerOption_parser_->post_Questionnaire_AnswerOption ();
              this->answerOption ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "initial" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->initial_parser_)
            {
              this->initial_parser_->pre ();
              ctx.nested_parser (this->initial_parser_);
            }
          }
          else
          {
            if (this->initial_parser_ != 0)
            {
              this->initial_parser_->post_Questionnaire_Initial ();
              this->initial ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_Questionnaire_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Questionnaire_EnableWhen_pskel.
  //
  bool Questionnaire_EnableWhen_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "question" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Questionnaire_EnableWhen_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Questionnaire_EnableWhen_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Questionnaire_EnableWhen_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Questionnaire_EnableWhen_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Questionnaire_EnableWhen_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "question" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->question_parser_)
            {
              this->question_parser_->pre ();
              ctx.nested_parser (this->question_parser_);
            }
          }
          else
          {
            if (this->question_parser_ != 0)
            {
              this->question_parser_->post_string ();
              this->question ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "operator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operator__parser_)
            {
              this->operator__parser_->pre ();
              ctx.nested_parser (this->operator__parser_);
            }
          }
          else
          {
            if (this->operator__parser_ != 0)
            {
              this->operator__parser_->post_QuestionnaireItemOperator ();
              this->operator_ ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "answerBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerBoolean_parser_)
            {
              this->answerBoolean_parser_->pre ();
              ctx.nested_parser (this->answerBoolean_parser_);
            }
          }
          else
          {
            if (this->answerBoolean_parser_ != 0)
            {
              this->answerBoolean_parser_->post_boolean ();
              this->answerBoolean ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "answerDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerDecimal_parser_)
            {
              this->answerDecimal_parser_->pre ();
              ctx.nested_parser (this->answerDecimal_parser_);
            }
          }
          else
          {
            if (this->answerDecimal_parser_ != 0)
            {
              this->answerDecimal_parser_->post_decimal ();
              this->answerDecimal ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "answerInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerInteger_parser_)
            {
              this->answerInteger_parser_->pre ();
              ctx.nested_parser (this->answerInteger_parser_);
            }
          }
          else
          {
            if (this->answerInteger_parser_ != 0)
            {
              this->answerInteger_parser_->post_integer ();
              this->answerInteger ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "answerDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerDate_parser_)
            {
              this->answerDate_parser_->pre ();
              ctx.nested_parser (this->answerDate_parser_);
            }
          }
          else
          {
            if (this->answerDate_parser_ != 0)
            {
              this->answerDate_parser_->post_date ();
              this->answerDate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "answerDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerDateTime_parser_)
            {
              this->answerDateTime_parser_->pre ();
              ctx.nested_parser (this->answerDateTime_parser_);
            }
          }
          else
          {
            if (this->answerDateTime_parser_ != 0)
            {
              this->answerDateTime_parser_->post_dateTime ();
              this->answerDateTime ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "answerTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerTime_parser_)
            {
              this->answerTime_parser_->pre ();
              ctx.nested_parser (this->answerTime_parser_);
            }
          }
          else
          {
            if (this->answerTime_parser_ != 0)
            {
              this->answerTime_parser_->post_time ();
              this->answerTime ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "answerString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerString_parser_)
            {
              this->answerString_parser_->pre ();
              ctx.nested_parser (this->answerString_parser_);
            }
          }
          else
          {
            if (this->answerString_parser_ != 0)
            {
              this->answerString_parser_->post_string ();
              this->answerString ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "answerCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerCoding_parser_)
            {
              this->answerCoding_parser_->pre ();
              ctx.nested_parser (this->answerCoding_parser_);
            }
          }
          else
          {
            if (this->answerCoding_parser_ != 0)
            {
              this->answerCoding_parser_->post_Coding ();
              this->answerCoding ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "answerQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerQuantity_parser_)
            {
              this->answerQuantity_parser_->pre ();
              ctx.nested_parser (this->answerQuantity_parser_);
            }
          }
          else
          {
            if (this->answerQuantity_parser_ != 0)
            {
              this->answerQuantity_parser_->post_Quantity ();
              this->answerQuantity ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "answerReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answerReference_parser_)
            {
              this->answerReference_parser_->pre ();
              ctx.nested_parser (this->answerReference_parser_);
            }
          }
          else
          {
            if (this->answerReference_parser_ != 0)
            {
              this->answerReference_parser_->post_Reference ();
              this->answerReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Questionnaire_AnswerOption_pskel.
  //
  bool Questionnaire_AnswerOption_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "valueDate" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "valueTime" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "valueString" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "valueCoding" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "valueReference" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "initialSelected" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Questionnaire_AnswerOption_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Questionnaire_AnswerOption_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Questionnaire_AnswerOption_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Questionnaire_AnswerOption_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Questionnaire_AnswerOption_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDate_parser_)
            {
              this->valueDate_parser_->pre ();
              ctx.nested_parser (this->valueDate_parser_);
            }
          }
          else
          {
            if (this->valueDate_parser_ != 0)
            {
              this->valueDate_parser_->post_date ();
              this->valueDate ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCoding_parser_)
            {
              this->valueCoding_parser_->pre ();
              ctx.nested_parser (this->valueCoding_parser_);
            }
          }
          else
          {
            if (this->valueCoding_parser_ != 0)
            {
              this->valueCoding_parser_->post_Coding ();
              this->valueCoding ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "initialSelected" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->initialSelected_parser_)
            {
              this->initialSelected_parser_->pre ();
              ctx.nested_parser (this->initialSelected_parser_);
            }
          }
          else
          {
            if (this->initialSelected_parser_ != 0)
            {
              this->initialSelected_parser_->post_boolean ();
              this->initialSelected ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Questionnaire_Initial_pskel.
  //
  bool Questionnaire_Initial_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "valueDecimal" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "valueInteger" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "valueDate" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "valueDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "valueTime" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "valueString" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "valueUri" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "valueAttachment" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "valueCoding" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "valueQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "valueReference" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Questionnaire_Initial_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Questionnaire_Initial_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Questionnaire_Initial_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Questionnaire_Initial_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Questionnaire_Initial_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDecimal_parser_)
            {
              this->valueDecimal_parser_->pre ();
              ctx.nested_parser (this->valueDecimal_parser_);
            }
          }
          else
          {
            if (this->valueDecimal_parser_ != 0)
            {
              this->valueDecimal_parser_->post_decimal ();
              this->valueDecimal ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDate_parser_)
            {
              this->valueDate_parser_->pre ();
              ctx.nested_parser (this->valueDate_parser_);
            }
          }
          else
          {
            if (this->valueDate_parser_ != 0)
            {
              this->valueDate_parser_->post_date ();
              this->valueDate ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUri_parser_)
            {
              this->valueUri_parser_->pre ();
              ctx.nested_parser (this->valueUri_parser_);
            }
          }
          else
          {
            if (this->valueUri_parser_ != 0)
            {
              this->valueUri_parser_->post_uri ();
              this->valueUri ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "valueAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAttachment_parser_)
            {
              this->valueAttachment_parser_->pre ();
              ctx.nested_parser (this->valueAttachment_parser_);
            }
          }
          else
          {
            if (this->valueAttachment_parser_ != 0)
            {
              this->valueAttachment_parser_->post_Attachment ();
              this->valueAttachment ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "valueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCoding_parser_)
            {
              this->valueCoding_parser_->pre ();
              ctx.nested_parser (this->valueCoding_parser_);
            }
          }
          else
          {
            if (this->valueCoding_parser_ != 0)
            {
              this->valueCoding_parser_->post_Coding ();
              this->valueCoding ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for QuestionnaireItemType_pskel.
  //
  bool QuestionnaireItemType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_QuestionnaireItemType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for EnableWhenBehavior_pskel.
  //
  bool EnableWhenBehavior_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EnableWhenBehavior_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for QuestionnaireItemOperator_pskel.
  //
  bool QuestionnaireItemOperator_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_QuestionnaireItemOperator_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

