// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "verificationresult-pskel.hxx"

namespace fhir
{
  // VerificationResult_pskel
  //

  void VerificationResult_pskel::
  target_parser (::fhir::Reference_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void VerificationResult_pskel::
  targetLocation_parser (::fhir::string_pskel& p)
  {
    this->targetLocation_parser_ = &p;
  }

  void VerificationResult_pskel::
  need_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->need_parser_ = &p;
  }

  void VerificationResult_pskel::
  status_parser (::fhir::status_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void VerificationResult_pskel::
  statusDate_parser (::fhir::dateTime_pskel& p)
  {
    this->statusDate_parser_ = &p;
  }

  void VerificationResult_pskel::
  validationType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->validationType_parser_ = &p;
  }

  void VerificationResult_pskel::
  validationProcess_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->validationProcess_parser_ = &p;
  }

  void VerificationResult_pskel::
  frequency_parser (::fhir::Timing_pskel& p)
  {
    this->frequency_parser_ = &p;
  }

  void VerificationResult_pskel::
  lastPerformed_parser (::fhir::dateTime_pskel& p)
  {
    this->lastPerformed_parser_ = &p;
  }

  void VerificationResult_pskel::
  nextScheduled_parser (::fhir::date_pskel& p)
  {
    this->nextScheduled_parser_ = &p;
  }

  void VerificationResult_pskel::
  failureAction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->failureAction_parser_ = &p;
  }

  void VerificationResult_pskel::
  primarySource_parser (::fhir::VerificationResult_PrimarySource_pskel& p)
  {
    this->primarySource_parser_ = &p;
  }

  void VerificationResult_pskel::
  attestation_parser (::fhir::VerificationResult_Attestation_pskel& p)
  {
    this->attestation_parser_ = &p;
  }

  void VerificationResult_pskel::
  validator_parser (::fhir::VerificationResult_Validator_pskel& p)
  {
    this->validator_parser_ = &p;
  }

  void VerificationResult_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& target,
           ::fhir::string_pskel& targetLocation,
           ::fhir::CodeableConcept_pskel& need,
           ::fhir::status_pskel& status,
           ::fhir::dateTime_pskel& statusDate,
           ::fhir::CodeableConcept_pskel& validationType,
           ::fhir::CodeableConcept_pskel& validationProcess,
           ::fhir::Timing_pskel& frequency,
           ::fhir::dateTime_pskel& lastPerformed,
           ::fhir::date_pskel& nextScheduled,
           ::fhir::CodeableConcept_pskel& failureAction,
           ::fhir::VerificationResult_PrimarySource_pskel& primarySource,
           ::fhir::VerificationResult_Attestation_pskel& attestation,
           ::fhir::VerificationResult_Validator_pskel& validator)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->target_parser_ = &target;
    this->targetLocation_parser_ = &targetLocation;
    this->need_parser_ = &need;
    this->status_parser_ = &status;
    this->statusDate_parser_ = &statusDate;
    this->validationType_parser_ = &validationType;
    this->validationProcess_parser_ = &validationProcess;
    this->frequency_parser_ = &frequency;
    this->lastPerformed_parser_ = &lastPerformed;
    this->nextScheduled_parser_ = &nextScheduled;
    this->failureAction_parser_ = &failureAction;
    this->primarySource_parser_ = &primarySource;
    this->attestation_parser_ = &attestation;
    this->validator_parser_ = &validator;
  }

  VerificationResult_pskel::
  VerificationResult_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    VerificationResult_impl_ (0),
    target_parser_ (0),
    targetLocation_parser_ (0),
    need_parser_ (0),
    status_parser_ (0),
    statusDate_parser_ (0),
    validationType_parser_ (0),
    validationProcess_parser_ (0),
    frequency_parser_ (0),
    lastPerformed_parser_ (0),
    nextScheduled_parser_ (0),
    failureAction_parser_ (0),
    primarySource_parser_ (0),
    attestation_parser_ (0),
    validator_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  VerificationResult_pskel::
  VerificationResult_pskel (VerificationResult_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    VerificationResult_impl_ (impl),
    target_parser_ (0),
    targetLocation_parser_ (0),
    need_parser_ (0),
    status_parser_ (0),
    statusDate_parser_ (0),
    validationType_parser_ (0),
    validationProcess_parser_ (0),
    frequency_parser_ (0),
    lastPerformed_parser_ (0),
    nextScheduled_parser_ (0),
    failureAction_parser_ (0),
    primarySource_parser_ (0),
    attestation_parser_ (0),
    validator_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // VerificationResult_PrimarySource_pskel
  //

  void VerificationResult_PrimarySource_pskel::
  who_parser (::fhir::Reference_pskel& p)
  {
    this->who_parser_ = &p;
  }

  void VerificationResult_PrimarySource_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void VerificationResult_PrimarySource_pskel::
  communicationMethod_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->communicationMethod_parser_ = &p;
  }

  void VerificationResult_PrimarySource_pskel::
  validationStatus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->validationStatus_parser_ = &p;
  }

  void VerificationResult_PrimarySource_pskel::
  validationDate_parser (::fhir::dateTime_pskel& p)
  {
    this->validationDate_parser_ = &p;
  }

  void VerificationResult_PrimarySource_pskel::
  canPushUpdates_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->canPushUpdates_parser_ = &p;
  }

  void VerificationResult_PrimarySource_pskel::
  pushTypeAvailable_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->pushTypeAvailable_parser_ = &p;
  }

  void VerificationResult_PrimarySource_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& who,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& communicationMethod,
           ::fhir::CodeableConcept_pskel& validationStatus,
           ::fhir::dateTime_pskel& validationDate,
           ::fhir::CodeableConcept_pskel& canPushUpdates,
           ::fhir::CodeableConcept_pskel& pushTypeAvailable)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->who_parser_ = &who;
    this->type_parser_ = &type;
    this->communicationMethod_parser_ = &communicationMethod;
    this->validationStatus_parser_ = &validationStatus;
    this->validationDate_parser_ = &validationDate;
    this->canPushUpdates_parser_ = &canPushUpdates;
    this->pushTypeAvailable_parser_ = &pushTypeAvailable;
  }

  VerificationResult_PrimarySource_pskel::
  VerificationResult_PrimarySource_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    VerificationResult_PrimarySource_impl_ (0),
    who_parser_ (0),
    type_parser_ (0),
    communicationMethod_parser_ (0),
    validationStatus_parser_ (0),
    validationDate_parser_ (0),
    canPushUpdates_parser_ (0),
    pushTypeAvailable_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  VerificationResult_PrimarySource_pskel::
  VerificationResult_PrimarySource_pskel (VerificationResult_PrimarySource_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    VerificationResult_PrimarySource_impl_ (impl),
    who_parser_ (0),
    type_parser_ (0),
    communicationMethod_parser_ (0),
    validationStatus_parser_ (0),
    validationDate_parser_ (0),
    canPushUpdates_parser_ (0),
    pushTypeAvailable_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // VerificationResult_Attestation_pskel
  //

  void VerificationResult_Attestation_pskel::
  who_parser (::fhir::Reference_pskel& p)
  {
    this->who_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  onBehalfOf_parser (::fhir::Reference_pskel& p)
  {
    this->onBehalfOf_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  communicationMethod_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->communicationMethod_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  date_parser (::fhir::date_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  sourceIdentityCertificate_parser (::fhir::string_pskel& p)
  {
    this->sourceIdentityCertificate_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  proxyIdentityCertificate_parser (::fhir::string_pskel& p)
  {
    this->proxyIdentityCertificate_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  proxySignature_parser (::fhir::Signature_pskel& p)
  {
    this->proxySignature_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  sourceSignature_parser (::fhir::Signature_pskel& p)
  {
    this->sourceSignature_parser_ = &p;
  }

  void VerificationResult_Attestation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& who,
           ::fhir::Reference_pskel& onBehalfOf,
           ::fhir::CodeableConcept_pskel& communicationMethod,
           ::fhir::date_pskel& date,
           ::fhir::string_pskel& sourceIdentityCertificate,
           ::fhir::string_pskel& proxyIdentityCertificate,
           ::fhir::Signature_pskel& proxySignature,
           ::fhir::Signature_pskel& sourceSignature)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->who_parser_ = &who;
    this->onBehalfOf_parser_ = &onBehalfOf;
    this->communicationMethod_parser_ = &communicationMethod;
    this->date_parser_ = &date;
    this->sourceIdentityCertificate_parser_ = &sourceIdentityCertificate;
    this->proxyIdentityCertificate_parser_ = &proxyIdentityCertificate;
    this->proxySignature_parser_ = &proxySignature;
    this->sourceSignature_parser_ = &sourceSignature;
  }

  VerificationResult_Attestation_pskel::
  VerificationResult_Attestation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    VerificationResult_Attestation_impl_ (0),
    who_parser_ (0),
    onBehalfOf_parser_ (0),
    communicationMethod_parser_ (0),
    date_parser_ (0),
    sourceIdentityCertificate_parser_ (0),
    proxyIdentityCertificate_parser_ (0),
    proxySignature_parser_ (0),
    sourceSignature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  VerificationResult_Attestation_pskel::
  VerificationResult_Attestation_pskel (VerificationResult_Attestation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    VerificationResult_Attestation_impl_ (impl),
    who_parser_ (0),
    onBehalfOf_parser_ (0),
    communicationMethod_parser_ (0),
    date_parser_ (0),
    sourceIdentityCertificate_parser_ (0),
    proxyIdentityCertificate_parser_ (0),
    proxySignature_parser_ (0),
    sourceSignature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // VerificationResult_Validator_pskel
  //

  void VerificationResult_Validator_pskel::
  organization_parser (::fhir::Reference_pskel& p)
  {
    this->organization_parser_ = &p;
  }

  void VerificationResult_Validator_pskel::
  identityCertificate_parser (::fhir::string_pskel& p)
  {
    this->identityCertificate_parser_ = &p;
  }

  void VerificationResult_Validator_pskel::
  attestationSignature_parser (::fhir::Signature_pskel& p)
  {
    this->attestationSignature_parser_ = &p;
  }

  void VerificationResult_Validator_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& organization,
           ::fhir::string_pskel& identityCertificate,
           ::fhir::Signature_pskel& attestationSignature)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->organization_parser_ = &organization;
    this->identityCertificate_parser_ = &identityCertificate;
    this->attestationSignature_parser_ = &attestationSignature;
  }

  VerificationResult_Validator_pskel::
  VerificationResult_Validator_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    VerificationResult_Validator_impl_ (0),
    organization_parser_ (0),
    identityCertificate_parser_ (0),
    attestationSignature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  VerificationResult_Validator_pskel::
  VerificationResult_Validator_pskel (VerificationResult_Validator_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    VerificationResult_Validator_impl_ (impl),
    organization_parser_ (0),
    identityCertificate_parser_ (0),
    attestationSignature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // status_list_pskel
  //

  status_list_pskel::
  status_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    status_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_status_list_pskel_enums_, 6UL);
  }

  status_list_pskel::
  status_list_pskel (status_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    status_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_status_list_pskel_enums_, 6UL);
  }

  // status_pskel
  //

  void status_pskel::
  value_parser (::fhir::status_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void status_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::status_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  status_pskel::
  status_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    status_impl_ (0),
    value_parser_ (0)
  {
  }

  status_pskel::
  status_pskel (status_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    status_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // VerificationResult_pskel
  //

  void VerificationResult_pskel::
  target ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->target ();
  }

  void VerificationResult_pskel::
  targetLocation ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->targetLocation ();
  }

  void VerificationResult_pskel::
  need ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->need ();
  }

  void VerificationResult_pskel::
  status ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->status ();
  }

  void VerificationResult_pskel::
  statusDate ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->statusDate ();
  }

  void VerificationResult_pskel::
  validationType ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->validationType ();
  }

  void VerificationResult_pskel::
  validationProcess ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->validationProcess ();
  }

  void VerificationResult_pskel::
  frequency ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->frequency ();
  }

  void VerificationResult_pskel::
  lastPerformed ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->lastPerformed ();
  }

  void VerificationResult_pskel::
  nextScheduled ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->nextScheduled ();
  }

  void VerificationResult_pskel::
  failureAction ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->failureAction ();
  }

  void VerificationResult_pskel::
  primarySource ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->primarySource ();
  }

  void VerificationResult_pskel::
  attestation ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->attestation ();
  }

  void VerificationResult_pskel::
  validator ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->validator ();
  }

  void VerificationResult_pskel::
  post_VerificationResult ()
  {
    if (this->VerificationResult_impl_)
      this->VerificationResult_impl_->post_VerificationResult ();
    else
      post_DomainResource ();
  }

  void VerificationResult_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->target_parser_)
      this->target_parser_->_reset ();

    if (this->targetLocation_parser_)
      this->targetLocation_parser_->_reset ();

    if (this->need_parser_)
      this->need_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusDate_parser_)
      this->statusDate_parser_->_reset ();

    if (this->validationType_parser_)
      this->validationType_parser_->_reset ();

    if (this->validationProcess_parser_)
      this->validationProcess_parser_->_reset ();

    if (this->frequency_parser_)
      this->frequency_parser_->_reset ();

    if (this->lastPerformed_parser_)
      this->lastPerformed_parser_->_reset ();

    if (this->nextScheduled_parser_)
      this->nextScheduled_parser_->_reset ();

    if (this->failureAction_parser_)
      this->failureAction_parser_->_reset ();

    if (this->primarySource_parser_)
      this->primarySource_parser_->_reset ();

    if (this->attestation_parser_)
      this->attestation_parser_->_reset ();

    if (this->validator_parser_)
      this->validator_parser_->_reset ();

    this->resetting_ = false;
  }

  // VerificationResult_PrimarySource_pskel
  //

  void VerificationResult_PrimarySource_pskel::
  who ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->who ();
  }

  void VerificationResult_PrimarySource_pskel::
  type ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->type ();
  }

  void VerificationResult_PrimarySource_pskel::
  communicationMethod ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->communicationMethod ();
  }

  void VerificationResult_PrimarySource_pskel::
  validationStatus ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->validationStatus ();
  }

  void VerificationResult_PrimarySource_pskel::
  validationDate ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->validationDate ();
  }

  void VerificationResult_PrimarySource_pskel::
  canPushUpdates ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->canPushUpdates ();
  }

  void VerificationResult_PrimarySource_pskel::
  pushTypeAvailable ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->pushTypeAvailable ();
  }

  void VerificationResult_PrimarySource_pskel::
  post_VerificationResult_PrimarySource ()
  {
    if (this->VerificationResult_PrimarySource_impl_)
      this->VerificationResult_PrimarySource_impl_->post_VerificationResult_PrimarySource ();
    else
      post_BackboneElement ();
  }

  void VerificationResult_PrimarySource_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->who_parser_)
      this->who_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->communicationMethod_parser_)
      this->communicationMethod_parser_->_reset ();

    if (this->validationStatus_parser_)
      this->validationStatus_parser_->_reset ();

    if (this->validationDate_parser_)
      this->validationDate_parser_->_reset ();

    if (this->canPushUpdates_parser_)
      this->canPushUpdates_parser_->_reset ();

    if (this->pushTypeAvailable_parser_)
      this->pushTypeAvailable_parser_->_reset ();

    this->resetting_ = false;
  }

  // VerificationResult_Attestation_pskel
  //

  void VerificationResult_Attestation_pskel::
  who ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->who ();
  }

  void VerificationResult_Attestation_pskel::
  onBehalfOf ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->onBehalfOf ();
  }

  void VerificationResult_Attestation_pskel::
  communicationMethod ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->communicationMethod ();
  }

  void VerificationResult_Attestation_pskel::
  date ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->date ();
  }

  void VerificationResult_Attestation_pskel::
  sourceIdentityCertificate ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->sourceIdentityCertificate ();
  }

  void VerificationResult_Attestation_pskel::
  proxyIdentityCertificate ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->proxyIdentityCertificate ();
  }

  void VerificationResult_Attestation_pskel::
  proxySignature ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->proxySignature ();
  }

  void VerificationResult_Attestation_pskel::
  sourceSignature ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->sourceSignature ();
  }

  void VerificationResult_Attestation_pskel::
  post_VerificationResult_Attestation ()
  {
    if (this->VerificationResult_Attestation_impl_)
      this->VerificationResult_Attestation_impl_->post_VerificationResult_Attestation ();
    else
      post_BackboneElement ();
  }

  void VerificationResult_Attestation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->who_parser_)
      this->who_parser_->_reset ();

    if (this->onBehalfOf_parser_)
      this->onBehalfOf_parser_->_reset ();

    if (this->communicationMethod_parser_)
      this->communicationMethod_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->sourceIdentityCertificate_parser_)
      this->sourceIdentityCertificate_parser_->_reset ();

    if (this->proxyIdentityCertificate_parser_)
      this->proxyIdentityCertificate_parser_->_reset ();

    if (this->proxySignature_parser_)
      this->proxySignature_parser_->_reset ();

    if (this->sourceSignature_parser_)
      this->sourceSignature_parser_->_reset ();

    this->resetting_ = false;
  }

  // VerificationResult_Validator_pskel
  //

  void VerificationResult_Validator_pskel::
  organization ()
  {
    if (this->VerificationResult_Validator_impl_)
      this->VerificationResult_Validator_impl_->organization ();
  }

  void VerificationResult_Validator_pskel::
  identityCertificate ()
  {
    if (this->VerificationResult_Validator_impl_)
      this->VerificationResult_Validator_impl_->identityCertificate ();
  }

  void VerificationResult_Validator_pskel::
  attestationSignature ()
  {
    if (this->VerificationResult_Validator_impl_)
      this->VerificationResult_Validator_impl_->attestationSignature ();
  }

  void VerificationResult_Validator_pskel::
  post_VerificationResult_Validator ()
  {
    if (this->VerificationResult_Validator_impl_)
      this->VerificationResult_Validator_impl_->post_VerificationResult_Validator ();
    else
      post_BackboneElement ();
  }

  void VerificationResult_Validator_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->organization_parser_)
      this->organization_parser_->_reset ();

    if (this->identityCertificate_parser_)
      this->identityCertificate_parser_->_reset ();

    if (this->attestationSignature_parser_)
      this->attestationSignature_parser_->_reset ();

    this->resetting_ = false;
  }

  // status_list_pskel
  //

  void status_list_pskel::
  post_status_list ()
  {
    if (this->status_list_impl_)
      this->status_list_impl_->post_status_list ();
    else
      post_code_primitive ();
  }

  const char* const status_list_pskel::_xsde_status_list_pskel_enums_[6UL] = 
  {
    "attested",
    "in-process",
    "req-revalid",
    "reval-fail",
    "val-fail",
    "validated"
  };

  // status_pskel
  //

  void status_pskel::
  value ()
  {
    if (this->status_impl_)
      this->status_impl_->value ();
  }

  void status_pskel::
  post_status ()
  {
    if (this->status_impl_)
      this->status_impl_->post_status ();
    else
      post_Element ();
  }

  void status_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for VerificationResult_pskel.
  //
  bool VerificationResult_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "target" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "targetLocation" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "need" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &VerificationResult_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool VerificationResult_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void VerificationResult_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void VerificationResult_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void VerificationResult_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_Reference ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "targetLocation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetLocation_parser_)
            {
              this->targetLocation_parser_->pre ();
              ctx.nested_parser (this->targetLocation_parser_);
            }
          }
          else
          {
            if (this->targetLocation_parser_ != 0)
            {
              this->targetLocation_parser_->post_string ();
              this->targetLocation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "need" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->need_parser_)
            {
              this->need_parser_->pre ();
              ctx.nested_parser (this->need_parser_);
            }
          }
          else
          {
            if (this->need_parser_ != 0)
            {
              this->need_parser_->post_CodeableConcept ();
              this->need ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_status ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "statusDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusDate_parser_)
            {
              this->statusDate_parser_->pre ();
              ctx.nested_parser (this->statusDate_parser_);
            }
          }
          else
          {
            if (this->statusDate_parser_ != 0)
            {
              this->statusDate_parser_->post_dateTime ();
              this->statusDate ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "validationType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validationType_parser_)
            {
              this->validationType_parser_->pre ();
              ctx.nested_parser (this->validationType_parser_);
            }
          }
          else
          {
            if (this->validationType_parser_ != 0)
            {
              this->validationType_parser_->post_CodeableConcept ();
              this->validationType ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "validationProcess" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validationProcess_parser_)
            {
              this->validationProcess_parser_->pre ();
              ctx.nested_parser (this->validationProcess_parser_);
            }
          }
          else
          {
            if (this->validationProcess_parser_ != 0)
            {
              this->validationProcess_parser_->post_CodeableConcept ();
              this->validationProcess ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "frequency" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->frequency_parser_)
            {
              this->frequency_parser_->pre ();
              ctx.nested_parser (this->frequency_parser_);
            }
          }
          else
          {
            if (this->frequency_parser_ != 0)
            {
              this->frequency_parser_->post_Timing ();
              this->frequency ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "lastPerformed" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastPerformed_parser_)
            {
              this->lastPerformed_parser_->pre ();
              ctx.nested_parser (this->lastPerformed_parser_);
            }
          }
          else
          {
            if (this->lastPerformed_parser_ != 0)
            {
              this->lastPerformed_parser_->post_dateTime ();
              this->lastPerformed ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "nextScheduled" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->nextScheduled_parser_)
            {
              this->nextScheduled_parser_->pre ();
              ctx.nested_parser (this->nextScheduled_parser_);
            }
          }
          else
          {
            if (this->nextScheduled_parser_ != 0)
            {
              this->nextScheduled_parser_->post_date ();
              this->nextScheduled ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "failureAction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->failureAction_parser_)
            {
              this->failureAction_parser_->pre ();
              ctx.nested_parser (this->failureAction_parser_);
            }
          }
          else
          {
            if (this->failureAction_parser_ != 0)
            {
              this->failureAction_parser_->post_CodeableConcept ();
              this->failureAction ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "primarySource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->primarySource_parser_)
            {
              this->primarySource_parser_->pre ();
              ctx.nested_parser (this->primarySource_parser_);
            }
          }
          else
          {
            if (this->primarySource_parser_ != 0)
            {
              this->primarySource_parser_->post_VerificationResult_PrimarySource ();
              this->primarySource ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "attestation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->attestation_parser_)
            {
              this->attestation_parser_->pre ();
              ctx.nested_parser (this->attestation_parser_);
            }
          }
          else
          {
            if (this->attestation_parser_ != 0)
            {
              this->attestation_parser_->post_VerificationResult_Attestation ();
              this->attestation ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "validator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validator_parser_)
            {
              this->validator_parser_->pre ();
              ctx.nested_parser (this->validator_parser_);
            }
          }
          else
          {
            if (this->validator_parser_ != 0)
            {
              this->validator_parser_->post_VerificationResult_Validator ();
              this->validator ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for VerificationResult_PrimarySource_pskel.
  //
  bool VerificationResult_PrimarySource_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "who" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "communicationMethod" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "validationStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "validationDate" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "canPushUpdates" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "pushTypeAvailable" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &VerificationResult_PrimarySource_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool VerificationResult_PrimarySource_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void VerificationResult_PrimarySource_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void VerificationResult_PrimarySource_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void VerificationResult_PrimarySource_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "who" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->who_parser_)
            {
              this->who_parser_->pre ();
              ctx.nested_parser (this->who_parser_);
            }
          }
          else
          {
            if (this->who_parser_ != 0)
            {
              this->who_parser_->post_Reference ();
              this->who ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "communicationMethod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->communicationMethod_parser_)
            {
              this->communicationMethod_parser_->pre ();
              ctx.nested_parser (this->communicationMethod_parser_);
            }
          }
          else
          {
            if (this->communicationMethod_parser_ != 0)
            {
              this->communicationMethod_parser_->post_CodeableConcept ();
              this->communicationMethod ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "validationStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validationStatus_parser_)
            {
              this->validationStatus_parser_->pre ();
              ctx.nested_parser (this->validationStatus_parser_);
            }
          }
          else
          {
            if (this->validationStatus_parser_ != 0)
            {
              this->validationStatus_parser_->post_CodeableConcept ();
              this->validationStatus ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "validationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validationDate_parser_)
            {
              this->validationDate_parser_->pre ();
              ctx.nested_parser (this->validationDate_parser_);
            }
          }
          else
          {
            if (this->validationDate_parser_ != 0)
            {
              this->validationDate_parser_->post_dateTime ();
              this->validationDate ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "canPushUpdates" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->canPushUpdates_parser_)
            {
              this->canPushUpdates_parser_->pre ();
              ctx.nested_parser (this->canPushUpdates_parser_);
            }
          }
          else
          {
            if (this->canPushUpdates_parser_ != 0)
            {
              this->canPushUpdates_parser_->post_CodeableConcept ();
              this->canPushUpdates ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "pushTypeAvailable" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->pushTypeAvailable_parser_)
            {
              this->pushTypeAvailable_parser_->pre ();
              ctx.nested_parser (this->pushTypeAvailable_parser_);
            }
          }
          else
          {
            if (this->pushTypeAvailable_parser_ != 0)
            {
              this->pushTypeAvailable_parser_->post_CodeableConcept ();
              this->pushTypeAvailable ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for VerificationResult_Attestation_pskel.
  //
  bool VerificationResult_Attestation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "who" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "onBehalfOf" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "communicationMethod" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "date" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "sourceIdentityCertificate" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "proxyIdentityCertificate" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "proxySignature" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "sourceSignature" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &VerificationResult_Attestation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool VerificationResult_Attestation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void VerificationResult_Attestation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void VerificationResult_Attestation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void VerificationResult_Attestation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "who" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->who_parser_)
            {
              this->who_parser_->pre ();
              ctx.nested_parser (this->who_parser_);
            }
          }
          else
          {
            if (this->who_parser_ != 0)
            {
              this->who_parser_->post_Reference ();
              this->who ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "onBehalfOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onBehalfOf_parser_)
            {
              this->onBehalfOf_parser_->pre ();
              ctx.nested_parser (this->onBehalfOf_parser_);
            }
          }
          else
          {
            if (this->onBehalfOf_parser_ != 0)
            {
              this->onBehalfOf_parser_->post_Reference ();
              this->onBehalfOf ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "communicationMethod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->communicationMethod_parser_)
            {
              this->communicationMethod_parser_->pre ();
              ctx.nested_parser (this->communicationMethod_parser_);
            }
          }
          else
          {
            if (this->communicationMethod_parser_ != 0)
            {
              this->communicationMethod_parser_->post_CodeableConcept ();
              this->communicationMethod ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_date ();
              this->date ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "sourceIdentityCertificate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceIdentityCertificate_parser_)
            {
              this->sourceIdentityCertificate_parser_->pre ();
              ctx.nested_parser (this->sourceIdentityCertificate_parser_);
            }
          }
          else
          {
            if (this->sourceIdentityCertificate_parser_ != 0)
            {
              this->sourceIdentityCertificate_parser_->post_string ();
              this->sourceIdentityCertificate ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "proxyIdentityCertificate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->proxyIdentityCertificate_parser_)
            {
              this->proxyIdentityCertificate_parser_->pre ();
              ctx.nested_parser (this->proxyIdentityCertificate_parser_);
            }
          }
          else
          {
            if (this->proxyIdentityCertificate_parser_ != 0)
            {
              this->proxyIdentityCertificate_parser_->post_string ();
              this->proxyIdentityCertificate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "proxySignature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->proxySignature_parser_)
            {
              this->proxySignature_parser_->pre ();
              ctx.nested_parser (this->proxySignature_parser_);
            }
          }
          else
          {
            if (this->proxySignature_parser_ != 0)
            {
              this->proxySignature_parser_->post_Signature ();
              this->proxySignature ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "sourceSignature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceSignature_parser_)
            {
              this->sourceSignature_parser_->pre ();
              ctx.nested_parser (this->sourceSignature_parser_);
            }
          }
          else
          {
            if (this->sourceSignature_parser_ != 0)
            {
              this->sourceSignature_parser_->post_Signature ();
              this->sourceSignature ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for VerificationResult_Validator_pskel.
  //
  bool VerificationResult_Validator_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "organization" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &VerificationResult_Validator_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool VerificationResult_Validator_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void VerificationResult_Validator_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void VerificationResult_Validator_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void VerificationResult_Validator_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "organization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organization_parser_)
            {
              this->organization_parser_->pre ();
              ctx.nested_parser (this->organization_parser_);
            }
          }
          else
          {
            if (this->organization_parser_ != 0)
            {
              this->organization_parser_->post_Reference ();
              this->organization ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identityCertificate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identityCertificate_parser_)
            {
              this->identityCertificate_parser_->pre ();
              ctx.nested_parser (this->identityCertificate_parser_);
            }
          }
          else
          {
            if (this->identityCertificate_parser_ != 0)
            {
              this->identityCertificate_parser_->post_string ();
              this->identityCertificate ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "attestationSignature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->attestationSignature_parser_)
            {
              this->attestationSignature_parser_->pre ();
              ctx.nested_parser (this->attestationSignature_parser_);
            }
          }
          else
          {
            if (this->attestationSignature_parser_ != 0)
            {
              this->attestationSignature_parser_->post_Signature ();
              this->attestationSignature ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for status_pskel.
  //
  bool status_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_status_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

