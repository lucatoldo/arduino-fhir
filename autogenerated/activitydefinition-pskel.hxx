// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef ACTIVITYDEFINITION_PSKEL_HXX
#define ACTIVITYDEFINITION_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class ActivityDefinition_pskel;
  class ActivityDefinition_Participant_pskel;
  class ActivityDefinition_DynamicValue_pskel;
  class ActionParticipantType_list_pskel;
  class ActionParticipantType_pskel;
  class RequestIntent_list_pskel;
  class RequestIntent_pskel;
  class RequestResourceType_list_pskel;
  class RequestResourceType_pskel;
  class RequestPriority_list_pskel;
  class RequestPriority_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class ActivityDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    library ();

    virtual void
    kind ();

    virtual void
    profile ();

    virtual void
    code ();

    virtual void
    intent ();

    virtual void
    priority ();

    virtual void
    doNotPerform ();

    virtual void
    timingTiming ();

    virtual void
    timingDateTime ();

    virtual void
    timingAge ();

    virtual void
    timingPeriod ();

    virtual void
    timingRange ();

    virtual void
    timingDuration ();

    virtual void
    location ();

    virtual void
    participant ();

    virtual void
    productReference ();

    virtual void
    productCodeableConcept ();

    virtual void
    quantity ();

    virtual void
    dosage ();

    virtual void
    bodySite ();

    virtual void
    specimenRequirement ();

    virtual void
    observationRequirement ();

    virtual void
    observationResultRequirement ();

    virtual void
    transform ();

    virtual void
    dynamicValue ();

    virtual void
    post_ActivityDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::canonical_pskel& /* library */,
             ::fhir::RequestResourceType_pskel& /* kind */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::RequestIntent_pskel& /* intent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::Age_pskel& /* timingAge */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::Range_pskel& /* timingRange */,
             ::fhir::Duration_pskel& /* timingDuration */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::ActivityDefinition_Participant_pskel& /* participant */,
             ::fhir::Reference_pskel& /* productReference */,
             ::fhir::CodeableConcept_pskel& /* productCodeableConcept */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Dosage_pskel& /* dosage */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::Reference_pskel& /* specimenRequirement */,
             ::fhir::Reference_pskel& /* observationRequirement */,
             ::fhir::Reference_pskel& /* observationResultRequirement */,
             ::fhir::canonical_pskel& /* transform */,
             ::fhir::ActivityDefinition_DynamicValue_pskel& /* dynamicValue */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    library_parser (::fhir::canonical_pskel&);

    void
    kind_parser (::fhir::RequestResourceType_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    intent_parser (::fhir::RequestIntent_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    timingAge_parser (::fhir::Age_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    timingRange_parser (::fhir::Range_pskel&);

    void
    timingDuration_parser (::fhir::Duration_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    participant_parser (::fhir::ActivityDefinition_Participant_pskel&);

    void
    productReference_parser (::fhir::Reference_pskel&);

    void
    productCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    dosage_parser (::fhir::Dosage_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    specimenRequirement_parser (::fhir::Reference_pskel&);

    void
    observationRequirement_parser (::fhir::Reference_pskel&);

    void
    observationResultRequirement_parser (::fhir::Reference_pskel&);

    void
    transform_parser (::fhir::canonical_pskel&);

    void
    dynamicValue_parser (::fhir::ActivityDefinition_DynamicValue_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActivityDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActivityDefinition_pskel* ActivityDefinition_impl_;
    ActivityDefinition_pskel (ActivityDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::canonical_pskel* library_parser_;
    ::fhir::RequestResourceType_pskel* kind_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::RequestIntent_pskel* intent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::Age_pskel* timingAge_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::Range_pskel* timingRange_parser_;
    ::fhir::Duration_pskel* timingDuration_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::ActivityDefinition_Participant_pskel* participant_parser_;
    ::fhir::Reference_pskel* productReference_parser_;
    ::fhir::CodeableConcept_pskel* productCodeableConcept_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Dosage_pskel* dosage_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::Reference_pskel* specimenRequirement_parser_;
    ::fhir::Reference_pskel* observationRequirement_parser_;
    ::fhir::Reference_pskel* observationResultRequirement_parser_;
    ::fhir::canonical_pskel* transform_parser_;
    ::fhir::ActivityDefinition_DynamicValue_pskel* dynamicValue_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ActivityDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActivityDefinition_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    role ();

    virtual void
    post_ActivityDefinition_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ActionParticipantType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ActionParticipantType_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActivityDefinition_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActivityDefinition_Participant_pskel* ActivityDefinition_Participant_impl_;
    ActivityDefinition_Participant_pskel (ActivityDefinition_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ActionParticipantType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ActivityDefinition_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActivityDefinition_DynamicValue_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    expression ();

    virtual void
    post_ActivityDefinition_DynamicValue ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::Expression_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActivityDefinition_DynamicValue_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActivityDefinition_DynamicValue_pskel* ActivityDefinition_DynamicValue_impl_;
    ActivityDefinition_DynamicValue_pskel (ActivityDefinition_DynamicValue_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::Expression_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ActivityDefinition_DynamicValue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActionParticipantType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionParticipantType_list ();

    // Constructor.
    //
    ActionParticipantType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionParticipantType_list_pskel* ActionParticipantType_list_impl_;
    ActionParticipantType_list_pskel (ActionParticipantType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionParticipantType_list_pskel_enums_[4UL];
  };

  class ActionParticipantType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionParticipantType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionParticipantType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionParticipantType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionParticipantType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionParticipantType_pskel* ActionParticipantType_impl_;
    ActionParticipantType_pskel (ActionParticipantType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionParticipantType_list_pskel* value_parser_;
  };

  class RequestIntent_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RequestIntent_list ();

    // Constructor.
    //
    RequestIntent_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestIntent_list_pskel* RequestIntent_list_impl_;
    RequestIntent_list_pskel (RequestIntent_list_pskel*, void*);

    protected:
    static const char* const _xsde_RequestIntent_list_pskel_enums_[9UL];
  };

  class RequestIntent_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RequestIntent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RequestIntent_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RequestIntent_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestIntent_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestIntent_pskel* RequestIntent_impl_;
    RequestIntent_pskel (RequestIntent_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RequestIntent_list_pskel* value_parser_;
  };

  class RequestResourceType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RequestResourceType_list ();

    // Constructor.
    //
    RequestResourceType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestResourceType_list_pskel* RequestResourceType_list_impl_;
    RequestResourceType_list_pskel (RequestResourceType_list_pskel*, void*);

    protected:
    static const char* const _xsde_RequestResourceType_list_pskel_enums_[15UL];
  };

  class RequestResourceType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RequestResourceType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RequestResourceType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RequestResourceType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestResourceType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestResourceType_pskel* RequestResourceType_impl_;
    RequestResourceType_pskel (RequestResourceType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RequestResourceType_list_pskel* value_parser_;
  };

  class RequestPriority_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RequestPriority_list ();

    // Constructor.
    //
    RequestPriority_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestPriority_list_pskel* RequestPriority_list_impl_;
    RequestPriority_list_pskel (RequestPriority_list_pskel*, void*);

    protected:
    static const char* const _xsde_RequestPriority_list_pskel_enums_[4UL];
  };

  class RequestPriority_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RequestPriority ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RequestPriority_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RequestPriority_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestPriority_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestPriority_pskel* RequestPriority_impl_;
    RequestPriority_pskel (RequestPriority_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RequestPriority_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ACTIVITYDEFINITION_PSKEL_HXX
