// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "devicerequest-pskel.hxx"

namespace fhir
{
  // DeviceRequest_pskel
  //

  void DeviceRequest_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void DeviceRequest_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void DeviceRequest_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void DeviceRequest_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void DeviceRequest_pskel::
  priorRequest_parser (::fhir::Reference_pskel& p)
  {
    this->priorRequest_parser_ = &p;
  }

  void DeviceRequest_pskel::
  groupIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->groupIdentifier_parser_ = &p;
  }

  void DeviceRequest_pskel::
  status_parser (::fhir::RequestStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void DeviceRequest_pskel::
  intent_parser (::fhir::RequestIntent_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void DeviceRequest_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void DeviceRequest_pskel::
  codeReference_parser (::fhir::Reference_pskel& p)
  {
    this->codeReference_parser_ = &p;
  }

  void DeviceRequest_pskel::
  codeCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->codeCodeableConcept_parser_ = &p;
  }

  void DeviceRequest_pskel::
  parameter_parser (::fhir::DeviceRequest_Parameter_pskel& p)
  {
    this->parameter_parser_ = &p;
  }

  void DeviceRequest_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void DeviceRequest_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void DeviceRequest_pskel::
  occurrenceDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->occurrenceDateTime_parser_ = &p;
  }

  void DeviceRequest_pskel::
  occurrencePeriod_parser (::fhir::Period_pskel& p)
  {
    this->occurrencePeriod_parser_ = &p;
  }

  void DeviceRequest_pskel::
  occurrenceTiming_parser (::fhir::Timing_pskel& p)
  {
    this->occurrenceTiming_parser_ = &p;
  }

  void DeviceRequest_pskel::
  authoredOn_parser (::fhir::dateTime_pskel& p)
  {
    this->authoredOn_parser_ = &p;
  }

  void DeviceRequest_pskel::
  requester_parser (::fhir::Reference_pskel& p)
  {
    this->requester_parser_ = &p;
  }

  void DeviceRequest_pskel::
  performerType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->performerType_parser_ = &p;
  }

  void DeviceRequest_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void DeviceRequest_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void DeviceRequest_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void DeviceRequest_pskel::
  insurance_parser (::fhir::Reference_pskel& p)
  {
    this->insurance_parser_ = &p;
  }

  void DeviceRequest_pskel::
  supportingInfo_parser (::fhir::Reference_pskel& p)
  {
    this->supportingInfo_parser_ = &p;
  }

  void DeviceRequest_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void DeviceRequest_pskel::
  relevantHistory_parser (::fhir::Reference_pskel& p)
  {
    this->relevantHistory_parser_ = &p;
  }

  void DeviceRequest_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& priorRequest,
           ::fhir::Identifier_pskel& groupIdentifier,
           ::fhir::RequestStatus_pskel& status,
           ::fhir::RequestIntent_pskel& intent,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::Reference_pskel& codeReference,
           ::fhir::CodeableConcept_pskel& codeCodeableConcept,
           ::fhir::DeviceRequest_Parameter_pskel& parameter,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& occurrenceDateTime,
           ::fhir::Period_pskel& occurrencePeriod,
           ::fhir::Timing_pskel& occurrenceTiming,
           ::fhir::dateTime_pskel& authoredOn,
           ::fhir::Reference_pskel& requester,
           ::fhir::CodeableConcept_pskel& performerType,
           ::fhir::Reference_pskel& performer,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Reference_pskel& insurance,
           ::fhir::Reference_pskel& supportingInfo,
           ::fhir::Annotation_pskel& note,
           ::fhir::Reference_pskel& relevantHistory)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->basedOn_parser_ = &basedOn;
    this->priorRequest_parser_ = &priorRequest;
    this->groupIdentifier_parser_ = &groupIdentifier;
    this->status_parser_ = &status;
    this->intent_parser_ = &intent;
    this->priority_parser_ = &priority;
    this->codeReference_parser_ = &codeReference;
    this->codeCodeableConcept_parser_ = &codeCodeableConcept;
    this->parameter_parser_ = &parameter;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->occurrenceDateTime_parser_ = &occurrenceDateTime;
    this->occurrencePeriod_parser_ = &occurrencePeriod;
    this->occurrenceTiming_parser_ = &occurrenceTiming;
    this->authoredOn_parser_ = &authoredOn;
    this->requester_parser_ = &requester;
    this->performerType_parser_ = &performerType;
    this->performer_parser_ = &performer;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->insurance_parser_ = &insurance;
    this->supportingInfo_parser_ = &supportingInfo;
    this->note_parser_ = &note;
    this->relevantHistory_parser_ = &relevantHistory;
  }

  DeviceRequest_pskel::
  DeviceRequest_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    DeviceRequest_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    priorRequest_parser_ (0),
    groupIdentifier_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    codeReference_parser_ (0),
    codeCodeableConcept_parser_ (0),
    parameter_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    authoredOn_parser_ (0),
    requester_parser_ (0),
    performerType_parser_ (0),
    performer_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    insurance_parser_ (0),
    supportingInfo_parser_ (0),
    note_parser_ (0),
    relevantHistory_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceRequest_pskel::
  DeviceRequest_pskel (DeviceRequest_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    DeviceRequest_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    priorRequest_parser_ (0),
    groupIdentifier_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    codeReference_parser_ (0),
    codeCodeableConcept_parser_ (0),
    parameter_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    authoredOn_parser_ (0),
    requester_parser_ (0),
    performerType_parser_ (0),
    performer_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    insurance_parser_ (0),
    supportingInfo_parser_ (0),
    note_parser_ (0),
    relevantHistory_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceRequest_Parameter_pskel
  //

  void DeviceRequest_Parameter_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void DeviceRequest_Parameter_pskel::
  valueCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCodeableConcept_parser_ = &p;
  }

  void DeviceRequest_Parameter_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void DeviceRequest_Parameter_pskel::
  valueRange_parser (::fhir::Range_pskel& p)
  {
    this->valueRange_parser_ = &p;
  }

  void DeviceRequest_Parameter_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void DeviceRequest_Parameter_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& valueCodeableConcept,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Range_pskel& valueRange,
           ::fhir::boolean_pskel& valueBoolean)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->valueCodeableConcept_parser_ = &valueCodeableConcept;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueRange_parser_ = &valueRange;
    this->valueBoolean_parser_ = &valueBoolean;
  }

  DeviceRequest_Parameter_pskel::
  DeviceRequest_Parameter_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceRequest_Parameter_impl_ (0),
    code_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueBoolean_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceRequest_Parameter_pskel::
  DeviceRequest_Parameter_pskel (DeviceRequest_Parameter_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceRequest_Parameter_impl_ (impl),
    code_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueBoolean_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // DeviceRequest_pskel
  //

  void DeviceRequest_pskel::
  identifier ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->identifier ();
  }

  void DeviceRequest_pskel::
  instantiatesCanonical ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->instantiatesCanonical ();
  }

  void DeviceRequest_pskel::
  instantiatesUri ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->instantiatesUri ();
  }

  void DeviceRequest_pskel::
  basedOn ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->basedOn ();
  }

  void DeviceRequest_pskel::
  priorRequest ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->priorRequest ();
  }

  void DeviceRequest_pskel::
  groupIdentifier ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->groupIdentifier ();
  }

  void DeviceRequest_pskel::
  status ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->status ();
  }

  void DeviceRequest_pskel::
  intent ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->intent ();
  }

  void DeviceRequest_pskel::
  priority ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->priority ();
  }

  void DeviceRequest_pskel::
  codeReference ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->codeReference ();
  }

  void DeviceRequest_pskel::
  codeCodeableConcept ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->codeCodeableConcept ();
  }

  void DeviceRequest_pskel::
  parameter ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->parameter ();
  }

  void DeviceRequest_pskel::
  subject ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->subject ();
  }

  void DeviceRequest_pskel::
  encounter ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->encounter ();
  }

  void DeviceRequest_pskel::
  occurrenceDateTime ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->occurrenceDateTime ();
  }

  void DeviceRequest_pskel::
  occurrencePeriod ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->occurrencePeriod ();
  }

  void DeviceRequest_pskel::
  occurrenceTiming ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->occurrenceTiming ();
  }

  void DeviceRequest_pskel::
  authoredOn ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->authoredOn ();
  }

  void DeviceRequest_pskel::
  requester ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->requester ();
  }

  void DeviceRequest_pskel::
  performerType ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->performerType ();
  }

  void DeviceRequest_pskel::
  performer ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->performer ();
  }

  void DeviceRequest_pskel::
  reasonCode ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->reasonCode ();
  }

  void DeviceRequest_pskel::
  reasonReference ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->reasonReference ();
  }

  void DeviceRequest_pskel::
  insurance ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->insurance ();
  }

  void DeviceRequest_pskel::
  supportingInfo ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->supportingInfo ();
  }

  void DeviceRequest_pskel::
  note ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->note ();
  }

  void DeviceRequest_pskel::
  relevantHistory ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->relevantHistory ();
  }

  void DeviceRequest_pskel::
  post_DeviceRequest ()
  {
    if (this->DeviceRequest_impl_)
      this->DeviceRequest_impl_->post_DeviceRequest ();
    else
      post_DomainResource ();
  }

  void DeviceRequest_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->priorRequest_parser_)
      this->priorRequest_parser_->_reset ();

    if (this->groupIdentifier_parser_)
      this->groupIdentifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->codeReference_parser_)
      this->codeReference_parser_->_reset ();

    if (this->codeCodeableConcept_parser_)
      this->codeCodeableConcept_parser_->_reset ();

    if (this->parameter_parser_)
      this->parameter_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->occurrenceDateTime_parser_)
      this->occurrenceDateTime_parser_->_reset ();

    if (this->occurrencePeriod_parser_)
      this->occurrencePeriod_parser_->_reset ();

    if (this->occurrenceTiming_parser_)
      this->occurrenceTiming_parser_->_reset ();

    if (this->authoredOn_parser_)
      this->authoredOn_parser_->_reset ();

    if (this->requester_parser_)
      this->requester_parser_->_reset ();

    if (this->performerType_parser_)
      this->performerType_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->insurance_parser_)
      this->insurance_parser_->_reset ();

    if (this->supportingInfo_parser_)
      this->supportingInfo_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->relevantHistory_parser_)
      this->relevantHistory_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceRequest_Parameter_pskel
  //

  void DeviceRequest_Parameter_pskel::
  code ()
  {
    if (this->DeviceRequest_Parameter_impl_)
      this->DeviceRequest_Parameter_impl_->code ();
  }

  void DeviceRequest_Parameter_pskel::
  valueCodeableConcept ()
  {
    if (this->DeviceRequest_Parameter_impl_)
      this->DeviceRequest_Parameter_impl_->valueCodeableConcept ();
  }

  void DeviceRequest_Parameter_pskel::
  valueQuantity ()
  {
    if (this->DeviceRequest_Parameter_impl_)
      this->DeviceRequest_Parameter_impl_->valueQuantity ();
  }

  void DeviceRequest_Parameter_pskel::
  valueRange ()
  {
    if (this->DeviceRequest_Parameter_impl_)
      this->DeviceRequest_Parameter_impl_->valueRange ();
  }

  void DeviceRequest_Parameter_pskel::
  valueBoolean ()
  {
    if (this->DeviceRequest_Parameter_impl_)
      this->DeviceRequest_Parameter_impl_->valueBoolean ();
  }

  void DeviceRequest_Parameter_pskel::
  post_DeviceRequest_Parameter ()
  {
    if (this->DeviceRequest_Parameter_impl_)
      this->DeviceRequest_Parameter_impl_->post_DeviceRequest_Parameter ();
    else
      post_BackboneElement ();
  }

  void DeviceRequest_Parameter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->valueCodeableConcept_parser_)
      this->valueCodeableConcept_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueRange_parser_)
      this->valueRange_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for DeviceRequest_pskel.
  //
  bool DeviceRequest_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "priorRequest" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "groupIdentifier" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "intent" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceRequest_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceRequest_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceRequest_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceRequest_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceRequest_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "priorRequest" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priorRequest_parser_)
            {
              this->priorRequest_parser_->pre ();
              ctx.nested_parser (this->priorRequest_parser_);
            }
          }
          else
          {
            if (this->priorRequest_parser_ != 0)
            {
              this->priorRequest_parser_->post_Reference ();
              this->priorRequest ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "groupIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupIdentifier_parser_)
            {
              this->groupIdentifier_parser_->pre ();
              ctx.nested_parser (this->groupIdentifier_parser_);
            }
          }
          else
          {
            if (this->groupIdentifier_parser_ != 0)
            {
              this->groupIdentifier_parser_->post_Identifier ();
              this->groupIdentifier ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_RequestStatus ();
              this->status ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_RequestIntent ();
              this->intent ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "codeReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->codeReference_parser_)
            {
              this->codeReference_parser_->pre ();
              ctx.nested_parser (this->codeReference_parser_);
            }
          }
          else
          {
            if (this->codeReference_parser_ != 0)
            {
              this->codeReference_parser_->post_Reference ();
              this->codeReference ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "codeCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->codeCodeableConcept_parser_)
            {
              this->codeCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->codeCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->codeCodeableConcept_parser_ != 0)
            {
              this->codeCodeableConcept_parser_->post_CodeableConcept ();
              this->codeCodeableConcept ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "parameter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parameter_parser_)
            {
              this->parameter_parser_->pre ();
              ctx.nested_parser (this->parameter_parser_);
            }
          }
          else
          {
            if (this->parameter_parser_ != 0)
            {
              this->parameter_parser_->post_DeviceRequest_Parameter ();
              this->parameter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "occurrenceDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceDateTime_parser_)
            {
              this->occurrenceDateTime_parser_->pre ();
              ctx.nested_parser (this->occurrenceDateTime_parser_);
            }
          }
          else
          {
            if (this->occurrenceDateTime_parser_ != 0)
            {
              this->occurrenceDateTime_parser_->post_dateTime ();
              this->occurrenceDateTime ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "occurrencePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrencePeriod_parser_)
            {
              this->occurrencePeriod_parser_->pre ();
              ctx.nested_parser (this->occurrencePeriod_parser_);
            }
          }
          else
          {
            if (this->occurrencePeriod_parser_ != 0)
            {
              this->occurrencePeriod_parser_->post_Period ();
              this->occurrencePeriod ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "occurrenceTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceTiming_parser_)
            {
              this->occurrenceTiming_parser_->pre ();
              ctx.nested_parser (this->occurrenceTiming_parser_);
            }
          }
          else
          {
            if (this->occurrenceTiming_parser_ != 0)
            {
              this->occurrenceTiming_parser_->post_Timing ();
              this->occurrenceTiming ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "authoredOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authoredOn_parser_)
            {
              this->authoredOn_parser_->pre ();
              ctx.nested_parser (this->authoredOn_parser_);
            }
          }
          else
          {
            if (this->authoredOn_parser_ != 0)
            {
              this->authoredOn_parser_->post_dateTime ();
              this->authoredOn ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "requester" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requester_parser_)
            {
              this->requester_parser_->pre ();
              ctx.nested_parser (this->requester_parser_);
            }
          }
          else
          {
            if (this->requester_parser_ != 0)
            {
              this->requester_parser_->post_Reference ();
              this->requester ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "performerType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performerType_parser_)
            {
              this->performerType_parser_->pre ();
              ctx.nested_parser (this->performerType_parser_);
            }
          }
          else
          {
            if (this->performerType_parser_ != 0)
            {
              this->performerType_parser_->post_CodeableConcept ();
              this->performerType ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "insurance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurance_parser_)
            {
              this->insurance_parser_->pre ();
              ctx.nested_parser (this->insurance_parser_);
            }
          }
          else
          {
            if (this->insurance_parser_ != 0)
            {
              this->insurance_parser_->post_Reference ();
              this->insurance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "supportingInfo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInfo_parser_)
            {
              this->supportingInfo_parser_->pre ();
              ctx.nested_parser (this->supportingInfo_parser_);
            }
          }
          else
          {
            if (this->supportingInfo_parser_ != 0)
            {
              this->supportingInfo_parser_->post_Reference ();
              this->supportingInfo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "relevantHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relevantHistory_parser_)
            {
              this->relevantHistory_parser_->pre ();
              ctx.nested_parser (this->relevantHistory_parser_);
            }
          }
          else
          {
            if (this->relevantHistory_parser_ != 0)
            {
              this->relevantHistory_parser_->post_Reference ();
              this->relevantHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceRequest_Parameter_pskel.
  //
  bool DeviceRequest_Parameter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "valueCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "valueQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "valueRange" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "valueBoolean" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceRequest_Parameter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceRequest_Parameter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceRequest_Parameter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceRequest_Parameter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void DeviceRequest_Parameter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCodeableConcept_parser_)
            {
              this->valueCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->valueCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->valueCodeableConcept_parser_ != 0)
            {
              this->valueCodeableConcept_parser_->post_CodeableConcept ();
              this->valueCodeableConcept ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRange_parser_)
            {
              this->valueRange_parser_->pre ();
              ctx.nested_parser (this->valueRange_parser_);
            }
          }
          else
          {
            if (this->valueRange_parser_ != 0)
            {
              this->valueRange_parser_->post_Range ();
              this->valueRange ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

