// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "supplydelivery-pskel.hxx"

namespace fhir
{
  // SupplyDelivery_pskel
  //

  void SupplyDelivery_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  status_parser (::fhir::SupplyDeliveryStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  suppliedItem_parser (::fhir::SupplyDelivery_SuppliedItem_pskel& p)
  {
    this->suppliedItem_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  occurrenceDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->occurrenceDateTime_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  occurrencePeriod_parser (::fhir::Period_pskel& p)
  {
    this->occurrencePeriod_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  occurrenceTiming_parser (::fhir::Timing_pskel& p)
  {
    this->occurrenceTiming_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  supplier_parser (::fhir::Reference_pskel& p)
  {
    this->supplier_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  destination_parser (::fhir::Reference_pskel& p)
  {
    this->destination_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  receiver_parser (::fhir::Reference_pskel& p)
  {
    this->receiver_parser_ = &p;
  }

  void SupplyDelivery_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& partOf,
           ::fhir::SupplyDeliveryStatus_pskel& status,
           ::fhir::Reference_pskel& patient,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::SupplyDelivery_SuppliedItem_pskel& suppliedItem,
           ::fhir::dateTime_pskel& occurrenceDateTime,
           ::fhir::Period_pskel& occurrencePeriod,
           ::fhir::Timing_pskel& occurrenceTiming,
           ::fhir::Reference_pskel& supplier,
           ::fhir::Reference_pskel& destination,
           ::fhir::Reference_pskel& receiver)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->basedOn_parser_ = &basedOn;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->patient_parser_ = &patient;
    this->type_parser_ = &type;
    this->suppliedItem_parser_ = &suppliedItem;
    this->occurrenceDateTime_parser_ = &occurrenceDateTime;
    this->occurrencePeriod_parser_ = &occurrencePeriod;
    this->occurrenceTiming_parser_ = &occurrenceTiming;
    this->supplier_parser_ = &supplier;
    this->destination_parser_ = &destination;
    this->receiver_parser_ = &receiver;
  }

  SupplyDelivery_pskel::
  SupplyDelivery_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    SupplyDelivery_impl_ (0),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    patient_parser_ (0),
    type_parser_ (0),
    suppliedItem_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    supplier_parser_ (0),
    destination_parser_ (0),
    receiver_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SupplyDelivery_pskel::
  SupplyDelivery_pskel (SupplyDelivery_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    SupplyDelivery_impl_ (impl),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    patient_parser_ (0),
    type_parser_ (0),
    suppliedItem_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    supplier_parser_ (0),
    destination_parser_ (0),
    receiver_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SupplyDelivery_SuppliedItem_pskel
  //

  void SupplyDelivery_SuppliedItem_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void SupplyDelivery_SuppliedItem_pskel::
  itemCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->itemCodeableConcept_parser_ = &p;
  }

  void SupplyDelivery_SuppliedItem_pskel::
  itemReference_parser (::fhir::Reference_pskel& p)
  {
    this->itemReference_parser_ = &p;
  }

  void SupplyDelivery_SuppliedItem_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::CodeableConcept_pskel& itemCodeableConcept,
           ::fhir::Reference_pskel& itemReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->quantity_parser_ = &quantity;
    this->itemCodeableConcept_parser_ = &itemCodeableConcept;
    this->itemReference_parser_ = &itemReference;
  }

  SupplyDelivery_SuppliedItem_pskel::
  SupplyDelivery_SuppliedItem_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SupplyDelivery_SuppliedItem_impl_ (0),
    quantity_parser_ (0),
    itemCodeableConcept_parser_ (0),
    itemReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SupplyDelivery_SuppliedItem_pskel::
  SupplyDelivery_SuppliedItem_pskel (SupplyDelivery_SuppliedItem_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SupplyDelivery_SuppliedItem_impl_ (impl),
    quantity_parser_ (0),
    itemCodeableConcept_parser_ (0),
    itemReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SupplyDeliveryStatus_list_pskel
  //

  SupplyDeliveryStatus_list_pskel::
  SupplyDeliveryStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    SupplyDeliveryStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_SupplyDeliveryStatus_list_pskel_enums_, 4UL);
  }

  SupplyDeliveryStatus_list_pskel::
  SupplyDeliveryStatus_list_pskel (SupplyDeliveryStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    SupplyDeliveryStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_SupplyDeliveryStatus_list_pskel_enums_, 4UL);
  }

  // SupplyDeliveryStatus_pskel
  //

  void SupplyDeliveryStatus_pskel::
  value_parser (::fhir::SupplyDeliveryStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void SupplyDeliveryStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::SupplyDeliveryStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  SupplyDeliveryStatus_pskel::
  SupplyDeliveryStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    SupplyDeliveryStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  SupplyDeliveryStatus_pskel::
  SupplyDeliveryStatus_pskel (SupplyDeliveryStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    SupplyDeliveryStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // SupplyDelivery_pskel
  //

  void SupplyDelivery_pskel::
  identifier ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->identifier ();
  }

  void SupplyDelivery_pskel::
  basedOn ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->basedOn ();
  }

  void SupplyDelivery_pskel::
  partOf ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->partOf ();
  }

  void SupplyDelivery_pskel::
  status ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->status ();
  }

  void SupplyDelivery_pskel::
  patient ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->patient ();
  }

  void SupplyDelivery_pskel::
  type ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->type ();
  }

  void SupplyDelivery_pskel::
  suppliedItem ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->suppliedItem ();
  }

  void SupplyDelivery_pskel::
  occurrenceDateTime ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->occurrenceDateTime ();
  }

  void SupplyDelivery_pskel::
  occurrencePeriod ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->occurrencePeriod ();
  }

  void SupplyDelivery_pskel::
  occurrenceTiming ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->occurrenceTiming ();
  }

  void SupplyDelivery_pskel::
  supplier ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->supplier ();
  }

  void SupplyDelivery_pskel::
  destination ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->destination ();
  }

  void SupplyDelivery_pskel::
  receiver ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->receiver ();
  }

  void SupplyDelivery_pskel::
  post_SupplyDelivery ()
  {
    if (this->SupplyDelivery_impl_)
      this->SupplyDelivery_impl_->post_SupplyDelivery ();
    else
      post_DomainResource ();
  }

  void SupplyDelivery_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->suppliedItem_parser_)
      this->suppliedItem_parser_->_reset ();

    if (this->occurrenceDateTime_parser_)
      this->occurrenceDateTime_parser_->_reset ();

    if (this->occurrencePeriod_parser_)
      this->occurrencePeriod_parser_->_reset ();

    if (this->occurrenceTiming_parser_)
      this->occurrenceTiming_parser_->_reset ();

    if (this->supplier_parser_)
      this->supplier_parser_->_reset ();

    if (this->destination_parser_)
      this->destination_parser_->_reset ();

    if (this->receiver_parser_)
      this->receiver_parser_->_reset ();

    this->resetting_ = false;
  }

  // SupplyDelivery_SuppliedItem_pskel
  //

  void SupplyDelivery_SuppliedItem_pskel::
  quantity ()
  {
    if (this->SupplyDelivery_SuppliedItem_impl_)
      this->SupplyDelivery_SuppliedItem_impl_->quantity ();
  }

  void SupplyDelivery_SuppliedItem_pskel::
  itemCodeableConcept ()
  {
    if (this->SupplyDelivery_SuppliedItem_impl_)
      this->SupplyDelivery_SuppliedItem_impl_->itemCodeableConcept ();
  }

  void SupplyDelivery_SuppliedItem_pskel::
  itemReference ()
  {
    if (this->SupplyDelivery_SuppliedItem_impl_)
      this->SupplyDelivery_SuppliedItem_impl_->itemReference ();
  }

  void SupplyDelivery_SuppliedItem_pskel::
  post_SupplyDelivery_SuppliedItem ()
  {
    if (this->SupplyDelivery_SuppliedItem_impl_)
      this->SupplyDelivery_SuppliedItem_impl_->post_SupplyDelivery_SuppliedItem ();
    else
      post_BackboneElement ();
  }

  void SupplyDelivery_SuppliedItem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->itemCodeableConcept_parser_)
      this->itemCodeableConcept_parser_->_reset ();

    if (this->itemReference_parser_)
      this->itemReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // SupplyDeliveryStatus_list_pskel
  //

  void SupplyDeliveryStatus_list_pskel::
  post_SupplyDeliveryStatus_list ()
  {
    if (this->SupplyDeliveryStatus_list_impl_)
      this->SupplyDeliveryStatus_list_impl_->post_SupplyDeliveryStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const SupplyDeliveryStatus_list_pskel::_xsde_SupplyDeliveryStatus_list_pskel_enums_[4UL] = 
  {
    "abandoned",
    "completed",
    "entered-in-error",
    "in-progress"
  };

  // SupplyDeliveryStatus_pskel
  //

  void SupplyDeliveryStatus_pskel::
  value ()
  {
    if (this->SupplyDeliveryStatus_impl_)
      this->SupplyDeliveryStatus_impl_->value ();
  }

  void SupplyDeliveryStatus_pskel::
  post_SupplyDeliveryStatus ()
  {
    if (this->SupplyDeliveryStatus_impl_)
      this->SupplyDeliveryStatus_impl_->post_SupplyDeliveryStatus ();
    else
      post_Element ();
  }

  void SupplyDeliveryStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for SupplyDelivery_pskel.
  //
  bool SupplyDelivery_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "patient" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "suppliedItem" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "occurrenceDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "occurrencePeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "occurrenceTiming" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "supplier" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "destination" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "receiver" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SupplyDelivery_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SupplyDelivery_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SupplyDelivery_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void SupplyDelivery_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SupplyDelivery_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_SupplyDeliveryStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "suppliedItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->suppliedItem_parser_)
            {
              this->suppliedItem_parser_->pre ();
              ctx.nested_parser (this->suppliedItem_parser_);
            }
          }
          else
          {
            if (this->suppliedItem_parser_ != 0)
            {
              this->suppliedItem_parser_->post_SupplyDelivery_SuppliedItem ();
              this->suppliedItem ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "occurrenceDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceDateTime_parser_)
            {
              this->occurrenceDateTime_parser_->pre ();
              ctx.nested_parser (this->occurrenceDateTime_parser_);
            }
          }
          else
          {
            if (this->occurrenceDateTime_parser_ != 0)
            {
              this->occurrenceDateTime_parser_->post_dateTime ();
              this->occurrenceDateTime ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "occurrencePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrencePeriod_parser_)
            {
              this->occurrencePeriod_parser_->pre ();
              ctx.nested_parser (this->occurrencePeriod_parser_);
            }
          }
          else
          {
            if (this->occurrencePeriod_parser_ != 0)
            {
              this->occurrencePeriod_parser_->post_Period ();
              this->occurrencePeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "occurrenceTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceTiming_parser_)
            {
              this->occurrenceTiming_parser_->pre ();
              ctx.nested_parser (this->occurrenceTiming_parser_);
            }
          }
          else
          {
            if (this->occurrenceTiming_parser_ != 0)
            {
              this->occurrenceTiming_parser_->post_Timing ();
              this->occurrenceTiming ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "supplier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supplier_parser_)
            {
              this->supplier_parser_->pre ();
              ctx.nested_parser (this->supplier_parser_);
            }
          }
          else
          {
            if (this->supplier_parser_ != 0)
            {
              this->supplier_parser_->post_Reference ();
              this->supplier ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "destination" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->destination_parser_)
            {
              this->destination_parser_->pre ();
              ctx.nested_parser (this->destination_parser_);
            }
          }
          else
          {
            if (this->destination_parser_ != 0)
            {
              this->destination_parser_->post_Reference ();
              this->destination ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "receiver" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->receiver_parser_)
            {
              this->receiver_parser_->pre ();
              ctx.nested_parser (this->receiver_parser_);
            }
          }
          else
          {
            if (this->receiver_parser_ != 0)
            {
              this->receiver_parser_->post_Reference ();
              this->receiver ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SupplyDelivery_SuppliedItem_pskel.
  //
  bool SupplyDelivery_SuppliedItem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "itemCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "itemReference" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SupplyDelivery_SuppliedItem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SupplyDelivery_SuppliedItem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SupplyDelivery_SuppliedItem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SupplyDelivery_SuppliedItem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SupplyDelivery_SuppliedItem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "itemCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemCodeableConcept_parser_)
            {
              this->itemCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->itemCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->itemCodeableConcept_parser_ != 0)
            {
              this->itemCodeableConcept_parser_->post_CodeableConcept ();
              this->itemCodeableConcept ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "itemReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemReference_parser_)
            {
              this->itemReference_parser_->pre ();
              ctx.nested_parser (this->itemReference_parser_);
            }
          }
          else
          {
            if (this->itemReference_parser_ != 0)
            {
              this->itemReference_parser_->post_Reference ();
              this->itemReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for SupplyDeliveryStatus_pskel.
  //
  bool SupplyDeliveryStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_SupplyDeliveryStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

