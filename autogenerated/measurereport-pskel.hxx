// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef MEASUREREPORT_PSKEL_HXX
#define MEASUREREPORT_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class MeasureReport_pskel;
  class MeasureReport_Group_pskel;
  class MeasureReport_Population_pskel;
  class MeasureReport_Stratifier_pskel;
  class MeasureReport_Stratum_pskel;
  class MeasureReport_Component_pskel;
  class MeasureReport_Population1_pskel;
  class MeasureReportStatus_list_pskel;
  class MeasureReportStatus_pskel;
  class MeasureReportType_list_pskel;
  class MeasureReportType_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class MeasureReport_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    measure ();

    virtual void
    subject ();

    virtual void
    date ();

    virtual void
    reporter ();

    virtual void
    period ();

    virtual void
    improvementNotation ();

    virtual void
    group ();

    virtual void
    evaluatedResource ();

    virtual void
    post_MeasureReport ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::MeasureReportStatus_pskel& /* status */,
             ::fhir::MeasureReportType_pskel& /* type */,
             ::fhir::canonical_pskel& /* measure */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* reporter */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::CodeableConcept_pskel& /* improvementNotation */,
             ::fhir::MeasureReport_Group_pskel& /* group */,
             ::fhir::Reference_pskel& /* evaluatedResource */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::MeasureReportStatus_pskel&);

    void
    type_parser (::fhir::MeasureReportType_pskel&);

    void
    measure_parser (::fhir::canonical_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    reporter_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    improvementNotation_parser (::fhir::CodeableConcept_pskel&);

    void
    group_parser (::fhir::MeasureReport_Group_pskel&);

    void
    evaluatedResource_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_pskel* MeasureReport_impl_;
    MeasureReport_pskel (MeasureReport_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::MeasureReportStatus_pskel* status_parser_;
    ::fhir::MeasureReportType_pskel* type_parser_;
    ::fhir::canonical_pskel* measure_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* reporter_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::CodeableConcept_pskel* improvementNotation_parser_;
    ::fhir::MeasureReport_Group_pskel* group_parser_;
    ::fhir::Reference_pskel* evaluatedResource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Group_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    population ();

    virtual void
    measureScore ();

    virtual void
    stratifier ();

    virtual void
    post_MeasureReport_Group ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::MeasureReport_Population_pskel& /* population */,
             ::fhir::Quantity_pskel& /* measureScore */,
             ::fhir::MeasureReport_Stratifier_pskel& /* stratifier */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    population_parser (::fhir::MeasureReport_Population_pskel&);

    void
    measureScore_parser (::fhir::Quantity_pskel&);

    void
    stratifier_parser (::fhir::MeasureReport_Stratifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Group_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Group_pskel* MeasureReport_Group_impl_;
    MeasureReport_Group_pskel (MeasureReport_Group_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::MeasureReport_Population_pskel* population_parser_;
    ::fhir::Quantity_pskel* measureScore_parser_;
    ::fhir::MeasureReport_Stratifier_pskel* stratifier_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Group_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Population_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    count ();

    virtual void
    subjectResults ();

    virtual void
    post_MeasureReport_Population ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::integer_pskel& /* count */,
             ::fhir::Reference_pskel& /* subjectResults */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    count_parser (::fhir::integer_pskel&);

    void
    subjectResults_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Population_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Population_pskel* MeasureReport_Population_impl_;
    MeasureReport_Population_pskel (MeasureReport_Population_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::integer_pskel* count_parser_;
    ::fhir::Reference_pskel* subjectResults_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Population_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Stratifier_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    stratum ();

    virtual void
    post_MeasureReport_Stratifier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::MeasureReport_Stratum_pskel& /* stratum */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    stratum_parser (::fhir::MeasureReport_Stratum_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Stratifier_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Stratifier_pskel* MeasureReport_Stratifier_impl_;
    MeasureReport_Stratifier_pskel (MeasureReport_Stratifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::MeasureReport_Stratum_pskel* stratum_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Stratifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Stratum_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    component ();

    virtual void
    population ();

    virtual void
    measureScore ();

    virtual void
    post_MeasureReport_Stratum ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* value */,
             ::fhir::MeasureReport_Component_pskel& /* component */,
             ::fhir::MeasureReport_Population1_pskel& /* population */,
             ::fhir::Quantity_pskel& /* measureScore */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::CodeableConcept_pskel&);

    void
    component_parser (::fhir::MeasureReport_Component_pskel&);

    void
    population_parser (::fhir::MeasureReport_Population1_pskel&);

    void
    measureScore_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Stratum_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Stratum_pskel* MeasureReport_Stratum_impl_;
    MeasureReport_Stratum_pskel (MeasureReport_Stratum_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* value_parser_;
    ::fhir::MeasureReport_Component_pskel* component_parser_;
    ::fhir::MeasureReport_Population1_pskel* population_parser_;
    ::fhir::Quantity_pskel* measureScore_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Stratum_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Component_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    value ();

    virtual void
    post_MeasureReport_Component ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* value */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Component_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Component_pskel* MeasureReport_Component_impl_;
    MeasureReport_Component_pskel (MeasureReport_Component_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Component_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Population1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    count ();

    virtual void
    subjectResults ();

    virtual void
    post_MeasureReport_Population1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::integer_pskel& /* count */,
             ::fhir::Reference_pskel& /* subjectResults */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    count_parser (::fhir::integer_pskel&);

    void
    subjectResults_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Population1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Population1_pskel* MeasureReport_Population1_impl_;
    MeasureReport_Population1_pskel (MeasureReport_Population1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::integer_pskel* count_parser_;
    ::fhir::Reference_pskel* subjectResults_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Population1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReportStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MeasureReportStatus_list ();

    // Constructor.
    //
    MeasureReportStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportStatus_list_pskel* MeasureReportStatus_list_impl_;
    MeasureReportStatus_list_pskel (MeasureReportStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_MeasureReportStatus_list_pskel_enums_[3UL];
  };

  class MeasureReportStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_MeasureReportStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::MeasureReportStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::MeasureReportStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReportStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportStatus_pskel* MeasureReportStatus_impl_;
    MeasureReportStatus_pskel (MeasureReportStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::MeasureReportStatus_list_pskel* value_parser_;
  };

  class MeasureReportType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MeasureReportType_list ();

    // Constructor.
    //
    MeasureReportType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportType_list_pskel* MeasureReportType_list_impl_;
    MeasureReportType_list_pskel (MeasureReportType_list_pskel*, void*);

    protected:
    static const char* const _xsde_MeasureReportType_list_pskel_enums_[4UL];
  };

  class MeasureReportType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_MeasureReportType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::MeasureReportType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::MeasureReportType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReportType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportType_pskel* MeasureReportType_impl_;
    MeasureReportType_pskel (MeasureReportType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::MeasureReportType_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MEASUREREPORT_PSKEL_HXX
