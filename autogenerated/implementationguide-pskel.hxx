// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef IMPLEMENTATIONGUIDE_PSKEL_HXX
#define IMPLEMENTATIONGUIDE_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class ImplementationGuide_pskel;
  class ImplementationGuide_DependsOn_pskel;
  class ImplementationGuide_Global_pskel;
  class ImplementationGuide_Definition_pskel;
  class ImplementationGuide_Grouping_pskel;
  class ImplementationGuide_Resource_pskel;
  class ImplementationGuide_Page_pskel;
  class ImplementationGuide_Parameter_pskel;
  class ImplementationGuide_Template_pskel;
  class ImplementationGuide_Manifest_pskel;
  class ImplementationGuide_Resource1_pskel;
  class ImplementationGuide_Page1_pskel;
  class GuideParameterCode_list_pskel;
  class GuideParameterCode_pskel;
  class SPDXLicense_list_pskel;
  class SPDXLicense_pskel;
  class GuidePageGeneration_list_pskel;
  class GuidePageGeneration_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class ImplementationGuide_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    packageId ();

    virtual void
    license ();

    virtual void
    fhirVersion ();

    virtual void
    dependsOn ();

    virtual void
    global ();

    virtual void
    definition ();

    virtual void
    manifest ();

    virtual void
    post_ImplementationGuide ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::id_pskel& /* packageId */,
             ::fhir::SPDXLicense_pskel& /* license */,
             ::fhir::FHIRVersion_pskel& /* fhirVersion */,
             ::fhir::ImplementationGuide_DependsOn_pskel& /* dependsOn */,
             ::fhir::ImplementationGuide_Global_pskel& /* global */,
             ::fhir::ImplementationGuide_Definition_pskel& /* definition */,
             ::fhir::ImplementationGuide_Manifest_pskel& /* manifest */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    packageId_parser (::fhir::id_pskel&);

    void
    license_parser (::fhir::SPDXLicense_pskel&);

    void
    fhirVersion_parser (::fhir::FHIRVersion_pskel&);

    void
    dependsOn_parser (::fhir::ImplementationGuide_DependsOn_pskel&);

    void
    global_parser (::fhir::ImplementationGuide_Global_pskel&);

    void
    definition_parser (::fhir::ImplementationGuide_Definition_pskel&);

    void
    manifest_parser (::fhir::ImplementationGuide_Manifest_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_pskel* ImplementationGuide_impl_;
    ImplementationGuide_pskel (ImplementationGuide_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::id_pskel* packageId_parser_;
    ::fhir::SPDXLicense_pskel* license_parser_;
    ::fhir::FHIRVersion_pskel* fhirVersion_parser_;
    ::fhir::ImplementationGuide_DependsOn_pskel* dependsOn_parser_;
    ::fhir::ImplementationGuide_Global_pskel* global_parser_;
    ::fhir::ImplementationGuide_Definition_pskel* definition_parser_;
    ::fhir::ImplementationGuide_Manifest_pskel* manifest_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_DependsOn_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    uri ();

    virtual void
    packageId ();

    virtual void
    version ();

    virtual void
    post_ImplementationGuide_DependsOn ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* uri */,
             ::fhir::id_pskel& /* packageId */,
             ::fhir::string_pskel& /* version */);

    // Individual element parsers.
    //
    void
    uri_parser (::fhir::canonical_pskel&);

    void
    packageId_parser (::fhir::id_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_DependsOn_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_DependsOn_pskel* ImplementationGuide_DependsOn_impl_;
    ImplementationGuide_DependsOn_pskel (ImplementationGuide_DependsOn_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* uri_parser_;
    ::fhir::id_pskel* packageId_parser_;
    ::fhir::string_pskel* version_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_DependsOn_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Global_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    post_ImplementationGuide_Global ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Global_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Global_pskel* ImplementationGuide_Global_impl_;
    ImplementationGuide_Global_pskel (ImplementationGuide_Global_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Global_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Definition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    grouping ();

    virtual void
    resource ();

    virtual void
    page ();

    virtual void
    parameter ();

    virtual void
    template_ ();

    virtual void
    post_ImplementationGuide_Definition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ImplementationGuide_Grouping_pskel& /* grouping */,
             ::fhir::ImplementationGuide_Resource_pskel& /* resource */,
             ::fhir::ImplementationGuide_Page_pskel& /* page */,
             ::fhir::ImplementationGuide_Parameter_pskel& /* parameter */,
             ::fhir::ImplementationGuide_Template_pskel& /* template */);

    // Individual element parsers.
    //
    void
    grouping_parser (::fhir::ImplementationGuide_Grouping_pskel&);

    void
    resource_parser (::fhir::ImplementationGuide_Resource_pskel&);

    void
    page_parser (::fhir::ImplementationGuide_Page_pskel&);

    void
    parameter_parser (::fhir::ImplementationGuide_Parameter_pskel&);

    void
    template__parser (::fhir::ImplementationGuide_Template_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Definition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Definition_pskel* ImplementationGuide_Definition_impl_;
    ImplementationGuide_Definition_pskel (ImplementationGuide_Definition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ImplementationGuide_Grouping_pskel* grouping_parser_;
    ::fhir::ImplementationGuide_Resource_pskel* resource_parser_;
    ::fhir::ImplementationGuide_Page_pskel* page_parser_;
    ::fhir::ImplementationGuide_Parameter_pskel* parameter_parser_;
    ::fhir::ImplementationGuide_Template_pskel* template__parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Definition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Grouping_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    description ();

    virtual void
    post_ImplementationGuide_Grouping ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Grouping_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Grouping_pskel* ImplementationGuide_Grouping_impl_;
    ImplementationGuide_Grouping_pskel (ImplementationGuide_Grouping_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Grouping_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Resource_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    fhirVersion ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    exampleBoolean ();

    virtual void
    exampleCanonical ();

    virtual void
    groupingId ();

    virtual void
    post_ImplementationGuide_Resource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::FHIRVersion_pskel& /* fhirVersion */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::boolean_pskel& /* exampleBoolean */,
             ::fhir::canonical_pskel& /* exampleCanonical */,
             ::fhir::id_pskel& /* groupingId */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    fhirVersion_parser (::fhir::FHIRVersion_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    exampleBoolean_parser (::fhir::boolean_pskel&);

    void
    exampleCanonical_parser (::fhir::canonical_pskel&);

    void
    groupingId_parser (::fhir::id_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Resource_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Resource_pskel* ImplementationGuide_Resource_impl_;
    ImplementationGuide_Resource_pskel (ImplementationGuide_Resource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::FHIRVersion_pskel* fhirVersion_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::boolean_pskel* exampleBoolean_parser_;
    ::fhir::canonical_pskel* exampleCanonical_parser_;
    ::fhir::id_pskel* groupingId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Resource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Page_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    nameUrl ();

    virtual void
    nameReference ();

    virtual void
    title ();

    virtual void
    generation ();

    virtual void
    page ();

    virtual void
    post_ImplementationGuide_Page ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::url_pskel& /* nameUrl */,
             ::fhir::Reference_pskel& /* nameReference */,
             ::fhir::string_pskel& /* title */,
             ::fhir::GuidePageGeneration_pskel& /* generation */,
             ::fhir::ImplementationGuide_Page_pskel& /* page */);

    // Individual element parsers.
    //
    void
    nameUrl_parser (::fhir::url_pskel&);

    void
    nameReference_parser (::fhir::Reference_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    generation_parser (::fhir::GuidePageGeneration_pskel&);

    void
    page_parser (::fhir::ImplementationGuide_Page_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Page_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Page_pskel* ImplementationGuide_Page_impl_;
    ImplementationGuide_Page_pskel (ImplementationGuide_Page_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::url_pskel* nameUrl_parser_;
    ::fhir::Reference_pskel* nameReference_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::GuidePageGeneration_pskel* generation_parser_;
    ::fhir::ImplementationGuide_Page_pskel* page_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Page_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    value ();

    virtual void
    post_ImplementationGuide_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::GuideParameterCode_pskel& /* code */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::GuideParameterCode_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Parameter_pskel* ImplementationGuide_Parameter_impl_;
    ImplementationGuide_Parameter_pskel (ImplementationGuide_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::GuideParameterCode_pskel* code_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Template_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    source ();

    virtual void
    scope ();

    virtual void
    post_ImplementationGuide_Template ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* source */,
             ::fhir::string_pskel& /* scope */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    source_parser (::fhir::string_pskel&);

    void
    scope_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Template_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Template_pskel* ImplementationGuide_Template_impl_;
    ImplementationGuide_Template_pskel (ImplementationGuide_Template_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* source_parser_;
    ::fhir::string_pskel* scope_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Template_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Manifest_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    rendering ();

    virtual void
    resource ();

    virtual void
    page ();

    virtual void
    image ();

    virtual void
    other ();

    virtual void
    post_ImplementationGuide_Manifest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::url_pskel& /* rendering */,
             ::fhir::ImplementationGuide_Resource1_pskel& /* resource */,
             ::fhir::ImplementationGuide_Page1_pskel& /* page */,
             ::fhir::string_pskel& /* image */,
             ::fhir::string_pskel& /* other */);

    // Individual element parsers.
    //
    void
    rendering_parser (::fhir::url_pskel&);

    void
    resource_parser (::fhir::ImplementationGuide_Resource1_pskel&);

    void
    page_parser (::fhir::ImplementationGuide_Page1_pskel&);

    void
    image_parser (::fhir::string_pskel&);

    void
    other_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Manifest_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Manifest_pskel* ImplementationGuide_Manifest_impl_;
    ImplementationGuide_Manifest_pskel (ImplementationGuide_Manifest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::url_pskel* rendering_parser_;
    ::fhir::ImplementationGuide_Resource1_pskel* resource_parser_;
    ::fhir::ImplementationGuide_Page1_pskel* page_parser_;
    ::fhir::string_pskel* image_parser_;
    ::fhir::string_pskel* other_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Manifest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Resource1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    exampleBoolean ();

    virtual void
    exampleCanonical ();

    virtual void
    relativePath ();

    virtual void
    post_ImplementationGuide_Resource1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::boolean_pskel& /* exampleBoolean */,
             ::fhir::canonical_pskel& /* exampleCanonical */,
             ::fhir::url_pskel& /* relativePath */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    exampleBoolean_parser (::fhir::boolean_pskel&);

    void
    exampleCanonical_parser (::fhir::canonical_pskel&);

    void
    relativePath_parser (::fhir::url_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Resource1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Resource1_pskel* ImplementationGuide_Resource1_impl_;
    ImplementationGuide_Resource1_pskel (ImplementationGuide_Resource1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::boolean_pskel* exampleBoolean_parser_;
    ::fhir::canonical_pskel* exampleCanonical_parser_;
    ::fhir::url_pskel* relativePath_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Resource1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Page1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    title ();

    virtual void
    anchor ();

    virtual void
    post_ImplementationGuide_Page1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* anchor */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    anchor_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Page1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Page1_pskel* ImplementationGuide_Page1_impl_;
    ImplementationGuide_Page1_pskel (ImplementationGuide_Page1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* anchor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Page1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GuideParameterCode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GuideParameterCode_list ();

    // Constructor.
    //
    GuideParameterCode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuideParameterCode_list_pskel* GuideParameterCode_list_impl_;
    GuideParameterCode_list_pskel (GuideParameterCode_list_pskel*, void*);

    protected:
    static const char* const _xsde_GuideParameterCode_list_pskel_enums_[10UL];
  };

  class GuideParameterCode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GuideParameterCode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GuideParameterCode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GuideParameterCode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GuideParameterCode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuideParameterCode_pskel* GuideParameterCode_impl_;
    GuideParameterCode_pskel (GuideParameterCode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GuideParameterCode_list_pskel* value_parser_;
  };

  class SPDXLicense_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SPDXLicense_list ();

    // Constructor.
    //
    SPDXLicense_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SPDXLicense_list_pskel* SPDXLicense_list_impl_;
    SPDXLicense_list_pskel (SPDXLicense_list_pskel*, void*);

    protected:
    static const char* const _xsde_SPDXLicense_list_pskel_enums_[346UL];
  };

  class SPDXLicense_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SPDXLicense ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SPDXLicense_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SPDXLicense_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SPDXLicense_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SPDXLicense_pskel* SPDXLicense_impl_;
    SPDXLicense_pskel (SPDXLicense_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SPDXLicense_list_pskel* value_parser_;
  };

  class GuidePageGeneration_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GuidePageGeneration_list ();

    // Constructor.
    //
    GuidePageGeneration_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuidePageGeneration_list_pskel* GuidePageGeneration_list_impl_;
    GuidePageGeneration_list_pskel (GuidePageGeneration_list_pskel*, void*);

    protected:
    static const char* const _xsde_GuidePageGeneration_list_pskel_enums_[4UL];
  };

  class GuidePageGeneration_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GuidePageGeneration ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GuidePageGeneration_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GuidePageGeneration_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GuidePageGeneration_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuidePageGeneration_pskel* GuidePageGeneration_impl_;
    GuidePageGeneration_pskel (GuidePageGeneration_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GuidePageGeneration_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IMPLEMENTATIONGUIDE_PSKEL_HXX
