// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "substancesourcematerial-pskel.hxx"

namespace fhir
{
  // SubstanceSourceMaterial_pskel
  //

  void SubstanceSourceMaterial_pskel::
  sourceMaterialClass_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->sourceMaterialClass_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  sourceMaterialType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->sourceMaterialType_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  sourceMaterialState_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->sourceMaterialState_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  organismId_parser (::fhir::Identifier_pskel& p)
  {
    this->organismId_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  organismName_parser (::fhir::string_pskel& p)
  {
    this->organismName_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  parentSubstanceId_parser (::fhir::Identifier_pskel& p)
  {
    this->parentSubstanceId_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  parentSubstanceName_parser (::fhir::string_pskel& p)
  {
    this->parentSubstanceName_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  countryOfOrigin_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->countryOfOrigin_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  geographicalLocation_parser (::fhir::string_pskel& p)
  {
    this->geographicalLocation_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  developmentStage_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->developmentStage_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  fractionDescription_parser (::fhir::SubstanceSourceMaterial_FractionDescription_pskel& p)
  {
    this->fractionDescription_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  organism_parser (::fhir::SubstanceSourceMaterial_Organism_pskel& p)
  {
    this->organism_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  partDescription_parser (::fhir::SubstanceSourceMaterial_PartDescription_pskel& p)
  {
    this->partDescription_parser_ = &p;
  }

  void SubstanceSourceMaterial_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& sourceMaterialClass,
           ::fhir::CodeableConcept_pskel& sourceMaterialType,
           ::fhir::CodeableConcept_pskel& sourceMaterialState,
           ::fhir::Identifier_pskel& organismId,
           ::fhir::string_pskel& organismName,
           ::fhir::Identifier_pskel& parentSubstanceId,
           ::fhir::string_pskel& parentSubstanceName,
           ::fhir::CodeableConcept_pskel& countryOfOrigin,
           ::fhir::string_pskel& geographicalLocation,
           ::fhir::CodeableConcept_pskel& developmentStage,
           ::fhir::SubstanceSourceMaterial_FractionDescription_pskel& fractionDescription,
           ::fhir::SubstanceSourceMaterial_Organism_pskel& organism,
           ::fhir::SubstanceSourceMaterial_PartDescription_pskel& partDescription)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sourceMaterialClass_parser_ = &sourceMaterialClass;
    this->sourceMaterialType_parser_ = &sourceMaterialType;
    this->sourceMaterialState_parser_ = &sourceMaterialState;
    this->organismId_parser_ = &organismId;
    this->organismName_parser_ = &organismName;
    this->parentSubstanceId_parser_ = &parentSubstanceId;
    this->parentSubstanceName_parser_ = &parentSubstanceName;
    this->countryOfOrigin_parser_ = &countryOfOrigin;
    this->geographicalLocation_parser_ = &geographicalLocation;
    this->developmentStage_parser_ = &developmentStage;
    this->fractionDescription_parser_ = &fractionDescription;
    this->organism_parser_ = &organism;
    this->partDescription_parser_ = &partDescription;
  }

  SubstanceSourceMaterial_pskel::
  SubstanceSourceMaterial_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    SubstanceSourceMaterial_impl_ (0),
    sourceMaterialClass_parser_ (0),
    sourceMaterialType_parser_ (0),
    sourceMaterialState_parser_ (0),
    organismId_parser_ (0),
    organismName_parser_ (0),
    parentSubstanceId_parser_ (0),
    parentSubstanceName_parser_ (0),
    countryOfOrigin_parser_ (0),
    geographicalLocation_parser_ (0),
    developmentStage_parser_ (0),
    fractionDescription_parser_ (0),
    organism_parser_ (0),
    partDescription_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSourceMaterial_pskel::
  SubstanceSourceMaterial_pskel (SubstanceSourceMaterial_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    SubstanceSourceMaterial_impl_ (impl),
    sourceMaterialClass_parser_ (0),
    sourceMaterialType_parser_ (0),
    sourceMaterialState_parser_ (0),
    organismId_parser_ (0),
    organismName_parser_ (0),
    parentSubstanceId_parser_ (0),
    parentSubstanceName_parser_ (0),
    countryOfOrigin_parser_ (0),
    geographicalLocation_parser_ (0),
    developmentStage_parser_ (0),
    fractionDescription_parser_ (0),
    organism_parser_ (0),
    partDescription_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSourceMaterial_FractionDescription_pskel
  //

  void SubstanceSourceMaterial_FractionDescription_pskel::
  fraction_parser (::fhir::string_pskel& p)
  {
    this->fraction_parser_ = &p;
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  materialType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->materialType_parser_ = &p;
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& fraction,
           ::fhir::CodeableConcept_pskel& materialType)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->fraction_parser_ = &fraction;
    this->materialType_parser_ = &materialType;
  }

  SubstanceSourceMaterial_FractionDescription_pskel::
  SubstanceSourceMaterial_FractionDescription_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSourceMaterial_FractionDescription_impl_ (0),
    fraction_parser_ (0),
    materialType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSourceMaterial_FractionDescription_pskel::
  SubstanceSourceMaterial_FractionDescription_pskel (SubstanceSourceMaterial_FractionDescription_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSourceMaterial_FractionDescription_impl_ (impl),
    fraction_parser_ (0),
    materialType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSourceMaterial_Organism_pskel
  //

  void SubstanceSourceMaterial_Organism_pskel::
  family_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->family_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  genus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->genus_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  species_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->species_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  intraspecificType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->intraspecificType_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  intraspecificDescription_parser (::fhir::string_pskel& p)
  {
    this->intraspecificDescription_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  author_parser (::fhir::SubstanceSourceMaterial_Author_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  hybrid_parser (::fhir::SubstanceSourceMaterial_Hybrid_pskel& p)
  {
    this->hybrid_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  organismGeneral_parser (::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel& p)
  {
    this->organismGeneral_parser_ = &p;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& family,
           ::fhir::CodeableConcept_pskel& genus,
           ::fhir::CodeableConcept_pskel& species,
           ::fhir::CodeableConcept_pskel& intraspecificType,
           ::fhir::string_pskel& intraspecificDescription,
           ::fhir::SubstanceSourceMaterial_Author_pskel& author,
           ::fhir::SubstanceSourceMaterial_Hybrid_pskel& hybrid,
           ::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel& organismGeneral)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->family_parser_ = &family;
    this->genus_parser_ = &genus;
    this->species_parser_ = &species;
    this->intraspecificType_parser_ = &intraspecificType;
    this->intraspecificDescription_parser_ = &intraspecificDescription;
    this->author_parser_ = &author;
    this->hybrid_parser_ = &hybrid;
    this->organismGeneral_parser_ = &organismGeneral;
  }

  SubstanceSourceMaterial_Organism_pskel::
  SubstanceSourceMaterial_Organism_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSourceMaterial_Organism_impl_ (0),
    family_parser_ (0),
    genus_parser_ (0),
    species_parser_ (0),
    intraspecificType_parser_ (0),
    intraspecificDescription_parser_ (0),
    author_parser_ (0),
    hybrid_parser_ (0),
    organismGeneral_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSourceMaterial_Organism_pskel::
  SubstanceSourceMaterial_Organism_pskel (SubstanceSourceMaterial_Organism_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSourceMaterial_Organism_impl_ (impl),
    family_parser_ (0),
    genus_parser_ (0),
    species_parser_ (0),
    intraspecificType_parser_ (0),
    intraspecificDescription_parser_ (0),
    author_parser_ (0),
    hybrid_parser_ (0),
    organismGeneral_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSourceMaterial_Author_pskel
  //

  void SubstanceSourceMaterial_Author_pskel::
  authorType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->authorType_parser_ = &p;
  }

  void SubstanceSourceMaterial_Author_pskel::
  authorDescription_parser (::fhir::string_pskel& p)
  {
    this->authorDescription_parser_ = &p;
  }

  void SubstanceSourceMaterial_Author_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& authorType,
           ::fhir::string_pskel& authorDescription)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->authorType_parser_ = &authorType;
    this->authorDescription_parser_ = &authorDescription;
  }

  SubstanceSourceMaterial_Author_pskel::
  SubstanceSourceMaterial_Author_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSourceMaterial_Author_impl_ (0),
    authorType_parser_ (0),
    authorDescription_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSourceMaterial_Author_pskel::
  SubstanceSourceMaterial_Author_pskel (SubstanceSourceMaterial_Author_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSourceMaterial_Author_impl_ (impl),
    authorType_parser_ (0),
    authorDescription_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSourceMaterial_Hybrid_pskel
  //

  void SubstanceSourceMaterial_Hybrid_pskel::
  maternalOrganismId_parser (::fhir::string_pskel& p)
  {
    this->maternalOrganismId_parser_ = &p;
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  maternalOrganismName_parser (::fhir::string_pskel& p)
  {
    this->maternalOrganismName_parser_ = &p;
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  paternalOrganismId_parser (::fhir::string_pskel& p)
  {
    this->paternalOrganismId_parser_ = &p;
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  paternalOrganismName_parser (::fhir::string_pskel& p)
  {
    this->paternalOrganismName_parser_ = &p;
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  hybridType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->hybridType_parser_ = &p;
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& maternalOrganismId,
           ::fhir::string_pskel& maternalOrganismName,
           ::fhir::string_pskel& paternalOrganismId,
           ::fhir::string_pskel& paternalOrganismName,
           ::fhir::CodeableConcept_pskel& hybridType)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->maternalOrganismId_parser_ = &maternalOrganismId;
    this->maternalOrganismName_parser_ = &maternalOrganismName;
    this->paternalOrganismId_parser_ = &paternalOrganismId;
    this->paternalOrganismName_parser_ = &paternalOrganismName;
    this->hybridType_parser_ = &hybridType;
  }

  SubstanceSourceMaterial_Hybrid_pskel::
  SubstanceSourceMaterial_Hybrid_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSourceMaterial_Hybrid_impl_ (0),
    maternalOrganismId_parser_ (0),
    maternalOrganismName_parser_ (0),
    paternalOrganismId_parser_ (0),
    paternalOrganismName_parser_ (0),
    hybridType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSourceMaterial_Hybrid_pskel::
  SubstanceSourceMaterial_Hybrid_pskel (SubstanceSourceMaterial_Hybrid_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSourceMaterial_Hybrid_impl_ (impl),
    maternalOrganismId_parser_ (0),
    maternalOrganismName_parser_ (0),
    paternalOrganismId_parser_ (0),
    paternalOrganismName_parser_ (0),
    hybridType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSourceMaterial_OrganismGeneral_pskel
  //

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  kingdom_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->kingdom_parser_ = &p;
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  phylum_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->phylum_parser_ = &p;
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  class__parser (::fhir::CodeableConcept_pskel& p)
  {
    this->class__parser_ = &p;
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  order_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->order_parser_ = &p;
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& kingdom,
           ::fhir::CodeableConcept_pskel& phylum,
           ::fhir::CodeableConcept_pskel& class_,
           ::fhir::CodeableConcept_pskel& order)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->kingdom_parser_ = &kingdom;
    this->phylum_parser_ = &phylum;
    this->class__parser_ = &class_;
    this->order_parser_ = &order;
  }

  SubstanceSourceMaterial_OrganismGeneral_pskel::
  SubstanceSourceMaterial_OrganismGeneral_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSourceMaterial_OrganismGeneral_impl_ (0),
    kingdom_parser_ (0),
    phylum_parser_ (0),
    class__parser_ (0),
    order_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSourceMaterial_OrganismGeneral_pskel::
  SubstanceSourceMaterial_OrganismGeneral_pskel (SubstanceSourceMaterial_OrganismGeneral_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSourceMaterial_OrganismGeneral_impl_ (impl),
    kingdom_parser_ (0),
    phylum_parser_ (0),
    class__parser_ (0),
    order_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSourceMaterial_PartDescription_pskel
  //

  void SubstanceSourceMaterial_PartDescription_pskel::
  part_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->part_parser_ = &p;
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  partLocation_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->partLocation_parser_ = &p;
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& part,
           ::fhir::CodeableConcept_pskel& partLocation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->part_parser_ = &part;
    this->partLocation_parser_ = &partLocation;
  }

  SubstanceSourceMaterial_PartDescription_pskel::
  SubstanceSourceMaterial_PartDescription_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSourceMaterial_PartDescription_impl_ (0),
    part_parser_ (0),
    partLocation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSourceMaterial_PartDescription_pskel::
  SubstanceSourceMaterial_PartDescription_pskel (SubstanceSourceMaterial_PartDescription_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSourceMaterial_PartDescription_impl_ (impl),
    part_parser_ (0),
    partLocation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // SubstanceSourceMaterial_pskel
  //

  void SubstanceSourceMaterial_pskel::
  sourceMaterialClass ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->sourceMaterialClass ();
  }

  void SubstanceSourceMaterial_pskel::
  sourceMaterialType ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->sourceMaterialType ();
  }

  void SubstanceSourceMaterial_pskel::
  sourceMaterialState ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->sourceMaterialState ();
  }

  void SubstanceSourceMaterial_pskel::
  organismId ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->organismId ();
  }

  void SubstanceSourceMaterial_pskel::
  organismName ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->organismName ();
  }

  void SubstanceSourceMaterial_pskel::
  parentSubstanceId ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->parentSubstanceId ();
  }

  void SubstanceSourceMaterial_pskel::
  parentSubstanceName ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->parentSubstanceName ();
  }

  void SubstanceSourceMaterial_pskel::
  countryOfOrigin ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->countryOfOrigin ();
  }

  void SubstanceSourceMaterial_pskel::
  geographicalLocation ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->geographicalLocation ();
  }

  void SubstanceSourceMaterial_pskel::
  developmentStage ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->developmentStage ();
  }

  void SubstanceSourceMaterial_pskel::
  fractionDescription ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->fractionDescription ();
  }

  void SubstanceSourceMaterial_pskel::
  organism ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->organism ();
  }

  void SubstanceSourceMaterial_pskel::
  partDescription ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->partDescription ();
  }

  void SubstanceSourceMaterial_pskel::
  post_SubstanceSourceMaterial ()
  {
    if (this->SubstanceSourceMaterial_impl_)
      this->SubstanceSourceMaterial_impl_->post_SubstanceSourceMaterial ();
    else
      post_DomainResource ();
  }

  void SubstanceSourceMaterial_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sourceMaterialClass_parser_)
      this->sourceMaterialClass_parser_->_reset ();

    if (this->sourceMaterialType_parser_)
      this->sourceMaterialType_parser_->_reset ();

    if (this->sourceMaterialState_parser_)
      this->sourceMaterialState_parser_->_reset ();

    if (this->organismId_parser_)
      this->organismId_parser_->_reset ();

    if (this->organismName_parser_)
      this->organismName_parser_->_reset ();

    if (this->parentSubstanceId_parser_)
      this->parentSubstanceId_parser_->_reset ();

    if (this->parentSubstanceName_parser_)
      this->parentSubstanceName_parser_->_reset ();

    if (this->countryOfOrigin_parser_)
      this->countryOfOrigin_parser_->_reset ();

    if (this->geographicalLocation_parser_)
      this->geographicalLocation_parser_->_reset ();

    if (this->developmentStage_parser_)
      this->developmentStage_parser_->_reset ();

    if (this->fractionDescription_parser_)
      this->fractionDescription_parser_->_reset ();

    if (this->organism_parser_)
      this->organism_parser_->_reset ();

    if (this->partDescription_parser_)
      this->partDescription_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSourceMaterial_FractionDescription_pskel
  //

  void SubstanceSourceMaterial_FractionDescription_pskel::
  fraction ()
  {
    if (this->SubstanceSourceMaterial_FractionDescription_impl_)
      this->SubstanceSourceMaterial_FractionDescription_impl_->fraction ();
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  materialType ()
  {
    if (this->SubstanceSourceMaterial_FractionDescription_impl_)
      this->SubstanceSourceMaterial_FractionDescription_impl_->materialType ();
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  post_SubstanceSourceMaterial_FractionDescription ()
  {
    if (this->SubstanceSourceMaterial_FractionDescription_impl_)
      this->SubstanceSourceMaterial_FractionDescription_impl_->post_SubstanceSourceMaterial_FractionDescription ();
    else
      post_BackboneElement ();
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->fraction_parser_)
      this->fraction_parser_->_reset ();

    if (this->materialType_parser_)
      this->materialType_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSourceMaterial_Organism_pskel
  //

  void SubstanceSourceMaterial_Organism_pskel::
  family ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->family ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  genus ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->genus ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  species ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->species ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  intraspecificType ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->intraspecificType ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  intraspecificDescription ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->intraspecificDescription ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  author ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->author ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  hybrid ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->hybrid ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  organismGeneral ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->organismGeneral ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  post_SubstanceSourceMaterial_Organism ()
  {
    if (this->SubstanceSourceMaterial_Organism_impl_)
      this->SubstanceSourceMaterial_Organism_impl_->post_SubstanceSourceMaterial_Organism ();
    else
      post_BackboneElement ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->family_parser_)
      this->family_parser_->_reset ();

    if (this->genus_parser_)
      this->genus_parser_->_reset ();

    if (this->species_parser_)
      this->species_parser_->_reset ();

    if (this->intraspecificType_parser_)
      this->intraspecificType_parser_->_reset ();

    if (this->intraspecificDescription_parser_)
      this->intraspecificDescription_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->hybrid_parser_)
      this->hybrid_parser_->_reset ();

    if (this->organismGeneral_parser_)
      this->organismGeneral_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSourceMaterial_Author_pskel
  //

  void SubstanceSourceMaterial_Author_pskel::
  authorType ()
  {
    if (this->SubstanceSourceMaterial_Author_impl_)
      this->SubstanceSourceMaterial_Author_impl_->authorType ();
  }

  void SubstanceSourceMaterial_Author_pskel::
  authorDescription ()
  {
    if (this->SubstanceSourceMaterial_Author_impl_)
      this->SubstanceSourceMaterial_Author_impl_->authorDescription ();
  }

  void SubstanceSourceMaterial_Author_pskel::
  post_SubstanceSourceMaterial_Author ()
  {
    if (this->SubstanceSourceMaterial_Author_impl_)
      this->SubstanceSourceMaterial_Author_impl_->post_SubstanceSourceMaterial_Author ();
    else
      post_BackboneElement ();
  }

  void SubstanceSourceMaterial_Author_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->authorType_parser_)
      this->authorType_parser_->_reset ();

    if (this->authorDescription_parser_)
      this->authorDescription_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSourceMaterial_Hybrid_pskel
  //

  void SubstanceSourceMaterial_Hybrid_pskel::
  maternalOrganismId ()
  {
    if (this->SubstanceSourceMaterial_Hybrid_impl_)
      this->SubstanceSourceMaterial_Hybrid_impl_->maternalOrganismId ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  maternalOrganismName ()
  {
    if (this->SubstanceSourceMaterial_Hybrid_impl_)
      this->SubstanceSourceMaterial_Hybrid_impl_->maternalOrganismName ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  paternalOrganismId ()
  {
    if (this->SubstanceSourceMaterial_Hybrid_impl_)
      this->SubstanceSourceMaterial_Hybrid_impl_->paternalOrganismId ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  paternalOrganismName ()
  {
    if (this->SubstanceSourceMaterial_Hybrid_impl_)
      this->SubstanceSourceMaterial_Hybrid_impl_->paternalOrganismName ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  hybridType ()
  {
    if (this->SubstanceSourceMaterial_Hybrid_impl_)
      this->SubstanceSourceMaterial_Hybrid_impl_->hybridType ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  post_SubstanceSourceMaterial_Hybrid ()
  {
    if (this->SubstanceSourceMaterial_Hybrid_impl_)
      this->SubstanceSourceMaterial_Hybrid_impl_->post_SubstanceSourceMaterial_Hybrid ();
    else
      post_BackboneElement ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->maternalOrganismId_parser_)
      this->maternalOrganismId_parser_->_reset ();

    if (this->maternalOrganismName_parser_)
      this->maternalOrganismName_parser_->_reset ();

    if (this->paternalOrganismId_parser_)
      this->paternalOrganismId_parser_->_reset ();

    if (this->paternalOrganismName_parser_)
      this->paternalOrganismName_parser_->_reset ();

    if (this->hybridType_parser_)
      this->hybridType_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSourceMaterial_OrganismGeneral_pskel
  //

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  kingdom ()
  {
    if (this->SubstanceSourceMaterial_OrganismGeneral_impl_)
      this->SubstanceSourceMaterial_OrganismGeneral_impl_->kingdom ();
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  phylum ()
  {
    if (this->SubstanceSourceMaterial_OrganismGeneral_impl_)
      this->SubstanceSourceMaterial_OrganismGeneral_impl_->phylum ();
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  class_ ()
  {
    if (this->SubstanceSourceMaterial_OrganismGeneral_impl_)
      this->SubstanceSourceMaterial_OrganismGeneral_impl_->class_ ();
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  order ()
  {
    if (this->SubstanceSourceMaterial_OrganismGeneral_impl_)
      this->SubstanceSourceMaterial_OrganismGeneral_impl_->order ();
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  post_SubstanceSourceMaterial_OrganismGeneral ()
  {
    if (this->SubstanceSourceMaterial_OrganismGeneral_impl_)
      this->SubstanceSourceMaterial_OrganismGeneral_impl_->post_SubstanceSourceMaterial_OrganismGeneral ();
    else
      post_BackboneElement ();
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->kingdom_parser_)
      this->kingdom_parser_->_reset ();

    if (this->phylum_parser_)
      this->phylum_parser_->_reset ();

    if (this->class__parser_)
      this->class__parser_->_reset ();

    if (this->order_parser_)
      this->order_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSourceMaterial_PartDescription_pskel
  //

  void SubstanceSourceMaterial_PartDescription_pskel::
  part ()
  {
    if (this->SubstanceSourceMaterial_PartDescription_impl_)
      this->SubstanceSourceMaterial_PartDescription_impl_->part ();
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  partLocation ()
  {
    if (this->SubstanceSourceMaterial_PartDescription_impl_)
      this->SubstanceSourceMaterial_PartDescription_impl_->partLocation ();
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  post_SubstanceSourceMaterial_PartDescription ()
  {
    if (this->SubstanceSourceMaterial_PartDescription_impl_)
      this->SubstanceSourceMaterial_PartDescription_impl_->post_SubstanceSourceMaterial_PartDescription ();
    else
      post_BackboneElement ();
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->part_parser_)
      this->part_parser_->_reset ();

    if (this->partLocation_parser_)
      this->partLocation_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for SubstanceSourceMaterial_pskel.
  //
  bool SubstanceSourceMaterial_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sourceMaterialClass" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "sourceMaterialType" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "sourceMaterialState" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "organismId" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "organismName" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "parentSubstanceId" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "parentSubstanceName" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "countryOfOrigin" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "geographicalLocation" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "developmentStage" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "fractionDescription" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "organism" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "partDescription" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSourceMaterial_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSourceMaterial_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSourceMaterial_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSourceMaterial_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSourceMaterial_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sourceMaterialClass" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceMaterialClass_parser_)
            {
              this->sourceMaterialClass_parser_->pre ();
              ctx.nested_parser (this->sourceMaterialClass_parser_);
            }
          }
          else
          {
            if (this->sourceMaterialClass_parser_ != 0)
            {
              this->sourceMaterialClass_parser_->post_CodeableConcept ();
              this->sourceMaterialClass ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "sourceMaterialType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceMaterialType_parser_)
            {
              this->sourceMaterialType_parser_->pre ();
              ctx.nested_parser (this->sourceMaterialType_parser_);
            }
          }
          else
          {
            if (this->sourceMaterialType_parser_ != 0)
            {
              this->sourceMaterialType_parser_->post_CodeableConcept ();
              this->sourceMaterialType ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "sourceMaterialState" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceMaterialState_parser_)
            {
              this->sourceMaterialState_parser_->pre ();
              ctx.nested_parser (this->sourceMaterialState_parser_);
            }
          }
          else
          {
            if (this->sourceMaterialState_parser_ != 0)
            {
              this->sourceMaterialState_parser_->post_CodeableConcept ();
              this->sourceMaterialState ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "organismId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organismId_parser_)
            {
              this->organismId_parser_->pre ();
              ctx.nested_parser (this->organismId_parser_);
            }
          }
          else
          {
            if (this->organismId_parser_ != 0)
            {
              this->organismId_parser_->post_Identifier ();
              this->organismId ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "organismName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organismName_parser_)
            {
              this->organismName_parser_->pre ();
              ctx.nested_parser (this->organismName_parser_);
            }
          }
          else
          {
            if (this->organismName_parser_ != 0)
            {
              this->organismName_parser_->post_string ();
              this->organismName ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "parentSubstanceId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parentSubstanceId_parser_)
            {
              this->parentSubstanceId_parser_->pre ();
              ctx.nested_parser (this->parentSubstanceId_parser_);
            }
          }
          else
          {
            if (this->parentSubstanceId_parser_ != 0)
            {
              this->parentSubstanceId_parser_->post_Identifier ();
              this->parentSubstanceId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "parentSubstanceName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parentSubstanceName_parser_)
            {
              this->parentSubstanceName_parser_->pre ();
              ctx.nested_parser (this->parentSubstanceName_parser_);
            }
          }
          else
          {
            if (this->parentSubstanceName_parser_ != 0)
            {
              this->parentSubstanceName_parser_->post_string ();
              this->parentSubstanceName ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "countryOfOrigin" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->countryOfOrigin_parser_)
            {
              this->countryOfOrigin_parser_->pre ();
              ctx.nested_parser (this->countryOfOrigin_parser_);
            }
          }
          else
          {
            if (this->countryOfOrigin_parser_ != 0)
            {
              this->countryOfOrigin_parser_->post_CodeableConcept ();
              this->countryOfOrigin ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "geographicalLocation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->geographicalLocation_parser_)
            {
              this->geographicalLocation_parser_->pre ();
              ctx.nested_parser (this->geographicalLocation_parser_);
            }
          }
          else
          {
            if (this->geographicalLocation_parser_ != 0)
            {
              this->geographicalLocation_parser_->post_string ();
              this->geographicalLocation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "developmentStage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->developmentStage_parser_)
            {
              this->developmentStage_parser_->pre ();
              ctx.nested_parser (this->developmentStage_parser_);
            }
          }
          else
          {
            if (this->developmentStage_parser_ != 0)
            {
              this->developmentStage_parser_->post_CodeableConcept ();
              this->developmentStage ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "fractionDescription" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fractionDescription_parser_)
            {
              this->fractionDescription_parser_->pre ();
              ctx.nested_parser (this->fractionDescription_parser_);
            }
          }
          else
          {
            if (this->fractionDescription_parser_ != 0)
            {
              this->fractionDescription_parser_->post_SubstanceSourceMaterial_FractionDescription ();
              this->fractionDescription ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "organism" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organism_parser_)
            {
              this->organism_parser_->pre ();
              ctx.nested_parser (this->organism_parser_);
            }
          }
          else
          {
            if (this->organism_parser_ != 0)
            {
              this->organism_parser_->post_SubstanceSourceMaterial_Organism ();
              this->organism ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "partDescription" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partDescription_parser_)
            {
              this->partDescription_parser_->pre ();
              ctx.nested_parser (this->partDescription_parser_);
            }
          }
          else
          {
            if (this->partDescription_parser_ != 0)
            {
              this->partDescription_parser_->post_SubstanceSourceMaterial_PartDescription ();
              this->partDescription ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSourceMaterial_FractionDescription_pskel.
  //
  bool SubstanceSourceMaterial_FractionDescription_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "fraction" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "materialType" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSourceMaterial_FractionDescription_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSourceMaterial_FractionDescription_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSourceMaterial_FractionDescription_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "fraction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fraction_parser_)
            {
              this->fraction_parser_->pre ();
              ctx.nested_parser (this->fraction_parser_);
            }
          }
          else
          {
            if (this->fraction_parser_ != 0)
            {
              this->fraction_parser_->post_string ();
              this->fraction ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "materialType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->materialType_parser_)
            {
              this->materialType_parser_->pre ();
              ctx.nested_parser (this->materialType_parser_);
            }
          }
          else
          {
            if (this->materialType_parser_ != 0)
            {
              this->materialType_parser_->post_CodeableConcept ();
              this->materialType ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSourceMaterial_Organism_pskel.
  //
  bool SubstanceSourceMaterial_Organism_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "family" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "genus" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "species" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "intraspecificType" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "intraspecificDescription" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "author" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "hybrid" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "organismGeneral" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSourceMaterial_Organism_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSourceMaterial_Organism_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSourceMaterial_Organism_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSourceMaterial_Organism_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "family" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->family_parser_)
            {
              this->family_parser_->pre ();
              ctx.nested_parser (this->family_parser_);
            }
          }
          else
          {
            if (this->family_parser_ != 0)
            {
              this->family_parser_->post_CodeableConcept ();
              this->family ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "genus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->genus_parser_)
            {
              this->genus_parser_->pre ();
              ctx.nested_parser (this->genus_parser_);
            }
          }
          else
          {
            if (this->genus_parser_ != 0)
            {
              this->genus_parser_->post_CodeableConcept ();
              this->genus ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "species" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->species_parser_)
            {
              this->species_parser_->pre ();
              ctx.nested_parser (this->species_parser_);
            }
          }
          else
          {
            if (this->species_parser_ != 0)
            {
              this->species_parser_->post_CodeableConcept ();
              this->species ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "intraspecificType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intraspecificType_parser_)
            {
              this->intraspecificType_parser_->pre ();
              ctx.nested_parser (this->intraspecificType_parser_);
            }
          }
          else
          {
            if (this->intraspecificType_parser_ != 0)
            {
              this->intraspecificType_parser_->post_CodeableConcept ();
              this->intraspecificType ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "intraspecificDescription" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intraspecificDescription_parser_)
            {
              this->intraspecificDescription_parser_->pre ();
              ctx.nested_parser (this->intraspecificDescription_parser_);
            }
          }
          else
          {
            if (this->intraspecificDescription_parser_ != 0)
            {
              this->intraspecificDescription_parser_->post_string ();
              this->intraspecificDescription ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_SubstanceSourceMaterial_Author ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "hybrid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->hybrid_parser_)
            {
              this->hybrid_parser_->pre ();
              ctx.nested_parser (this->hybrid_parser_);
            }
          }
          else
          {
            if (this->hybrid_parser_ != 0)
            {
              this->hybrid_parser_->post_SubstanceSourceMaterial_Hybrid ();
              this->hybrid ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "organismGeneral" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organismGeneral_parser_)
            {
              this->organismGeneral_parser_->pre ();
              ctx.nested_parser (this->organismGeneral_parser_);
            }
          }
          else
          {
            if (this->organismGeneral_parser_ != 0)
            {
              this->organismGeneral_parser_->post_SubstanceSourceMaterial_OrganismGeneral ();
              this->organismGeneral ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSourceMaterial_Author_pskel.
  //
  bool SubstanceSourceMaterial_Author_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "authorType" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "authorDescription" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSourceMaterial_Author_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSourceMaterial_Author_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSourceMaterial_Author_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSourceMaterial_Author_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSourceMaterial_Author_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "authorType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authorType_parser_)
            {
              this->authorType_parser_->pre ();
              ctx.nested_parser (this->authorType_parser_);
            }
          }
          else
          {
            if (this->authorType_parser_ != 0)
            {
              this->authorType_parser_->post_CodeableConcept ();
              this->authorType ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "authorDescription" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authorDescription_parser_)
            {
              this->authorDescription_parser_->pre ();
              ctx.nested_parser (this->authorDescription_parser_);
            }
          }
          else
          {
            if (this->authorDescription_parser_ != 0)
            {
              this->authorDescription_parser_->post_string ();
              this->authorDescription ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSourceMaterial_Hybrid_pskel.
  //
  bool SubstanceSourceMaterial_Hybrid_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "maternalOrganismId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "maternalOrganismName" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "paternalOrganismId" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "paternalOrganismName" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "hybridType" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSourceMaterial_Hybrid_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSourceMaterial_Hybrid_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSourceMaterial_Hybrid_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "maternalOrganismId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maternalOrganismId_parser_)
            {
              this->maternalOrganismId_parser_->pre ();
              ctx.nested_parser (this->maternalOrganismId_parser_);
            }
          }
          else
          {
            if (this->maternalOrganismId_parser_ != 0)
            {
              this->maternalOrganismId_parser_->post_string ();
              this->maternalOrganismId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "maternalOrganismName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maternalOrganismName_parser_)
            {
              this->maternalOrganismName_parser_->pre ();
              ctx.nested_parser (this->maternalOrganismName_parser_);
            }
          }
          else
          {
            if (this->maternalOrganismName_parser_ != 0)
            {
              this->maternalOrganismName_parser_->post_string ();
              this->maternalOrganismName ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "paternalOrganismId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paternalOrganismId_parser_)
            {
              this->paternalOrganismId_parser_->pre ();
              ctx.nested_parser (this->paternalOrganismId_parser_);
            }
          }
          else
          {
            if (this->paternalOrganismId_parser_ != 0)
            {
              this->paternalOrganismId_parser_->post_string ();
              this->paternalOrganismId ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "paternalOrganismName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paternalOrganismName_parser_)
            {
              this->paternalOrganismName_parser_->pre ();
              ctx.nested_parser (this->paternalOrganismName_parser_);
            }
          }
          else
          {
            if (this->paternalOrganismName_parser_ != 0)
            {
              this->paternalOrganismName_parser_->post_string ();
              this->paternalOrganismName ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "hybridType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->hybridType_parser_)
            {
              this->hybridType_parser_->pre ();
              ctx.nested_parser (this->hybridType_parser_);
            }
          }
          else
          {
            if (this->hybridType_parser_ != 0)
            {
              this->hybridType_parser_->post_CodeableConcept ();
              this->hybridType ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSourceMaterial_OrganismGeneral_pskel.
  //
  bool SubstanceSourceMaterial_OrganismGeneral_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "kingdom" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "phylum" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "class" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "order" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSourceMaterial_OrganismGeneral_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSourceMaterial_OrganismGeneral_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSourceMaterial_OrganismGeneral_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "kingdom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kingdom_parser_)
            {
              this->kingdom_parser_->pre ();
              ctx.nested_parser (this->kingdom_parser_);
            }
          }
          else
          {
            if (this->kingdom_parser_ != 0)
            {
              this->kingdom_parser_->post_CodeableConcept ();
              this->kingdom ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "phylum" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->phylum_parser_)
            {
              this->phylum_parser_->pre ();
              ctx.nested_parser (this->phylum_parser_);
            }
          }
          else
          {
            if (this->phylum_parser_ != 0)
            {
              this->phylum_parser_->post_CodeableConcept ();
              this->phylum ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "class" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->class__parser_)
            {
              this->class__parser_->pre ();
              ctx.nested_parser (this->class__parser_);
            }
          }
          else
          {
            if (this->class__parser_ != 0)
            {
              this->class__parser_->post_CodeableConcept ();
              this->class_ ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "order" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->order_parser_)
            {
              this->order_parser_->pre ();
              ctx.nested_parser (this->order_parser_);
            }
          }
          else
          {
            if (this->order_parser_ != 0)
            {
              this->order_parser_->post_CodeableConcept ();
              this->order ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSourceMaterial_PartDescription_pskel.
  //
  bool SubstanceSourceMaterial_PartDescription_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "part" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "partLocation" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSourceMaterial_PartDescription_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSourceMaterial_PartDescription_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSourceMaterial_PartDescription_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "part" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->part_parser_)
            {
              this->part_parser_->pre ();
              ctx.nested_parser (this->part_parser_);
            }
          }
          else
          {
            if (this->part_parser_ != 0)
            {
              this->part_parser_->post_CodeableConcept ();
              this->part ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "partLocation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partLocation_parser_)
            {
              this->partLocation_parser_->pre ();
              ctx.nested_parser (this->partLocation_parser_);
            }
          }
          else
          {
            if (this->partLocation_parser_ != 0)
            {
              this->partLocation_parser_->post_CodeableConcept ();
              this->partLocation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

