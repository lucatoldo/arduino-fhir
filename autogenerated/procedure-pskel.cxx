// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "procedure-pskel.hxx"

namespace fhir
{
  // Procedure_pskel
  //

  void Procedure_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Procedure_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void Procedure_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void Procedure_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void Procedure_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void Procedure_pskel::
  status_parser (::fhir::EventStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Procedure_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void Procedure_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void Procedure_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Procedure_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Procedure_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void Procedure_pskel::
  performedDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->performedDateTime_parser_ = &p;
  }

  void Procedure_pskel::
  performedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->performedPeriod_parser_ = &p;
  }

  void Procedure_pskel::
  performedString_parser (::fhir::string_pskel& p)
  {
    this->performedString_parser_ = &p;
  }

  void Procedure_pskel::
  performedAge_parser (::fhir::Age_pskel& p)
  {
    this->performedAge_parser_ = &p;
  }

  void Procedure_pskel::
  performedRange_parser (::fhir::Range_pskel& p)
  {
    this->performedRange_parser_ = &p;
  }

  void Procedure_pskel::
  recorder_parser (::fhir::Reference_pskel& p)
  {
    this->recorder_parser_ = &p;
  }

  void Procedure_pskel::
  asserter_parser (::fhir::Reference_pskel& p)
  {
    this->asserter_parser_ = &p;
  }

  void Procedure_pskel::
  performer_parser (::fhir::Procedure_Performer_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void Procedure_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Procedure_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Procedure_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void Procedure_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void Procedure_pskel::
  outcome_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void Procedure_pskel::
  report_parser (::fhir::Reference_pskel& p)
  {
    this->report_parser_ = &p;
  }

  void Procedure_pskel::
  complication_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->complication_parser_ = &p;
  }

  void Procedure_pskel::
  complicationDetail_parser (::fhir::Reference_pskel& p)
  {
    this->complicationDetail_parser_ = &p;
  }

  void Procedure_pskel::
  followUp_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->followUp_parser_ = &p;
  }

  void Procedure_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Procedure_pskel::
  focalDevice_parser (::fhir::Procedure_FocalDevice_pskel& p)
  {
    this->focalDevice_parser_ = &p;
  }

  void Procedure_pskel::
  usedReference_parser (::fhir::Reference_pskel& p)
  {
    this->usedReference_parser_ = &p;
  }

  void Procedure_pskel::
  usedCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->usedCode_parser_ = &p;
  }

  void Procedure_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& partOf,
           ::fhir::EventStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& performedDateTime,
           ::fhir::Period_pskel& performedPeriod,
           ::fhir::string_pskel& performedString,
           ::fhir::Age_pskel& performedAge,
           ::fhir::Range_pskel& performedRange,
           ::fhir::Reference_pskel& recorder,
           ::fhir::Reference_pskel& asserter,
           ::fhir::Procedure_Performer_pskel& performer,
           ::fhir::Reference_pskel& location,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::CodeableConcept_pskel& outcome,
           ::fhir::Reference_pskel& report,
           ::fhir::CodeableConcept_pskel& complication,
           ::fhir::Reference_pskel& complicationDetail,
           ::fhir::CodeableConcept_pskel& followUp,
           ::fhir::Annotation_pskel& note,
           ::fhir::Procedure_FocalDevice_pskel& focalDevice,
           ::fhir::Reference_pskel& usedReference,
           ::fhir::CodeableConcept_pskel& usedCode)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->basedOn_parser_ = &basedOn;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->category_parser_ = &category;
    this->code_parser_ = &code;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->performedDateTime_parser_ = &performedDateTime;
    this->performedPeriod_parser_ = &performedPeriod;
    this->performedString_parser_ = &performedString;
    this->performedAge_parser_ = &performedAge;
    this->performedRange_parser_ = &performedRange;
    this->recorder_parser_ = &recorder;
    this->asserter_parser_ = &asserter;
    this->performer_parser_ = &performer;
    this->location_parser_ = &location;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->bodySite_parser_ = &bodySite;
    this->outcome_parser_ = &outcome;
    this->report_parser_ = &report;
    this->complication_parser_ = &complication;
    this->complicationDetail_parser_ = &complicationDetail;
    this->followUp_parser_ = &followUp;
    this->note_parser_ = &note;
    this->focalDevice_parser_ = &focalDevice;
    this->usedReference_parser_ = &usedReference;
    this->usedCode_parser_ = &usedCode;
  }

  Procedure_pskel::
  Procedure_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Procedure_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    performedDateTime_parser_ (0),
    performedPeriod_parser_ (0),
    performedString_parser_ (0),
    performedAge_parser_ (0),
    performedRange_parser_ (0),
    recorder_parser_ (0),
    asserter_parser_ (0),
    performer_parser_ (0),
    location_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    bodySite_parser_ (0),
    outcome_parser_ (0),
    report_parser_ (0),
    complication_parser_ (0),
    complicationDetail_parser_ (0),
    followUp_parser_ (0),
    note_parser_ (0),
    focalDevice_parser_ (0),
    usedReference_parser_ (0),
    usedCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Procedure_pskel::
  Procedure_pskel (Procedure_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Procedure_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    performedDateTime_parser_ (0),
    performedPeriod_parser_ (0),
    performedString_parser_ (0),
    performedAge_parser_ (0),
    performedRange_parser_ (0),
    recorder_parser_ (0),
    asserter_parser_ (0),
    performer_parser_ (0),
    location_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    bodySite_parser_ (0),
    outcome_parser_ (0),
    report_parser_ (0),
    complication_parser_ (0),
    complicationDetail_parser_ (0),
    followUp_parser_ (0),
    note_parser_ (0),
    focalDevice_parser_ (0),
    usedReference_parser_ (0),
    usedCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Procedure_Performer_pskel
  //

  void Procedure_Performer_pskel::
  function_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->function_parser_ = &p;
  }

  void Procedure_Performer_pskel::
  actor_parser (::fhir::Reference_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void Procedure_Performer_pskel::
  onBehalfOf_parser (::fhir::Reference_pskel& p)
  {
    this->onBehalfOf_parser_ = &p;
  }

  void Procedure_Performer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& function,
           ::fhir::Reference_pskel& actor,
           ::fhir::Reference_pskel& onBehalfOf)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->function_parser_ = &function;
    this->actor_parser_ = &actor;
    this->onBehalfOf_parser_ = &onBehalfOf;
  }

  Procedure_Performer_pskel::
  Procedure_Performer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Procedure_Performer_impl_ (0),
    function_parser_ (0),
    actor_parser_ (0),
    onBehalfOf_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Procedure_Performer_pskel::
  Procedure_Performer_pskel (Procedure_Performer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Procedure_Performer_impl_ (impl),
    function_parser_ (0),
    actor_parser_ (0),
    onBehalfOf_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Procedure_FocalDevice_pskel
  //

  void Procedure_FocalDevice_pskel::
  action_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void Procedure_FocalDevice_pskel::
  manipulated_parser (::fhir::Reference_pskel& p)
  {
    this->manipulated_parser_ = &p;
  }

  void Procedure_FocalDevice_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& action,
           ::fhir::Reference_pskel& manipulated)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->action_parser_ = &action;
    this->manipulated_parser_ = &manipulated;
  }

  Procedure_FocalDevice_pskel::
  Procedure_FocalDevice_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Procedure_FocalDevice_impl_ (0),
    action_parser_ (0),
    manipulated_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Procedure_FocalDevice_pskel::
  Procedure_FocalDevice_pskel (Procedure_FocalDevice_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Procedure_FocalDevice_impl_ (impl),
    action_parser_ (0),
    manipulated_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Procedure_pskel
  //

  void Procedure_pskel::
  identifier ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->identifier ();
  }

  void Procedure_pskel::
  instantiatesCanonical ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->instantiatesCanonical ();
  }

  void Procedure_pskel::
  instantiatesUri ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->instantiatesUri ();
  }

  void Procedure_pskel::
  basedOn ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->basedOn ();
  }

  void Procedure_pskel::
  partOf ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->partOf ();
  }

  void Procedure_pskel::
  status ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->status ();
  }

  void Procedure_pskel::
  statusReason ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->statusReason ();
  }

  void Procedure_pskel::
  category ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->category ();
  }

  void Procedure_pskel::
  code ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->code ();
  }

  void Procedure_pskel::
  subject ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->subject ();
  }

  void Procedure_pskel::
  encounter ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->encounter ();
  }

  void Procedure_pskel::
  performedDateTime ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->performedDateTime ();
  }

  void Procedure_pskel::
  performedPeriod ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->performedPeriod ();
  }

  void Procedure_pskel::
  performedString ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->performedString ();
  }

  void Procedure_pskel::
  performedAge ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->performedAge ();
  }

  void Procedure_pskel::
  performedRange ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->performedRange ();
  }

  void Procedure_pskel::
  recorder ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->recorder ();
  }

  void Procedure_pskel::
  asserter ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->asserter ();
  }

  void Procedure_pskel::
  performer ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->performer ();
  }

  void Procedure_pskel::
  location ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->location ();
  }

  void Procedure_pskel::
  reasonCode ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->reasonCode ();
  }

  void Procedure_pskel::
  reasonReference ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->reasonReference ();
  }

  void Procedure_pskel::
  bodySite ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->bodySite ();
  }

  void Procedure_pskel::
  outcome ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->outcome ();
  }

  void Procedure_pskel::
  report ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->report ();
  }

  void Procedure_pskel::
  complication ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->complication ();
  }

  void Procedure_pskel::
  complicationDetail ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->complicationDetail ();
  }

  void Procedure_pskel::
  followUp ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->followUp ();
  }

  void Procedure_pskel::
  note ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->note ();
  }

  void Procedure_pskel::
  focalDevice ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->focalDevice ();
  }

  void Procedure_pskel::
  usedReference ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->usedReference ();
  }

  void Procedure_pskel::
  usedCode ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->usedCode ();
  }

  void Procedure_pskel::
  post_Procedure ()
  {
    if (this->Procedure_impl_)
      this->Procedure_impl_->post_Procedure ();
    else
      post_DomainResource ();
  }

  void Procedure_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->performedDateTime_parser_)
      this->performedDateTime_parser_->_reset ();

    if (this->performedPeriod_parser_)
      this->performedPeriod_parser_->_reset ();

    if (this->performedString_parser_)
      this->performedString_parser_->_reset ();

    if (this->performedAge_parser_)
      this->performedAge_parser_->_reset ();

    if (this->performedRange_parser_)
      this->performedRange_parser_->_reset ();

    if (this->recorder_parser_)
      this->recorder_parser_->_reset ();

    if (this->asserter_parser_)
      this->asserter_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->report_parser_)
      this->report_parser_->_reset ();

    if (this->complication_parser_)
      this->complication_parser_->_reset ();

    if (this->complicationDetail_parser_)
      this->complicationDetail_parser_->_reset ();

    if (this->followUp_parser_)
      this->followUp_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->focalDevice_parser_)
      this->focalDevice_parser_->_reset ();

    if (this->usedReference_parser_)
      this->usedReference_parser_->_reset ();

    if (this->usedCode_parser_)
      this->usedCode_parser_->_reset ();

    this->resetting_ = false;
  }

  // Procedure_Performer_pskel
  //

  void Procedure_Performer_pskel::
  function ()
  {
    if (this->Procedure_Performer_impl_)
      this->Procedure_Performer_impl_->function ();
  }

  void Procedure_Performer_pskel::
  actor ()
  {
    if (this->Procedure_Performer_impl_)
      this->Procedure_Performer_impl_->actor ();
  }

  void Procedure_Performer_pskel::
  onBehalfOf ()
  {
    if (this->Procedure_Performer_impl_)
      this->Procedure_Performer_impl_->onBehalfOf ();
  }

  void Procedure_Performer_pskel::
  post_Procedure_Performer ()
  {
    if (this->Procedure_Performer_impl_)
      this->Procedure_Performer_impl_->post_Procedure_Performer ();
    else
      post_BackboneElement ();
  }

  void Procedure_Performer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->function_parser_)
      this->function_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    if (this->onBehalfOf_parser_)
      this->onBehalfOf_parser_->_reset ();

    this->resetting_ = false;
  }

  // Procedure_FocalDevice_pskel
  //

  void Procedure_FocalDevice_pskel::
  action ()
  {
    if (this->Procedure_FocalDevice_impl_)
      this->Procedure_FocalDevice_impl_->action ();
  }

  void Procedure_FocalDevice_pskel::
  manipulated ()
  {
    if (this->Procedure_FocalDevice_impl_)
      this->Procedure_FocalDevice_impl_->manipulated ();
  }

  void Procedure_FocalDevice_pskel::
  post_Procedure_FocalDevice ()
  {
    if (this->Procedure_FocalDevice_impl_)
      this->Procedure_FocalDevice_impl_->post_Procedure_FocalDevice ();
    else
      post_BackboneElement ();
  }

  void Procedure_FocalDevice_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->action_parser_)
      this->action_parser_->_reset ();

    if (this->manipulated_parser_)
      this->manipulated_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Procedure_pskel.
  //
  bool Procedure_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Procedure_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Procedure_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Procedure_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Procedure_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Procedure_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EventStatus ();
              this->status ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "performedDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performedDateTime_parser_)
            {
              this->performedDateTime_parser_->pre ();
              ctx.nested_parser (this->performedDateTime_parser_);
            }
          }
          else
          {
            if (this->performedDateTime_parser_ != 0)
            {
              this->performedDateTime_parser_->post_dateTime ();
              this->performedDateTime ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "performedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performedPeriod_parser_)
            {
              this->performedPeriod_parser_->pre ();
              ctx.nested_parser (this->performedPeriod_parser_);
            }
          }
          else
          {
            if (this->performedPeriod_parser_ != 0)
            {
              this->performedPeriod_parser_->post_Period ();
              this->performedPeriod ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "performedString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performedString_parser_)
            {
              this->performedString_parser_->pre ();
              ctx.nested_parser (this->performedString_parser_);
            }
          }
          else
          {
            if (this->performedString_parser_ != 0)
            {
              this->performedString_parser_->post_string ();
              this->performedString ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "performedAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performedAge_parser_)
            {
              this->performedAge_parser_->pre ();
              ctx.nested_parser (this->performedAge_parser_);
            }
          }
          else
          {
            if (this->performedAge_parser_ != 0)
            {
              this->performedAge_parser_->post_Age ();
              this->performedAge ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "performedRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performedRange_parser_)
            {
              this->performedRange_parser_->pre ();
              ctx.nested_parser (this->performedRange_parser_);
            }
          }
          else
          {
            if (this->performedRange_parser_ != 0)
            {
              this->performedRange_parser_->post_Range ();
              this->performedRange ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "recorder" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recorder_parser_)
            {
              this->recorder_parser_->pre ();
              ctx.nested_parser (this->recorder_parser_);
            }
          }
          else
          {
            if (this->recorder_parser_ != 0)
            {
              this->recorder_parser_->post_Reference ();
              this->recorder ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "asserter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->asserter_parser_)
            {
              this->asserter_parser_->pre ();
              ctx.nested_parser (this->asserter_parser_);
            }
          }
          else
          {
            if (this->asserter_parser_ != 0)
            {
              this->asserter_parser_->post_Reference ();
              this->asserter ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Procedure_Performer ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_CodeableConcept ();
              this->outcome ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "report" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->report_parser_)
            {
              this->report_parser_->pre ();
              ctx.nested_parser (this->report_parser_);
            }
          }
          else
          {
            if (this->report_parser_ != 0)
            {
              this->report_parser_->post_Reference ();
              this->report ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "complication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->complication_parser_)
            {
              this->complication_parser_->pre ();
              ctx.nested_parser (this->complication_parser_);
            }
          }
          else
          {
            if (this->complication_parser_ != 0)
            {
              this->complication_parser_->post_CodeableConcept ();
              this->complication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "complicationDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->complicationDetail_parser_)
            {
              this->complicationDetail_parser_->pre ();
              ctx.nested_parser (this->complicationDetail_parser_);
            }
          }
          else
          {
            if (this->complicationDetail_parser_ != 0)
            {
              this->complicationDetail_parser_->post_Reference ();
              this->complicationDetail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "followUp" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->followUp_parser_)
            {
              this->followUp_parser_->pre ();
              ctx.nested_parser (this->followUp_parser_);
            }
          }
          else
          {
            if (this->followUp_parser_ != 0)
            {
              this->followUp_parser_->post_CodeableConcept ();
              this->followUp ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "focalDevice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focalDevice_parser_)
            {
              this->focalDevice_parser_->pre ();
              ctx.nested_parser (this->focalDevice_parser_);
            }
          }
          else
          {
            if (this->focalDevice_parser_ != 0)
            {
              this->focalDevice_parser_->post_Procedure_FocalDevice ();
              this->focalDevice ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "usedReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usedReference_parser_)
            {
              this->usedReference_parser_->pre ();
              ctx.nested_parser (this->usedReference_parser_);
            }
          }
          else
          {
            if (this->usedReference_parser_ != 0)
            {
              this->usedReference_parser_->post_Reference ();
              this->usedReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "usedCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usedCode_parser_)
            {
              this->usedCode_parser_->pre ();
              ctx.nested_parser (this->usedCode_parser_);
            }
          }
          else
          {
            if (this->usedCode_parser_ != 0)
            {
              this->usedCode_parser_->post_CodeableConcept ();
              this->usedCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Procedure_Performer_pskel.
  //
  bool Procedure_Performer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "function" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "actor" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Procedure_Performer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Procedure_Performer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Procedure_Performer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Procedure_Performer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Procedure_Performer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "function" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->function_parser_)
            {
              this->function_parser_->pre ();
              ctx.nested_parser (this->function_parser_);
            }
          }
          else
          {
            if (this->function_parser_ != 0)
            {
              this->function_parser_->post_CodeableConcept ();
              this->function ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_Reference ();
              this->actor ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "onBehalfOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onBehalfOf_parser_)
            {
              this->onBehalfOf_parser_->pre ();
              ctx.nested_parser (this->onBehalfOf_parser_);
            }
          }
          else
          {
            if (this->onBehalfOf_parser_ != 0)
            {
              this->onBehalfOf_parser_->post_Reference ();
              this->onBehalfOf ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Procedure_FocalDevice_pskel.
  //
  bool Procedure_FocalDevice_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "action" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "manipulated" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Procedure_FocalDevice_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Procedure_FocalDevice_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Procedure_FocalDevice_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Procedure_FocalDevice_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Procedure_FocalDevice_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_CodeableConcept ();
              this->action ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "manipulated" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manipulated_parser_)
            {
              this->manipulated_parser_->pre ();
              ctx.nested_parser (this->manipulated_parser_);
            }
          }
          else
          {
            if (this->manipulated_parser_ != 0)
            {
              this->manipulated_parser_->post_Reference ();
              this->manipulated ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

