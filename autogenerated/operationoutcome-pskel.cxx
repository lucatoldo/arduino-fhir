// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "operationoutcome-pskel.hxx"

namespace fhir
{
  // OperationOutcome_pskel
  //

  void OperationOutcome_pskel::
  issue_parser (::fhir::OperationOutcome_Issue_pskel& p)
  {
    this->issue_parser_ = &p;
  }

  void OperationOutcome_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::OperationOutcome_Issue_pskel& issue)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->issue_parser_ = &issue;
  }

  OperationOutcome_pskel::
  OperationOutcome_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    OperationOutcome_impl_ (0),
    issue_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  OperationOutcome_pskel::
  OperationOutcome_pskel (OperationOutcome_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    OperationOutcome_impl_ (impl),
    issue_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // OperationOutcome_Issue_pskel
  //

  void OperationOutcome_Issue_pskel::
  severity_parser (::fhir::IssueSeverity_pskel& p)
  {
    this->severity_parser_ = &p;
  }

  void OperationOutcome_Issue_pskel::
  code_parser (::fhir::IssueType_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void OperationOutcome_Issue_pskel::
  details_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->details_parser_ = &p;
  }

  void OperationOutcome_Issue_pskel::
  diagnostics_parser (::fhir::string_pskel& p)
  {
    this->diagnostics_parser_ = &p;
  }

  void OperationOutcome_Issue_pskel::
  location_parser (::fhir::string_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void OperationOutcome_Issue_pskel::
  expression_parser (::fhir::string_pskel& p)
  {
    this->expression_parser_ = &p;
  }

  void OperationOutcome_Issue_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::IssueSeverity_pskel& severity,
           ::fhir::IssueType_pskel& code,
           ::fhir::CodeableConcept_pskel& details,
           ::fhir::string_pskel& diagnostics,
           ::fhir::string_pskel& location,
           ::fhir::string_pskel& expression)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->severity_parser_ = &severity;
    this->code_parser_ = &code;
    this->details_parser_ = &details;
    this->diagnostics_parser_ = &diagnostics;
    this->location_parser_ = &location;
    this->expression_parser_ = &expression;
  }

  OperationOutcome_Issue_pskel::
  OperationOutcome_Issue_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    OperationOutcome_Issue_impl_ (0),
    severity_parser_ (0),
    code_parser_ (0),
    details_parser_ (0),
    diagnostics_parser_ (0),
    location_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  OperationOutcome_Issue_pskel::
  OperationOutcome_Issue_pskel (OperationOutcome_Issue_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    OperationOutcome_Issue_impl_ (impl),
    severity_parser_ (0),
    code_parser_ (0),
    details_parser_ (0),
    diagnostics_parser_ (0),
    location_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // IssueType_list_pskel
  //

  IssueType_list_pskel::
  IssueType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    IssueType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_IssueType_list_pskel_enums_, 31UL);
  }

  IssueType_list_pskel::
  IssueType_list_pskel (IssueType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    IssueType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_IssueType_list_pskel_enums_, 31UL);
  }

  // IssueType_pskel
  //

  void IssueType_pskel::
  value_parser (::fhir::IssueType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void IssueType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::IssueType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  IssueType_pskel::
  IssueType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    IssueType_impl_ (0),
    value_parser_ (0)
  {
  }

  IssueType_pskel::
  IssueType_pskel (IssueType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    IssueType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // IssueSeverity_list_pskel
  //

  IssueSeverity_list_pskel::
  IssueSeverity_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    IssueSeverity_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_IssueSeverity_list_pskel_enums_, 4UL);
  }

  IssueSeverity_list_pskel::
  IssueSeverity_list_pskel (IssueSeverity_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    IssueSeverity_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_IssueSeverity_list_pskel_enums_, 4UL);
  }

  // IssueSeverity_pskel
  //

  void IssueSeverity_pskel::
  value_parser (::fhir::IssueSeverity_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void IssueSeverity_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::IssueSeverity_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  IssueSeverity_pskel::
  IssueSeverity_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    IssueSeverity_impl_ (0),
    value_parser_ (0)
  {
  }

  IssueSeverity_pskel::
  IssueSeverity_pskel (IssueSeverity_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    IssueSeverity_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // OperationOutcome_pskel
  //

  void OperationOutcome_pskel::
  issue ()
  {
    if (this->OperationOutcome_impl_)
      this->OperationOutcome_impl_->issue ();
  }

  void OperationOutcome_pskel::
  post_OperationOutcome ()
  {
    if (this->OperationOutcome_impl_)
      this->OperationOutcome_impl_->post_OperationOutcome ();
    else
      post_DomainResource ();
  }

  void OperationOutcome_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->issue_parser_)
      this->issue_parser_->_reset ();

    this->resetting_ = false;
  }

  // OperationOutcome_Issue_pskel
  //

  void OperationOutcome_Issue_pskel::
  severity ()
  {
    if (this->OperationOutcome_Issue_impl_)
      this->OperationOutcome_Issue_impl_->severity ();
  }

  void OperationOutcome_Issue_pskel::
  code ()
  {
    if (this->OperationOutcome_Issue_impl_)
      this->OperationOutcome_Issue_impl_->code ();
  }

  void OperationOutcome_Issue_pskel::
  details ()
  {
    if (this->OperationOutcome_Issue_impl_)
      this->OperationOutcome_Issue_impl_->details ();
  }

  void OperationOutcome_Issue_pskel::
  diagnostics ()
  {
    if (this->OperationOutcome_Issue_impl_)
      this->OperationOutcome_Issue_impl_->diagnostics ();
  }

  void OperationOutcome_Issue_pskel::
  location ()
  {
    if (this->OperationOutcome_Issue_impl_)
      this->OperationOutcome_Issue_impl_->location ();
  }

  void OperationOutcome_Issue_pskel::
  expression ()
  {
    if (this->OperationOutcome_Issue_impl_)
      this->OperationOutcome_Issue_impl_->expression ();
  }

  void OperationOutcome_Issue_pskel::
  post_OperationOutcome_Issue ()
  {
    if (this->OperationOutcome_Issue_impl_)
      this->OperationOutcome_Issue_impl_->post_OperationOutcome_Issue ();
    else
      post_BackboneElement ();
  }

  void OperationOutcome_Issue_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->severity_parser_)
      this->severity_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->details_parser_)
      this->details_parser_->_reset ();

    if (this->diagnostics_parser_)
      this->diagnostics_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->expression_parser_)
      this->expression_parser_->_reset ();

    this->resetting_ = false;
  }

  // IssueType_list_pskel
  //

  void IssueType_list_pskel::
  post_IssueType_list ()
  {
    if (this->IssueType_list_impl_)
      this->IssueType_list_impl_->post_IssueType_list ();
    else
      post_code_primitive ();
  }

  const char* const IssueType_list_pskel::_xsde_IssueType_list_pskel_enums_[31UL] = 
  {
    "business-rule",
    "code-invalid",
    "conflict",
    "deleted",
    "duplicate",
    "exception",
    "expired",
    "extension",
    "forbidden",
    "incomplete",
    "informational",
    "invalid",
    "invariant",
    "lock-error",
    "login",
    "multiple-matches",
    "no-store",
    "not-found",
    "not-supported",
    "processing",
    "required",
    "security",
    "structure",
    "suppressed",
    "throttled",
    "timeout",
    "too-costly",
    "too-long",
    "transient",
    "unknown",
    "value"
  };

  // IssueType_pskel
  //

  void IssueType_pskel::
  value ()
  {
    if (this->IssueType_impl_)
      this->IssueType_impl_->value ();
  }

  void IssueType_pskel::
  post_IssueType ()
  {
    if (this->IssueType_impl_)
      this->IssueType_impl_->post_IssueType ();
    else
      post_Element ();
  }

  void IssueType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // IssueSeverity_list_pskel
  //

  void IssueSeverity_list_pskel::
  post_IssueSeverity_list ()
  {
    if (this->IssueSeverity_list_impl_)
      this->IssueSeverity_list_impl_->post_IssueSeverity_list ();
    else
      post_code_primitive ();
  }

  const char* const IssueSeverity_list_pskel::_xsde_IssueSeverity_list_pskel_enums_[4UL] = 
  {
    "error",
    "fatal",
    "information",
    "warning"
  };

  // IssueSeverity_pskel
  //

  void IssueSeverity_pskel::
  value ()
  {
    if (this->IssueSeverity_impl_)
      this->IssueSeverity_impl_->value ();
  }

  void IssueSeverity_pskel::
  post_IssueSeverity ()
  {
    if (this->IssueSeverity_impl_)
      this->IssueSeverity_impl_->post_IssueSeverity ();
    else
      post_Element ();
  }

  void IssueSeverity_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for OperationOutcome_pskel.
  //
  bool OperationOutcome_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "issue" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &OperationOutcome_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool OperationOutcome_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void OperationOutcome_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void OperationOutcome_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void OperationOutcome_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "issue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issue_parser_)
            {
              this->issue_parser_->pre ();
              ctx.nested_parser (this->issue_parser_);
            }
          }
          else
          {
            if (this->issue_parser_ != 0)
            {
              this->issue_parser_->post_OperationOutcome_Issue ();
              this->issue ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for OperationOutcome_Issue_pskel.
  //
  bool OperationOutcome_Issue_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "severity" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &OperationOutcome_Issue_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool OperationOutcome_Issue_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void OperationOutcome_Issue_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void OperationOutcome_Issue_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void OperationOutcome_Issue_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "severity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->severity_parser_)
            {
              this->severity_parser_->pre ();
              ctx.nested_parser (this->severity_parser_);
            }
          }
          else
          {
            if (this->severity_parser_ != 0)
            {
              this->severity_parser_->post_IssueSeverity ();
              this->severity ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_IssueType ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "details" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->details_parser_)
            {
              this->details_parser_->pre ();
              ctx.nested_parser (this->details_parser_);
            }
          }
          else
          {
            if (this->details_parser_ != 0)
            {
              this->details_parser_->post_CodeableConcept ();
              this->details ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "diagnostics" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnostics_parser_)
            {
              this->diagnostics_parser_->pre ();
              ctx.nested_parser (this->diagnostics_parser_);
            }
          }
          else
          {
            if (this->diagnostics_parser_ != 0)
            {
              this->diagnostics_parser_->post_string ();
              this->diagnostics ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_string ();
              this->location ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "expression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expression_parser_)
            {
              this->expression_parser_->pre ();
              ctx.nested_parser (this->expression_parser_);
            }
          }
          else
          {
            if (this->expression_parser_ != 0)
            {
              this->expression_parser_->post_string ();
              this->expression ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for IssueType_pskel.
  //
  bool IssueType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_IssueType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for IssueSeverity_pskel.
  //
  bool IssueSeverity_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_IssueSeverity_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

