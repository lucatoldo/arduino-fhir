// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "appointment-pskel.hxx"

namespace fhir
{
  // Appointment_pskel
  //

  void Appointment_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Appointment_pskel::
  status_parser (::fhir::AppointmentStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Appointment_pskel::
  cancelationReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->cancelationReason_parser_ = &p;
  }

  void Appointment_pskel::
  serviceCategory_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->serviceCategory_parser_ = &p;
  }

  void Appointment_pskel::
  serviceType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->serviceType_parser_ = &p;
  }

  void Appointment_pskel::
  specialty_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->specialty_parser_ = &p;
  }

  void Appointment_pskel::
  appointmentType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->appointmentType_parser_ = &p;
  }

  void Appointment_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Appointment_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void Appointment_pskel::
  priority_parser (::fhir::unsignedInt_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void Appointment_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Appointment_pskel::
  supportingInformation_parser (::fhir::Reference_pskel& p)
  {
    this->supportingInformation_parser_ = &p;
  }

  void Appointment_pskel::
  start_parser (::fhir::instant_pskel& p)
  {
    this->start_parser_ = &p;
  }

  void Appointment_pskel::
  end_parser (::fhir::instant_pskel& p)
  {
    this->end_parser_ = &p;
  }

  void Appointment_pskel::
  minutesDuration_parser (::fhir::positiveInt_pskel& p)
  {
    this->minutesDuration_parser_ = &p;
  }

  void Appointment_pskel::
  slot_parser (::fhir::Reference_pskel& p)
  {
    this->slot_parser_ = &p;
  }

  void Appointment_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void Appointment_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void Appointment_pskel::
  patientInstruction_parser (::fhir::string_pskel& p)
  {
    this->patientInstruction_parser_ = &p;
  }

  void Appointment_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void Appointment_pskel::
  participant_parser (::fhir::Appointment_Participant_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void Appointment_pskel::
  requestedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->requestedPeriod_parser_ = &p;
  }

  void Appointment_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::AppointmentStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& cancelationReason,
           ::fhir::CodeableConcept_pskel& serviceCategory,
           ::fhir::CodeableConcept_pskel& serviceType,
           ::fhir::CodeableConcept_pskel& specialty,
           ::fhir::CodeableConcept_pskel& appointmentType,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::unsignedInt_pskel& priority,
           ::fhir::string_pskel& description,
           ::fhir::Reference_pskel& supportingInformation,
           ::fhir::instant_pskel& start,
           ::fhir::instant_pskel& end,
           ::fhir::positiveInt_pskel& minutesDuration,
           ::fhir::Reference_pskel& slot,
           ::fhir::dateTime_pskel& created,
           ::fhir::string_pskel& comment,
           ::fhir::string_pskel& patientInstruction,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Appointment_Participant_pskel& participant,
           ::fhir::Period_pskel& requestedPeriod)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->cancelationReason_parser_ = &cancelationReason;
    this->serviceCategory_parser_ = &serviceCategory;
    this->serviceType_parser_ = &serviceType;
    this->specialty_parser_ = &specialty;
    this->appointmentType_parser_ = &appointmentType;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->priority_parser_ = &priority;
    this->description_parser_ = &description;
    this->supportingInformation_parser_ = &supportingInformation;
    this->start_parser_ = &start;
    this->end_parser_ = &end;
    this->minutesDuration_parser_ = &minutesDuration;
    this->slot_parser_ = &slot;
    this->created_parser_ = &created;
    this->comment_parser_ = &comment;
    this->patientInstruction_parser_ = &patientInstruction;
    this->basedOn_parser_ = &basedOn;
    this->participant_parser_ = &participant;
    this->requestedPeriod_parser_ = &requestedPeriod;
  }

  Appointment_pskel::
  Appointment_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Appointment_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    cancelationReason_parser_ (0),
    serviceCategory_parser_ (0),
    serviceType_parser_ (0),
    specialty_parser_ (0),
    appointmentType_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    priority_parser_ (0),
    description_parser_ (0),
    supportingInformation_parser_ (0),
    start_parser_ (0),
    end_parser_ (0),
    minutesDuration_parser_ (0),
    slot_parser_ (0),
    created_parser_ (0),
    comment_parser_ (0),
    patientInstruction_parser_ (0),
    basedOn_parser_ (0),
    participant_parser_ (0),
    requestedPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Appointment_pskel::
  Appointment_pskel (Appointment_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Appointment_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    cancelationReason_parser_ (0),
    serviceCategory_parser_ (0),
    serviceType_parser_ (0),
    specialty_parser_ (0),
    appointmentType_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    priority_parser_ (0),
    description_parser_ (0),
    supportingInformation_parser_ (0),
    start_parser_ (0),
    end_parser_ (0),
    minutesDuration_parser_ (0),
    slot_parser_ (0),
    created_parser_ (0),
    comment_parser_ (0),
    patientInstruction_parser_ (0),
    basedOn_parser_ (0),
    participant_parser_ (0),
    requestedPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Appointment_Participant_pskel
  //

  void Appointment_Participant_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Appointment_Participant_pskel::
  actor_parser (::fhir::Reference_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void Appointment_Participant_pskel::
  required_parser (::fhir::ParticipantRequired_pskel& p)
  {
    this->required_parser_ = &p;
  }

  void Appointment_Participant_pskel::
  status_parser (::fhir::ParticipationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Appointment_Participant_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Appointment_Participant_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& actor,
           ::fhir::ParticipantRequired_pskel& required,
           ::fhir::ParticipationStatus_pskel& status,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->actor_parser_ = &actor;
    this->required_parser_ = &required;
    this->status_parser_ = &status;
    this->period_parser_ = &period;
  }

  Appointment_Participant_pskel::
  Appointment_Participant_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Appointment_Participant_impl_ (0),
    type_parser_ (0),
    actor_parser_ (0),
    required_parser_ (0),
    status_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Appointment_Participant_pskel::
  Appointment_Participant_pskel (Appointment_Participant_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Appointment_Participant_impl_ (impl),
    type_parser_ (0),
    actor_parser_ (0),
    required_parser_ (0),
    status_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ParticipantRequired_list_pskel
  //

  ParticipantRequired_list_pskel::
  ParticipantRequired_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ParticipantRequired_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ParticipantRequired_list_pskel_enums_, 3UL);
  }

  ParticipantRequired_list_pskel::
  ParticipantRequired_list_pskel (ParticipantRequired_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ParticipantRequired_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ParticipantRequired_list_pskel_enums_, 3UL);
  }

  // ParticipantRequired_pskel
  //

  void ParticipantRequired_pskel::
  value_parser (::fhir::ParticipantRequired_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ParticipantRequired_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ParticipantRequired_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ParticipantRequired_pskel::
  ParticipantRequired_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ParticipantRequired_impl_ (0),
    value_parser_ (0)
  {
  }

  ParticipantRequired_pskel::
  ParticipantRequired_pskel (ParticipantRequired_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ParticipantRequired_impl_ (impl),
    value_parser_ (0)
  {
  }

  // AppointmentStatus_list_pskel
  //

  AppointmentStatus_list_pskel::
  AppointmentStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AppointmentStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AppointmentStatus_list_pskel_enums_, 10UL);
  }

  AppointmentStatus_list_pskel::
  AppointmentStatus_list_pskel (AppointmentStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AppointmentStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AppointmentStatus_list_pskel_enums_, 10UL);
  }

  // AppointmentStatus_pskel
  //

  void AppointmentStatus_pskel::
  value_parser (::fhir::AppointmentStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AppointmentStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AppointmentStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AppointmentStatus_pskel::
  AppointmentStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AppointmentStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  AppointmentStatus_pskel::
  AppointmentStatus_pskel (AppointmentStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AppointmentStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ParticipationStatus_list_pskel
  //

  ParticipationStatus_list_pskel::
  ParticipationStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ParticipationStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ParticipationStatus_list_pskel_enums_, 4UL);
  }

  ParticipationStatus_list_pskel::
  ParticipationStatus_list_pskel (ParticipationStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ParticipationStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ParticipationStatus_list_pskel_enums_, 4UL);
  }

  // ParticipationStatus_pskel
  //

  void ParticipationStatus_pskel::
  value_parser (::fhir::ParticipationStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ParticipationStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ParticipationStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ParticipationStatus_pskel::
  ParticipationStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ParticipationStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  ParticipationStatus_pskel::
  ParticipationStatus_pskel (ParticipationStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ParticipationStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Appointment_pskel
  //

  void Appointment_pskel::
  identifier ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->identifier ();
  }

  void Appointment_pskel::
  status ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->status ();
  }

  void Appointment_pskel::
  cancelationReason ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->cancelationReason ();
  }

  void Appointment_pskel::
  serviceCategory ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->serviceCategory ();
  }

  void Appointment_pskel::
  serviceType ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->serviceType ();
  }

  void Appointment_pskel::
  specialty ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->specialty ();
  }

  void Appointment_pskel::
  appointmentType ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->appointmentType ();
  }

  void Appointment_pskel::
  reasonCode ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->reasonCode ();
  }

  void Appointment_pskel::
  reasonReference ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->reasonReference ();
  }

  void Appointment_pskel::
  priority ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->priority ();
  }

  void Appointment_pskel::
  description ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->description ();
  }

  void Appointment_pskel::
  supportingInformation ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->supportingInformation ();
  }

  void Appointment_pskel::
  start ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->start ();
  }

  void Appointment_pskel::
  end ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->end ();
  }

  void Appointment_pskel::
  minutesDuration ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->minutesDuration ();
  }

  void Appointment_pskel::
  slot ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->slot ();
  }

  void Appointment_pskel::
  created ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->created ();
  }

  void Appointment_pskel::
  comment ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->comment ();
  }

  void Appointment_pskel::
  patientInstruction ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->patientInstruction ();
  }

  void Appointment_pskel::
  basedOn ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->basedOn ();
  }

  void Appointment_pskel::
  participant ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->participant ();
  }

  void Appointment_pskel::
  requestedPeriod ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->requestedPeriod ();
  }

  void Appointment_pskel::
  post_Appointment ()
  {
    if (this->Appointment_impl_)
      this->Appointment_impl_->post_Appointment ();
    else
      post_DomainResource ();
  }

  void Appointment_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->cancelationReason_parser_)
      this->cancelationReason_parser_->_reset ();

    if (this->serviceCategory_parser_)
      this->serviceCategory_parser_->_reset ();

    if (this->serviceType_parser_)
      this->serviceType_parser_->_reset ();

    if (this->specialty_parser_)
      this->specialty_parser_->_reset ();

    if (this->appointmentType_parser_)
      this->appointmentType_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->supportingInformation_parser_)
      this->supportingInformation_parser_->_reset ();

    if (this->start_parser_)
      this->start_parser_->_reset ();

    if (this->end_parser_)
      this->end_parser_->_reset ();

    if (this->minutesDuration_parser_)
      this->minutesDuration_parser_->_reset ();

    if (this->slot_parser_)
      this->slot_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->patientInstruction_parser_)
      this->patientInstruction_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->requestedPeriod_parser_)
      this->requestedPeriod_parser_->_reset ();

    this->resetting_ = false;
  }

  // Appointment_Participant_pskel
  //

  void Appointment_Participant_pskel::
  type ()
  {
    if (this->Appointment_Participant_impl_)
      this->Appointment_Participant_impl_->type ();
  }

  void Appointment_Participant_pskel::
  actor ()
  {
    if (this->Appointment_Participant_impl_)
      this->Appointment_Participant_impl_->actor ();
  }

  void Appointment_Participant_pskel::
  required ()
  {
    if (this->Appointment_Participant_impl_)
      this->Appointment_Participant_impl_->required ();
  }

  void Appointment_Participant_pskel::
  status ()
  {
    if (this->Appointment_Participant_impl_)
      this->Appointment_Participant_impl_->status ();
  }

  void Appointment_Participant_pskel::
  period ()
  {
    if (this->Appointment_Participant_impl_)
      this->Appointment_Participant_impl_->period ();
  }

  void Appointment_Participant_pskel::
  post_Appointment_Participant ()
  {
    if (this->Appointment_Participant_impl_)
      this->Appointment_Participant_impl_->post_Appointment_Participant ();
    else
      post_BackboneElement ();
  }

  void Appointment_Participant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    if (this->required_parser_)
      this->required_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // ParticipantRequired_list_pskel
  //

  void ParticipantRequired_list_pskel::
  post_ParticipantRequired_list ()
  {
    if (this->ParticipantRequired_list_impl_)
      this->ParticipantRequired_list_impl_->post_ParticipantRequired_list ();
    else
      post_code_primitive ();
  }

  const char* const ParticipantRequired_list_pskel::_xsde_ParticipantRequired_list_pskel_enums_[3UL] = 
  {
    "information-only",
    "optional",
    "required"
  };

  // ParticipantRequired_pskel
  //

  void ParticipantRequired_pskel::
  value ()
  {
    if (this->ParticipantRequired_impl_)
      this->ParticipantRequired_impl_->value ();
  }

  void ParticipantRequired_pskel::
  post_ParticipantRequired ()
  {
    if (this->ParticipantRequired_impl_)
      this->ParticipantRequired_impl_->post_ParticipantRequired ();
    else
      post_Element ();
  }

  void ParticipantRequired_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // AppointmentStatus_list_pskel
  //

  void AppointmentStatus_list_pskel::
  post_AppointmentStatus_list ()
  {
    if (this->AppointmentStatus_list_impl_)
      this->AppointmentStatus_list_impl_->post_AppointmentStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const AppointmentStatus_list_pskel::_xsde_AppointmentStatus_list_pskel_enums_[10UL] = 
  {
    "arrived",
    "booked",
    "cancelled",
    "checked-in",
    "entered-in-error",
    "fulfilled",
    "noshow",
    "pending",
    "proposed",
    "waitlist"
  };

  // AppointmentStatus_pskel
  //

  void AppointmentStatus_pskel::
  value ()
  {
    if (this->AppointmentStatus_impl_)
      this->AppointmentStatus_impl_->value ();
  }

  void AppointmentStatus_pskel::
  post_AppointmentStatus ()
  {
    if (this->AppointmentStatus_impl_)
      this->AppointmentStatus_impl_->post_AppointmentStatus ();
    else
      post_Element ();
  }

  void AppointmentStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ParticipationStatus_list_pskel
  //

  void ParticipationStatus_list_pskel::
  post_ParticipationStatus_list ()
  {
    if (this->ParticipationStatus_list_impl_)
      this->ParticipationStatus_list_impl_->post_ParticipationStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const ParticipationStatus_list_pskel::_xsde_ParticipationStatus_list_pskel_enums_[4UL] = 
  {
    "accepted",
    "declined",
    "needs-action",
    "tentative"
  };

  // ParticipationStatus_pskel
  //

  void ParticipationStatus_pskel::
  value ()
  {
    if (this->ParticipationStatus_impl_)
      this->ParticipationStatus_impl_->value ();
  }

  void ParticipationStatus_pskel::
  post_ParticipationStatus ()
  {
    if (this->ParticipationStatus_impl_)
      this->ParticipationStatus_impl_->post_ParticipationStatus ();
    else
      post_Element ();
  }

  void ParticipationStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Appointment_pskel.
  //
  bool Appointment_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Appointment_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Appointment_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Appointment_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Appointment_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Appointment_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_AppointmentStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "cancelationReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->cancelationReason_parser_)
            {
              this->cancelationReason_parser_->pre ();
              ctx.nested_parser (this->cancelationReason_parser_);
            }
          }
          else
          {
            if (this->cancelationReason_parser_ != 0)
            {
              this->cancelationReason_parser_->post_CodeableConcept ();
              this->cancelationReason ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "serviceCategory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->serviceCategory_parser_)
            {
              this->serviceCategory_parser_->pre ();
              ctx.nested_parser (this->serviceCategory_parser_);
            }
          }
          else
          {
            if (this->serviceCategory_parser_ != 0)
            {
              this->serviceCategory_parser_->post_CodeableConcept ();
              this->serviceCategory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "serviceType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->serviceType_parser_)
            {
              this->serviceType_parser_->pre ();
              ctx.nested_parser (this->serviceType_parser_);
            }
          }
          else
          {
            if (this->serviceType_parser_ != 0)
            {
              this->serviceType_parser_->post_CodeableConcept ();
              this->serviceType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "specialty" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specialty_parser_)
            {
              this->specialty_parser_->pre ();
              ctx.nested_parser (this->specialty_parser_);
            }
          }
          else
          {
            if (this->specialty_parser_ != 0)
            {
              this->specialty_parser_->post_CodeableConcept ();
              this->specialty ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "appointmentType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->appointmentType_parser_)
            {
              this->appointmentType_parser_->pre ();
              ctx.nested_parser (this->appointmentType_parser_);
            }
          }
          else
          {
            if (this->appointmentType_parser_ != 0)
            {
              this->appointmentType_parser_->post_CodeableConcept ();
              this->appointmentType ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_unsignedInt ();
              this->priority ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "supportingInformation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInformation_parser_)
            {
              this->supportingInformation_parser_->pre ();
              ctx.nested_parser (this->supportingInformation_parser_);
            }
          }
          else
          {
            if (this->supportingInformation_parser_ != 0)
            {
              this->supportingInformation_parser_->post_Reference ();
              this->supportingInformation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "start" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->start_parser_)
            {
              this->start_parser_->pre ();
              ctx.nested_parser (this->start_parser_);
            }
          }
          else
          {
            if (this->start_parser_ != 0)
            {
              this->start_parser_->post_instant ();
              this->start ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "end" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->end_parser_)
            {
              this->end_parser_->pre ();
              ctx.nested_parser (this->end_parser_);
            }
          }
          else
          {
            if (this->end_parser_ != 0)
            {
              this->end_parser_->post_instant ();
              this->end ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "minutesDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->minutesDuration_parser_)
            {
              this->minutesDuration_parser_->pre ();
              ctx.nested_parser (this->minutesDuration_parser_);
            }
          }
          else
          {
            if (this->minutesDuration_parser_ != 0)
            {
              this->minutesDuration_parser_->post_positiveInt ();
              this->minutesDuration ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "slot" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->slot_parser_)
            {
              this->slot_parser_->pre ();
              ctx.nested_parser (this->slot_parser_);
            }
          }
          else
          {
            if (this->slot_parser_ != 0)
            {
              this->slot_parser_->post_Reference ();
              this->slot ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "patientInstruction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patientInstruction_parser_)
            {
              this->patientInstruction_parser_->pre ();
              ctx.nested_parser (this->patientInstruction_parser_);
            }
          }
          else
          {
            if (this->patientInstruction_parser_ != 0)
            {
              this->patientInstruction_parser_->post_string ();
              this->patientInstruction ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_Appointment_Participant ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "requestedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requestedPeriod_parser_)
            {
              this->requestedPeriod_parser_->pre ();
              ctx.nested_parser (this->requestedPeriod_parser_);
            }
          }
          else
          {
            if (this->requestedPeriod_parser_ != 0)
            {
              this->requestedPeriod_parser_->post_Period ();
              this->requestedPeriod ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Appointment_Participant_pskel.
  //
  bool Appointment_Participant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "actor" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "required" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Appointment_Participant_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Appointment_Participant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Appointment_Participant_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Appointment_Participant_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Appointment_Participant_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_Reference ();
              this->actor ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "required" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->required_parser_)
            {
              this->required_parser_->pre ();
              ctx.nested_parser (this->required_parser_);
            }
          }
          else
          {
            if (this->required_parser_ != 0)
            {
              this->required_parser_->post_ParticipantRequired ();
              this->required ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ParticipationStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ParticipantRequired_pskel.
  //
  bool ParticipantRequired_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ParticipantRequired_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for AppointmentStatus_pskel.
  //
  bool AppointmentStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AppointmentStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ParticipationStatus_pskel.
  //
  bool ParticipationStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ParticipationStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

