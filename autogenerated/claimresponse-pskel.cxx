// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "claimresponse-pskel.hxx"

namespace fhir
{
  // ClaimResponse_pskel
  //

  void ClaimResponse_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ClaimResponse_pskel::
  status_parser (::fhir::FinancialResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ClaimResponse_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ClaimResponse_pskel::
  subType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subType_parser_ = &p;
  }

  void ClaimResponse_pskel::
  use_parser (::fhir::Use_pskel& p)
  {
    this->use_parser_ = &p;
  }

  void ClaimResponse_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void ClaimResponse_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void ClaimResponse_pskel::
  insurer_parser (::fhir::Reference_pskel& p)
  {
    this->insurer_parser_ = &p;
  }

  void ClaimResponse_pskel::
  requestor_parser (::fhir::Reference_pskel& p)
  {
    this->requestor_parser_ = &p;
  }

  void ClaimResponse_pskel::
  request_parser (::fhir::Reference_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void ClaimResponse_pskel::
  outcome_parser (::fhir::ClaimProcessingCodes_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void ClaimResponse_pskel::
  disposition_parser (::fhir::string_pskel& p)
  {
    this->disposition_parser_ = &p;
  }

  void ClaimResponse_pskel::
  preAuthRef_parser (::fhir::string_pskel& p)
  {
    this->preAuthRef_parser_ = &p;
  }

  void ClaimResponse_pskel::
  preAuthPeriod_parser (::fhir::Period_pskel& p)
  {
    this->preAuthPeriod_parser_ = &p;
  }

  void ClaimResponse_pskel::
  payeeType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->payeeType_parser_ = &p;
  }

  void ClaimResponse_pskel::
  item_parser (::fhir::ClaimResponse_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void ClaimResponse_pskel::
  addItem_parser (::fhir::ClaimResponse_AddItem_pskel& p)
  {
    this->addItem_parser_ = &p;
  }

  void ClaimResponse_pskel::
  adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ClaimResponse_pskel::
  total_parser (::fhir::ClaimResponse_Total_pskel& p)
  {
    this->total_parser_ = &p;
  }

  void ClaimResponse_pskel::
  payment_parser (::fhir::ClaimResponse_Payment_pskel& p)
  {
    this->payment_parser_ = &p;
  }

  void ClaimResponse_pskel::
  fundsReserve_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->fundsReserve_parser_ = &p;
  }

  void ClaimResponse_pskel::
  formCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->formCode_parser_ = &p;
  }

  void ClaimResponse_pskel::
  form_parser (::fhir::Attachment_pskel& p)
  {
    this->form_parser_ = &p;
  }

  void ClaimResponse_pskel::
  processNote_parser (::fhir::ClaimResponse_ProcessNote_pskel& p)
  {
    this->processNote_parser_ = &p;
  }

  void ClaimResponse_pskel::
  communicationRequest_parser (::fhir::Reference_pskel& p)
  {
    this->communicationRequest_parser_ = &p;
  }

  void ClaimResponse_pskel::
  insurance_parser (::fhir::ClaimResponse_Insurance_pskel& p)
  {
    this->insurance_parser_ = &p;
  }

  void ClaimResponse_pskel::
  error_parser (::fhir::ClaimResponse_Error_pskel& p)
  {
    this->error_parser_ = &p;
  }

  void ClaimResponse_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::FinancialResourceStatusCodes_pskel& status,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& subType,
           ::fhir::Use_pskel& use,
           ::fhir::Reference_pskel& patient,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& insurer,
           ::fhir::Reference_pskel& requestor,
           ::fhir::Reference_pskel& request,
           ::fhir::ClaimProcessingCodes_pskel& outcome,
           ::fhir::string_pskel& disposition,
           ::fhir::string_pskel& preAuthRef,
           ::fhir::Period_pskel& preAuthPeriod,
           ::fhir::CodeableConcept_pskel& payeeType,
           ::fhir::ClaimResponse_Item_pskel& item,
           ::fhir::ClaimResponse_AddItem_pskel& addItem,
           ::fhir::ClaimResponse_Adjudication_pskel& adjudication,
           ::fhir::ClaimResponse_Total_pskel& total,
           ::fhir::ClaimResponse_Payment_pskel& payment,
           ::fhir::CodeableConcept_pskel& fundsReserve,
           ::fhir::CodeableConcept_pskel& formCode,
           ::fhir::Attachment_pskel& form,
           ::fhir::ClaimResponse_ProcessNote_pskel& processNote,
           ::fhir::Reference_pskel& communicationRequest,
           ::fhir::ClaimResponse_Insurance_pskel& insurance,
           ::fhir::ClaimResponse_Error_pskel& error)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->subType_parser_ = &subType;
    this->use_parser_ = &use;
    this->patient_parser_ = &patient;
    this->created_parser_ = &created;
    this->insurer_parser_ = &insurer;
    this->requestor_parser_ = &requestor;
    this->request_parser_ = &request;
    this->outcome_parser_ = &outcome;
    this->disposition_parser_ = &disposition;
    this->preAuthRef_parser_ = &preAuthRef;
    this->preAuthPeriod_parser_ = &preAuthPeriod;
    this->payeeType_parser_ = &payeeType;
    this->item_parser_ = &item;
    this->addItem_parser_ = &addItem;
    this->adjudication_parser_ = &adjudication;
    this->total_parser_ = &total;
    this->payment_parser_ = &payment;
    this->fundsReserve_parser_ = &fundsReserve;
    this->formCode_parser_ = &formCode;
    this->form_parser_ = &form;
    this->processNote_parser_ = &processNote;
    this->communicationRequest_parser_ = &communicationRequest;
    this->insurance_parser_ = &insurance;
    this->error_parser_ = &error;
  }

  ClaimResponse_pskel::
  ClaimResponse_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ClaimResponse_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    use_parser_ (0),
    patient_parser_ (0),
    created_parser_ (0),
    insurer_parser_ (0),
    requestor_parser_ (0),
    request_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    preAuthRef_parser_ (0),
    preAuthPeriod_parser_ (0),
    payeeType_parser_ (0),
    item_parser_ (0),
    addItem_parser_ (0),
    adjudication_parser_ (0),
    total_parser_ (0),
    payment_parser_ (0),
    fundsReserve_parser_ (0),
    formCode_parser_ (0),
    form_parser_ (0),
    processNote_parser_ (0),
    communicationRequest_parser_ (0),
    insurance_parser_ (0),
    error_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_pskel::
  ClaimResponse_pskel (ClaimResponse_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ClaimResponse_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    use_parser_ (0),
    patient_parser_ (0),
    created_parser_ (0),
    insurer_parser_ (0),
    requestor_parser_ (0),
    request_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    preAuthRef_parser_ (0),
    preAuthPeriod_parser_ (0),
    payeeType_parser_ (0),
    item_parser_ (0),
    addItem_parser_ (0),
    adjudication_parser_ (0),
    total_parser_ (0),
    payment_parser_ (0),
    fundsReserve_parser_ (0),
    formCode_parser_ (0),
    form_parser_ (0),
    processNote_parser_ (0),
    communicationRequest_parser_ (0),
    insurance_parser_ (0),
    error_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Item_pskel
  //

  void ClaimResponse_Item_pskel::
  itemSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->itemSequence_parser_ = &p;
  }

  void ClaimResponse_Item_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ClaimResponse_Item_pskel::
  adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ClaimResponse_Item_pskel::
  detail_parser (::fhir::ClaimResponse_Detail_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void ClaimResponse_Item_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& itemSequence,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ClaimResponse_Adjudication_pskel& adjudication,
           ::fhir::ClaimResponse_Detail_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->itemSequence_parser_ = &itemSequence;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->detail_parser_ = &detail;
  }

  ClaimResponse_Item_pskel::
  ClaimResponse_Item_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Item_impl_ (0),
    itemSequence_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Item_pskel::
  ClaimResponse_Item_pskel (ClaimResponse_Item_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Item_impl_ (impl),
    itemSequence_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Adjudication_pskel
  //

  void ClaimResponse_Adjudication_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ClaimResponse_Adjudication_pskel::
  reason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void ClaimResponse_Adjudication_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void ClaimResponse_Adjudication_pskel::
  value_parser (::fhir::decimal_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ClaimResponse_Adjudication_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& reason,
           ::fhir::Money_pskel& amount,
           ::fhir::decimal_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->reason_parser_ = &reason;
    this->amount_parser_ = &amount;
    this->value_parser_ = &value;
  }

  ClaimResponse_Adjudication_pskel::
  ClaimResponse_Adjudication_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Adjudication_impl_ (0),
    category_parser_ (0),
    reason_parser_ (0),
    amount_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Adjudication_pskel::
  ClaimResponse_Adjudication_pskel (ClaimResponse_Adjudication_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Adjudication_impl_ (impl),
    category_parser_ (0),
    reason_parser_ (0),
    amount_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Detail_pskel
  //

  void ClaimResponse_Detail_pskel::
  detailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->detailSequence_parser_ = &p;
  }

  void ClaimResponse_Detail_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ClaimResponse_Detail_pskel::
  adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ClaimResponse_Detail_pskel::
  subDetail_parser (::fhir::ClaimResponse_SubDetail_pskel& p)
  {
    this->subDetail_parser_ = &p;
  }

  void ClaimResponse_Detail_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& detailSequence,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ClaimResponse_Adjudication_pskel& adjudication,
           ::fhir::ClaimResponse_SubDetail_pskel& subDetail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->detailSequence_parser_ = &detailSequence;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->subDetail_parser_ = &subDetail;
  }

  ClaimResponse_Detail_pskel::
  ClaimResponse_Detail_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Detail_impl_ (0),
    detailSequence_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Detail_pskel::
  ClaimResponse_Detail_pskel (ClaimResponse_Detail_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Detail_impl_ (impl),
    detailSequence_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_SubDetail_pskel
  //

  void ClaimResponse_SubDetail_pskel::
  subDetailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->subDetailSequence_parser_ = &p;
  }

  void ClaimResponse_SubDetail_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ClaimResponse_SubDetail_pskel::
  adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ClaimResponse_SubDetail_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& subDetailSequence,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ClaimResponse_Adjudication_pskel& adjudication)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->subDetailSequence_parser_ = &subDetailSequence;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
  }

  ClaimResponse_SubDetail_pskel::
  ClaimResponse_SubDetail_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_SubDetail_impl_ (0),
    subDetailSequence_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_SubDetail_pskel::
  ClaimResponse_SubDetail_pskel (ClaimResponse_SubDetail_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_SubDetail_impl_ (impl),
    subDetailSequence_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_AddItem_pskel
  //

  void ClaimResponse_AddItem_pskel::
  itemSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->itemSequence_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  detailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->detailSequence_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  subdetailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->subdetailSequence_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  programCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->programCode_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  servicedDate_parser (::fhir::date_pskel& p)
  {
    this->servicedDate_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  servicedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->servicedPeriod_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  locationCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->locationCodeableConcept_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  locationAddress_parser (::fhir::Address_pskel& p)
  {
    this->locationAddress_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  locationReference_parser (::fhir::Reference_pskel& p)
  {
    this->locationReference_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  subSite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subSite_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  detail_parser (::fhir::ClaimResponse_Detail1_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void ClaimResponse_AddItem_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& itemSequence,
           ::fhir::positiveInt_pskel& detailSequence,
           ::fhir::positiveInt_pskel& subdetailSequence,
           ::fhir::Reference_pskel& provider,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::CodeableConcept_pskel& programCode,
           ::fhir::date_pskel& servicedDate,
           ::fhir::Period_pskel& servicedPeriod,
           ::fhir::CodeableConcept_pskel& locationCodeableConcept,
           ::fhir::Address_pskel& locationAddress,
           ::fhir::Reference_pskel& locationReference,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::CodeableConcept_pskel& subSite,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ClaimResponse_Adjudication_pskel& adjudication,
           ::fhir::ClaimResponse_Detail1_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->itemSequence_parser_ = &itemSequence;
    this->detailSequence_parser_ = &detailSequence;
    this->subdetailSequence_parser_ = &subdetailSequence;
    this->provider_parser_ = &provider;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->programCode_parser_ = &programCode;
    this->servicedDate_parser_ = &servicedDate;
    this->servicedPeriod_parser_ = &servicedPeriod;
    this->locationCodeableConcept_parser_ = &locationCodeableConcept;
    this->locationAddress_parser_ = &locationAddress;
    this->locationReference_parser_ = &locationReference;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->bodySite_parser_ = &bodySite;
    this->subSite_parser_ = &subSite;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->detail_parser_ = &detail;
  }

  ClaimResponse_AddItem_pskel::
  ClaimResponse_AddItem_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_AddItem_impl_ (0),
    itemSequence_parser_ (0),
    detailSequence_parser_ (0),
    subdetailSequence_parser_ (0),
    provider_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    locationCodeableConcept_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    bodySite_parser_ (0),
    subSite_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_AddItem_pskel::
  ClaimResponse_AddItem_pskel (ClaimResponse_AddItem_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_AddItem_impl_ (impl),
    itemSequence_parser_ (0),
    detailSequence_parser_ (0),
    subdetailSequence_parser_ (0),
    provider_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    locationCodeableConcept_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    bodySite_parser_ (0),
    subSite_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Detail1_pskel
  //

  void ClaimResponse_Detail1_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  subDetail_parser (::fhir::ClaimResponse_SubDetail1_pskel& p)
  {
    this->subDetail_parser_ = &p;
  }

  void ClaimResponse_Detail1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ClaimResponse_Adjudication_pskel& adjudication,
           ::fhir::ClaimResponse_SubDetail1_pskel& subDetail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->subDetail_parser_ = &subDetail;
  }

  ClaimResponse_Detail1_pskel::
  ClaimResponse_Detail1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Detail1_impl_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Detail1_pskel::
  ClaimResponse_Detail1_pskel (ClaimResponse_Detail1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Detail1_impl_ (impl),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_SubDetail1_pskel
  //

  void ClaimResponse_SubDetail1_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ClaimResponse_SubDetail1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ClaimResponse_Adjudication_pskel& adjudication)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
  }

  ClaimResponse_SubDetail1_pskel::
  ClaimResponse_SubDetail1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_SubDetail1_impl_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_SubDetail1_pskel::
  ClaimResponse_SubDetail1_pskel (ClaimResponse_SubDetail1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_SubDetail1_impl_ (impl),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Total_pskel
  //

  void ClaimResponse_Total_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ClaimResponse_Total_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void ClaimResponse_Total_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::Money_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->amount_parser_ = &amount;
  }

  ClaimResponse_Total_pskel::
  ClaimResponse_Total_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Total_impl_ (0),
    category_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Total_pskel::
  ClaimResponse_Total_pskel (ClaimResponse_Total_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Total_impl_ (impl),
    category_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Payment_pskel
  //

  void ClaimResponse_Payment_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ClaimResponse_Payment_pskel::
  adjustment_parser (::fhir::Money_pskel& p)
  {
    this->adjustment_parser_ = &p;
  }

  void ClaimResponse_Payment_pskel::
  adjustmentReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->adjustmentReason_parser_ = &p;
  }

  void ClaimResponse_Payment_pskel::
  date_parser (::fhir::date_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ClaimResponse_Payment_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void ClaimResponse_Payment_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ClaimResponse_Payment_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Money_pskel& adjustment,
           ::fhir::CodeableConcept_pskel& adjustmentReason,
           ::fhir::date_pskel& date,
           ::fhir::Money_pskel& amount,
           ::fhir::Identifier_pskel& identifier)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->adjustment_parser_ = &adjustment;
    this->adjustmentReason_parser_ = &adjustmentReason;
    this->date_parser_ = &date;
    this->amount_parser_ = &amount;
    this->identifier_parser_ = &identifier;
  }

  ClaimResponse_Payment_pskel::
  ClaimResponse_Payment_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Payment_impl_ (0),
    type_parser_ (0),
    adjustment_parser_ (0),
    adjustmentReason_parser_ (0),
    date_parser_ (0),
    amount_parser_ (0),
    identifier_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Payment_pskel::
  ClaimResponse_Payment_pskel (ClaimResponse_Payment_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Payment_impl_ (impl),
    type_parser_ (0),
    adjustment_parser_ (0),
    adjustmentReason_parser_ (0),
    date_parser_ (0),
    amount_parser_ (0),
    identifier_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_ProcessNote_pskel
  //

  void ClaimResponse_ProcessNote_pskel::
  number_parser (::fhir::positiveInt_pskel& p)
  {
    this->number_parser_ = &p;
  }

  void ClaimResponse_ProcessNote_pskel::
  type_parser (::fhir::NoteType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ClaimResponse_ProcessNote_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void ClaimResponse_ProcessNote_pskel::
  language_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->language_parser_ = &p;
  }

  void ClaimResponse_ProcessNote_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& number,
           ::fhir::NoteType_pskel& type,
           ::fhir::string_pskel& text,
           ::fhir::CodeableConcept_pskel& language)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->number_parser_ = &number;
    this->type_parser_ = &type;
    this->text_parser_ = &text;
    this->language_parser_ = &language;
  }

  ClaimResponse_ProcessNote_pskel::
  ClaimResponse_ProcessNote_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_ProcessNote_impl_ (0),
    number_parser_ (0),
    type_parser_ (0),
    text_parser_ (0),
    language_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_ProcessNote_pskel::
  ClaimResponse_ProcessNote_pskel (ClaimResponse_ProcessNote_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_ProcessNote_impl_ (impl),
    number_parser_ (0),
    type_parser_ (0),
    text_parser_ (0),
    language_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Insurance_pskel
  //

  void ClaimResponse_Insurance_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ClaimResponse_Insurance_pskel::
  focal_parser (::fhir::boolean_pskel& p)
  {
    this->focal_parser_ = &p;
  }

  void ClaimResponse_Insurance_pskel::
  coverage_parser (::fhir::Reference_pskel& p)
  {
    this->coverage_parser_ = &p;
  }

  void ClaimResponse_Insurance_pskel::
  businessArrangement_parser (::fhir::string_pskel& p)
  {
    this->businessArrangement_parser_ = &p;
  }

  void ClaimResponse_Insurance_pskel::
  claimResponse_parser (::fhir::Reference_pskel& p)
  {
    this->claimResponse_parser_ = &p;
  }

  void ClaimResponse_Insurance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::boolean_pskel& focal,
           ::fhir::Reference_pskel& coverage,
           ::fhir::string_pskel& businessArrangement,
           ::fhir::Reference_pskel& claimResponse)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->focal_parser_ = &focal;
    this->coverage_parser_ = &coverage;
    this->businessArrangement_parser_ = &businessArrangement;
    this->claimResponse_parser_ = &claimResponse;
  }

  ClaimResponse_Insurance_pskel::
  ClaimResponse_Insurance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Insurance_impl_ (0),
    sequence_parser_ (0),
    focal_parser_ (0),
    coverage_parser_ (0),
    businessArrangement_parser_ (0),
    claimResponse_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Insurance_pskel::
  ClaimResponse_Insurance_pskel (ClaimResponse_Insurance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Insurance_impl_ (impl),
    sequence_parser_ (0),
    focal_parser_ (0),
    coverage_parser_ (0),
    businessArrangement_parser_ (0),
    claimResponse_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimResponse_Error_pskel
  //

  void ClaimResponse_Error_pskel::
  itemSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->itemSequence_parser_ = &p;
  }

  void ClaimResponse_Error_pskel::
  detailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->detailSequence_parser_ = &p;
  }

  void ClaimResponse_Error_pskel::
  subDetailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->subDetailSequence_parser_ = &p;
  }

  void ClaimResponse_Error_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ClaimResponse_Error_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& itemSequence,
           ::fhir::positiveInt_pskel& detailSequence,
           ::fhir::positiveInt_pskel& subDetailSequence,
           ::fhir::CodeableConcept_pskel& code)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->itemSequence_parser_ = &itemSequence;
    this->detailSequence_parser_ = &detailSequence;
    this->subDetailSequence_parser_ = &subDetailSequence;
    this->code_parser_ = &code;
  }

  ClaimResponse_Error_pskel::
  ClaimResponse_Error_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClaimResponse_Error_impl_ (0),
    itemSequence_parser_ (0),
    detailSequence_parser_ (0),
    subDetailSequence_parser_ (0),
    code_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClaimResponse_Error_pskel::
  ClaimResponse_Error_pskel (ClaimResponse_Error_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClaimResponse_Error_impl_ (impl),
    itemSequence_parser_ (0),
    detailSequence_parser_ (0),
    subDetailSequence_parser_ (0),
    code_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClaimProcessingCodes_list_pskel
  //

  ClaimProcessingCodes_list_pskel::
  ClaimProcessingCodes_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ClaimProcessingCodes_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ClaimProcessingCodes_list_pskel_enums_, 4UL);
  }

  ClaimProcessingCodes_list_pskel::
  ClaimProcessingCodes_list_pskel (ClaimProcessingCodes_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ClaimProcessingCodes_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ClaimProcessingCodes_list_pskel_enums_, 4UL);
  }

  // ClaimProcessingCodes_pskel
  //

  void ClaimProcessingCodes_pskel::
  value_parser (::fhir::ClaimProcessingCodes_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ClaimProcessingCodes_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ClaimProcessingCodes_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ClaimProcessingCodes_pskel::
  ClaimProcessingCodes_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ClaimProcessingCodes_impl_ (0),
    value_parser_ (0)
  {
  }

  ClaimProcessingCodes_pskel::
  ClaimProcessingCodes_pskel (ClaimProcessingCodes_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ClaimProcessingCodes_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ClaimResponse_pskel
  //

  void ClaimResponse_pskel::
  identifier ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->identifier ();
  }

  void ClaimResponse_pskel::
  status ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->status ();
  }

  void ClaimResponse_pskel::
  type ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->type ();
  }

  void ClaimResponse_pskel::
  subType ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->subType ();
  }

  void ClaimResponse_pskel::
  use ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->use ();
  }

  void ClaimResponse_pskel::
  patient ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->patient ();
  }

  void ClaimResponse_pskel::
  created ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->created ();
  }

  void ClaimResponse_pskel::
  insurer ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->insurer ();
  }

  void ClaimResponse_pskel::
  requestor ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->requestor ();
  }

  void ClaimResponse_pskel::
  request ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->request ();
  }

  void ClaimResponse_pskel::
  outcome ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->outcome ();
  }

  void ClaimResponse_pskel::
  disposition ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->disposition ();
  }

  void ClaimResponse_pskel::
  preAuthRef ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->preAuthRef ();
  }

  void ClaimResponse_pskel::
  preAuthPeriod ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->preAuthPeriod ();
  }

  void ClaimResponse_pskel::
  payeeType ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->payeeType ();
  }

  void ClaimResponse_pskel::
  item ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->item ();
  }

  void ClaimResponse_pskel::
  addItem ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->addItem ();
  }

  void ClaimResponse_pskel::
  adjudication ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->adjudication ();
  }

  void ClaimResponse_pskel::
  total ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->total ();
  }

  void ClaimResponse_pskel::
  payment ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->payment ();
  }

  void ClaimResponse_pskel::
  fundsReserve ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->fundsReserve ();
  }

  void ClaimResponse_pskel::
  formCode ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->formCode ();
  }

  void ClaimResponse_pskel::
  form ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->form ();
  }

  void ClaimResponse_pskel::
  processNote ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->processNote ();
  }

  void ClaimResponse_pskel::
  communicationRequest ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->communicationRequest ();
  }

  void ClaimResponse_pskel::
  insurance ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->insurance ();
  }

  void ClaimResponse_pskel::
  error ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->error ();
  }

  void ClaimResponse_pskel::
  post_ClaimResponse ()
  {
    if (this->ClaimResponse_impl_)
      this->ClaimResponse_impl_->post_ClaimResponse ();
    else
      post_DomainResource ();
  }

  void ClaimResponse_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subType_parser_)
      this->subType_parser_->_reset ();

    if (this->use_parser_)
      this->use_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->insurer_parser_)
      this->insurer_parser_->_reset ();

    if (this->requestor_parser_)
      this->requestor_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->disposition_parser_)
      this->disposition_parser_->_reset ();

    if (this->preAuthRef_parser_)
      this->preAuthRef_parser_->_reset ();

    if (this->preAuthPeriod_parser_)
      this->preAuthPeriod_parser_->_reset ();

    if (this->payeeType_parser_)
      this->payeeType_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    if (this->addItem_parser_)
      this->addItem_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->total_parser_)
      this->total_parser_->_reset ();

    if (this->payment_parser_)
      this->payment_parser_->_reset ();

    if (this->fundsReserve_parser_)
      this->fundsReserve_parser_->_reset ();

    if (this->formCode_parser_)
      this->formCode_parser_->_reset ();

    if (this->form_parser_)
      this->form_parser_->_reset ();

    if (this->processNote_parser_)
      this->processNote_parser_->_reset ();

    if (this->communicationRequest_parser_)
      this->communicationRequest_parser_->_reset ();

    if (this->insurance_parser_)
      this->insurance_parser_->_reset ();

    if (this->error_parser_)
      this->error_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Item_pskel
  //

  void ClaimResponse_Item_pskel::
  itemSequence ()
  {
    if (this->ClaimResponse_Item_impl_)
      this->ClaimResponse_Item_impl_->itemSequence ();
  }

  void ClaimResponse_Item_pskel::
  noteNumber ()
  {
    if (this->ClaimResponse_Item_impl_)
      this->ClaimResponse_Item_impl_->noteNumber ();
  }

  void ClaimResponse_Item_pskel::
  adjudication ()
  {
    if (this->ClaimResponse_Item_impl_)
      this->ClaimResponse_Item_impl_->adjudication ();
  }

  void ClaimResponse_Item_pskel::
  detail ()
  {
    if (this->ClaimResponse_Item_impl_)
      this->ClaimResponse_Item_impl_->detail ();
  }

  void ClaimResponse_Item_pskel::
  post_ClaimResponse_Item ()
  {
    if (this->ClaimResponse_Item_impl_)
      this->ClaimResponse_Item_impl_->post_ClaimResponse_Item ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Item_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->itemSequence_parser_)
      this->itemSequence_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Adjudication_pskel
  //

  void ClaimResponse_Adjudication_pskel::
  category ()
  {
    if (this->ClaimResponse_Adjudication_impl_)
      this->ClaimResponse_Adjudication_impl_->category ();
  }

  void ClaimResponse_Adjudication_pskel::
  reason ()
  {
    if (this->ClaimResponse_Adjudication_impl_)
      this->ClaimResponse_Adjudication_impl_->reason ();
  }

  void ClaimResponse_Adjudication_pskel::
  amount ()
  {
    if (this->ClaimResponse_Adjudication_impl_)
      this->ClaimResponse_Adjudication_impl_->amount ();
  }

  void ClaimResponse_Adjudication_pskel::
  value ()
  {
    if (this->ClaimResponse_Adjudication_impl_)
      this->ClaimResponse_Adjudication_impl_->value ();
  }

  void ClaimResponse_Adjudication_pskel::
  post_ClaimResponse_Adjudication ()
  {
    if (this->ClaimResponse_Adjudication_impl_)
      this->ClaimResponse_Adjudication_impl_->post_ClaimResponse_Adjudication ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Adjudication_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Detail_pskel
  //

  void ClaimResponse_Detail_pskel::
  detailSequence ()
  {
    if (this->ClaimResponse_Detail_impl_)
      this->ClaimResponse_Detail_impl_->detailSequence ();
  }

  void ClaimResponse_Detail_pskel::
  noteNumber ()
  {
    if (this->ClaimResponse_Detail_impl_)
      this->ClaimResponse_Detail_impl_->noteNumber ();
  }

  void ClaimResponse_Detail_pskel::
  adjudication ()
  {
    if (this->ClaimResponse_Detail_impl_)
      this->ClaimResponse_Detail_impl_->adjudication ();
  }

  void ClaimResponse_Detail_pskel::
  subDetail ()
  {
    if (this->ClaimResponse_Detail_impl_)
      this->ClaimResponse_Detail_impl_->subDetail ();
  }

  void ClaimResponse_Detail_pskel::
  post_ClaimResponse_Detail ()
  {
    if (this->ClaimResponse_Detail_impl_)
      this->ClaimResponse_Detail_impl_->post_ClaimResponse_Detail ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Detail_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->detailSequence_parser_)
      this->detailSequence_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->subDetail_parser_)
      this->subDetail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_SubDetail_pskel
  //

  void ClaimResponse_SubDetail_pskel::
  subDetailSequence ()
  {
    if (this->ClaimResponse_SubDetail_impl_)
      this->ClaimResponse_SubDetail_impl_->subDetailSequence ();
  }

  void ClaimResponse_SubDetail_pskel::
  noteNumber ()
  {
    if (this->ClaimResponse_SubDetail_impl_)
      this->ClaimResponse_SubDetail_impl_->noteNumber ();
  }

  void ClaimResponse_SubDetail_pskel::
  adjudication ()
  {
    if (this->ClaimResponse_SubDetail_impl_)
      this->ClaimResponse_SubDetail_impl_->adjudication ();
  }

  void ClaimResponse_SubDetail_pskel::
  post_ClaimResponse_SubDetail ()
  {
    if (this->ClaimResponse_SubDetail_impl_)
      this->ClaimResponse_SubDetail_impl_->post_ClaimResponse_SubDetail ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_SubDetail_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->subDetailSequence_parser_)
      this->subDetailSequence_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_AddItem_pskel
  //

  void ClaimResponse_AddItem_pskel::
  itemSequence ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->itemSequence ();
  }

  void ClaimResponse_AddItem_pskel::
  detailSequence ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->detailSequence ();
  }

  void ClaimResponse_AddItem_pskel::
  subdetailSequence ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->subdetailSequence ();
  }

  void ClaimResponse_AddItem_pskel::
  provider ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->provider ();
  }

  void ClaimResponse_AddItem_pskel::
  productOrService ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->productOrService ();
  }

  void ClaimResponse_AddItem_pskel::
  modifier ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->modifier ();
  }

  void ClaimResponse_AddItem_pskel::
  programCode ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->programCode ();
  }

  void ClaimResponse_AddItem_pskel::
  servicedDate ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->servicedDate ();
  }

  void ClaimResponse_AddItem_pskel::
  servicedPeriod ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->servicedPeriod ();
  }

  void ClaimResponse_AddItem_pskel::
  locationCodeableConcept ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->locationCodeableConcept ();
  }

  void ClaimResponse_AddItem_pskel::
  locationAddress ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->locationAddress ();
  }

  void ClaimResponse_AddItem_pskel::
  locationReference ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->locationReference ();
  }

  void ClaimResponse_AddItem_pskel::
  quantity ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->quantity ();
  }

  void ClaimResponse_AddItem_pskel::
  unitPrice ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->unitPrice ();
  }

  void ClaimResponse_AddItem_pskel::
  factor ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->factor ();
  }

  void ClaimResponse_AddItem_pskel::
  net ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->net ();
  }

  void ClaimResponse_AddItem_pskel::
  bodySite ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->bodySite ();
  }

  void ClaimResponse_AddItem_pskel::
  subSite ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->subSite ();
  }

  void ClaimResponse_AddItem_pskel::
  noteNumber ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->noteNumber ();
  }

  void ClaimResponse_AddItem_pskel::
  adjudication ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->adjudication ();
  }

  void ClaimResponse_AddItem_pskel::
  detail ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->detail ();
  }

  void ClaimResponse_AddItem_pskel::
  post_ClaimResponse_AddItem ()
  {
    if (this->ClaimResponse_AddItem_impl_)
      this->ClaimResponse_AddItem_impl_->post_ClaimResponse_AddItem ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_AddItem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->itemSequence_parser_)
      this->itemSequence_parser_->_reset ();

    if (this->detailSequence_parser_)
      this->detailSequence_parser_->_reset ();

    if (this->subdetailSequence_parser_)
      this->subdetailSequence_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->programCode_parser_)
      this->programCode_parser_->_reset ();

    if (this->servicedDate_parser_)
      this->servicedDate_parser_->_reset ();

    if (this->servicedPeriod_parser_)
      this->servicedPeriod_parser_->_reset ();

    if (this->locationCodeableConcept_parser_)
      this->locationCodeableConcept_parser_->_reset ();

    if (this->locationAddress_parser_)
      this->locationAddress_parser_->_reset ();

    if (this->locationReference_parser_)
      this->locationReference_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->subSite_parser_)
      this->subSite_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Detail1_pskel
  //

  void ClaimResponse_Detail1_pskel::
  productOrService ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->productOrService ();
  }

  void ClaimResponse_Detail1_pskel::
  modifier ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->modifier ();
  }

  void ClaimResponse_Detail1_pskel::
  quantity ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->quantity ();
  }

  void ClaimResponse_Detail1_pskel::
  unitPrice ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->unitPrice ();
  }

  void ClaimResponse_Detail1_pskel::
  factor ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->factor ();
  }

  void ClaimResponse_Detail1_pskel::
  net ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->net ();
  }

  void ClaimResponse_Detail1_pskel::
  noteNumber ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->noteNumber ();
  }

  void ClaimResponse_Detail1_pskel::
  adjudication ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->adjudication ();
  }

  void ClaimResponse_Detail1_pskel::
  subDetail ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->subDetail ();
  }

  void ClaimResponse_Detail1_pskel::
  post_ClaimResponse_Detail1 ()
  {
    if (this->ClaimResponse_Detail1_impl_)
      this->ClaimResponse_Detail1_impl_->post_ClaimResponse_Detail1 ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Detail1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->subDetail_parser_)
      this->subDetail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_SubDetail1_pskel
  //

  void ClaimResponse_SubDetail1_pskel::
  productOrService ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->productOrService ();
  }

  void ClaimResponse_SubDetail1_pskel::
  modifier ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->modifier ();
  }

  void ClaimResponse_SubDetail1_pskel::
  quantity ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->quantity ();
  }

  void ClaimResponse_SubDetail1_pskel::
  unitPrice ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->unitPrice ();
  }

  void ClaimResponse_SubDetail1_pskel::
  factor ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->factor ();
  }

  void ClaimResponse_SubDetail1_pskel::
  net ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->net ();
  }

  void ClaimResponse_SubDetail1_pskel::
  noteNumber ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->noteNumber ();
  }

  void ClaimResponse_SubDetail1_pskel::
  adjudication ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->adjudication ();
  }

  void ClaimResponse_SubDetail1_pskel::
  post_ClaimResponse_SubDetail1 ()
  {
    if (this->ClaimResponse_SubDetail1_impl_)
      this->ClaimResponse_SubDetail1_impl_->post_ClaimResponse_SubDetail1 ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_SubDetail1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Total_pskel
  //

  void ClaimResponse_Total_pskel::
  category ()
  {
    if (this->ClaimResponse_Total_impl_)
      this->ClaimResponse_Total_impl_->category ();
  }

  void ClaimResponse_Total_pskel::
  amount ()
  {
    if (this->ClaimResponse_Total_impl_)
      this->ClaimResponse_Total_impl_->amount ();
  }

  void ClaimResponse_Total_pskel::
  post_ClaimResponse_Total ()
  {
    if (this->ClaimResponse_Total_impl_)
      this->ClaimResponse_Total_impl_->post_ClaimResponse_Total ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Total_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Payment_pskel
  //

  void ClaimResponse_Payment_pskel::
  type ()
  {
    if (this->ClaimResponse_Payment_impl_)
      this->ClaimResponse_Payment_impl_->type ();
  }

  void ClaimResponse_Payment_pskel::
  adjustment ()
  {
    if (this->ClaimResponse_Payment_impl_)
      this->ClaimResponse_Payment_impl_->adjustment ();
  }

  void ClaimResponse_Payment_pskel::
  adjustmentReason ()
  {
    if (this->ClaimResponse_Payment_impl_)
      this->ClaimResponse_Payment_impl_->adjustmentReason ();
  }

  void ClaimResponse_Payment_pskel::
  date ()
  {
    if (this->ClaimResponse_Payment_impl_)
      this->ClaimResponse_Payment_impl_->date ();
  }

  void ClaimResponse_Payment_pskel::
  amount ()
  {
    if (this->ClaimResponse_Payment_impl_)
      this->ClaimResponse_Payment_impl_->amount ();
  }

  void ClaimResponse_Payment_pskel::
  identifier ()
  {
    if (this->ClaimResponse_Payment_impl_)
      this->ClaimResponse_Payment_impl_->identifier ();
  }

  void ClaimResponse_Payment_pskel::
  post_ClaimResponse_Payment ()
  {
    if (this->ClaimResponse_Payment_impl_)
      this->ClaimResponse_Payment_impl_->post_ClaimResponse_Payment ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Payment_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->adjustment_parser_)
      this->adjustment_parser_->_reset ();

    if (this->adjustmentReason_parser_)
      this->adjustmentReason_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_ProcessNote_pskel
  //

  void ClaimResponse_ProcessNote_pskel::
  number ()
  {
    if (this->ClaimResponse_ProcessNote_impl_)
      this->ClaimResponse_ProcessNote_impl_->number ();
  }

  void ClaimResponse_ProcessNote_pskel::
  type ()
  {
    if (this->ClaimResponse_ProcessNote_impl_)
      this->ClaimResponse_ProcessNote_impl_->type ();
  }

  void ClaimResponse_ProcessNote_pskel::
  text ()
  {
    if (this->ClaimResponse_ProcessNote_impl_)
      this->ClaimResponse_ProcessNote_impl_->text ();
  }

  void ClaimResponse_ProcessNote_pskel::
  language ()
  {
    if (this->ClaimResponse_ProcessNote_impl_)
      this->ClaimResponse_ProcessNote_impl_->language ();
  }

  void ClaimResponse_ProcessNote_pskel::
  post_ClaimResponse_ProcessNote ()
  {
    if (this->ClaimResponse_ProcessNote_impl_)
      this->ClaimResponse_ProcessNote_impl_->post_ClaimResponse_ProcessNote ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_ProcessNote_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->number_parser_)
      this->number_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->language_parser_)
      this->language_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Insurance_pskel
  //

  void ClaimResponse_Insurance_pskel::
  sequence ()
  {
    if (this->ClaimResponse_Insurance_impl_)
      this->ClaimResponse_Insurance_impl_->sequence ();
  }

  void ClaimResponse_Insurance_pskel::
  focal ()
  {
    if (this->ClaimResponse_Insurance_impl_)
      this->ClaimResponse_Insurance_impl_->focal ();
  }

  void ClaimResponse_Insurance_pskel::
  coverage ()
  {
    if (this->ClaimResponse_Insurance_impl_)
      this->ClaimResponse_Insurance_impl_->coverage ();
  }

  void ClaimResponse_Insurance_pskel::
  businessArrangement ()
  {
    if (this->ClaimResponse_Insurance_impl_)
      this->ClaimResponse_Insurance_impl_->businessArrangement ();
  }

  void ClaimResponse_Insurance_pskel::
  claimResponse ()
  {
    if (this->ClaimResponse_Insurance_impl_)
      this->ClaimResponse_Insurance_impl_->claimResponse ();
  }

  void ClaimResponse_Insurance_pskel::
  post_ClaimResponse_Insurance ()
  {
    if (this->ClaimResponse_Insurance_impl_)
      this->ClaimResponse_Insurance_impl_->post_ClaimResponse_Insurance ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Insurance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->focal_parser_)
      this->focal_parser_->_reset ();

    if (this->coverage_parser_)
      this->coverage_parser_->_reset ();

    if (this->businessArrangement_parser_)
      this->businessArrangement_parser_->_reset ();

    if (this->claimResponse_parser_)
      this->claimResponse_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimResponse_Error_pskel
  //

  void ClaimResponse_Error_pskel::
  itemSequence ()
  {
    if (this->ClaimResponse_Error_impl_)
      this->ClaimResponse_Error_impl_->itemSequence ();
  }

  void ClaimResponse_Error_pskel::
  detailSequence ()
  {
    if (this->ClaimResponse_Error_impl_)
      this->ClaimResponse_Error_impl_->detailSequence ();
  }

  void ClaimResponse_Error_pskel::
  subDetailSequence ()
  {
    if (this->ClaimResponse_Error_impl_)
      this->ClaimResponse_Error_impl_->subDetailSequence ();
  }

  void ClaimResponse_Error_pskel::
  code ()
  {
    if (this->ClaimResponse_Error_impl_)
      this->ClaimResponse_Error_impl_->code ();
  }

  void ClaimResponse_Error_pskel::
  post_ClaimResponse_Error ()
  {
    if (this->ClaimResponse_Error_impl_)
      this->ClaimResponse_Error_impl_->post_ClaimResponse_Error ();
    else
      post_BackboneElement ();
  }

  void ClaimResponse_Error_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->itemSequence_parser_)
      this->itemSequence_parser_->_reset ();

    if (this->detailSequence_parser_)
      this->detailSequence_parser_->_reset ();

    if (this->subDetailSequence_parser_)
      this->subDetailSequence_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClaimProcessingCodes_list_pskel
  //

  void ClaimProcessingCodes_list_pskel::
  post_ClaimProcessingCodes_list ()
  {
    if (this->ClaimProcessingCodes_list_impl_)
      this->ClaimProcessingCodes_list_impl_->post_ClaimProcessingCodes_list ();
    else
      post_code_primitive ();
  }

  const char* const ClaimProcessingCodes_list_pskel::_xsde_ClaimProcessingCodes_list_pskel_enums_[4UL] = 
  {
    "complete",
    "error",
    "partial",
    "queued"
  };

  // ClaimProcessingCodes_pskel
  //

  void ClaimProcessingCodes_pskel::
  value ()
  {
    if (this->ClaimProcessingCodes_impl_)
      this->ClaimProcessingCodes_impl_->value ();
  }

  void ClaimProcessingCodes_pskel::
  post_ClaimProcessingCodes ()
  {
    if (this->ClaimProcessingCodes_impl_)
      this->ClaimProcessingCodes_impl_->post_ClaimProcessingCodes ();
    else
      post_Element ();
  }

  void ClaimProcessingCodes_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ClaimResponse_pskel.
  //
  bool ClaimResponse_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FinancialResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "subType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subType_parser_)
            {
              this->subType_parser_->pre ();
              ctx.nested_parser (this->subType_parser_);
            }
          }
          else
          {
            if (this->subType_parser_ != 0)
            {
              this->subType_parser_->post_CodeableConcept ();
              this->subType ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "use" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->use_parser_)
            {
              this->use_parser_->pre ();
              ctx.nested_parser (this->use_parser_);
            }
          }
          else
          {
            if (this->use_parser_ != 0)
            {
              this->use_parser_->post_Use ();
              this->use ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "insurer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurer_parser_)
            {
              this->insurer_parser_->pre ();
              ctx.nested_parser (this->insurer_parser_);
            }
          }
          else
          {
            if (this->insurer_parser_ != 0)
            {
              this->insurer_parser_->post_Reference ();
              this->insurer ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "requestor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requestor_parser_)
            {
              this->requestor_parser_->pre ();
              ctx.nested_parser (this->requestor_parser_);
            }
          }
          else
          {
            if (this->requestor_parser_ != 0)
            {
              this->requestor_parser_->post_Reference ();
              this->requestor ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_Reference ();
              this->request ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_ClaimProcessingCodes ();
              this->outcome ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "disposition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->disposition_parser_)
            {
              this->disposition_parser_->pre ();
              ctx.nested_parser (this->disposition_parser_);
            }
          }
          else
          {
            if (this->disposition_parser_ != 0)
            {
              this->disposition_parser_->post_string ();
              this->disposition ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "preAuthRef" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preAuthRef_parser_)
            {
              this->preAuthRef_parser_->pre ();
              ctx.nested_parser (this->preAuthRef_parser_);
            }
          }
          else
          {
            if (this->preAuthRef_parser_ != 0)
            {
              this->preAuthRef_parser_->post_string ();
              this->preAuthRef ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "preAuthPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preAuthPeriod_parser_)
            {
              this->preAuthPeriod_parser_->pre ();
              ctx.nested_parser (this->preAuthPeriod_parser_);
            }
          }
          else
          {
            if (this->preAuthPeriod_parser_ != 0)
            {
              this->preAuthPeriod_parser_->post_Period ();
              this->preAuthPeriod ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "payeeType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payeeType_parser_)
            {
              this->payeeType_parser_->pre ();
              ctx.nested_parser (this->payeeType_parser_);
            }
          }
          else
          {
            if (this->payeeType_parser_ != 0)
            {
              this->payeeType_parser_->post_CodeableConcept ();
              this->payeeType ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_ClaimResponse_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "addItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->addItem_parser_)
            {
              this->addItem_parser_->pre ();
              ctx.nested_parser (this->addItem_parser_);
            }
          }
          else
          {
            if (this->addItem_parser_ != 0)
            {
              this->addItem_parser_->post_ClaimResponse_AddItem ();
              this->addItem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ClaimResponse_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "total" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->total_parser_)
            {
              this->total_parser_->pre ();
              ctx.nested_parser (this->total_parser_);
            }
          }
          else
          {
            if (this->total_parser_ != 0)
            {
              this->total_parser_->post_ClaimResponse_Total ();
              this->total ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "payment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payment_parser_)
            {
              this->payment_parser_->pre ();
              ctx.nested_parser (this->payment_parser_);
            }
          }
          else
          {
            if (this->payment_parser_ != 0)
            {
              this->payment_parser_->post_ClaimResponse_Payment ();
              this->payment ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "fundsReserve" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fundsReserve_parser_)
            {
              this->fundsReserve_parser_->pre ();
              ctx.nested_parser (this->fundsReserve_parser_);
            }
          }
          else
          {
            if (this->fundsReserve_parser_ != 0)
            {
              this->fundsReserve_parser_->post_CodeableConcept ();
              this->fundsReserve ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "formCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->formCode_parser_)
            {
              this->formCode_parser_->pre ();
              ctx.nested_parser (this->formCode_parser_);
            }
          }
          else
          {
            if (this->formCode_parser_ != 0)
            {
              this->formCode_parser_->post_CodeableConcept ();
              this->formCode ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "form" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->form_parser_)
            {
              this->form_parser_->pre ();
              ctx.nested_parser (this->form_parser_);
            }
          }
          else
          {
            if (this->form_parser_ != 0)
            {
              this->form_parser_->post_Attachment ();
              this->form ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "processNote" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->processNote_parser_)
            {
              this->processNote_parser_->pre ();
              ctx.nested_parser (this->processNote_parser_);
            }
          }
          else
          {
            if (this->processNote_parser_ != 0)
            {
              this->processNote_parser_->post_ClaimResponse_ProcessNote ();
              this->processNote ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "communicationRequest" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->communicationRequest_parser_)
            {
              this->communicationRequest_parser_->pre ();
              ctx.nested_parser (this->communicationRequest_parser_);
            }
          }
          else
          {
            if (this->communicationRequest_parser_ != 0)
            {
              this->communicationRequest_parser_->post_Reference ();
              this->communicationRequest ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "insurance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurance_parser_)
            {
              this->insurance_parser_->pre ();
              ctx.nested_parser (this->insurance_parser_);
            }
          }
          else
          {
            if (this->insurance_parser_ != 0)
            {
              this->insurance_parser_->post_ClaimResponse_Insurance ();
              this->insurance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "error" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->error_parser_)
            {
              this->error_parser_->pre ();
              ctx.nested_parser (this->error_parser_);
            }
          }
          else
          {
            if (this->error_parser_ != 0)
            {
              this->error_parser_->post_ClaimResponse_Error ();
              this->error ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Item_pskel.
  //
  bool ClaimResponse_Item_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Item_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Item_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Item_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Item_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Item_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemSequence_parser_)
            {
              this->itemSequence_parser_->pre ();
              ctx.nested_parser (this->itemSequence_parser_);
            }
          }
          else
          {
            if (this->itemSequence_parser_ != 0)
            {
              this->itemSequence_parser_->post_positiveInt ();
              this->itemSequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ClaimResponse_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_ClaimResponse_Detail ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Adjudication_pskel.
  //
  bool ClaimResponse_Adjudication_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Adjudication_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Adjudication_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Adjudication_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Adjudication_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Adjudication_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_CodeableConcept ();
              this->reason ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_decimal ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Detail_pskel.
  //
  bool ClaimResponse_Detail_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "detailSequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Detail_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Detail_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Detail_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Detail_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Detail_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "detailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailSequence_parser_)
            {
              this->detailSequence_parser_->pre ();
              ctx.nested_parser (this->detailSequence_parser_);
            }
          }
          else
          {
            if (this->detailSequence_parser_ != 0)
            {
              this->detailSequence_parser_->post_positiveInt ();
              this->detailSequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ClaimResponse_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "subDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subDetail_parser_)
            {
              this->subDetail_parser_->pre ();
              ctx.nested_parser (this->subDetail_parser_);
            }
          }
          else
          {
            if (this->subDetail_parser_ != 0)
            {
              this->subDetail_parser_->post_ClaimResponse_SubDetail ();
              this->subDetail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_SubDetail_pskel.
  //
  bool ClaimResponse_SubDetail_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "subDetailSequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_SubDetail_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_SubDetail_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_SubDetail_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_SubDetail_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_SubDetail_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "subDetailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subDetailSequence_parser_)
            {
              this->subDetailSequence_parser_->pre ();
              ctx.nested_parser (this->subDetailSequence_parser_);
            }
          }
          else
          {
            if (this->subDetailSequence_parser_ != 0)
            {
              this->subDetailSequence_parser_->post_positiveInt ();
              this->subDetailSequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ClaimResponse_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_AddItem_pskel.
  //
  bool ClaimResponse_AddItem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "detailSequence" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "subdetailSequence" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "provider" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "productOrService" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_AddItem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_AddItem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_AddItem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_AddItem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_AddItem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemSequence_parser_)
            {
              this->itemSequence_parser_->pre ();
              ctx.nested_parser (this->itemSequence_parser_);
            }
          }
          else
          {
            if (this->itemSequence_parser_ != 0)
            {
              this->itemSequence_parser_->post_positiveInt ();
              this->itemSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "detailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailSequence_parser_)
            {
              this->detailSequence_parser_->pre ();
              ctx.nested_parser (this->detailSequence_parser_);
            }
          }
          else
          {
            if (this->detailSequence_parser_ != 0)
            {
              this->detailSequence_parser_->post_positiveInt ();
              this->detailSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subdetailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subdetailSequence_parser_)
            {
              this->subdetailSequence_parser_->pre ();
              ctx.nested_parser (this->subdetailSequence_parser_);
            }
          }
          else
          {
            if (this->subdetailSequence_parser_ != 0)
            {
              this->subdetailSequence_parser_->post_positiveInt ();
              this->subdetailSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "programCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->programCode_parser_)
            {
              this->programCode_parser_->pre ();
              ctx.nested_parser (this->programCode_parser_);
            }
          }
          else
          {
            if (this->programCode_parser_ != 0)
            {
              this->programCode_parser_->post_CodeableConcept ();
              this->programCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "servicedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedDate_parser_)
            {
              this->servicedDate_parser_->pre ();
              ctx.nested_parser (this->servicedDate_parser_);
            }
          }
          else
          {
            if (this->servicedDate_parser_ != 0)
            {
              this->servicedDate_parser_->post_date ();
              this->servicedDate ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "servicedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedPeriod_parser_)
            {
              this->servicedPeriod_parser_->pre ();
              ctx.nested_parser (this->servicedPeriod_parser_);
            }
          }
          else
          {
            if (this->servicedPeriod_parser_ != 0)
            {
              this->servicedPeriod_parser_->post_Period ();
              this->servicedPeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "locationCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationCodeableConcept_parser_)
            {
              this->locationCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->locationCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->locationCodeableConcept_parser_ != 0)
            {
              this->locationCodeableConcept_parser_->post_CodeableConcept ();
              this->locationCodeableConcept ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "locationAddress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationAddress_parser_)
            {
              this->locationAddress_parser_->pre ();
              ctx.nested_parser (this->locationAddress_parser_);
            }
          }
          else
          {
            if (this->locationAddress_parser_ != 0)
            {
              this->locationAddress_parser_->post_Address ();
              this->locationAddress ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "locationReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationReference_parser_)
            {
              this->locationReference_parser_->pre ();
              ctx.nested_parser (this->locationReference_parser_);
            }
          }
          else
          {
            if (this->locationReference_parser_ != 0)
            {
              this->locationReference_parser_->post_Reference ();
              this->locationReference ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "subSite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subSite_parser_)
            {
              this->subSite_parser_->pre ();
              ctx.nested_parser (this->subSite_parser_);
            }
          }
          else
          {
            if (this->subSite_parser_ != 0)
            {
              this->subSite_parser_->post_CodeableConcept ();
              this->subSite ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ClaimResponse_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_ClaimResponse_Detail1 ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Detail1_pskel.
  //
  bool ClaimResponse_Detail1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Detail1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Detail1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Detail1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Detail1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Detail1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ClaimResponse_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "subDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subDetail_parser_)
            {
              this->subDetail_parser_->pre ();
              ctx.nested_parser (this->subDetail_parser_);
            }
          }
          else
          {
            if (this->subDetail_parser_ != 0)
            {
              this->subDetail_parser_->post_ClaimResponse_SubDetail1 ();
              this->subDetail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_SubDetail1_pskel.
  //
  bool ClaimResponse_SubDetail1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_SubDetail1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_SubDetail1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_SubDetail1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_SubDetail1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_SubDetail1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ClaimResponse_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Total_pskel.
  //
  bool ClaimResponse_Total_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Total_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Total_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Total_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Total_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Total_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Payment_pskel.
  //
  bool ClaimResponse_Payment_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Payment_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Payment_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Payment_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Payment_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Payment_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "adjustment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjustment_parser_)
            {
              this->adjustment_parser_->pre ();
              ctx.nested_parser (this->adjustment_parser_);
            }
          }
          else
          {
            if (this->adjustment_parser_ != 0)
            {
              this->adjustment_parser_->post_Money ();
              this->adjustment ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "adjustmentReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjustmentReason_parser_)
            {
              this->adjustmentReason_parser_->pre ();
              ctx.nested_parser (this->adjustmentReason_parser_);
            }
          }
          else
          {
            if (this->adjustmentReason_parser_ != 0)
            {
              this->adjustmentReason_parser_->post_CodeableConcept ();
              this->adjustmentReason ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_date ();
              this->date ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_ProcessNote_pskel.
  //
  bool ClaimResponse_ProcessNote_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "number" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_ProcessNote_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_ProcessNote_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_ProcessNote_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_ProcessNote_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_ProcessNote_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "number" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->number_parser_)
            {
              this->number_parser_->pre ();
              ctx.nested_parser (this->number_parser_);
            }
          }
          else
          {
            if (this->number_parser_ != 0)
            {
              this->number_parser_->post_positiveInt ();
              this->number ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_NoteType ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "language" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->language_parser_)
            {
              this->language_parser_->pre ();
              ctx.nested_parser (this->language_parser_);
            }
          }
          else
          {
            if (this->language_parser_ != 0)
            {
              this->language_parser_->post_CodeableConcept ();
              this->language ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Insurance_pskel.
  //
  bool ClaimResponse_Insurance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Insurance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Insurance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Insurance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Insurance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Insurance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "focal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focal_parser_)
            {
              this->focal_parser_->pre ();
              ctx.nested_parser (this->focal_parser_);
            }
          }
          else
          {
            if (this->focal_parser_ != 0)
            {
              this->focal_parser_->post_boolean ();
              this->focal ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "coverage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverage_parser_)
            {
              this->coverage_parser_->pre ();
              ctx.nested_parser (this->coverage_parser_);
            }
          }
          else
          {
            if (this->coverage_parser_ != 0)
            {
              this->coverage_parser_->post_Reference ();
              this->coverage ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "businessArrangement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->businessArrangement_parser_)
            {
              this->businessArrangement_parser_->pre ();
              ctx.nested_parser (this->businessArrangement_parser_);
            }
          }
          else
          {
            if (this->businessArrangement_parser_ != 0)
            {
              this->businessArrangement_parser_->post_string ();
              this->businessArrangement ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "claimResponse" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->claimResponse_parser_)
            {
              this->claimResponse_parser_->pre ();
              ctx.nested_parser (this->claimResponse_parser_);
            }
          }
          else
          {
            if (this->claimResponse_parser_ != 0)
            {
              this->claimResponse_parser_->post_Reference ();
              this->claimResponse ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClaimResponse_Error_pskel.
  //
  bool ClaimResponse_Error_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "detailSequence" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "subDetailSequence" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClaimResponse_Error_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClaimResponse_Error_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClaimResponse_Error_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClaimResponse_Error_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClaimResponse_Error_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemSequence_parser_)
            {
              this->itemSequence_parser_->pre ();
              ctx.nested_parser (this->itemSequence_parser_);
            }
          }
          else
          {
            if (this->itemSequence_parser_ != 0)
            {
              this->itemSequence_parser_->post_positiveInt ();
              this->itemSequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "detailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailSequence_parser_)
            {
              this->detailSequence_parser_->pre ();
              ctx.nested_parser (this->detailSequence_parser_);
            }
          }
          else
          {
            if (this->detailSequence_parser_ != 0)
            {
              this->detailSequence_parser_->post_positiveInt ();
              this->detailSequence ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subDetailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subDetailSequence_parser_)
            {
              this->subDetailSequence_parser_->pre ();
              ctx.nested_parser (this->subDetailSequence_parser_);
            }
          }
          else
          {
            if (this->subDetailSequence_parser_ != 0)
            {
              this->subDetailSequence_parser_->post_positiveInt ();
              this->subDetailSequence ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ClaimProcessingCodes_pskel.
  //
  bool ClaimProcessingCodes_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ClaimProcessingCodes_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

