// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "messageheader-pskel.hxx"

namespace fhir
{
  // MessageHeader_pskel
  //

  void MessageHeader_pskel::
  eventCoding_parser (::fhir::Coding_pskel& p)
  {
    this->eventCoding_parser_ = &p;
  }

  void MessageHeader_pskel::
  eventUri_parser (::fhir::uri_pskel& p)
  {
    this->eventUri_parser_ = &p;
  }

  void MessageHeader_pskel::
  destination_parser (::fhir::MessageHeader_Destination_pskel& p)
  {
    this->destination_parser_ = &p;
  }

  void MessageHeader_pskel::
  sender_parser (::fhir::Reference_pskel& p)
  {
    this->sender_parser_ = &p;
  }

  void MessageHeader_pskel::
  enterer_parser (::fhir::Reference_pskel& p)
  {
    this->enterer_parser_ = &p;
  }

  void MessageHeader_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void MessageHeader_pskel::
  source_parser (::fhir::MessageHeader_Source_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void MessageHeader_pskel::
  responsible_parser (::fhir::Reference_pskel& p)
  {
    this->responsible_parser_ = &p;
  }

  void MessageHeader_pskel::
  reason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void MessageHeader_pskel::
  response_parser (::fhir::MessageHeader_Response_pskel& p)
  {
    this->response_parser_ = &p;
  }

  void MessageHeader_pskel::
  focus_parser (::fhir::Reference_pskel& p)
  {
    this->focus_parser_ = &p;
  }

  void MessageHeader_pskel::
  definition_parser (::fhir::canonical_pskel& p)
  {
    this->definition_parser_ = &p;
  }

  void MessageHeader_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Coding_pskel& eventCoding,
           ::fhir::uri_pskel& eventUri,
           ::fhir::MessageHeader_Destination_pskel& destination,
           ::fhir::Reference_pskel& sender,
           ::fhir::Reference_pskel& enterer,
           ::fhir::Reference_pskel& author,
           ::fhir::MessageHeader_Source_pskel& source,
           ::fhir::Reference_pskel& responsible,
           ::fhir::CodeableConcept_pskel& reason,
           ::fhir::MessageHeader_Response_pskel& response,
           ::fhir::Reference_pskel& focus,
           ::fhir::canonical_pskel& definition)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->eventCoding_parser_ = &eventCoding;
    this->eventUri_parser_ = &eventUri;
    this->destination_parser_ = &destination;
    this->sender_parser_ = &sender;
    this->enterer_parser_ = &enterer;
    this->author_parser_ = &author;
    this->source_parser_ = &source;
    this->responsible_parser_ = &responsible;
    this->reason_parser_ = &reason;
    this->response_parser_ = &response;
    this->focus_parser_ = &focus;
    this->definition_parser_ = &definition;
  }

  MessageHeader_pskel::
  MessageHeader_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MessageHeader_impl_ (0),
    eventCoding_parser_ (0),
    eventUri_parser_ (0),
    destination_parser_ (0),
    sender_parser_ (0),
    enterer_parser_ (0),
    author_parser_ (0),
    source_parser_ (0),
    responsible_parser_ (0),
    reason_parser_ (0),
    response_parser_ (0),
    focus_parser_ (0),
    definition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MessageHeader_pskel::
  MessageHeader_pskel (MessageHeader_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MessageHeader_impl_ (impl),
    eventCoding_parser_ (0),
    eventUri_parser_ (0),
    destination_parser_ (0),
    sender_parser_ (0),
    enterer_parser_ (0),
    author_parser_ (0),
    source_parser_ (0),
    responsible_parser_ (0),
    reason_parser_ (0),
    response_parser_ (0),
    focus_parser_ (0),
    definition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MessageHeader_Destination_pskel
  //

  void MessageHeader_Destination_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void MessageHeader_Destination_pskel::
  target_parser (::fhir::Reference_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void MessageHeader_Destination_pskel::
  endpoint_parser (::fhir::url_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void MessageHeader_Destination_pskel::
  receiver_parser (::fhir::Reference_pskel& p)
  {
    this->receiver_parser_ = &p;
  }

  void MessageHeader_Destination_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::Reference_pskel& target,
           ::fhir::url_pskel& endpoint,
           ::fhir::Reference_pskel& receiver)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->target_parser_ = &target;
    this->endpoint_parser_ = &endpoint;
    this->receiver_parser_ = &receiver;
  }

  MessageHeader_Destination_pskel::
  MessageHeader_Destination_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MessageHeader_Destination_impl_ (0),
    name_parser_ (0),
    target_parser_ (0),
    endpoint_parser_ (0),
    receiver_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MessageHeader_Destination_pskel::
  MessageHeader_Destination_pskel (MessageHeader_Destination_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MessageHeader_Destination_impl_ (impl),
    name_parser_ (0),
    target_parser_ (0),
    endpoint_parser_ (0),
    receiver_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MessageHeader_Source_pskel
  //

  void MessageHeader_Source_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void MessageHeader_Source_pskel::
  software_parser (::fhir::string_pskel& p)
  {
    this->software_parser_ = &p;
  }

  void MessageHeader_Source_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void MessageHeader_Source_pskel::
  contact_parser (::fhir::ContactPoint_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void MessageHeader_Source_pskel::
  endpoint_parser (::fhir::url_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void MessageHeader_Source_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& software,
           ::fhir::string_pskel& version,
           ::fhir::ContactPoint_pskel& contact,
           ::fhir::url_pskel& endpoint)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->software_parser_ = &software;
    this->version_parser_ = &version;
    this->contact_parser_ = &contact;
    this->endpoint_parser_ = &endpoint;
  }

  MessageHeader_Source_pskel::
  MessageHeader_Source_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MessageHeader_Source_impl_ (0),
    name_parser_ (0),
    software_parser_ (0),
    version_parser_ (0),
    contact_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MessageHeader_Source_pskel::
  MessageHeader_Source_pskel (MessageHeader_Source_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MessageHeader_Source_impl_ (impl),
    name_parser_ (0),
    software_parser_ (0),
    version_parser_ (0),
    contact_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MessageHeader_Response_pskel
  //

  void MessageHeader_Response_pskel::
  identifier_parser (::fhir::id_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MessageHeader_Response_pskel::
  code_parser (::fhir::ResponseType_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MessageHeader_Response_pskel::
  details_parser (::fhir::Reference_pskel& p)
  {
    this->details_parser_ = &p;
  }

  void MessageHeader_Response_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& identifier,
           ::fhir::ResponseType_pskel& code,
           ::fhir::Reference_pskel& details)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->code_parser_ = &code;
    this->details_parser_ = &details;
  }

  MessageHeader_Response_pskel::
  MessageHeader_Response_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MessageHeader_Response_impl_ (0),
    identifier_parser_ (0),
    code_parser_ (0),
    details_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MessageHeader_Response_pskel::
  MessageHeader_Response_pskel (MessageHeader_Response_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MessageHeader_Response_impl_ (impl),
    identifier_parser_ (0),
    code_parser_ (0),
    details_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ResponseType_list_pskel
  //

  ResponseType_list_pskel::
  ResponseType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ResponseType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ResponseType_list_pskel_enums_, 3UL);
  }

  ResponseType_list_pskel::
  ResponseType_list_pskel (ResponseType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ResponseType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ResponseType_list_pskel_enums_, 3UL);
  }

  // ResponseType_pskel
  //

  void ResponseType_pskel::
  value_parser (::fhir::ResponseType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ResponseType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ResponseType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ResponseType_pskel::
  ResponseType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ResponseType_impl_ (0),
    value_parser_ (0)
  {
  }

  ResponseType_pskel::
  ResponseType_pskel (ResponseType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ResponseType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MessageHeader_pskel
  //

  void MessageHeader_pskel::
  eventCoding ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->eventCoding ();
  }

  void MessageHeader_pskel::
  eventUri ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->eventUri ();
  }

  void MessageHeader_pskel::
  destination ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->destination ();
  }

  void MessageHeader_pskel::
  sender ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->sender ();
  }

  void MessageHeader_pskel::
  enterer ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->enterer ();
  }

  void MessageHeader_pskel::
  author ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->author ();
  }

  void MessageHeader_pskel::
  source ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->source ();
  }

  void MessageHeader_pskel::
  responsible ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->responsible ();
  }

  void MessageHeader_pskel::
  reason ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->reason ();
  }

  void MessageHeader_pskel::
  response ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->response ();
  }

  void MessageHeader_pskel::
  focus ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->focus ();
  }

  void MessageHeader_pskel::
  definition ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->definition ();
  }

  void MessageHeader_pskel::
  post_MessageHeader ()
  {
    if (this->MessageHeader_impl_)
      this->MessageHeader_impl_->post_MessageHeader ();
    else
      post_DomainResource ();
  }

  void MessageHeader_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->eventCoding_parser_)
      this->eventCoding_parser_->_reset ();

    if (this->eventUri_parser_)
      this->eventUri_parser_->_reset ();

    if (this->destination_parser_)
      this->destination_parser_->_reset ();

    if (this->sender_parser_)
      this->sender_parser_->_reset ();

    if (this->enterer_parser_)
      this->enterer_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->responsible_parser_)
      this->responsible_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    if (this->response_parser_)
      this->response_parser_->_reset ();

    if (this->focus_parser_)
      this->focus_parser_->_reset ();

    if (this->definition_parser_)
      this->definition_parser_->_reset ();

    this->resetting_ = false;
  }

  // MessageHeader_Destination_pskel
  //

  void MessageHeader_Destination_pskel::
  name ()
  {
    if (this->MessageHeader_Destination_impl_)
      this->MessageHeader_Destination_impl_->name ();
  }

  void MessageHeader_Destination_pskel::
  target ()
  {
    if (this->MessageHeader_Destination_impl_)
      this->MessageHeader_Destination_impl_->target ();
  }

  void MessageHeader_Destination_pskel::
  endpoint ()
  {
    if (this->MessageHeader_Destination_impl_)
      this->MessageHeader_Destination_impl_->endpoint ();
  }

  void MessageHeader_Destination_pskel::
  receiver ()
  {
    if (this->MessageHeader_Destination_impl_)
      this->MessageHeader_Destination_impl_->receiver ();
  }

  void MessageHeader_Destination_pskel::
  post_MessageHeader_Destination ()
  {
    if (this->MessageHeader_Destination_impl_)
      this->MessageHeader_Destination_impl_->post_MessageHeader_Destination ();
    else
      post_BackboneElement ();
  }

  void MessageHeader_Destination_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    if (this->receiver_parser_)
      this->receiver_parser_->_reset ();

    this->resetting_ = false;
  }

  // MessageHeader_Source_pskel
  //

  void MessageHeader_Source_pskel::
  name ()
  {
    if (this->MessageHeader_Source_impl_)
      this->MessageHeader_Source_impl_->name ();
  }

  void MessageHeader_Source_pskel::
  software ()
  {
    if (this->MessageHeader_Source_impl_)
      this->MessageHeader_Source_impl_->software ();
  }

  void MessageHeader_Source_pskel::
  version ()
  {
    if (this->MessageHeader_Source_impl_)
      this->MessageHeader_Source_impl_->version ();
  }

  void MessageHeader_Source_pskel::
  contact ()
  {
    if (this->MessageHeader_Source_impl_)
      this->MessageHeader_Source_impl_->contact ();
  }

  void MessageHeader_Source_pskel::
  endpoint ()
  {
    if (this->MessageHeader_Source_impl_)
      this->MessageHeader_Source_impl_->endpoint ();
  }

  void MessageHeader_Source_pskel::
  post_MessageHeader_Source ()
  {
    if (this->MessageHeader_Source_impl_)
      this->MessageHeader_Source_impl_->post_MessageHeader_Source ();
    else
      post_BackboneElement ();
  }

  void MessageHeader_Source_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->software_parser_)
      this->software_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    this->resetting_ = false;
  }

  // MessageHeader_Response_pskel
  //

  void MessageHeader_Response_pskel::
  identifier ()
  {
    if (this->MessageHeader_Response_impl_)
      this->MessageHeader_Response_impl_->identifier ();
  }

  void MessageHeader_Response_pskel::
  code ()
  {
    if (this->MessageHeader_Response_impl_)
      this->MessageHeader_Response_impl_->code ();
  }

  void MessageHeader_Response_pskel::
  details ()
  {
    if (this->MessageHeader_Response_impl_)
      this->MessageHeader_Response_impl_->details ();
  }

  void MessageHeader_Response_pskel::
  post_MessageHeader_Response ()
  {
    if (this->MessageHeader_Response_impl_)
      this->MessageHeader_Response_impl_->post_MessageHeader_Response ();
    else
      post_BackboneElement ();
  }

  void MessageHeader_Response_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->details_parser_)
      this->details_parser_->_reset ();

    this->resetting_ = false;
  }

  // ResponseType_list_pskel
  //

  void ResponseType_list_pskel::
  post_ResponseType_list ()
  {
    if (this->ResponseType_list_impl_)
      this->ResponseType_list_impl_->post_ResponseType_list ();
    else
      post_code_primitive ();
  }

  const char* const ResponseType_list_pskel::_xsde_ResponseType_list_pskel_enums_[3UL] = 
  {
    "fatal-error",
    "ok",
    "transient-error"
  };

  // ResponseType_pskel
  //

  void ResponseType_pskel::
  value ()
  {
    if (this->ResponseType_impl_)
      this->ResponseType_impl_->value ();
  }

  void ResponseType_pskel::
  post_ResponseType ()
  {
    if (this->ResponseType_impl_)
      this->ResponseType_impl_->post_ResponseType ();
    else
      post_Element ();
  }

  void ResponseType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MessageHeader_pskel.
  //
  bool MessageHeader_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "eventCoding" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "eventUri" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "destination" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "sender" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "enterer" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "author" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MessageHeader_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MessageHeader_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MessageHeader_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MessageHeader_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MessageHeader_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "eventCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->eventCoding_parser_)
            {
              this->eventCoding_parser_->pre ();
              ctx.nested_parser (this->eventCoding_parser_);
            }
          }
          else
          {
            if (this->eventCoding_parser_ != 0)
            {
              this->eventCoding_parser_->post_Coding ();
              this->eventCoding ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "eventUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->eventUri_parser_)
            {
              this->eventUri_parser_->pre ();
              ctx.nested_parser (this->eventUri_parser_);
            }
          }
          else
          {
            if (this->eventUri_parser_ != 0)
            {
              this->eventUri_parser_->post_uri ();
              this->eventUri ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "destination" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->destination_parser_)
            {
              this->destination_parser_->pre ();
              ctx.nested_parser (this->destination_parser_);
            }
          }
          else
          {
            if (this->destination_parser_ != 0)
            {
              this->destination_parser_->post_MessageHeader_Destination ();
              this->destination ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "sender" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sender_parser_)
            {
              this->sender_parser_->pre ();
              ctx.nested_parser (this->sender_parser_);
            }
          }
          else
          {
            if (this->sender_parser_ != 0)
            {
              this->sender_parser_->post_Reference ();
              this->sender ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "enterer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enterer_parser_)
            {
              this->enterer_parser_->pre ();
              ctx.nested_parser (this->enterer_parser_);
            }
          }
          else
          {
            if (this->enterer_parser_ != 0)
            {
              this->enterer_parser_->post_Reference ();
              this->enterer ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_MessageHeader_Source ();
              this->source ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "responsible" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->responsible_parser_)
            {
              this->responsible_parser_->pre ();
              ctx.nested_parser (this->responsible_parser_);
            }
          }
          else
          {
            if (this->responsible_parser_ != 0)
            {
              this->responsible_parser_->post_Reference ();
              this->responsible ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_CodeableConcept ();
              this->reason ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "response" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->response_parser_)
            {
              this->response_parser_->pre ();
              ctx.nested_parser (this->response_parser_);
            }
          }
          else
          {
            if (this->response_parser_ != 0)
            {
              this->response_parser_->post_MessageHeader_Response ();
              this->response ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "focus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focus_parser_)
            {
              this->focus_parser_->pre ();
              ctx.nested_parser (this->focus_parser_);
            }
          }
          else
          {
            if (this->focus_parser_ != 0)
            {
              this->focus_parser_->post_Reference ();
              this->focus ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "definition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definition_parser_)
            {
              this->definition_parser_->pre ();
              ctx.nested_parser (this->definition_parser_);
            }
          }
          else
          {
            if (this->definition_parser_ != 0)
            {
              this->definition_parser_->post_canonical ();
              this->definition ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MessageHeader_Destination_pskel.
  //
  bool MessageHeader_Destination_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "target" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "endpoint" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MessageHeader_Destination_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MessageHeader_Destination_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MessageHeader_Destination_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MessageHeader_Destination_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MessageHeader_Destination_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_Reference ();
              this->target ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_url ();
              this->endpoint ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "receiver" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->receiver_parser_)
            {
              this->receiver_parser_->pre ();
              ctx.nested_parser (this->receiver_parser_);
            }
          }
          else
          {
            if (this->receiver_parser_ != 0)
            {
              this->receiver_parser_->post_Reference ();
              this->receiver ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MessageHeader_Source_pskel.
  //
  bool MessageHeader_Source_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "software" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "contact" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "endpoint" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MessageHeader_Source_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MessageHeader_Source_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MessageHeader_Source_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MessageHeader_Source_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MessageHeader_Source_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "software" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->software_parser_)
            {
              this->software_parser_->pre ();
              ctx.nested_parser (this->software_parser_);
            }
          }
          else
          {
            if (this->software_parser_ != 0)
            {
              this->software_parser_->post_string ();
              this->software ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactPoint ();
              this->contact ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_url ();
              this->endpoint ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MessageHeader_Response_pskel.
  //
  bool MessageHeader_Response_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MessageHeader_Response_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MessageHeader_Response_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MessageHeader_Response_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MessageHeader_Response_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MessageHeader_Response_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_id ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_ResponseType ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "details" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->details_parser_)
            {
              this->details_parser_->pre ();
              ctx.nested_parser (this->details_parser_);
            }
          }
          else
          {
            if (this->details_parser_ != 0)
            {
              this->details_parser_->post_Reference ();
              this->details ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ResponseType_pskel.
  //
  bool ResponseType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ResponseType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

