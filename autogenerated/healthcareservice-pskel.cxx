// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "healthcareservice-pskel.hxx"

namespace fhir
{
  // HealthcareService_pskel
  //

  void HealthcareService_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void HealthcareService_pskel::
  active_parser (::fhir::boolean_pskel& p)
  {
    this->active_parser_ = &p;
  }

  void HealthcareService_pskel::
  providedBy_parser (::fhir::Reference_pskel& p)
  {
    this->providedBy_parser_ = &p;
  }

  void HealthcareService_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void HealthcareService_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void HealthcareService_pskel::
  specialty_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->specialty_parser_ = &p;
  }

  void HealthcareService_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void HealthcareService_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void HealthcareService_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void HealthcareService_pskel::
  extraDetails_parser (::fhir::markdown_pskel& p)
  {
    this->extraDetails_parser_ = &p;
  }

  void HealthcareService_pskel::
  photo_parser (::fhir::Attachment_pskel& p)
  {
    this->photo_parser_ = &p;
  }

  void HealthcareService_pskel::
  telecom_parser (::fhir::ContactPoint_pskel& p)
  {
    this->telecom_parser_ = &p;
  }

  void HealthcareService_pskel::
  coverageArea_parser (::fhir::Reference_pskel& p)
  {
    this->coverageArea_parser_ = &p;
  }

  void HealthcareService_pskel::
  serviceProvisionCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->serviceProvisionCode_parser_ = &p;
  }

  void HealthcareService_pskel::
  eligibility_parser (::fhir::HealthcareService_Eligibility_pskel& p)
  {
    this->eligibility_parser_ = &p;
  }

  void HealthcareService_pskel::
  program_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->program_parser_ = &p;
  }

  void HealthcareService_pskel::
  characteristic_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->characteristic_parser_ = &p;
  }

  void HealthcareService_pskel::
  communication_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->communication_parser_ = &p;
  }

  void HealthcareService_pskel::
  referralMethod_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->referralMethod_parser_ = &p;
  }

  void HealthcareService_pskel::
  appointmentRequired_parser (::fhir::boolean_pskel& p)
  {
    this->appointmentRequired_parser_ = &p;
  }

  void HealthcareService_pskel::
  availableTime_parser (::fhir::HealthcareService_AvailableTime_pskel& p)
  {
    this->availableTime_parser_ = &p;
  }

  void HealthcareService_pskel::
  notAvailable_parser (::fhir::HealthcareService_NotAvailable_pskel& p)
  {
    this->notAvailable_parser_ = &p;
  }

  void HealthcareService_pskel::
  availabilityExceptions_parser (::fhir::string_pskel& p)
  {
    this->availabilityExceptions_parser_ = &p;
  }

  void HealthcareService_pskel::
  endpoint_parser (::fhir::Reference_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void HealthcareService_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::boolean_pskel& active,
           ::fhir::Reference_pskel& providedBy,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& specialty,
           ::fhir::Reference_pskel& location,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& comment,
           ::fhir::markdown_pskel& extraDetails,
           ::fhir::Attachment_pskel& photo,
           ::fhir::ContactPoint_pskel& telecom,
           ::fhir::Reference_pskel& coverageArea,
           ::fhir::CodeableConcept_pskel& serviceProvisionCode,
           ::fhir::HealthcareService_Eligibility_pskel& eligibility,
           ::fhir::CodeableConcept_pskel& program,
           ::fhir::CodeableConcept_pskel& characteristic,
           ::fhir::CodeableConcept_pskel& communication,
           ::fhir::CodeableConcept_pskel& referralMethod,
           ::fhir::boolean_pskel& appointmentRequired,
           ::fhir::HealthcareService_AvailableTime_pskel& availableTime,
           ::fhir::HealthcareService_NotAvailable_pskel& notAvailable,
           ::fhir::string_pskel& availabilityExceptions,
           ::fhir::Reference_pskel& endpoint)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->active_parser_ = &active;
    this->providedBy_parser_ = &providedBy;
    this->category_parser_ = &category;
    this->type_parser_ = &type;
    this->specialty_parser_ = &specialty;
    this->location_parser_ = &location;
    this->name_parser_ = &name;
    this->comment_parser_ = &comment;
    this->extraDetails_parser_ = &extraDetails;
    this->photo_parser_ = &photo;
    this->telecom_parser_ = &telecom;
    this->coverageArea_parser_ = &coverageArea;
    this->serviceProvisionCode_parser_ = &serviceProvisionCode;
    this->eligibility_parser_ = &eligibility;
    this->program_parser_ = &program;
    this->characteristic_parser_ = &characteristic;
    this->communication_parser_ = &communication;
    this->referralMethod_parser_ = &referralMethod;
    this->appointmentRequired_parser_ = &appointmentRequired;
    this->availableTime_parser_ = &availableTime;
    this->notAvailable_parser_ = &notAvailable;
    this->availabilityExceptions_parser_ = &availabilityExceptions;
    this->endpoint_parser_ = &endpoint;
  }

  HealthcareService_pskel::
  HealthcareService_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    HealthcareService_impl_ (0),
    identifier_parser_ (0),
    active_parser_ (0),
    providedBy_parser_ (0),
    category_parser_ (0),
    type_parser_ (0),
    specialty_parser_ (0),
    location_parser_ (0),
    name_parser_ (0),
    comment_parser_ (0),
    extraDetails_parser_ (0),
    photo_parser_ (0),
    telecom_parser_ (0),
    coverageArea_parser_ (0),
    serviceProvisionCode_parser_ (0),
    eligibility_parser_ (0),
    program_parser_ (0),
    characteristic_parser_ (0),
    communication_parser_ (0),
    referralMethod_parser_ (0),
    appointmentRequired_parser_ (0),
    availableTime_parser_ (0),
    notAvailable_parser_ (0),
    availabilityExceptions_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  HealthcareService_pskel::
  HealthcareService_pskel (HealthcareService_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    HealthcareService_impl_ (impl),
    identifier_parser_ (0),
    active_parser_ (0),
    providedBy_parser_ (0),
    category_parser_ (0),
    type_parser_ (0),
    specialty_parser_ (0),
    location_parser_ (0),
    name_parser_ (0),
    comment_parser_ (0),
    extraDetails_parser_ (0),
    photo_parser_ (0),
    telecom_parser_ (0),
    coverageArea_parser_ (0),
    serviceProvisionCode_parser_ (0),
    eligibility_parser_ (0),
    program_parser_ (0),
    characteristic_parser_ (0),
    communication_parser_ (0),
    referralMethod_parser_ (0),
    appointmentRequired_parser_ (0),
    availableTime_parser_ (0),
    notAvailable_parser_ (0),
    availabilityExceptions_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // HealthcareService_Eligibility_pskel
  //

  void HealthcareService_Eligibility_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void HealthcareService_Eligibility_pskel::
  comment_parser (::fhir::markdown_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void HealthcareService_Eligibility_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::markdown_pskel& comment)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->comment_parser_ = &comment;
  }

  HealthcareService_Eligibility_pskel::
  HealthcareService_Eligibility_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    HealthcareService_Eligibility_impl_ (0),
    code_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  HealthcareService_Eligibility_pskel::
  HealthcareService_Eligibility_pskel (HealthcareService_Eligibility_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    HealthcareService_Eligibility_impl_ (impl),
    code_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // HealthcareService_AvailableTime_pskel
  //

  void HealthcareService_AvailableTime_pskel::
  daysOfWeek_parser (::fhir::DaysOfWeek_pskel& p)
  {
    this->daysOfWeek_parser_ = &p;
  }

  void HealthcareService_AvailableTime_pskel::
  allDay_parser (::fhir::boolean_pskel& p)
  {
    this->allDay_parser_ = &p;
  }

  void HealthcareService_AvailableTime_pskel::
  availableStartTime_parser (::fhir::time_pskel& p)
  {
    this->availableStartTime_parser_ = &p;
  }

  void HealthcareService_AvailableTime_pskel::
  availableEndTime_parser (::fhir::time_pskel& p)
  {
    this->availableEndTime_parser_ = &p;
  }

  void HealthcareService_AvailableTime_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::DaysOfWeek_pskel& daysOfWeek,
           ::fhir::boolean_pskel& allDay,
           ::fhir::time_pskel& availableStartTime,
           ::fhir::time_pskel& availableEndTime)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->daysOfWeek_parser_ = &daysOfWeek;
    this->allDay_parser_ = &allDay;
    this->availableStartTime_parser_ = &availableStartTime;
    this->availableEndTime_parser_ = &availableEndTime;
  }

  HealthcareService_AvailableTime_pskel::
  HealthcareService_AvailableTime_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    HealthcareService_AvailableTime_impl_ (0),
    daysOfWeek_parser_ (0),
    allDay_parser_ (0),
    availableStartTime_parser_ (0),
    availableEndTime_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  HealthcareService_AvailableTime_pskel::
  HealthcareService_AvailableTime_pskel (HealthcareService_AvailableTime_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    HealthcareService_AvailableTime_impl_ (impl),
    daysOfWeek_parser_ (0),
    allDay_parser_ (0),
    availableStartTime_parser_ (0),
    availableEndTime_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // HealthcareService_NotAvailable_pskel
  //

  void HealthcareService_NotAvailable_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void HealthcareService_NotAvailable_pskel::
  during_parser (::fhir::Period_pskel& p)
  {
    this->during_parser_ = &p;
  }

  void HealthcareService_NotAvailable_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::Period_pskel& during)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->during_parser_ = &during;
  }

  HealthcareService_NotAvailable_pskel::
  HealthcareService_NotAvailable_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    HealthcareService_NotAvailable_impl_ (0),
    description_parser_ (0),
    during_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  HealthcareService_NotAvailable_pskel::
  HealthcareService_NotAvailable_pskel (HealthcareService_NotAvailable_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    HealthcareService_NotAvailable_impl_ (impl),
    description_parser_ (0),
    during_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DaysOfWeek_list_pskel
  //

  DaysOfWeek_list_pskel::
  DaysOfWeek_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DaysOfWeek_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DaysOfWeek_list_pskel_enums_, 7UL);
  }

  DaysOfWeek_list_pskel::
  DaysOfWeek_list_pskel (DaysOfWeek_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DaysOfWeek_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DaysOfWeek_list_pskel_enums_, 7UL);
  }

  // DaysOfWeek_pskel
  //

  void DaysOfWeek_pskel::
  value_parser (::fhir::DaysOfWeek_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DaysOfWeek_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DaysOfWeek_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DaysOfWeek_pskel::
  DaysOfWeek_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DaysOfWeek_impl_ (0),
    value_parser_ (0)
  {
  }

  DaysOfWeek_pskel::
  DaysOfWeek_pskel (DaysOfWeek_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DaysOfWeek_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // HealthcareService_pskel
  //

  void HealthcareService_pskel::
  identifier ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->identifier ();
  }

  void HealthcareService_pskel::
  active ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->active ();
  }

  void HealthcareService_pskel::
  providedBy ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->providedBy ();
  }

  void HealthcareService_pskel::
  category ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->category ();
  }

  void HealthcareService_pskel::
  type ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->type ();
  }

  void HealthcareService_pskel::
  specialty ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->specialty ();
  }

  void HealthcareService_pskel::
  location ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->location ();
  }

  void HealthcareService_pskel::
  name ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->name ();
  }

  void HealthcareService_pskel::
  comment ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->comment ();
  }

  void HealthcareService_pskel::
  extraDetails ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->extraDetails ();
  }

  void HealthcareService_pskel::
  photo ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->photo ();
  }

  void HealthcareService_pskel::
  telecom ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->telecom ();
  }

  void HealthcareService_pskel::
  coverageArea ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->coverageArea ();
  }

  void HealthcareService_pskel::
  serviceProvisionCode ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->serviceProvisionCode ();
  }

  void HealthcareService_pskel::
  eligibility ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->eligibility ();
  }

  void HealthcareService_pskel::
  program ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->program ();
  }

  void HealthcareService_pskel::
  characteristic ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->characteristic ();
  }

  void HealthcareService_pskel::
  communication ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->communication ();
  }

  void HealthcareService_pskel::
  referralMethod ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->referralMethod ();
  }

  void HealthcareService_pskel::
  appointmentRequired ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->appointmentRequired ();
  }

  void HealthcareService_pskel::
  availableTime ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->availableTime ();
  }

  void HealthcareService_pskel::
  notAvailable ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->notAvailable ();
  }

  void HealthcareService_pskel::
  availabilityExceptions ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->availabilityExceptions ();
  }

  void HealthcareService_pskel::
  endpoint ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->endpoint ();
  }

  void HealthcareService_pskel::
  post_HealthcareService ()
  {
    if (this->HealthcareService_impl_)
      this->HealthcareService_impl_->post_HealthcareService ();
    else
      post_DomainResource ();
  }

  void HealthcareService_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->active_parser_)
      this->active_parser_->_reset ();

    if (this->providedBy_parser_)
      this->providedBy_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->specialty_parser_)
      this->specialty_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->extraDetails_parser_)
      this->extraDetails_parser_->_reset ();

    if (this->photo_parser_)
      this->photo_parser_->_reset ();

    if (this->telecom_parser_)
      this->telecom_parser_->_reset ();

    if (this->coverageArea_parser_)
      this->coverageArea_parser_->_reset ();

    if (this->serviceProvisionCode_parser_)
      this->serviceProvisionCode_parser_->_reset ();

    if (this->eligibility_parser_)
      this->eligibility_parser_->_reset ();

    if (this->program_parser_)
      this->program_parser_->_reset ();

    if (this->characteristic_parser_)
      this->characteristic_parser_->_reset ();

    if (this->communication_parser_)
      this->communication_parser_->_reset ();

    if (this->referralMethod_parser_)
      this->referralMethod_parser_->_reset ();

    if (this->appointmentRequired_parser_)
      this->appointmentRequired_parser_->_reset ();

    if (this->availableTime_parser_)
      this->availableTime_parser_->_reset ();

    if (this->notAvailable_parser_)
      this->notAvailable_parser_->_reset ();

    if (this->availabilityExceptions_parser_)
      this->availabilityExceptions_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    this->resetting_ = false;
  }

  // HealthcareService_Eligibility_pskel
  //

  void HealthcareService_Eligibility_pskel::
  code ()
  {
    if (this->HealthcareService_Eligibility_impl_)
      this->HealthcareService_Eligibility_impl_->code ();
  }

  void HealthcareService_Eligibility_pskel::
  comment ()
  {
    if (this->HealthcareService_Eligibility_impl_)
      this->HealthcareService_Eligibility_impl_->comment ();
  }

  void HealthcareService_Eligibility_pskel::
  post_HealthcareService_Eligibility ()
  {
    if (this->HealthcareService_Eligibility_impl_)
      this->HealthcareService_Eligibility_impl_->post_HealthcareService_Eligibility ();
    else
      post_BackboneElement ();
  }

  void HealthcareService_Eligibility_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    this->resetting_ = false;
  }

  // HealthcareService_AvailableTime_pskel
  //

  void HealthcareService_AvailableTime_pskel::
  daysOfWeek ()
  {
    if (this->HealthcareService_AvailableTime_impl_)
      this->HealthcareService_AvailableTime_impl_->daysOfWeek ();
  }

  void HealthcareService_AvailableTime_pskel::
  allDay ()
  {
    if (this->HealthcareService_AvailableTime_impl_)
      this->HealthcareService_AvailableTime_impl_->allDay ();
  }

  void HealthcareService_AvailableTime_pskel::
  availableStartTime ()
  {
    if (this->HealthcareService_AvailableTime_impl_)
      this->HealthcareService_AvailableTime_impl_->availableStartTime ();
  }

  void HealthcareService_AvailableTime_pskel::
  availableEndTime ()
  {
    if (this->HealthcareService_AvailableTime_impl_)
      this->HealthcareService_AvailableTime_impl_->availableEndTime ();
  }

  void HealthcareService_AvailableTime_pskel::
  post_HealthcareService_AvailableTime ()
  {
    if (this->HealthcareService_AvailableTime_impl_)
      this->HealthcareService_AvailableTime_impl_->post_HealthcareService_AvailableTime ();
    else
      post_BackboneElement ();
  }

  void HealthcareService_AvailableTime_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->daysOfWeek_parser_)
      this->daysOfWeek_parser_->_reset ();

    if (this->allDay_parser_)
      this->allDay_parser_->_reset ();

    if (this->availableStartTime_parser_)
      this->availableStartTime_parser_->_reset ();

    if (this->availableEndTime_parser_)
      this->availableEndTime_parser_->_reset ();

    this->resetting_ = false;
  }

  // HealthcareService_NotAvailable_pskel
  //

  void HealthcareService_NotAvailable_pskel::
  description ()
  {
    if (this->HealthcareService_NotAvailable_impl_)
      this->HealthcareService_NotAvailable_impl_->description ();
  }

  void HealthcareService_NotAvailable_pskel::
  during ()
  {
    if (this->HealthcareService_NotAvailable_impl_)
      this->HealthcareService_NotAvailable_impl_->during ();
  }

  void HealthcareService_NotAvailable_pskel::
  post_HealthcareService_NotAvailable ()
  {
    if (this->HealthcareService_NotAvailable_impl_)
      this->HealthcareService_NotAvailable_impl_->post_HealthcareService_NotAvailable ();
    else
      post_BackboneElement ();
  }

  void HealthcareService_NotAvailable_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->during_parser_)
      this->during_parser_->_reset ();

    this->resetting_ = false;
  }

  // DaysOfWeek_list_pskel
  //

  void DaysOfWeek_list_pskel::
  post_DaysOfWeek_list ()
  {
    if (this->DaysOfWeek_list_impl_)
      this->DaysOfWeek_list_impl_->post_DaysOfWeek_list ();
    else
      post_code_primitive ();
  }

  const char* const DaysOfWeek_list_pskel::_xsde_DaysOfWeek_list_pskel_enums_[7UL] = 
  {
    "fri",
    "mon",
    "sat",
    "sun",
    "thu",
    "tue",
    "wed"
  };

  // DaysOfWeek_pskel
  //

  void DaysOfWeek_pskel::
  value ()
  {
    if (this->DaysOfWeek_impl_)
      this->DaysOfWeek_impl_->value ();
  }

  void DaysOfWeek_pskel::
  post_DaysOfWeek ()
  {
    if (this->DaysOfWeek_impl_)
      this->DaysOfWeek_impl_->post_DaysOfWeek ();
    else
      post_Element ();
  }

  void DaysOfWeek_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for HealthcareService_pskel.
  //
  bool HealthcareService_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "active" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "providedBy" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "category" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "specialty" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "location" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "comment" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "extraDetails" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "photo" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "telecom" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "coverageArea" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "serviceProvisionCode" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "eligibility" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "program" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "characteristic" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "communication" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;
        else if (n == "referralMethod" &&
                 ns == "http://hl7.org/fhir")
          s = 18UL;
        else if (n == "appointmentRequired" &&
                 ns == "http://hl7.org/fhir")
          s = 19UL;
        else if (n == "availableTime" &&
                 ns == "http://hl7.org/fhir")
          s = 20UL;
        else if (n == "notAvailable" &&
                 ns == "http://hl7.org/fhir")
          s = 21UL;
        else if (n == "availabilityExceptions" &&
                 ns == "http://hl7.org/fhir")
          s = 22UL;
        else if (n == "endpoint" &&
                 ns == "http://hl7.org/fhir")
          s = 23UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &HealthcareService_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool HealthcareService_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void HealthcareService_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void HealthcareService_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void HealthcareService_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "active" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->active_parser_)
            {
              this->active_parser_->pre ();
              ctx.nested_parser (this->active_parser_);
            }
          }
          else
          {
            if (this->active_parser_ != 0)
            {
              this->active_parser_->post_boolean ();
              this->active ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "providedBy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->providedBy_parser_)
            {
              this->providedBy_parser_->pre ();
              ctx.nested_parser (this->providedBy_parser_);
            }
          }
          else
          {
            if (this->providedBy_parser_ != 0)
            {
              this->providedBy_parser_->post_Reference ();
              this->providedBy ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "specialty" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specialty_parser_)
            {
              this->specialty_parser_->pre ();
              ctx.nested_parser (this->specialty_parser_);
            }
          }
          else
          {
            if (this->specialty_parser_ != 0)
            {
              this->specialty_parser_->post_CodeableConcept ();
              this->specialty ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "extraDetails" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->extraDetails_parser_)
            {
              this->extraDetails_parser_->pre ();
              ctx.nested_parser (this->extraDetails_parser_);
            }
          }
          else
          {
            if (this->extraDetails_parser_ != 0)
            {
              this->extraDetails_parser_->post_markdown ();
              this->extraDetails ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "photo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->photo_parser_)
            {
              this->photo_parser_->pre ();
              ctx.nested_parser (this->photo_parser_);
            }
          }
          else
          {
            if (this->photo_parser_ != 0)
            {
              this->photo_parser_->post_Attachment ();
              this->photo ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "telecom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->telecom_parser_)
            {
              this->telecom_parser_->pre ();
              ctx.nested_parser (this->telecom_parser_);
            }
          }
          else
          {
            if (this->telecom_parser_ != 0)
            {
              this->telecom_parser_->post_ContactPoint ();
              this->telecom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "coverageArea" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverageArea_parser_)
            {
              this->coverageArea_parser_->pre ();
              ctx.nested_parser (this->coverageArea_parser_);
            }
          }
          else
          {
            if (this->coverageArea_parser_ != 0)
            {
              this->coverageArea_parser_->post_Reference ();
              this->coverageArea ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "serviceProvisionCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->serviceProvisionCode_parser_)
            {
              this->serviceProvisionCode_parser_->pre ();
              ctx.nested_parser (this->serviceProvisionCode_parser_);
            }
          }
          else
          {
            if (this->serviceProvisionCode_parser_ != 0)
            {
              this->serviceProvisionCode_parser_->post_CodeableConcept ();
              this->serviceProvisionCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "eligibility" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->eligibility_parser_)
            {
              this->eligibility_parser_->pre ();
              ctx.nested_parser (this->eligibility_parser_);
            }
          }
          else
          {
            if (this->eligibility_parser_ != 0)
            {
              this->eligibility_parser_->post_HealthcareService_Eligibility ();
              this->eligibility ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "program" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->program_parser_)
            {
              this->program_parser_->pre ();
              ctx.nested_parser (this->program_parser_);
            }
          }
          else
          {
            if (this->program_parser_ != 0)
            {
              this->program_parser_->post_CodeableConcept ();
              this->program ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "characteristic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->characteristic_parser_)
            {
              this->characteristic_parser_->pre ();
              ctx.nested_parser (this->characteristic_parser_);
            }
          }
          else
          {
            if (this->characteristic_parser_ != 0)
            {
              this->characteristic_parser_->post_CodeableConcept ();
              this->characteristic ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "communication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->communication_parser_)
            {
              this->communication_parser_->pre ();
              ctx.nested_parser (this->communication_parser_);
            }
          }
          else
          {
            if (this->communication_parser_ != 0)
            {
              this->communication_parser_->post_CodeableConcept ();
              this->communication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "referralMethod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referralMethod_parser_)
            {
              this->referralMethod_parser_->pre ();
              ctx.nested_parser (this->referralMethod_parser_);
            }
          }
          else
          {
            if (this->referralMethod_parser_ != 0)
            {
              this->referralMethod_parser_->post_CodeableConcept ();
              this->referralMethod ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "appointmentRequired" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->appointmentRequired_parser_)
            {
              this->appointmentRequired_parser_->pre ();
              ctx.nested_parser (this->appointmentRequired_parser_);
            }
          }
          else
          {
            if (this->appointmentRequired_parser_ != 0)
            {
              this->appointmentRequired_parser_->post_boolean ();
              this->appointmentRequired ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "availableTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availableTime_parser_)
            {
              this->availableTime_parser_->pre ();
              ctx.nested_parser (this->availableTime_parser_);
            }
          }
          else
          {
            if (this->availableTime_parser_ != 0)
            {
              this->availableTime_parser_->post_HealthcareService_AvailableTime ();
              this->availableTime ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "notAvailable" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->notAvailable_parser_)
            {
              this->notAvailable_parser_->pre ();
              ctx.nested_parser (this->notAvailable_parser_);
            }
          }
          else
          {
            if (this->notAvailable_parser_ != 0)
            {
              this->notAvailable_parser_->post_HealthcareService_NotAvailable ();
              this->notAvailable ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "availabilityExceptions" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availabilityExceptions_parser_)
            {
              this->availabilityExceptions_parser_->pre ();
              ctx.nested_parser (this->availabilityExceptions_parser_);
            }
          }
          else
          {
            if (this->availabilityExceptions_parser_ != 0)
            {
              this->availabilityExceptions_parser_->post_string ();
              this->availabilityExceptions ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_Reference ();
              this->endpoint ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for HealthcareService_Eligibility_pskel.
  //
  bool HealthcareService_Eligibility_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "comment" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &HealthcareService_Eligibility_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool HealthcareService_Eligibility_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void HealthcareService_Eligibility_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void HealthcareService_Eligibility_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void HealthcareService_Eligibility_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_markdown ();
              this->comment ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for HealthcareService_AvailableTime_pskel.
  //
  bool HealthcareService_AvailableTime_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "daysOfWeek" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "allDay" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "availableStartTime" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "availableEndTime" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &HealthcareService_AvailableTime_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool HealthcareService_AvailableTime_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void HealthcareService_AvailableTime_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void HealthcareService_AvailableTime_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void HealthcareService_AvailableTime_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "daysOfWeek" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->daysOfWeek_parser_)
            {
              this->daysOfWeek_parser_->pre ();
              ctx.nested_parser (this->daysOfWeek_parser_);
            }
          }
          else
          {
            if (this->daysOfWeek_parser_ != 0)
            {
              this->daysOfWeek_parser_->post_DaysOfWeek ();
              this->daysOfWeek ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "allDay" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allDay_parser_)
            {
              this->allDay_parser_->pre ();
              ctx.nested_parser (this->allDay_parser_);
            }
          }
          else
          {
            if (this->allDay_parser_ != 0)
            {
              this->allDay_parser_->post_boolean ();
              this->allDay ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "availableStartTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availableStartTime_parser_)
            {
              this->availableStartTime_parser_->pre ();
              ctx.nested_parser (this->availableStartTime_parser_);
            }
          }
          else
          {
            if (this->availableStartTime_parser_ != 0)
            {
              this->availableStartTime_parser_->post_time ();
              this->availableStartTime ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "availableEndTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availableEndTime_parser_)
            {
              this->availableEndTime_parser_->pre ();
              ctx.nested_parser (this->availableEndTime_parser_);
            }
          }
          else
          {
            if (this->availableEndTime_parser_ != 0)
            {
              this->availableEndTime_parser_->post_time ();
              this->availableEndTime ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for HealthcareService_NotAvailable_pskel.
  //
  bool HealthcareService_NotAvailable_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &HealthcareService_NotAvailable_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool HealthcareService_NotAvailable_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void HealthcareService_NotAvailable_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void HealthcareService_NotAvailable_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void HealthcareService_NotAvailable_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "during" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->during_parser_)
            {
              this->during_parser_->pre ();
              ctx.nested_parser (this->during_parser_);
            }
          }
          else
          {
            if (this->during_parser_ != 0)
            {
              this->during_parser_->post_Period ();
              this->during ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for DaysOfWeek_pskel.
  //
  bool DaysOfWeek_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DaysOfWeek_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

