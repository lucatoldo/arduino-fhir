// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "testreport-pskel.hxx"

namespace fhir
{
  // TestReport_pskel
  //

  void TestReport_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void TestReport_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void TestReport_pskel::
  status_parser (::fhir::TestReportStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void TestReport_pskel::
  testScript_parser (::fhir::Reference_pskel& p)
  {
    this->testScript_parser_ = &p;
  }

  void TestReport_pskel::
  result_parser (::fhir::TestReportResult_pskel& p)
  {
    this->result_parser_ = &p;
  }

  void TestReport_pskel::
  score_parser (::fhir::decimal_pskel& p)
  {
    this->score_parser_ = &p;
  }

  void TestReport_pskel::
  tester_parser (::fhir::string_pskel& p)
  {
    this->tester_parser_ = &p;
  }

  void TestReport_pskel::
  issued_parser (::fhir::dateTime_pskel& p)
  {
    this->issued_parser_ = &p;
  }

  void TestReport_pskel::
  participant_parser (::fhir::TestReport_Participant_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void TestReport_pskel::
  setup_parser (::fhir::TestReport_Setup_pskel& p)
  {
    this->setup_parser_ = &p;
  }

  void TestReport_pskel::
  test_parser (::fhir::TestReport_Test_pskel& p)
  {
    this->test_parser_ = &p;
  }

  void TestReport_pskel::
  teardown_parser (::fhir::TestReport_Teardown_pskel& p)
  {
    this->teardown_parser_ = &p;
  }

  void TestReport_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& name,
           ::fhir::TestReportStatus_pskel& status,
           ::fhir::Reference_pskel& testScript,
           ::fhir::TestReportResult_pskel& result,
           ::fhir::decimal_pskel& score,
           ::fhir::string_pskel& tester,
           ::fhir::dateTime_pskel& issued,
           ::fhir::TestReport_Participant_pskel& participant,
           ::fhir::TestReport_Setup_pskel& setup,
           ::fhir::TestReport_Test_pskel& test,
           ::fhir::TestReport_Teardown_pskel& teardown)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->name_parser_ = &name;
    this->status_parser_ = &status;
    this->testScript_parser_ = &testScript;
    this->result_parser_ = &result;
    this->score_parser_ = &score;
    this->tester_parser_ = &tester;
    this->issued_parser_ = &issued;
    this->participant_parser_ = &participant;
    this->setup_parser_ = &setup;
    this->test_parser_ = &test;
    this->teardown_parser_ = &teardown;
  }

  TestReport_pskel::
  TestReport_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    TestReport_impl_ (0),
    identifier_parser_ (0),
    name_parser_ (0),
    status_parser_ (0),
    testScript_parser_ (0),
    result_parser_ (0),
    score_parser_ (0),
    tester_parser_ (0),
    issued_parser_ (0),
    participant_parser_ (0),
    setup_parser_ (0),
    test_parser_ (0),
    teardown_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_pskel::
  TestReport_pskel (TestReport_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    TestReport_impl_ (impl),
    identifier_parser_ (0),
    name_parser_ (0),
    status_parser_ (0),
    testScript_parser_ (0),
    result_parser_ (0),
    score_parser_ (0),
    tester_parser_ (0),
    issued_parser_ (0),
    participant_parser_ (0),
    setup_parser_ (0),
    test_parser_ (0),
    teardown_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Participant_pskel
  //

  void TestReport_Participant_pskel::
  type_parser (::fhir::TestReportParticipantType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void TestReport_Participant_pskel::
  uri_parser (::fhir::uri_pskel& p)
  {
    this->uri_parser_ = &p;
  }

  void TestReport_Participant_pskel::
  display_parser (::fhir::string_pskel& p)
  {
    this->display_parser_ = &p;
  }

  void TestReport_Participant_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReportParticipantType_pskel& type,
           ::fhir::uri_pskel& uri,
           ::fhir::string_pskel& display)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->uri_parser_ = &uri;
    this->display_parser_ = &display;
  }

  TestReport_Participant_pskel::
  TestReport_Participant_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Participant_impl_ (0),
    type_parser_ (0),
    uri_parser_ (0),
    display_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Participant_pskel::
  TestReport_Participant_pskel (TestReport_Participant_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Participant_impl_ (impl),
    type_parser_ (0),
    uri_parser_ (0),
    display_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Setup_pskel
  //

  void TestReport_Setup_pskel::
  action_parser (::fhir::TestReport_Action_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void TestReport_Setup_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReport_Action_pskel& action)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->action_parser_ = &action;
  }

  TestReport_Setup_pskel::
  TestReport_Setup_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Setup_impl_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Setup_pskel::
  TestReport_Setup_pskel (TestReport_Setup_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Setup_impl_ (impl),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Action_pskel
  //

  void TestReport_Action_pskel::
  operation_parser (::fhir::TestReport_Operation_pskel& p)
  {
    this->operation_parser_ = &p;
  }

  void TestReport_Action_pskel::
  assert_parser (::fhir::TestReport_Assert_pskel& p)
  {
    this->assert_parser_ = &p;
  }

  void TestReport_Action_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReport_Operation_pskel& operation,
           ::fhir::TestReport_Assert_pskel& assert)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->operation_parser_ = &operation;
    this->assert_parser_ = &assert;
  }

  TestReport_Action_pskel::
  TestReport_Action_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Action_impl_ (0),
    operation_parser_ (0),
    assert_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Action_pskel::
  TestReport_Action_pskel (TestReport_Action_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Action_impl_ (impl),
    operation_parser_ (0),
    assert_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Operation_pskel
  //

  void TestReport_Operation_pskel::
  result_parser (::fhir::TestReportActionResult_pskel& p)
  {
    this->result_parser_ = &p;
  }

  void TestReport_Operation_pskel::
  message_parser (::fhir::markdown_pskel& p)
  {
    this->message_parser_ = &p;
  }

  void TestReport_Operation_pskel::
  detail_parser (::fhir::uri_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void TestReport_Operation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReportActionResult_pskel& result,
           ::fhir::markdown_pskel& message,
           ::fhir::uri_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->result_parser_ = &result;
    this->message_parser_ = &message;
    this->detail_parser_ = &detail;
  }

  TestReport_Operation_pskel::
  TestReport_Operation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Operation_impl_ (0),
    result_parser_ (0),
    message_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Operation_pskel::
  TestReport_Operation_pskel (TestReport_Operation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Operation_impl_ (impl),
    result_parser_ (0),
    message_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Assert_pskel
  //

  void TestReport_Assert_pskel::
  result_parser (::fhir::TestReportActionResult_pskel& p)
  {
    this->result_parser_ = &p;
  }

  void TestReport_Assert_pskel::
  message_parser (::fhir::markdown_pskel& p)
  {
    this->message_parser_ = &p;
  }

  void TestReport_Assert_pskel::
  detail_parser (::fhir::string_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void TestReport_Assert_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReportActionResult_pskel& result,
           ::fhir::markdown_pskel& message,
           ::fhir::string_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->result_parser_ = &result;
    this->message_parser_ = &message;
    this->detail_parser_ = &detail;
  }

  TestReport_Assert_pskel::
  TestReport_Assert_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Assert_impl_ (0),
    result_parser_ (0),
    message_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Assert_pskel::
  TestReport_Assert_pskel (TestReport_Assert_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Assert_impl_ (impl),
    result_parser_ (0),
    message_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Test_pskel
  //

  void TestReport_Test_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void TestReport_Test_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void TestReport_Test_pskel::
  action_parser (::fhir::TestReport_Action1_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void TestReport_Test_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& description,
           ::fhir::TestReport_Action1_pskel& action)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
    this->action_parser_ = &action;
  }

  TestReport_Test_pskel::
  TestReport_Test_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Test_impl_ (0),
    name_parser_ (0),
    description_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Test_pskel::
  TestReport_Test_pskel (TestReport_Test_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Test_impl_ (impl),
    name_parser_ (0),
    description_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Action1_pskel
  //

  void TestReport_Action1_pskel::
  operation_parser (::fhir::TestReport_Operation_pskel& p)
  {
    this->operation_parser_ = &p;
  }

  void TestReport_Action1_pskel::
  assert_parser (::fhir::TestReport_Assert_pskel& p)
  {
    this->assert_parser_ = &p;
  }

  void TestReport_Action1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReport_Operation_pskel& operation,
           ::fhir::TestReport_Assert_pskel& assert)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->operation_parser_ = &operation;
    this->assert_parser_ = &assert;
  }

  TestReport_Action1_pskel::
  TestReport_Action1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Action1_impl_ (0),
    operation_parser_ (0),
    assert_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Action1_pskel::
  TestReport_Action1_pskel (TestReport_Action1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Action1_impl_ (impl),
    operation_parser_ (0),
    assert_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Teardown_pskel
  //

  void TestReport_Teardown_pskel::
  action_parser (::fhir::TestReport_Action2_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void TestReport_Teardown_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReport_Action2_pskel& action)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->action_parser_ = &action;
  }

  TestReport_Teardown_pskel::
  TestReport_Teardown_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Teardown_impl_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Teardown_pskel::
  TestReport_Teardown_pskel (TestReport_Teardown_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Teardown_impl_ (impl),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReport_Action2_pskel
  //

  void TestReport_Action2_pskel::
  operation_parser (::fhir::TestReport_Operation_pskel& p)
  {
    this->operation_parser_ = &p;
  }

  void TestReport_Action2_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::TestReport_Operation_pskel& operation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->operation_parser_ = &operation;
  }

  TestReport_Action2_pskel::
  TestReport_Action2_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TestReport_Action2_impl_ (0),
    operation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TestReport_Action2_pskel::
  TestReport_Action2_pskel (TestReport_Action2_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TestReport_Action2_impl_ (impl),
    operation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TestReportStatus_list_pskel
  //

  TestReportStatus_list_pskel::
  TestReportStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    TestReportStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_TestReportStatus_list_pskel_enums_, 5UL);
  }

  TestReportStatus_list_pskel::
  TestReportStatus_list_pskel (TestReportStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    TestReportStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_TestReportStatus_list_pskel_enums_, 5UL);
  }

  // TestReportStatus_pskel
  //

  void TestReportStatus_pskel::
  value_parser (::fhir::TestReportStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void TestReportStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::TestReportStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  TestReportStatus_pskel::
  TestReportStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    TestReportStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  TestReportStatus_pskel::
  TestReportStatus_pskel (TestReportStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    TestReportStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // TestReportActionResult_list_pskel
  //

  TestReportActionResult_list_pskel::
  TestReportActionResult_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    TestReportActionResult_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_TestReportActionResult_list_pskel_enums_, 5UL);
  }

  TestReportActionResult_list_pskel::
  TestReportActionResult_list_pskel (TestReportActionResult_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    TestReportActionResult_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_TestReportActionResult_list_pskel_enums_, 5UL);
  }

  // TestReportActionResult_pskel
  //

  void TestReportActionResult_pskel::
  value_parser (::fhir::TestReportActionResult_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void TestReportActionResult_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::TestReportActionResult_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  TestReportActionResult_pskel::
  TestReportActionResult_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    TestReportActionResult_impl_ (0),
    value_parser_ (0)
  {
  }

  TestReportActionResult_pskel::
  TestReportActionResult_pskel (TestReportActionResult_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    TestReportActionResult_impl_ (impl),
    value_parser_ (0)
  {
  }

  // TestReportParticipantType_list_pskel
  //

  TestReportParticipantType_list_pskel::
  TestReportParticipantType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    TestReportParticipantType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_TestReportParticipantType_list_pskel_enums_, 3UL);
  }

  TestReportParticipantType_list_pskel::
  TestReportParticipantType_list_pskel (TestReportParticipantType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    TestReportParticipantType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_TestReportParticipantType_list_pskel_enums_, 3UL);
  }

  // TestReportParticipantType_pskel
  //

  void TestReportParticipantType_pskel::
  value_parser (::fhir::TestReportParticipantType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void TestReportParticipantType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::TestReportParticipantType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  TestReportParticipantType_pskel::
  TestReportParticipantType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    TestReportParticipantType_impl_ (0),
    value_parser_ (0)
  {
  }

  TestReportParticipantType_pskel::
  TestReportParticipantType_pskel (TestReportParticipantType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    TestReportParticipantType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // TestReportResult_list_pskel
  //

  TestReportResult_list_pskel::
  TestReportResult_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    TestReportResult_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_TestReportResult_list_pskel_enums_, 3UL);
  }

  TestReportResult_list_pskel::
  TestReportResult_list_pskel (TestReportResult_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    TestReportResult_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_TestReportResult_list_pskel_enums_, 3UL);
  }

  // TestReportResult_pskel
  //

  void TestReportResult_pskel::
  value_parser (::fhir::TestReportResult_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void TestReportResult_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::TestReportResult_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  TestReportResult_pskel::
  TestReportResult_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    TestReportResult_impl_ (0),
    value_parser_ (0)
  {
  }

  TestReportResult_pskel::
  TestReportResult_pskel (TestReportResult_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    TestReportResult_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // TestReport_pskel
  //

  void TestReport_pskel::
  identifier ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->identifier ();
  }

  void TestReport_pskel::
  name ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->name ();
  }

  void TestReport_pskel::
  status ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->status ();
  }

  void TestReport_pskel::
  testScript ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->testScript ();
  }

  void TestReport_pskel::
  result ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->result ();
  }

  void TestReport_pskel::
  score ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->score ();
  }

  void TestReport_pskel::
  tester ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->tester ();
  }

  void TestReport_pskel::
  issued ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->issued ();
  }

  void TestReport_pskel::
  participant ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->participant ();
  }

  void TestReport_pskel::
  setup ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->setup ();
  }

  void TestReport_pskel::
  test ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->test ();
  }

  void TestReport_pskel::
  teardown ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->teardown ();
  }

  void TestReport_pskel::
  post_TestReport ()
  {
    if (this->TestReport_impl_)
      this->TestReport_impl_->post_TestReport ();
    else
      post_DomainResource ();
  }

  void TestReport_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->testScript_parser_)
      this->testScript_parser_->_reset ();

    if (this->result_parser_)
      this->result_parser_->_reset ();

    if (this->score_parser_)
      this->score_parser_->_reset ();

    if (this->tester_parser_)
      this->tester_parser_->_reset ();

    if (this->issued_parser_)
      this->issued_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->setup_parser_)
      this->setup_parser_->_reset ();

    if (this->test_parser_)
      this->test_parser_->_reset ();

    if (this->teardown_parser_)
      this->teardown_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Participant_pskel
  //

  void TestReport_Participant_pskel::
  type ()
  {
    if (this->TestReport_Participant_impl_)
      this->TestReport_Participant_impl_->type ();
  }

  void TestReport_Participant_pskel::
  uri ()
  {
    if (this->TestReport_Participant_impl_)
      this->TestReport_Participant_impl_->uri ();
  }

  void TestReport_Participant_pskel::
  display ()
  {
    if (this->TestReport_Participant_impl_)
      this->TestReport_Participant_impl_->display ();
  }

  void TestReport_Participant_pskel::
  post_TestReport_Participant ()
  {
    if (this->TestReport_Participant_impl_)
      this->TestReport_Participant_impl_->post_TestReport_Participant ();
    else
      post_BackboneElement ();
  }

  void TestReport_Participant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->uri_parser_)
      this->uri_parser_->_reset ();

    if (this->display_parser_)
      this->display_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Setup_pskel
  //

  void TestReport_Setup_pskel::
  action ()
  {
    if (this->TestReport_Setup_impl_)
      this->TestReport_Setup_impl_->action ();
  }

  void TestReport_Setup_pskel::
  post_TestReport_Setup ()
  {
    if (this->TestReport_Setup_impl_)
      this->TestReport_Setup_impl_->post_TestReport_Setup ();
    else
      post_BackboneElement ();
  }

  void TestReport_Setup_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->action_parser_)
      this->action_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Action_pskel
  //

  void TestReport_Action_pskel::
  operation ()
  {
    if (this->TestReport_Action_impl_)
      this->TestReport_Action_impl_->operation ();
  }

  void TestReport_Action_pskel::
  assert ()
  {
    if (this->TestReport_Action_impl_)
      this->TestReport_Action_impl_->assert ();
  }

  void TestReport_Action_pskel::
  post_TestReport_Action ()
  {
    if (this->TestReport_Action_impl_)
      this->TestReport_Action_impl_->post_TestReport_Action ();
    else
      post_BackboneElement ();
  }

  void TestReport_Action_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->operation_parser_)
      this->operation_parser_->_reset ();

    if (this->assert_parser_)
      this->assert_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Operation_pskel
  //

  void TestReport_Operation_pskel::
  result ()
  {
    if (this->TestReport_Operation_impl_)
      this->TestReport_Operation_impl_->result ();
  }

  void TestReport_Operation_pskel::
  message ()
  {
    if (this->TestReport_Operation_impl_)
      this->TestReport_Operation_impl_->message ();
  }

  void TestReport_Operation_pskel::
  detail ()
  {
    if (this->TestReport_Operation_impl_)
      this->TestReport_Operation_impl_->detail ();
  }

  void TestReport_Operation_pskel::
  post_TestReport_Operation ()
  {
    if (this->TestReport_Operation_impl_)
      this->TestReport_Operation_impl_->post_TestReport_Operation ();
    else
      post_BackboneElement ();
  }

  void TestReport_Operation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->result_parser_)
      this->result_parser_->_reset ();

    if (this->message_parser_)
      this->message_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Assert_pskel
  //

  void TestReport_Assert_pskel::
  result ()
  {
    if (this->TestReport_Assert_impl_)
      this->TestReport_Assert_impl_->result ();
  }

  void TestReport_Assert_pskel::
  message ()
  {
    if (this->TestReport_Assert_impl_)
      this->TestReport_Assert_impl_->message ();
  }

  void TestReport_Assert_pskel::
  detail ()
  {
    if (this->TestReport_Assert_impl_)
      this->TestReport_Assert_impl_->detail ();
  }

  void TestReport_Assert_pskel::
  post_TestReport_Assert ()
  {
    if (this->TestReport_Assert_impl_)
      this->TestReport_Assert_impl_->post_TestReport_Assert ();
    else
      post_BackboneElement ();
  }

  void TestReport_Assert_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->result_parser_)
      this->result_parser_->_reset ();

    if (this->message_parser_)
      this->message_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Test_pskel
  //

  void TestReport_Test_pskel::
  name ()
  {
    if (this->TestReport_Test_impl_)
      this->TestReport_Test_impl_->name ();
  }

  void TestReport_Test_pskel::
  description ()
  {
    if (this->TestReport_Test_impl_)
      this->TestReport_Test_impl_->description ();
  }

  void TestReport_Test_pskel::
  action ()
  {
    if (this->TestReport_Test_impl_)
      this->TestReport_Test_impl_->action ();
  }

  void TestReport_Test_pskel::
  post_TestReport_Test ()
  {
    if (this->TestReport_Test_impl_)
      this->TestReport_Test_impl_->post_TestReport_Test ();
    else
      post_BackboneElement ();
  }

  void TestReport_Test_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Action1_pskel
  //

  void TestReport_Action1_pskel::
  operation ()
  {
    if (this->TestReport_Action1_impl_)
      this->TestReport_Action1_impl_->operation ();
  }

  void TestReport_Action1_pskel::
  assert ()
  {
    if (this->TestReport_Action1_impl_)
      this->TestReport_Action1_impl_->assert ();
  }

  void TestReport_Action1_pskel::
  post_TestReport_Action1 ()
  {
    if (this->TestReport_Action1_impl_)
      this->TestReport_Action1_impl_->post_TestReport_Action1 ();
    else
      post_BackboneElement ();
  }

  void TestReport_Action1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->operation_parser_)
      this->operation_parser_->_reset ();

    if (this->assert_parser_)
      this->assert_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Teardown_pskel
  //

  void TestReport_Teardown_pskel::
  action ()
  {
    if (this->TestReport_Teardown_impl_)
      this->TestReport_Teardown_impl_->action ();
  }

  void TestReport_Teardown_pskel::
  post_TestReport_Teardown ()
  {
    if (this->TestReport_Teardown_impl_)
      this->TestReport_Teardown_impl_->post_TestReport_Teardown ();
    else
      post_BackboneElement ();
  }

  void TestReport_Teardown_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->action_parser_)
      this->action_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReport_Action2_pskel
  //

  void TestReport_Action2_pskel::
  operation ()
  {
    if (this->TestReport_Action2_impl_)
      this->TestReport_Action2_impl_->operation ();
  }

  void TestReport_Action2_pskel::
  post_TestReport_Action2 ()
  {
    if (this->TestReport_Action2_impl_)
      this->TestReport_Action2_impl_->post_TestReport_Action2 ();
    else
      post_BackboneElement ();
  }

  void TestReport_Action2_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->operation_parser_)
      this->operation_parser_->_reset ();

    this->resetting_ = false;
  }

  // TestReportStatus_list_pskel
  //

  void TestReportStatus_list_pskel::
  post_TestReportStatus_list ()
  {
    if (this->TestReportStatus_list_impl_)
      this->TestReportStatus_list_impl_->post_TestReportStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const TestReportStatus_list_pskel::_xsde_TestReportStatus_list_pskel_enums_[5UL] = 
  {
    "completed",
    "entered-in-error",
    "in-progress",
    "stopped",
    "waiting"
  };

  // TestReportStatus_pskel
  //

  void TestReportStatus_pskel::
  value ()
  {
    if (this->TestReportStatus_impl_)
      this->TestReportStatus_impl_->value ();
  }

  void TestReportStatus_pskel::
  post_TestReportStatus ()
  {
    if (this->TestReportStatus_impl_)
      this->TestReportStatus_impl_->post_TestReportStatus ();
    else
      post_Element ();
  }

  void TestReportStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // TestReportActionResult_list_pskel
  //

  void TestReportActionResult_list_pskel::
  post_TestReportActionResult_list ()
  {
    if (this->TestReportActionResult_list_impl_)
      this->TestReportActionResult_list_impl_->post_TestReportActionResult_list ();
    else
      post_code_primitive ();
  }

  const char* const TestReportActionResult_list_pskel::_xsde_TestReportActionResult_list_pskel_enums_[5UL] = 
  {
    "error",
    "fail",
    "pass",
    "skip",
    "warning"
  };

  // TestReportActionResult_pskel
  //

  void TestReportActionResult_pskel::
  value ()
  {
    if (this->TestReportActionResult_impl_)
      this->TestReportActionResult_impl_->value ();
  }

  void TestReportActionResult_pskel::
  post_TestReportActionResult ()
  {
    if (this->TestReportActionResult_impl_)
      this->TestReportActionResult_impl_->post_TestReportActionResult ();
    else
      post_Element ();
  }

  void TestReportActionResult_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // TestReportParticipantType_list_pskel
  //

  void TestReportParticipantType_list_pskel::
  post_TestReportParticipantType_list ()
  {
    if (this->TestReportParticipantType_list_impl_)
      this->TestReportParticipantType_list_impl_->post_TestReportParticipantType_list ();
    else
      post_code_primitive ();
  }

  const char* const TestReportParticipantType_list_pskel::_xsde_TestReportParticipantType_list_pskel_enums_[3UL] = 
  {
    "client",
    "server",
    "test-engine"
  };

  // TestReportParticipantType_pskel
  //

  void TestReportParticipantType_pskel::
  value ()
  {
    if (this->TestReportParticipantType_impl_)
      this->TestReportParticipantType_impl_->value ();
  }

  void TestReportParticipantType_pskel::
  post_TestReportParticipantType ()
  {
    if (this->TestReportParticipantType_impl_)
      this->TestReportParticipantType_impl_->post_TestReportParticipantType ();
    else
      post_Element ();
  }

  void TestReportParticipantType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // TestReportResult_list_pskel
  //

  void TestReportResult_list_pskel::
  post_TestReportResult_list ()
  {
    if (this->TestReportResult_list_impl_)
      this->TestReportResult_list_impl_->post_TestReportResult_list ();
    else
      post_code_primitive ();
  }

  const char* const TestReportResult_list_pskel::_xsde_TestReportResult_list_pskel_enums_[3UL] = 
  {
    "fail",
    "pass",
    "pending"
  };

  // TestReportResult_pskel
  //

  void TestReportResult_pskel::
  value ()
  {
    if (this->TestReportResult_impl_)
      this->TestReportResult_impl_->value ();
  }

  void TestReportResult_pskel::
  post_TestReportResult ()
  {
    if (this->TestReportResult_impl_)
      this->TestReportResult_impl_->post_TestReportResult ();
    else
      post_Element ();
  }

  void TestReportResult_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for TestReport_pskel.
  //
  bool TestReport_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_TestReportStatus ();
              this->status ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "testScript" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->testScript_parser_)
            {
              this->testScript_parser_->pre ();
              ctx.nested_parser (this->testScript_parser_);
            }
          }
          else
          {
            if (this->testScript_parser_ != 0)
            {
              this->testScript_parser_->post_Reference ();
              this->testScript ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "result" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->result_parser_)
            {
              this->result_parser_->pre ();
              ctx.nested_parser (this->result_parser_);
            }
          }
          else
          {
            if (this->result_parser_ != 0)
            {
              this->result_parser_->post_TestReportResult ();
              this->result ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "score" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->score_parser_)
            {
              this->score_parser_->pre ();
              ctx.nested_parser (this->score_parser_);
            }
          }
          else
          {
            if (this->score_parser_ != 0)
            {
              this->score_parser_->post_decimal ();
              this->score ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "tester" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->tester_parser_)
            {
              this->tester_parser_->pre ();
              ctx.nested_parser (this->tester_parser_);
            }
          }
          else
          {
            if (this->tester_parser_ != 0)
            {
              this->tester_parser_->post_string ();
              this->tester ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "issued" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issued_parser_)
            {
              this->issued_parser_->pre ();
              ctx.nested_parser (this->issued_parser_);
            }
          }
          else
          {
            if (this->issued_parser_ != 0)
            {
              this->issued_parser_->post_dateTime ();
              this->issued ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_TestReport_Participant ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "setup" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->setup_parser_)
            {
              this->setup_parser_->pre ();
              ctx.nested_parser (this->setup_parser_);
            }
          }
          else
          {
            if (this->setup_parser_ != 0)
            {
              this->setup_parser_->post_TestReport_Setup ();
              this->setup ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "test" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->test_parser_)
            {
              this->test_parser_->pre ();
              ctx.nested_parser (this->test_parser_);
            }
          }
          else
          {
            if (this->test_parser_ != 0)
            {
              this->test_parser_->post_TestReport_Test ();
              this->test ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "teardown" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->teardown_parser_)
            {
              this->teardown_parser_->pre ();
              ctx.nested_parser (this->teardown_parser_);
            }
          }
          else
          {
            if (this->teardown_parser_ != 0)
            {
              this->teardown_parser_->post_TestReport_Teardown ();
              this->teardown ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Participant_pskel.
  //
  bool TestReport_Participant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Participant_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Participant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Participant_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Participant_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_Participant_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_TestReportParticipantType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uri_parser_)
            {
              this->uri_parser_->pre ();
              ctx.nested_parser (this->uri_parser_);
            }
          }
          else
          {
            if (this->uri_parser_ != 0)
            {
              this->uri_parser_->post_uri ();
              this->uri ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "display" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->display_parser_)
            {
              this->display_parser_->pre ();
              ctx.nested_parser (this->display_parser_);
            }
          }
          else
          {
            if (this->display_parser_ != 0)
            {
              this->display_parser_->post_string ();
              this->display ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Setup_pskel.
  //
  bool TestReport_Setup_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "action" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Setup_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Setup_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Setup_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Setup_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_Setup_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_TestReport_Action ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Action_pskel.
  //
  bool TestReport_Action_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "operation" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "assert" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Action_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Action_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Action_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Action_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void TestReport_Action_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "operation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operation_parser_)
            {
              this->operation_parser_->pre ();
              ctx.nested_parser (this->operation_parser_);
            }
          }
          else
          {
            if (this->operation_parser_ != 0)
            {
              this->operation_parser_->post_TestReport_Operation ();
              this->operation ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "assert" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->assert_parser_)
            {
              this->assert_parser_->pre ();
              ctx.nested_parser (this->assert_parser_);
            }
          }
          else
          {
            if (this->assert_parser_ != 0)
            {
              this->assert_parser_->post_TestReport_Assert ();
              this->assert ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Operation_pskel.
  //
  bool TestReport_Operation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "result" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Operation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Operation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Operation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Operation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_Operation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "result" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->result_parser_)
            {
              this->result_parser_->pre ();
              ctx.nested_parser (this->result_parser_);
            }
          }
          else
          {
            if (this->result_parser_ != 0)
            {
              this->result_parser_->post_TestReportActionResult ();
              this->result ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "message" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->message_parser_)
            {
              this->message_parser_->pre ();
              ctx.nested_parser (this->message_parser_);
            }
          }
          else
          {
            if (this->message_parser_ != 0)
            {
              this->message_parser_->post_markdown ();
              this->message ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_uri ();
              this->detail ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Assert_pskel.
  //
  bool TestReport_Assert_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "result" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Assert_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Assert_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Assert_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Assert_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_Assert_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "result" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->result_parser_)
            {
              this->result_parser_->pre ();
              ctx.nested_parser (this->result_parser_);
            }
          }
          else
          {
            if (this->result_parser_ != 0)
            {
              this->result_parser_->post_TestReportActionResult ();
              this->result ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "message" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->message_parser_)
            {
              this->message_parser_->pre ();
              ctx.nested_parser (this->message_parser_);
            }
          }
          else
          {
            if (this->message_parser_ != 0)
            {
              this->message_parser_->post_markdown ();
              this->message ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_string ();
              this->detail ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Test_pskel.
  //
  bool TestReport_Test_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "action" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Test_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Test_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Test_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Test_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_Test_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_TestReport_Action1 ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Action1_pskel.
  //
  bool TestReport_Action1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "operation" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "assert" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Action1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Action1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Action1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Action1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void TestReport_Action1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "operation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operation_parser_)
            {
              this->operation_parser_->pre ();
              ctx.nested_parser (this->operation_parser_);
            }
          }
          else
          {
            if (this->operation_parser_ != 0)
            {
              this->operation_parser_->post_TestReport_Operation ();
              this->operation ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "assert" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->assert_parser_)
            {
              this->assert_parser_->pre ();
              ctx.nested_parser (this->assert_parser_);
            }
          }
          else
          {
            if (this->assert_parser_ != 0)
            {
              this->assert_parser_->post_TestReport_Assert ();
              this->assert ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Teardown_pskel.
  //
  bool TestReport_Teardown_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "action" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Teardown_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Teardown_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Teardown_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Teardown_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_Teardown_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_TestReport_Action2 ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TestReport_Action2_pskel.
  //
  bool TestReport_Action2_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "operation" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TestReport_Action2_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TestReport_Action2_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TestReport_Action2_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TestReport_Action2_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TestReport_Action2_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "operation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operation_parser_)
            {
              this->operation_parser_->pre ();
              ctx.nested_parser (this->operation_parser_);
            }
          }
          else
          {
            if (this->operation_parser_ != 0)
            {
              this->operation_parser_->post_TestReport_Operation ();
              this->operation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for TestReportStatus_pskel.
  //
  bool TestReportStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_TestReportStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for TestReportActionResult_pskel.
  //
  bool TestReportActionResult_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_TestReportActionResult_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for TestReportParticipantType_pskel.
  //
  bool TestReportParticipantType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_TestReportParticipantType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for TestReportResult_pskel.
  //
  bool TestReportResult_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_TestReportResult_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

