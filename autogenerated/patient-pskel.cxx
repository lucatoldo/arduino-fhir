// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "patient-pskel.hxx"

namespace fhir
{
  // Patient_pskel
  //

  void Patient_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Patient_pskel::
  active_parser (::fhir::boolean_pskel& p)
  {
    this->active_parser_ = &p;
  }

  void Patient_pskel::
  name_parser (::fhir::HumanName_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Patient_pskel::
  telecom_parser (::fhir::ContactPoint_pskel& p)
  {
    this->telecom_parser_ = &p;
  }

  void Patient_pskel::
  gender_parser (::fhir::AdministrativeGender_pskel& p)
  {
    this->gender_parser_ = &p;
  }

  void Patient_pskel::
  birthDate_parser (::fhir::date_pskel& p)
  {
    this->birthDate_parser_ = &p;
  }

  void Patient_pskel::
  deceasedBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->deceasedBoolean_parser_ = &p;
  }

  void Patient_pskel::
  deceasedDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->deceasedDateTime_parser_ = &p;
  }

  void Patient_pskel::
  address_parser (::fhir::Address_pskel& p)
  {
    this->address_parser_ = &p;
  }

  void Patient_pskel::
  maritalStatus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->maritalStatus_parser_ = &p;
  }

  void Patient_pskel::
  multipleBirthBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->multipleBirthBoolean_parser_ = &p;
  }

  void Patient_pskel::
  multipleBirthInteger_parser (::fhir::integer_pskel& p)
  {
    this->multipleBirthInteger_parser_ = &p;
  }

  void Patient_pskel::
  photo_parser (::fhir::Attachment_pskel& p)
  {
    this->photo_parser_ = &p;
  }

  void Patient_pskel::
  contact_parser (::fhir::Patient_Contact_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void Patient_pskel::
  communication_parser (::fhir::Patient_Communication_pskel& p)
  {
    this->communication_parser_ = &p;
  }

  void Patient_pskel::
  generalPractitioner_parser (::fhir::Reference_pskel& p)
  {
    this->generalPractitioner_parser_ = &p;
  }

  void Patient_pskel::
  managingOrganization_parser (::fhir::Reference_pskel& p)
  {
    this->managingOrganization_parser_ = &p;
  }

  void Patient_pskel::
  link_parser (::fhir::Patient_Link_pskel& p)
  {
    this->link_parser_ = &p;
  }

  void Patient_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::boolean_pskel& active,
           ::fhir::HumanName_pskel& name,
           ::fhir::ContactPoint_pskel& telecom,
           ::fhir::AdministrativeGender_pskel& gender,
           ::fhir::date_pskel& birthDate,
           ::fhir::boolean_pskel& deceasedBoolean,
           ::fhir::dateTime_pskel& deceasedDateTime,
           ::fhir::Address_pskel& address,
           ::fhir::CodeableConcept_pskel& maritalStatus,
           ::fhir::boolean_pskel& multipleBirthBoolean,
           ::fhir::integer_pskel& multipleBirthInteger,
           ::fhir::Attachment_pskel& photo,
           ::fhir::Patient_Contact_pskel& contact,
           ::fhir::Patient_Communication_pskel& communication,
           ::fhir::Reference_pskel& generalPractitioner,
           ::fhir::Reference_pskel& managingOrganization,
           ::fhir::Patient_Link_pskel& link)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->active_parser_ = &active;
    this->name_parser_ = &name;
    this->telecom_parser_ = &telecom;
    this->gender_parser_ = &gender;
    this->birthDate_parser_ = &birthDate;
    this->deceasedBoolean_parser_ = &deceasedBoolean;
    this->deceasedDateTime_parser_ = &deceasedDateTime;
    this->address_parser_ = &address;
    this->maritalStatus_parser_ = &maritalStatus;
    this->multipleBirthBoolean_parser_ = &multipleBirthBoolean;
    this->multipleBirthInteger_parser_ = &multipleBirthInteger;
    this->photo_parser_ = &photo;
    this->contact_parser_ = &contact;
    this->communication_parser_ = &communication;
    this->generalPractitioner_parser_ = &generalPractitioner;
    this->managingOrganization_parser_ = &managingOrganization;
    this->link_parser_ = &link;
  }

  Patient_pskel::
  Patient_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Patient_impl_ (0),
    identifier_parser_ (0),
    active_parser_ (0),
    name_parser_ (0),
    telecom_parser_ (0),
    gender_parser_ (0),
    birthDate_parser_ (0),
    deceasedBoolean_parser_ (0),
    deceasedDateTime_parser_ (0),
    address_parser_ (0),
    maritalStatus_parser_ (0),
    multipleBirthBoolean_parser_ (0),
    multipleBirthInteger_parser_ (0),
    photo_parser_ (0),
    contact_parser_ (0),
    communication_parser_ (0),
    generalPractitioner_parser_ (0),
    managingOrganization_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Patient_pskel::
  Patient_pskel (Patient_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Patient_impl_ (impl),
    identifier_parser_ (0),
    active_parser_ (0),
    name_parser_ (0),
    telecom_parser_ (0),
    gender_parser_ (0),
    birthDate_parser_ (0),
    deceasedBoolean_parser_ (0),
    deceasedDateTime_parser_ (0),
    address_parser_ (0),
    maritalStatus_parser_ (0),
    multipleBirthBoolean_parser_ (0),
    multipleBirthInteger_parser_ (0),
    photo_parser_ (0),
    contact_parser_ (0),
    communication_parser_ (0),
    generalPractitioner_parser_ (0),
    managingOrganization_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Patient_Contact_pskel
  //

  void Patient_Contact_pskel::
  relationship_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void Patient_Contact_pskel::
  name_parser (::fhir::HumanName_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Patient_Contact_pskel::
  telecom_parser (::fhir::ContactPoint_pskel& p)
  {
    this->telecom_parser_ = &p;
  }

  void Patient_Contact_pskel::
  address_parser (::fhir::Address_pskel& p)
  {
    this->address_parser_ = &p;
  }

  void Patient_Contact_pskel::
  gender_parser (::fhir::AdministrativeGender_pskel& p)
  {
    this->gender_parser_ = &p;
  }

  void Patient_Contact_pskel::
  organization_parser (::fhir::Reference_pskel& p)
  {
    this->organization_parser_ = &p;
  }

  void Patient_Contact_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Patient_Contact_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& relationship,
           ::fhir::HumanName_pskel& name,
           ::fhir::ContactPoint_pskel& telecom,
           ::fhir::Address_pskel& address,
           ::fhir::AdministrativeGender_pskel& gender,
           ::fhir::Reference_pskel& organization,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->relationship_parser_ = &relationship;
    this->name_parser_ = &name;
    this->telecom_parser_ = &telecom;
    this->address_parser_ = &address;
    this->gender_parser_ = &gender;
    this->organization_parser_ = &organization;
    this->period_parser_ = &period;
  }

  Patient_Contact_pskel::
  Patient_Contact_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Patient_Contact_impl_ (0),
    relationship_parser_ (0),
    name_parser_ (0),
    telecom_parser_ (0),
    address_parser_ (0),
    gender_parser_ (0),
    organization_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Patient_Contact_pskel::
  Patient_Contact_pskel (Patient_Contact_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Patient_Contact_impl_ (impl),
    relationship_parser_ (0),
    name_parser_ (0),
    telecom_parser_ (0),
    address_parser_ (0),
    gender_parser_ (0),
    organization_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Patient_Communication_pskel
  //

  void Patient_Communication_pskel::
  language_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->language_parser_ = &p;
  }

  void Patient_Communication_pskel::
  preferred_parser (::fhir::boolean_pskel& p)
  {
    this->preferred_parser_ = &p;
  }

  void Patient_Communication_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& language,
           ::fhir::boolean_pskel& preferred)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->language_parser_ = &language;
    this->preferred_parser_ = &preferred;
  }

  Patient_Communication_pskel::
  Patient_Communication_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Patient_Communication_impl_ (0),
    language_parser_ (0),
    preferred_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Patient_Communication_pskel::
  Patient_Communication_pskel (Patient_Communication_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Patient_Communication_impl_ (impl),
    language_parser_ (0),
    preferred_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Patient_Link_pskel
  //

  void Patient_Link_pskel::
  other_parser (::fhir::Reference_pskel& p)
  {
    this->other_parser_ = &p;
  }

  void Patient_Link_pskel::
  type_parser (::fhir::LinkType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Patient_Link_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& other,
           ::fhir::LinkType_pskel& type)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->other_parser_ = &other;
    this->type_parser_ = &type;
  }

  Patient_Link_pskel::
  Patient_Link_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Patient_Link_impl_ (0),
    other_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Patient_Link_pskel::
  Patient_Link_pskel (Patient_Link_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Patient_Link_impl_ (impl),
    other_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // LinkType_list_pskel
  //

  LinkType_list_pskel::
  LinkType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    LinkType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_LinkType_list_pskel_enums_, 4UL);
  }

  LinkType_list_pskel::
  LinkType_list_pskel (LinkType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    LinkType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_LinkType_list_pskel_enums_, 4UL);
  }

  // LinkType_pskel
  //

  void LinkType_pskel::
  value_parser (::fhir::LinkType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void LinkType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::LinkType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  LinkType_pskel::
  LinkType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    LinkType_impl_ (0),
    value_parser_ (0)
  {
  }

  LinkType_pskel::
  LinkType_pskel (LinkType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    LinkType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Patient_pskel
  //

  void Patient_pskel::
  identifier ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->identifier ();
  }

  void Patient_pskel::
  active ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->active ();
  }

  void Patient_pskel::
  name ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->name ();
  }

  void Patient_pskel::
  telecom ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->telecom ();
  }

  void Patient_pskel::
  gender ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->gender ();
  }

  void Patient_pskel::
  birthDate ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->birthDate ();
  }

  void Patient_pskel::
  deceasedBoolean ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->deceasedBoolean ();
  }

  void Patient_pskel::
  deceasedDateTime ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->deceasedDateTime ();
  }

  void Patient_pskel::
  address ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->address ();
  }

  void Patient_pskel::
  maritalStatus ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->maritalStatus ();
  }

  void Patient_pskel::
  multipleBirthBoolean ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->multipleBirthBoolean ();
  }

  void Patient_pskel::
  multipleBirthInteger ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->multipleBirthInteger ();
  }

  void Patient_pskel::
  photo ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->photo ();
  }

  void Patient_pskel::
  contact ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->contact ();
  }

  void Patient_pskel::
  communication ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->communication ();
  }

  void Patient_pskel::
  generalPractitioner ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->generalPractitioner ();
  }

  void Patient_pskel::
  managingOrganization ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->managingOrganization ();
  }

  void Patient_pskel::
  link ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->link ();
  }

  void Patient_pskel::
  post_Patient ()
  {
    if (this->Patient_impl_)
      this->Patient_impl_->post_Patient ();
    else
      post_DomainResource ();
  }

  void Patient_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->active_parser_)
      this->active_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->telecom_parser_)
      this->telecom_parser_->_reset ();

    if (this->gender_parser_)
      this->gender_parser_->_reset ();

    if (this->birthDate_parser_)
      this->birthDate_parser_->_reset ();

    if (this->deceasedBoolean_parser_)
      this->deceasedBoolean_parser_->_reset ();

    if (this->deceasedDateTime_parser_)
      this->deceasedDateTime_parser_->_reset ();

    if (this->address_parser_)
      this->address_parser_->_reset ();

    if (this->maritalStatus_parser_)
      this->maritalStatus_parser_->_reset ();

    if (this->multipleBirthBoolean_parser_)
      this->multipleBirthBoolean_parser_->_reset ();

    if (this->multipleBirthInteger_parser_)
      this->multipleBirthInteger_parser_->_reset ();

    if (this->photo_parser_)
      this->photo_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->communication_parser_)
      this->communication_parser_->_reset ();

    if (this->generalPractitioner_parser_)
      this->generalPractitioner_parser_->_reset ();

    if (this->managingOrganization_parser_)
      this->managingOrganization_parser_->_reset ();

    if (this->link_parser_)
      this->link_parser_->_reset ();

    this->resetting_ = false;
  }

  // Patient_Contact_pskel
  //

  void Patient_Contact_pskel::
  relationship ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->relationship ();
  }

  void Patient_Contact_pskel::
  name ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->name ();
  }

  void Patient_Contact_pskel::
  telecom ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->telecom ();
  }

  void Patient_Contact_pskel::
  address ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->address ();
  }

  void Patient_Contact_pskel::
  gender ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->gender ();
  }

  void Patient_Contact_pskel::
  organization ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->organization ();
  }

  void Patient_Contact_pskel::
  period ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->period ();
  }

  void Patient_Contact_pskel::
  post_Patient_Contact ()
  {
    if (this->Patient_Contact_impl_)
      this->Patient_Contact_impl_->post_Patient_Contact ();
    else
      post_BackboneElement ();
  }

  void Patient_Contact_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->telecom_parser_)
      this->telecom_parser_->_reset ();

    if (this->address_parser_)
      this->address_parser_->_reset ();

    if (this->gender_parser_)
      this->gender_parser_->_reset ();

    if (this->organization_parser_)
      this->organization_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // Patient_Communication_pskel
  //

  void Patient_Communication_pskel::
  language ()
  {
    if (this->Patient_Communication_impl_)
      this->Patient_Communication_impl_->language ();
  }

  void Patient_Communication_pskel::
  preferred ()
  {
    if (this->Patient_Communication_impl_)
      this->Patient_Communication_impl_->preferred ();
  }

  void Patient_Communication_pskel::
  post_Patient_Communication ()
  {
    if (this->Patient_Communication_impl_)
      this->Patient_Communication_impl_->post_Patient_Communication ();
    else
      post_BackboneElement ();
  }

  void Patient_Communication_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->language_parser_)
      this->language_parser_->_reset ();

    if (this->preferred_parser_)
      this->preferred_parser_->_reset ();

    this->resetting_ = false;
  }

  // Patient_Link_pskel
  //

  void Patient_Link_pskel::
  other ()
  {
    if (this->Patient_Link_impl_)
      this->Patient_Link_impl_->other ();
  }

  void Patient_Link_pskel::
  type ()
  {
    if (this->Patient_Link_impl_)
      this->Patient_Link_impl_->type ();
  }

  void Patient_Link_pskel::
  post_Patient_Link ()
  {
    if (this->Patient_Link_impl_)
      this->Patient_Link_impl_->post_Patient_Link ();
    else
      post_BackboneElement ();
  }

  void Patient_Link_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->other_parser_)
      this->other_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = false;
  }

  // LinkType_list_pskel
  //

  void LinkType_list_pskel::
  post_LinkType_list ()
  {
    if (this->LinkType_list_impl_)
      this->LinkType_list_impl_->post_LinkType_list ();
    else
      post_code_primitive ();
  }

  const char* const LinkType_list_pskel::_xsde_LinkType_list_pskel_enums_[4UL] = 
  {
    "refer",
    "replaced-by",
    "replaces",
    "seealso"
  };

  // LinkType_pskel
  //

  void LinkType_pskel::
  value ()
  {
    if (this->LinkType_impl_)
      this->LinkType_impl_->value ();
  }

  void LinkType_pskel::
  post_LinkType ()
  {
    if (this->LinkType_impl_)
      this->LinkType_impl_->post_LinkType ();
    else
      post_Element ();
  }

  void LinkType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Patient_pskel.
  //
  bool Patient_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "active" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "telecom" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "gender" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "birthDate" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "deceasedBoolean" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "deceasedDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "address" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "maritalStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "multipleBirthBoolean" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "multipleBirthInteger" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "photo" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "contact" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "communication" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "generalPractitioner" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "managingOrganization" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "link" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Patient_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Patient_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Patient_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Patient_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Patient_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "active" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->active_parser_)
            {
              this->active_parser_->pre ();
              ctx.nested_parser (this->active_parser_);
            }
          }
          else
          {
            if (this->active_parser_ != 0)
            {
              this->active_parser_->post_boolean ();
              this->active ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_HumanName ();
              this->name ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "telecom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->telecom_parser_)
            {
              this->telecom_parser_->pre ();
              ctx.nested_parser (this->telecom_parser_);
            }
          }
          else
          {
            if (this->telecom_parser_ != 0)
            {
              this->telecom_parser_->post_ContactPoint ();
              this->telecom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "gender" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->gender_parser_)
            {
              this->gender_parser_->pre ();
              ctx.nested_parser (this->gender_parser_);
            }
          }
          else
          {
            if (this->gender_parser_ != 0)
            {
              this->gender_parser_->post_AdministrativeGender ();
              this->gender ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "birthDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->birthDate_parser_)
            {
              this->birthDate_parser_->pre ();
              ctx.nested_parser (this->birthDate_parser_);
            }
          }
          else
          {
            if (this->birthDate_parser_ != 0)
            {
              this->birthDate_parser_->post_date ();
              this->birthDate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "deceasedBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deceasedBoolean_parser_)
            {
              this->deceasedBoolean_parser_->pre ();
              ctx.nested_parser (this->deceasedBoolean_parser_);
            }
          }
          else
          {
            if (this->deceasedBoolean_parser_ != 0)
            {
              this->deceasedBoolean_parser_->post_boolean ();
              this->deceasedBoolean ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "deceasedDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deceasedDateTime_parser_)
            {
              this->deceasedDateTime_parser_->pre ();
              ctx.nested_parser (this->deceasedDateTime_parser_);
            }
          }
          else
          {
            if (this->deceasedDateTime_parser_ != 0)
            {
              this->deceasedDateTime_parser_->post_dateTime ();
              this->deceasedDateTime ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "address" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->address_parser_)
            {
              this->address_parser_->pre ();
              ctx.nested_parser (this->address_parser_);
            }
          }
          else
          {
            if (this->address_parser_ != 0)
            {
              this->address_parser_->post_Address ();
              this->address ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "maritalStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maritalStatus_parser_)
            {
              this->maritalStatus_parser_->pre ();
              ctx.nested_parser (this->maritalStatus_parser_);
            }
          }
          else
          {
            if (this->maritalStatus_parser_ != 0)
            {
              this->maritalStatus_parser_->post_CodeableConcept ();
              this->maritalStatus ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "multipleBirthBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->multipleBirthBoolean_parser_)
            {
              this->multipleBirthBoolean_parser_->pre ();
              ctx.nested_parser (this->multipleBirthBoolean_parser_);
            }
          }
          else
          {
            if (this->multipleBirthBoolean_parser_ != 0)
            {
              this->multipleBirthBoolean_parser_->post_boolean ();
              this->multipleBirthBoolean ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "multipleBirthInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->multipleBirthInteger_parser_)
            {
              this->multipleBirthInteger_parser_->pre ();
              ctx.nested_parser (this->multipleBirthInteger_parser_);
            }
          }
          else
          {
            if (this->multipleBirthInteger_parser_ != 0)
            {
              this->multipleBirthInteger_parser_->post_integer ();
              this->multipleBirthInteger ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "photo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->photo_parser_)
            {
              this->photo_parser_->pre ();
              ctx.nested_parser (this->photo_parser_);
            }
          }
          else
          {
            if (this->photo_parser_ != 0)
            {
              this->photo_parser_->post_Attachment ();
              this->photo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_Patient_Contact ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "communication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->communication_parser_)
            {
              this->communication_parser_->pre ();
              ctx.nested_parser (this->communication_parser_);
            }
          }
          else
          {
            if (this->communication_parser_ != 0)
            {
              this->communication_parser_->post_Patient_Communication ();
              this->communication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "generalPractitioner" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->generalPractitioner_parser_)
            {
              this->generalPractitioner_parser_->pre ();
              ctx.nested_parser (this->generalPractitioner_parser_);
            }
          }
          else
          {
            if (this->generalPractitioner_parser_ != 0)
            {
              this->generalPractitioner_parser_->post_Reference ();
              this->generalPractitioner ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "managingOrganization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->managingOrganization_parser_)
            {
              this->managingOrganization_parser_->pre ();
              ctx.nested_parser (this->managingOrganization_parser_);
            }
          }
          else
          {
            if (this->managingOrganization_parser_ != 0)
            {
              this->managingOrganization_parser_->post_Reference ();
              this->managingOrganization ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "link" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->link_parser_)
            {
              this->link_parser_->pre ();
              ctx.nested_parser (this->link_parser_);
            }
          }
          else
          {
            if (this->link_parser_ != 0)
            {
              this->link_parser_->post_Patient_Link ();
              this->link ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Patient_Contact_pskel.
  //
  bool Patient_Contact_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "telecom" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "address" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "gender" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "organization" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Patient_Contact_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Patient_Contact_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Patient_Contact_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Patient_Contact_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Patient_Contact_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_CodeableConcept ();
              this->relationship ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_HumanName ();
              this->name ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "telecom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->telecom_parser_)
            {
              this->telecom_parser_->pre ();
              ctx.nested_parser (this->telecom_parser_);
            }
          }
          else
          {
            if (this->telecom_parser_ != 0)
            {
              this->telecom_parser_->post_ContactPoint ();
              this->telecom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "address" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->address_parser_)
            {
              this->address_parser_->pre ();
              ctx.nested_parser (this->address_parser_);
            }
          }
          else
          {
            if (this->address_parser_ != 0)
            {
              this->address_parser_->post_Address ();
              this->address ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "gender" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->gender_parser_)
            {
              this->gender_parser_->pre ();
              ctx.nested_parser (this->gender_parser_);
            }
          }
          else
          {
            if (this->gender_parser_ != 0)
            {
              this->gender_parser_->post_AdministrativeGender ();
              this->gender ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "organization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organization_parser_)
            {
              this->organization_parser_->pre ();
              ctx.nested_parser (this->organization_parser_);
            }
          }
          else
          {
            if (this->organization_parser_ != 0)
            {
              this->organization_parser_->post_Reference ();
              this->organization ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Patient_Communication_pskel.
  //
  bool Patient_Communication_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "language" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Patient_Communication_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Patient_Communication_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Patient_Communication_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Patient_Communication_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Patient_Communication_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "language" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->language_parser_)
            {
              this->language_parser_->pre ();
              ctx.nested_parser (this->language_parser_);
            }
          }
          else
          {
            if (this->language_parser_ != 0)
            {
              this->language_parser_->post_CodeableConcept ();
              this->language ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "preferred" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preferred_parser_)
            {
              this->preferred_parser_->pre ();
              ctx.nested_parser (this->preferred_parser_);
            }
          }
          else
          {
            if (this->preferred_parser_ != 0)
            {
              this->preferred_parser_->post_boolean ();
              this->preferred ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Patient_Link_pskel.
  //
  bool Patient_Link_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "other" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Patient_Link_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Patient_Link_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Patient_Link_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Patient_Link_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Patient_Link_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "other" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->other_parser_)
            {
              this->other_parser_->pre ();
              ctx.nested_parser (this->other_parser_);
            }
          }
          else
          {
            if (this->other_parser_ != 0)
            {
              this->other_parser_->post_Reference ();
              this->other ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_LinkType ();
              this->type ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for LinkType_pskel.
  //
  bool LinkType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_LinkType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

