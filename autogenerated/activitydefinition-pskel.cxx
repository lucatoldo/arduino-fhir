// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "activitydefinition-pskel.hxx"

namespace fhir
{
  // ActivityDefinition_pskel
  //

  void ActivityDefinition_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  subtitle_parser (::fhir::string_pskel& p)
  {
    this->subtitle_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subjectCodeableConcept_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  subjectReference_parser (::fhir::Reference_pskel& p)
  {
    this->subjectReference_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  usage_parser (::fhir::string_pskel& p)
  {
    this->usage_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  approvalDate_parser (::fhir::date_pskel& p)
  {
    this->approvalDate_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  lastReviewDate_parser (::fhir::date_pskel& p)
  {
    this->lastReviewDate_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  topic_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->topic_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  author_parser (::fhir::ContactDetail_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  editor_parser (::fhir::ContactDetail_pskel& p)
  {
    this->editor_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  reviewer_parser (::fhir::ContactDetail_pskel& p)
  {
    this->reviewer_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  endorser_parser (::fhir::ContactDetail_pskel& p)
  {
    this->endorser_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  relatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->relatedArtifact_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  library_parser (::fhir::canonical_pskel& p)
  {
    this->library_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  kind_parser (::fhir::RequestResourceType_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  profile_parser (::fhir::canonical_pskel& p)
  {
    this->profile_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  intent_parser (::fhir::RequestIntent_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  doNotPerform_parser (::fhir::boolean_pskel& p)
  {
    this->doNotPerform_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  timingTiming_parser (::fhir::Timing_pskel& p)
  {
    this->timingTiming_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  timingDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->timingDateTime_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  timingAge_parser (::fhir::Age_pskel& p)
  {
    this->timingAge_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  timingPeriod_parser (::fhir::Period_pskel& p)
  {
    this->timingPeriod_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  timingRange_parser (::fhir::Range_pskel& p)
  {
    this->timingRange_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  timingDuration_parser (::fhir::Duration_pskel& p)
  {
    this->timingDuration_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  participant_parser (::fhir::ActivityDefinition_Participant_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  productReference_parser (::fhir::Reference_pskel& p)
  {
    this->productReference_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  productCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productCodeableConcept_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  dosage_parser (::fhir::Dosage_pskel& p)
  {
    this->dosage_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  specimenRequirement_parser (::fhir::Reference_pskel& p)
  {
    this->specimenRequirement_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  observationRequirement_parser (::fhir::Reference_pskel& p)
  {
    this->observationRequirement_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  observationResultRequirement_parser (::fhir::Reference_pskel& p)
  {
    this->observationResultRequirement_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  transform_parser (::fhir::canonical_pskel& p)
  {
    this->transform_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  dynamicValue_parser (::fhir::ActivityDefinition_DynamicValue_pskel& p)
  {
    this->dynamicValue_parser_ = &p;
  }

  void ActivityDefinition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& subtitle,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::CodeableConcept_pskel& subjectCodeableConcept,
           ::fhir::Reference_pskel& subjectReference,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::string_pskel& usage,
           ::fhir::markdown_pskel& copyright,
           ::fhir::date_pskel& approvalDate,
           ::fhir::date_pskel& lastReviewDate,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::CodeableConcept_pskel& topic,
           ::fhir::ContactDetail_pskel& author,
           ::fhir::ContactDetail_pskel& editor,
           ::fhir::ContactDetail_pskel& reviewer,
           ::fhir::ContactDetail_pskel& endorser,
           ::fhir::RelatedArtifact_pskel& relatedArtifact,
           ::fhir::canonical_pskel& library,
           ::fhir::RequestResourceType_pskel& kind,
           ::fhir::canonical_pskel& profile,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::RequestIntent_pskel& intent,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::boolean_pskel& doNotPerform,
           ::fhir::Timing_pskel& timingTiming,
           ::fhir::dateTime_pskel& timingDateTime,
           ::fhir::Age_pskel& timingAge,
           ::fhir::Period_pskel& timingPeriod,
           ::fhir::Range_pskel& timingRange,
           ::fhir::Duration_pskel& timingDuration,
           ::fhir::Reference_pskel& location,
           ::fhir::ActivityDefinition_Participant_pskel& participant,
           ::fhir::Reference_pskel& productReference,
           ::fhir::CodeableConcept_pskel& productCodeableConcept,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Dosage_pskel& dosage,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::Reference_pskel& specimenRequirement,
           ::fhir::Reference_pskel& observationRequirement,
           ::fhir::Reference_pskel& observationResultRequirement,
           ::fhir::canonical_pskel& transform,
           ::fhir::ActivityDefinition_DynamicValue_pskel& dynamicValue)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->subtitle_parser_ = &subtitle;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->subjectCodeableConcept_parser_ = &subjectCodeableConcept;
    this->subjectReference_parser_ = &subjectReference;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->usage_parser_ = &usage;
    this->copyright_parser_ = &copyright;
    this->approvalDate_parser_ = &approvalDate;
    this->lastReviewDate_parser_ = &lastReviewDate;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->topic_parser_ = &topic;
    this->author_parser_ = &author;
    this->editor_parser_ = &editor;
    this->reviewer_parser_ = &reviewer;
    this->endorser_parser_ = &endorser;
    this->relatedArtifact_parser_ = &relatedArtifact;
    this->library_parser_ = &library;
    this->kind_parser_ = &kind;
    this->profile_parser_ = &profile;
    this->code_parser_ = &code;
    this->intent_parser_ = &intent;
    this->priority_parser_ = &priority;
    this->doNotPerform_parser_ = &doNotPerform;
    this->timingTiming_parser_ = &timingTiming;
    this->timingDateTime_parser_ = &timingDateTime;
    this->timingAge_parser_ = &timingAge;
    this->timingPeriod_parser_ = &timingPeriod;
    this->timingRange_parser_ = &timingRange;
    this->timingDuration_parser_ = &timingDuration;
    this->location_parser_ = &location;
    this->participant_parser_ = &participant;
    this->productReference_parser_ = &productReference;
    this->productCodeableConcept_parser_ = &productCodeableConcept;
    this->quantity_parser_ = &quantity;
    this->dosage_parser_ = &dosage;
    this->bodySite_parser_ = &bodySite;
    this->specimenRequirement_parser_ = &specimenRequirement;
    this->observationRequirement_parser_ = &observationRequirement;
    this->observationResultRequirement_parser_ = &observationResultRequirement;
    this->transform_parser_ = &transform;
    this->dynamicValue_parser_ = &dynamicValue;
  }

  ActivityDefinition_pskel::
  ActivityDefinition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ActivityDefinition_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    subtitle_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    subjectCodeableConcept_parser_ (0),
    subjectReference_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    usage_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    library_parser_ (0),
    kind_parser_ (0),
    profile_parser_ (0),
    code_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    doNotPerform_parser_ (0),
    timingTiming_parser_ (0),
    timingDateTime_parser_ (0),
    timingAge_parser_ (0),
    timingPeriod_parser_ (0),
    timingRange_parser_ (0),
    timingDuration_parser_ (0),
    location_parser_ (0),
    participant_parser_ (0),
    productReference_parser_ (0),
    productCodeableConcept_parser_ (0),
    quantity_parser_ (0),
    dosage_parser_ (0),
    bodySite_parser_ (0),
    specimenRequirement_parser_ (0),
    observationRequirement_parser_ (0),
    observationResultRequirement_parser_ (0),
    transform_parser_ (0),
    dynamicValue_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ActivityDefinition_pskel::
  ActivityDefinition_pskel (ActivityDefinition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ActivityDefinition_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    subtitle_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    subjectCodeableConcept_parser_ (0),
    subjectReference_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    usage_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    library_parser_ (0),
    kind_parser_ (0),
    profile_parser_ (0),
    code_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    doNotPerform_parser_ (0),
    timingTiming_parser_ (0),
    timingDateTime_parser_ (0),
    timingAge_parser_ (0),
    timingPeriod_parser_ (0),
    timingRange_parser_ (0),
    timingDuration_parser_ (0),
    location_parser_ (0),
    participant_parser_ (0),
    productReference_parser_ (0),
    productCodeableConcept_parser_ (0),
    quantity_parser_ (0),
    dosage_parser_ (0),
    bodySite_parser_ (0),
    specimenRequirement_parser_ (0),
    observationRequirement_parser_ (0),
    observationResultRequirement_parser_ (0),
    transform_parser_ (0),
    dynamicValue_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ActivityDefinition_Participant_pskel
  //

  void ActivityDefinition_Participant_pskel::
  type_parser (::fhir::ActionParticipantType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ActivityDefinition_Participant_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void ActivityDefinition_Participant_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ActionParticipantType_pskel& type,
           ::fhir::CodeableConcept_pskel& role)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->role_parser_ = &role;
  }

  ActivityDefinition_Participant_pskel::
  ActivityDefinition_Participant_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ActivityDefinition_Participant_impl_ (0),
    type_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ActivityDefinition_Participant_pskel::
  ActivityDefinition_Participant_pskel (ActivityDefinition_Participant_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ActivityDefinition_Participant_impl_ (impl),
    type_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ActivityDefinition_DynamicValue_pskel
  //

  void ActivityDefinition_DynamicValue_pskel::
  path_parser (::fhir::string_pskel& p)
  {
    this->path_parser_ = &p;
  }

  void ActivityDefinition_DynamicValue_pskel::
  expression_parser (::fhir::Expression_pskel& p)
  {
    this->expression_parser_ = &p;
  }

  void ActivityDefinition_DynamicValue_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& path,
           ::fhir::Expression_pskel& expression)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->path_parser_ = &path;
    this->expression_parser_ = &expression;
  }

  ActivityDefinition_DynamicValue_pskel::
  ActivityDefinition_DynamicValue_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ActivityDefinition_DynamicValue_impl_ (0),
    path_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ActivityDefinition_DynamicValue_pskel::
  ActivityDefinition_DynamicValue_pskel (ActivityDefinition_DynamicValue_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ActivityDefinition_DynamicValue_impl_ (impl),
    path_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ActionParticipantType_list_pskel
  //

  ActionParticipantType_list_pskel::
  ActionParticipantType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionParticipantType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionParticipantType_list_pskel_enums_, 4UL);
  }

  ActionParticipantType_list_pskel::
  ActionParticipantType_list_pskel (ActionParticipantType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionParticipantType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionParticipantType_list_pskel_enums_, 4UL);
  }

  // ActionParticipantType_pskel
  //

  void ActionParticipantType_pskel::
  value_parser (::fhir::ActionParticipantType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionParticipantType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionParticipantType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionParticipantType_pskel::
  ActionParticipantType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionParticipantType_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionParticipantType_pskel::
  ActionParticipantType_pskel (ActionParticipantType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionParticipantType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // RequestIntent_list_pskel
  //

  RequestIntent_list_pskel::
  RequestIntent_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    RequestIntent_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_RequestIntent_list_pskel_enums_, 9UL);
  }

  RequestIntent_list_pskel::
  RequestIntent_list_pskel (RequestIntent_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    RequestIntent_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_RequestIntent_list_pskel_enums_, 9UL);
  }

  // RequestIntent_pskel
  //

  void RequestIntent_pskel::
  value_parser (::fhir::RequestIntent_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void RequestIntent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::RequestIntent_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  RequestIntent_pskel::
  RequestIntent_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    RequestIntent_impl_ (0),
    value_parser_ (0)
  {
  }

  RequestIntent_pskel::
  RequestIntent_pskel (RequestIntent_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    RequestIntent_impl_ (impl),
    value_parser_ (0)
  {
  }

  // RequestResourceType_list_pskel
  //

  RequestResourceType_list_pskel::
  RequestResourceType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    RequestResourceType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_RequestResourceType_list_pskel_enums_, 15UL);
  }

  RequestResourceType_list_pskel::
  RequestResourceType_list_pskel (RequestResourceType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    RequestResourceType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_RequestResourceType_list_pskel_enums_, 15UL);
  }

  // RequestResourceType_pskel
  //

  void RequestResourceType_pskel::
  value_parser (::fhir::RequestResourceType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void RequestResourceType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::RequestResourceType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  RequestResourceType_pskel::
  RequestResourceType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    RequestResourceType_impl_ (0),
    value_parser_ (0)
  {
  }

  RequestResourceType_pskel::
  RequestResourceType_pskel (RequestResourceType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    RequestResourceType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // RequestPriority_list_pskel
  //

  RequestPriority_list_pskel::
  RequestPriority_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    RequestPriority_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_RequestPriority_list_pskel_enums_, 4UL);
  }

  RequestPriority_list_pskel::
  RequestPriority_list_pskel (RequestPriority_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    RequestPriority_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_RequestPriority_list_pskel_enums_, 4UL);
  }

  // RequestPriority_pskel
  //

  void RequestPriority_pskel::
  value_parser (::fhir::RequestPriority_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void RequestPriority_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::RequestPriority_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  RequestPriority_pskel::
  RequestPriority_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    RequestPriority_impl_ (0),
    value_parser_ (0)
  {
  }

  RequestPriority_pskel::
  RequestPriority_pskel (RequestPriority_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    RequestPriority_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ActivityDefinition_pskel
  //

  void ActivityDefinition_pskel::
  url ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->url ();
  }

  void ActivityDefinition_pskel::
  identifier ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->identifier ();
  }

  void ActivityDefinition_pskel::
  version ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->version ();
  }

  void ActivityDefinition_pskel::
  name ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->name ();
  }

  void ActivityDefinition_pskel::
  title ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->title ();
  }

  void ActivityDefinition_pskel::
  subtitle ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->subtitle ();
  }

  void ActivityDefinition_pskel::
  status ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->status ();
  }

  void ActivityDefinition_pskel::
  experimental ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->experimental ();
  }

  void ActivityDefinition_pskel::
  subjectCodeableConcept ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->subjectCodeableConcept ();
  }

  void ActivityDefinition_pskel::
  subjectReference ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->subjectReference ();
  }

  void ActivityDefinition_pskel::
  date ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->date ();
  }

  void ActivityDefinition_pskel::
  publisher ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->publisher ();
  }

  void ActivityDefinition_pskel::
  contact ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->contact ();
  }

  void ActivityDefinition_pskel::
  description ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->description ();
  }

  void ActivityDefinition_pskel::
  useContext ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->useContext ();
  }

  void ActivityDefinition_pskel::
  jurisdiction ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->jurisdiction ();
  }

  void ActivityDefinition_pskel::
  purpose ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->purpose ();
  }

  void ActivityDefinition_pskel::
  usage ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->usage ();
  }

  void ActivityDefinition_pskel::
  copyright ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->copyright ();
  }

  void ActivityDefinition_pskel::
  approvalDate ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->approvalDate ();
  }

  void ActivityDefinition_pskel::
  lastReviewDate ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->lastReviewDate ();
  }

  void ActivityDefinition_pskel::
  effectivePeriod ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->effectivePeriod ();
  }

  void ActivityDefinition_pskel::
  topic ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->topic ();
  }

  void ActivityDefinition_pskel::
  author ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->author ();
  }

  void ActivityDefinition_pskel::
  editor ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->editor ();
  }

  void ActivityDefinition_pskel::
  reviewer ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->reviewer ();
  }

  void ActivityDefinition_pskel::
  endorser ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->endorser ();
  }

  void ActivityDefinition_pskel::
  relatedArtifact ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->relatedArtifact ();
  }

  void ActivityDefinition_pskel::
  library ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->library ();
  }

  void ActivityDefinition_pskel::
  kind ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->kind ();
  }

  void ActivityDefinition_pskel::
  profile ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->profile ();
  }

  void ActivityDefinition_pskel::
  code ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->code ();
  }

  void ActivityDefinition_pskel::
  intent ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->intent ();
  }

  void ActivityDefinition_pskel::
  priority ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->priority ();
  }

  void ActivityDefinition_pskel::
  doNotPerform ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->doNotPerform ();
  }

  void ActivityDefinition_pskel::
  timingTiming ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->timingTiming ();
  }

  void ActivityDefinition_pskel::
  timingDateTime ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->timingDateTime ();
  }

  void ActivityDefinition_pskel::
  timingAge ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->timingAge ();
  }

  void ActivityDefinition_pskel::
  timingPeriod ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->timingPeriod ();
  }

  void ActivityDefinition_pskel::
  timingRange ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->timingRange ();
  }

  void ActivityDefinition_pskel::
  timingDuration ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->timingDuration ();
  }

  void ActivityDefinition_pskel::
  location ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->location ();
  }

  void ActivityDefinition_pskel::
  participant ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->participant ();
  }

  void ActivityDefinition_pskel::
  productReference ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->productReference ();
  }

  void ActivityDefinition_pskel::
  productCodeableConcept ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->productCodeableConcept ();
  }

  void ActivityDefinition_pskel::
  quantity ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->quantity ();
  }

  void ActivityDefinition_pskel::
  dosage ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->dosage ();
  }

  void ActivityDefinition_pskel::
  bodySite ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->bodySite ();
  }

  void ActivityDefinition_pskel::
  specimenRequirement ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->specimenRequirement ();
  }

  void ActivityDefinition_pskel::
  observationRequirement ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->observationRequirement ();
  }

  void ActivityDefinition_pskel::
  observationResultRequirement ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->observationResultRequirement ();
  }

  void ActivityDefinition_pskel::
  transform ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->transform ();
  }

  void ActivityDefinition_pskel::
  dynamicValue ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->dynamicValue ();
  }

  void ActivityDefinition_pskel::
  post_ActivityDefinition ()
  {
    if (this->ActivityDefinition_impl_)
      this->ActivityDefinition_impl_->post_ActivityDefinition ();
    else
      post_DomainResource ();
  }

  void ActivityDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->subtitle_parser_)
      this->subtitle_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->subjectCodeableConcept_parser_)
      this->subjectCodeableConcept_parser_->_reset ();

    if (this->subjectReference_parser_)
      this->subjectReference_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->usage_parser_)
      this->usage_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->approvalDate_parser_)
      this->approvalDate_parser_->_reset ();

    if (this->lastReviewDate_parser_)
      this->lastReviewDate_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->topic_parser_)
      this->topic_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->editor_parser_)
      this->editor_parser_->_reset ();

    if (this->reviewer_parser_)
      this->reviewer_parser_->_reset ();

    if (this->endorser_parser_)
      this->endorser_parser_->_reset ();

    if (this->relatedArtifact_parser_)
      this->relatedArtifact_parser_->_reset ();

    if (this->library_parser_)
      this->library_parser_->_reset ();

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->profile_parser_)
      this->profile_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->doNotPerform_parser_)
      this->doNotPerform_parser_->_reset ();

    if (this->timingTiming_parser_)
      this->timingTiming_parser_->_reset ();

    if (this->timingDateTime_parser_)
      this->timingDateTime_parser_->_reset ();

    if (this->timingAge_parser_)
      this->timingAge_parser_->_reset ();

    if (this->timingPeriod_parser_)
      this->timingPeriod_parser_->_reset ();

    if (this->timingRange_parser_)
      this->timingRange_parser_->_reset ();

    if (this->timingDuration_parser_)
      this->timingDuration_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->productReference_parser_)
      this->productReference_parser_->_reset ();

    if (this->productCodeableConcept_parser_)
      this->productCodeableConcept_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->dosage_parser_)
      this->dosage_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->specimenRequirement_parser_)
      this->specimenRequirement_parser_->_reset ();

    if (this->observationRequirement_parser_)
      this->observationRequirement_parser_->_reset ();

    if (this->observationResultRequirement_parser_)
      this->observationResultRequirement_parser_->_reset ();

    if (this->transform_parser_)
      this->transform_parser_->_reset ();

    if (this->dynamicValue_parser_)
      this->dynamicValue_parser_->_reset ();

    this->resetting_ = false;
  }

  // ActivityDefinition_Participant_pskel
  //

  void ActivityDefinition_Participant_pskel::
  type ()
  {
    if (this->ActivityDefinition_Participant_impl_)
      this->ActivityDefinition_Participant_impl_->type ();
  }

  void ActivityDefinition_Participant_pskel::
  role ()
  {
    if (this->ActivityDefinition_Participant_impl_)
      this->ActivityDefinition_Participant_impl_->role ();
  }

  void ActivityDefinition_Participant_pskel::
  post_ActivityDefinition_Participant ()
  {
    if (this->ActivityDefinition_Participant_impl_)
      this->ActivityDefinition_Participant_impl_->post_ActivityDefinition_Participant ();
    else
      post_BackboneElement ();
  }

  void ActivityDefinition_Participant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    this->resetting_ = false;
  }

  // ActivityDefinition_DynamicValue_pskel
  //

  void ActivityDefinition_DynamicValue_pskel::
  path ()
  {
    if (this->ActivityDefinition_DynamicValue_impl_)
      this->ActivityDefinition_DynamicValue_impl_->path ();
  }

  void ActivityDefinition_DynamicValue_pskel::
  expression ()
  {
    if (this->ActivityDefinition_DynamicValue_impl_)
      this->ActivityDefinition_DynamicValue_impl_->expression ();
  }

  void ActivityDefinition_DynamicValue_pskel::
  post_ActivityDefinition_DynamicValue ()
  {
    if (this->ActivityDefinition_DynamicValue_impl_)
      this->ActivityDefinition_DynamicValue_impl_->post_ActivityDefinition_DynamicValue ();
    else
      post_BackboneElement ();
  }

  void ActivityDefinition_DynamicValue_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->path_parser_)
      this->path_parser_->_reset ();

    if (this->expression_parser_)
      this->expression_parser_->_reset ();

    this->resetting_ = false;
  }

  // ActionParticipantType_list_pskel
  //

  void ActionParticipantType_list_pskel::
  post_ActionParticipantType_list ()
  {
    if (this->ActionParticipantType_list_impl_)
      this->ActionParticipantType_list_impl_->post_ActionParticipantType_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionParticipantType_list_pskel::_xsde_ActionParticipantType_list_pskel_enums_[4UL] = 
  {
    "device",
    "patient",
    "practitioner",
    "related-person"
  };

  // ActionParticipantType_pskel
  //

  void ActionParticipantType_pskel::
  value ()
  {
    if (this->ActionParticipantType_impl_)
      this->ActionParticipantType_impl_->value ();
  }

  void ActionParticipantType_pskel::
  post_ActionParticipantType ()
  {
    if (this->ActionParticipantType_impl_)
      this->ActionParticipantType_impl_->post_ActionParticipantType ();
    else
      post_Element ();
  }

  void ActionParticipantType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // RequestIntent_list_pskel
  //

  void RequestIntent_list_pskel::
  post_RequestIntent_list ()
  {
    if (this->RequestIntent_list_impl_)
      this->RequestIntent_list_impl_->post_RequestIntent_list ();
    else
      post_code_primitive ();
  }

  const char* const RequestIntent_list_pskel::_xsde_RequestIntent_list_pskel_enums_[9UL] = 
  {
    "directive",
    "filler-order",
    "instance-order",
    "option",
    "order",
    "original-order",
    "plan",
    "proposal",
    "reflex-order"
  };

  // RequestIntent_pskel
  //

  void RequestIntent_pskel::
  value ()
  {
    if (this->RequestIntent_impl_)
      this->RequestIntent_impl_->value ();
  }

  void RequestIntent_pskel::
  post_RequestIntent ()
  {
    if (this->RequestIntent_impl_)
      this->RequestIntent_impl_->post_RequestIntent ();
    else
      post_Element ();
  }

  void RequestIntent_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // RequestResourceType_list_pskel
  //

  void RequestResourceType_list_pskel::
  post_RequestResourceType_list ()
  {
    if (this->RequestResourceType_list_impl_)
      this->RequestResourceType_list_impl_->post_RequestResourceType_list ();
    else
      post_code_primitive ();
  }

  const char* const RequestResourceType_list_pskel::_xsde_RequestResourceType_list_pskel_enums_[15UL] = 
  {
    "Appointment",
    "AppointmentResponse",
    "CarePlan",
    "Claim",
    "CommunicationRequest",
    "Contract",
    "DeviceRequest",
    "EnrollmentRequest",
    "ImmunizationRecommendation",
    "MedicationRequest",
    "NutritionOrder",
    "ServiceRequest",
    "SupplyRequest",
    "Task",
    "VisionPrescription"
  };

  // RequestResourceType_pskel
  //

  void RequestResourceType_pskel::
  value ()
  {
    if (this->RequestResourceType_impl_)
      this->RequestResourceType_impl_->value ();
  }

  void RequestResourceType_pskel::
  post_RequestResourceType ()
  {
    if (this->RequestResourceType_impl_)
      this->RequestResourceType_impl_->post_RequestResourceType ();
    else
      post_Element ();
  }

  void RequestResourceType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // RequestPriority_list_pskel
  //

  void RequestPriority_list_pskel::
  post_RequestPriority_list ()
  {
    if (this->RequestPriority_list_impl_)
      this->RequestPriority_list_impl_->post_RequestPriority_list ();
    else
      post_code_primitive ();
  }

  const char* const RequestPriority_list_pskel::_xsde_RequestPriority_list_pskel_enums_[4UL] = 
  {
    "asap",
    "routine",
    "stat",
    "urgent"
  };

  // RequestPriority_pskel
  //

  void RequestPriority_pskel::
  value ()
  {
    if (this->RequestPriority_impl_)
      this->RequestPriority_impl_->value ();
  }

  void RequestPriority_pskel::
  post_RequestPriority ()
  {
    if (this->RequestPriority_impl_)
      this->RequestPriority_impl_->post_RequestPriority ();
    else
      post_Element ();
  }

  void RequestPriority_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ActivityDefinition_pskel.
  //
  bool ActivityDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "subtitle" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ActivityDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ActivityDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ActivityDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ActivityDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ActivityDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "subtitle" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subtitle_parser_)
            {
              this->subtitle_parser_->pre ();
              ctx.nested_parser (this->subtitle_parser_);
            }
          }
          else
          {
            if (this->subtitle_parser_ != 0)
            {
              this->subtitle_parser_->post_string ();
              this->subtitle ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "subjectCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectCodeableConcept_parser_)
            {
              this->subjectCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->subjectCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->subjectCodeableConcept_parser_ != 0)
            {
              this->subjectCodeableConcept_parser_->post_CodeableConcept ();
              this->subjectCodeableConcept ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "subjectReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectReference_parser_)
            {
              this->subjectReference_parser_->pre ();
              ctx.nested_parser (this->subjectReference_parser_);
            }
          }
          else
          {
            if (this->subjectReference_parser_ != 0)
            {
              this->subjectReference_parser_->post_Reference ();
              this->subjectReference ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "usage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usage_parser_)
            {
              this->usage_parser_->pre ();
              ctx.nested_parser (this->usage_parser_);
            }
          }
          else
          {
            if (this->usage_parser_ != 0)
            {
              this->usage_parser_->post_string ();
              this->usage ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "approvalDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->approvalDate_parser_)
            {
              this->approvalDate_parser_->pre ();
              ctx.nested_parser (this->approvalDate_parser_);
            }
          }
          else
          {
            if (this->approvalDate_parser_ != 0)
            {
              this->approvalDate_parser_->post_date ();
              this->approvalDate ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "lastReviewDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastReviewDate_parser_)
            {
              this->lastReviewDate_parser_->pre ();
              ctx.nested_parser (this->lastReviewDate_parser_);
            }
          }
          else
          {
            if (this->lastReviewDate_parser_ != 0)
            {
              this->lastReviewDate_parser_->post_date ();
              this->lastReviewDate ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "topic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topic_parser_)
            {
              this->topic_parser_->pre ();
              ctx.nested_parser (this->topic_parser_);
            }
          }
          else
          {
            if (this->topic_parser_ != 0)
            {
              this->topic_parser_->post_CodeableConcept ();
              this->topic ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_ContactDetail ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "editor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->editor_parser_)
            {
              this->editor_parser_->pre ();
              ctx.nested_parser (this->editor_parser_);
            }
          }
          else
          {
            if (this->editor_parser_ != 0)
            {
              this->editor_parser_->post_ContactDetail ();
              this->editor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "reviewer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reviewer_parser_)
            {
              this->reviewer_parser_->pre ();
              ctx.nested_parser (this->reviewer_parser_);
            }
          }
          else
          {
            if (this->reviewer_parser_ != 0)
            {
              this->reviewer_parser_->post_ContactDetail ();
              this->reviewer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "endorser" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endorser_parser_)
            {
              this->endorser_parser_->pre ();
              ctx.nested_parser (this->endorser_parser_);
            }
          }
          else
          {
            if (this->endorser_parser_ != 0)
            {
              this->endorser_parser_->post_ContactDetail ();
              this->endorser ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "relatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatedArtifact_parser_)
            {
              this->relatedArtifact_parser_->pre ();
              ctx.nested_parser (this->relatedArtifact_parser_);
            }
          }
          else
          {
            if (this->relatedArtifact_parser_ != 0)
            {
              this->relatedArtifact_parser_->post_RelatedArtifact ();
              this->relatedArtifact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "library" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->library_parser_)
            {
              this->library_parser_->pre ();
              ctx.nested_parser (this->library_parser_);
            }
          }
          else
          {
            if (this->library_parser_ != 0)
            {
              this->library_parser_->post_canonical ();
              this->library ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_RequestResourceType ();
              this->kind ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "profile" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->profile_parser_)
            {
              this->profile_parser_->pre ();
              ctx.nested_parser (this->profile_parser_);
            }
          }
          else
          {
            if (this->profile_parser_ != 0)
            {
              this->profile_parser_->post_canonical ();
              this->profile ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 32UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_RequestIntent ();
              this->intent ();
            }

            count = 0;
            state = 33UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 34UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 34UL;
          // Fall through.
        }
      }
      case 34UL:
      {
        if (n == "doNotPerform" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doNotPerform_parser_)
            {
              this->doNotPerform_parser_->pre ();
              ctx.nested_parser (this->doNotPerform_parser_);
            }
          }
          else
          {
            if (this->doNotPerform_parser_ != 0)
            {
              this->doNotPerform_parser_->post_boolean ();
              this->doNotPerform ();
            }

            count = 0;
            state = 35UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 35UL;
          // Fall through.
        }
      }
      case 35UL:
      {
        if (n == "timingTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingTiming_parser_)
            {
              this->timingTiming_parser_->pre ();
              ctx.nested_parser (this->timingTiming_parser_);
            }
          }
          else
          {
            if (this->timingTiming_parser_ != 0)
            {
              this->timingTiming_parser_->post_Timing ();
              this->timingTiming ();
            }

            count = 0;
            state = 36UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 36UL;
          // Fall through.
        }
      }
      case 36UL:
      {
        if (n == "timingDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingDateTime_parser_)
            {
              this->timingDateTime_parser_->pre ();
              ctx.nested_parser (this->timingDateTime_parser_);
            }
          }
          else
          {
            if (this->timingDateTime_parser_ != 0)
            {
              this->timingDateTime_parser_->post_dateTime ();
              this->timingDateTime ();
            }

            count = 0;
            state = 37UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 37UL;
          // Fall through.
        }
      }
      case 37UL:
      {
        if (n == "timingAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingAge_parser_)
            {
              this->timingAge_parser_->pre ();
              ctx.nested_parser (this->timingAge_parser_);
            }
          }
          else
          {
            if (this->timingAge_parser_ != 0)
            {
              this->timingAge_parser_->post_Age ();
              this->timingAge ();
            }

            count = 0;
            state = 38UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 38UL;
          // Fall through.
        }
      }
      case 38UL:
      {
        if (n == "timingPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingPeriod_parser_)
            {
              this->timingPeriod_parser_->pre ();
              ctx.nested_parser (this->timingPeriod_parser_);
            }
          }
          else
          {
            if (this->timingPeriod_parser_ != 0)
            {
              this->timingPeriod_parser_->post_Period ();
              this->timingPeriod ();
            }

            count = 0;
            state = 39UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 39UL;
          // Fall through.
        }
      }
      case 39UL:
      {
        if (n == "timingRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingRange_parser_)
            {
              this->timingRange_parser_->pre ();
              ctx.nested_parser (this->timingRange_parser_);
            }
          }
          else
          {
            if (this->timingRange_parser_ != 0)
            {
              this->timingRange_parser_->post_Range ();
              this->timingRange ();
            }

            count = 0;
            state = 40UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 40UL;
          // Fall through.
        }
      }
      case 40UL:
      {
        if (n == "timingDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingDuration_parser_)
            {
              this->timingDuration_parser_->pre ();
              ctx.nested_parser (this->timingDuration_parser_);
            }
          }
          else
          {
            if (this->timingDuration_parser_ != 0)
            {
              this->timingDuration_parser_->post_Duration ();
              this->timingDuration ();
            }

            count = 0;
            state = 41UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 41UL;
          // Fall through.
        }
      }
      case 41UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 42UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 42UL;
          // Fall through.
        }
      }
      case 42UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_ActivityDefinition_Participant ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 43UL;
          // Fall through.
        }
      }
      case 43UL:
      {
        if (n == "productReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productReference_parser_)
            {
              this->productReference_parser_->pre ();
              ctx.nested_parser (this->productReference_parser_);
            }
          }
          else
          {
            if (this->productReference_parser_ != 0)
            {
              this->productReference_parser_->post_Reference ();
              this->productReference ();
            }

            count = 0;
            state = 44UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 44UL;
          // Fall through.
        }
      }
      case 44UL:
      {
        if (n == "productCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productCodeableConcept_parser_)
            {
              this->productCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->productCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->productCodeableConcept_parser_ != 0)
            {
              this->productCodeableConcept_parser_->post_CodeableConcept ();
              this->productCodeableConcept ();
            }

            count = 0;
            state = 45UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 45UL;
          // Fall through.
        }
      }
      case 45UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 46UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 46UL;
          // Fall through.
        }
      }
      case 46UL:
      {
        if (n == "dosage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dosage_parser_)
            {
              this->dosage_parser_->pre ();
              ctx.nested_parser (this->dosage_parser_);
            }
          }
          else
          {
            if (this->dosage_parser_ != 0)
            {
              this->dosage_parser_->post_Dosage ();
              this->dosage ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 47UL;
          // Fall through.
        }
      }
      case 47UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 48UL;
          // Fall through.
        }
      }
      case 48UL:
      {
        if (n == "specimenRequirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specimenRequirement_parser_)
            {
              this->specimenRequirement_parser_->pre ();
              ctx.nested_parser (this->specimenRequirement_parser_);
            }
          }
          else
          {
            if (this->specimenRequirement_parser_ != 0)
            {
              this->specimenRequirement_parser_->post_Reference ();
              this->specimenRequirement ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 49UL;
          // Fall through.
        }
      }
      case 49UL:
      {
        if (n == "observationRequirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->observationRequirement_parser_)
            {
              this->observationRequirement_parser_->pre ();
              ctx.nested_parser (this->observationRequirement_parser_);
            }
          }
          else
          {
            if (this->observationRequirement_parser_ != 0)
            {
              this->observationRequirement_parser_->post_Reference ();
              this->observationRequirement ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 50UL;
          // Fall through.
        }
      }
      case 50UL:
      {
        if (n == "observationResultRequirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->observationResultRequirement_parser_)
            {
              this->observationResultRequirement_parser_->pre ();
              ctx.nested_parser (this->observationResultRequirement_parser_);
            }
          }
          else
          {
            if (this->observationResultRequirement_parser_ != 0)
            {
              this->observationResultRequirement_parser_->post_Reference ();
              this->observationResultRequirement ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 51UL;
          // Fall through.
        }
      }
      case 51UL:
      {
        if (n == "transform" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->transform_parser_)
            {
              this->transform_parser_->pre ();
              ctx.nested_parser (this->transform_parser_);
            }
          }
          else
          {
            if (this->transform_parser_ != 0)
            {
              this->transform_parser_->post_canonical ();
              this->transform ();
            }

            count = 0;
            state = 52UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 52UL;
          // Fall through.
        }
      }
      case 52UL:
      {
        if (n == "dynamicValue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dynamicValue_parser_)
            {
              this->dynamicValue_parser_->pre ();
              ctx.nested_parser (this->dynamicValue_parser_);
            }
          }
          else
          {
            if (this->dynamicValue_parser_ != 0)
            {
              this->dynamicValue_parser_->post_ActivityDefinition_DynamicValue ();
              this->dynamicValue ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ActivityDefinition_Participant_pskel.
  //
  bool ActivityDefinition_Participant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ActivityDefinition_Participant_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ActivityDefinition_Participant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ActivityDefinition_Participant_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ActivityDefinition_Participant_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ActivityDefinition_Participant_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_ActionParticipantType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ActivityDefinition_DynamicValue_pskel.
  //
  bool ActivityDefinition_DynamicValue_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "path" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ActivityDefinition_DynamicValue_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ActivityDefinition_DynamicValue_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ActivityDefinition_DynamicValue_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ActivityDefinition_DynamicValue_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ActivityDefinition_DynamicValue_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "path" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->path_parser_)
            {
              this->path_parser_->pre ();
              ctx.nested_parser (this->path_parser_);
            }
          }
          else
          {
            if (this->path_parser_ != 0)
            {
              this->path_parser_->post_string ();
              this->path ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "expression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expression_parser_)
            {
              this->expression_parser_->pre ();
              ctx.nested_parser (this->expression_parser_);
            }
          }
          else
          {
            if (this->expression_parser_ != 0)
            {
              this->expression_parser_->post_Expression ();
              this->expression ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ActionParticipantType_pskel.
  //
  bool ActionParticipantType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionParticipantType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for RequestIntent_pskel.
  //
  bool RequestIntent_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_RequestIntent_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for RequestResourceType_pskel.
  //
  bool RequestResourceType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_RequestResourceType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for RequestPriority_pskel.
  //
  bool RequestPriority_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_RequestPriority_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

