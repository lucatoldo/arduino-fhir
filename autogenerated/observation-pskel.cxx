// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "observation-pskel.hxx"

namespace fhir
{
  // Observation_pskel
  //

  void Observation_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Observation_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void Observation_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void Observation_pskel::
  status_parser (::fhir::ObservationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Observation_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void Observation_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Observation_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Observation_pskel::
  focus_parser (::fhir::Reference_pskel& p)
  {
    this->focus_parser_ = &p;
  }

  void Observation_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void Observation_pskel::
  effectiveDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->effectiveDateTime_parser_ = &p;
  }

  void Observation_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void Observation_pskel::
  effectiveTiming_parser (::fhir::Timing_pskel& p)
  {
    this->effectiveTiming_parser_ = &p;
  }

  void Observation_pskel::
  effectiveInstant_parser (::fhir::instant_pskel& p)
  {
    this->effectiveInstant_parser_ = &p;
  }

  void Observation_pskel::
  issued_parser (::fhir::instant_pskel& p)
  {
    this->issued_parser_ = &p;
  }

  void Observation_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void Observation_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Observation_pskel::
  valueCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCodeableConcept_parser_ = &p;
  }

  void Observation_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void Observation_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void Observation_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void Observation_pskel::
  valueRange_parser (::fhir::Range_pskel& p)
  {
    this->valueRange_parser_ = &p;
  }

  void Observation_pskel::
  valueRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->valueRatio_parser_ = &p;
  }

  void Observation_pskel::
  valueSampledData_parser (::fhir::SampledData_pskel& p)
  {
    this->valueSampledData_parser_ = &p;
  }

  void Observation_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void Observation_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void Observation_pskel::
  valuePeriod_parser (::fhir::Period_pskel& p)
  {
    this->valuePeriod_parser_ = &p;
  }

  void Observation_pskel::
  dataAbsentReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->dataAbsentReason_parser_ = &p;
  }

  void Observation_pskel::
  interpretation_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->interpretation_parser_ = &p;
  }

  void Observation_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Observation_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void Observation_pskel::
  method_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->method_parser_ = &p;
  }

  void Observation_pskel::
  specimen_parser (::fhir::Reference_pskel& p)
  {
    this->specimen_parser_ = &p;
  }

  void Observation_pskel::
  device_parser (::fhir::Reference_pskel& p)
  {
    this->device_parser_ = &p;
  }

  void Observation_pskel::
  referenceRange_parser (::fhir::Observation_ReferenceRange_pskel& p)
  {
    this->referenceRange_parser_ = &p;
  }

  void Observation_pskel::
  hasMember_parser (::fhir::Reference_pskel& p)
  {
    this->hasMember_parser_ = &p;
  }

  void Observation_pskel::
  derivedFrom_parser (::fhir::Reference_pskel& p)
  {
    this->derivedFrom_parser_ = &p;
  }

  void Observation_pskel::
  component_parser (::fhir::Observation_Component_pskel& p)
  {
    this->component_parser_ = &p;
  }

  void Observation_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& partOf,
           ::fhir::ObservationStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& focus,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& effectiveDateTime,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::Timing_pskel& effectiveTiming,
           ::fhir::instant_pskel& effectiveInstant,
           ::fhir::instant_pskel& issued,
           ::fhir::Reference_pskel& performer,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::CodeableConcept_pskel& valueCodeableConcept,
           ::fhir::string_pskel& valueString,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::Range_pskel& valueRange,
           ::fhir::Ratio_pskel& valueRatio,
           ::fhir::SampledData_pskel& valueSampledData,
           ::fhir::time_pskel& valueTime,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::Period_pskel& valuePeriod,
           ::fhir::CodeableConcept_pskel& dataAbsentReason,
           ::fhir::CodeableConcept_pskel& interpretation,
           ::fhir::Annotation_pskel& note,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::CodeableConcept_pskel& method,
           ::fhir::Reference_pskel& specimen,
           ::fhir::Reference_pskel& device,
           ::fhir::Observation_ReferenceRange_pskel& referenceRange,
           ::fhir::Reference_pskel& hasMember,
           ::fhir::Reference_pskel& derivedFrom,
           ::fhir::Observation_Component_pskel& component)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->basedOn_parser_ = &basedOn;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->category_parser_ = &category;
    this->code_parser_ = &code;
    this->subject_parser_ = &subject;
    this->focus_parser_ = &focus;
    this->encounter_parser_ = &encounter;
    this->effectiveDateTime_parser_ = &effectiveDateTime;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->effectiveTiming_parser_ = &effectiveTiming;
    this->effectiveInstant_parser_ = &effectiveInstant;
    this->issued_parser_ = &issued;
    this->performer_parser_ = &performer;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueCodeableConcept_parser_ = &valueCodeableConcept;
    this->valueString_parser_ = &valueString;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueInteger_parser_ = &valueInteger;
    this->valueRange_parser_ = &valueRange;
    this->valueRatio_parser_ = &valueRatio;
    this->valueSampledData_parser_ = &valueSampledData;
    this->valueTime_parser_ = &valueTime;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valuePeriod_parser_ = &valuePeriod;
    this->dataAbsentReason_parser_ = &dataAbsentReason;
    this->interpretation_parser_ = &interpretation;
    this->note_parser_ = &note;
    this->bodySite_parser_ = &bodySite;
    this->method_parser_ = &method;
    this->specimen_parser_ = &specimen;
    this->device_parser_ = &device;
    this->referenceRange_parser_ = &referenceRange;
    this->hasMember_parser_ = &hasMember;
    this->derivedFrom_parser_ = &derivedFrom;
    this->component_parser_ = &component;
  }

  Observation_pskel::
  Observation_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Observation_impl_ (0),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    focus_parser_ (0),
    encounter_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    effectiveTiming_parser_ (0),
    effectiveInstant_parser_ (0),
    issued_parser_ (0),
    performer_parser_ (0),
    valueQuantity_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueString_parser_ (0),
    valueBoolean_parser_ (0),
    valueInteger_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueSampledData_parser_ (0),
    valueTime_parser_ (0),
    valueDateTime_parser_ (0),
    valuePeriod_parser_ (0),
    dataAbsentReason_parser_ (0),
    interpretation_parser_ (0),
    note_parser_ (0),
    bodySite_parser_ (0),
    method_parser_ (0),
    specimen_parser_ (0),
    device_parser_ (0),
    referenceRange_parser_ (0),
    hasMember_parser_ (0),
    derivedFrom_parser_ (0),
    component_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Observation_pskel::
  Observation_pskel (Observation_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Observation_impl_ (impl),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    focus_parser_ (0),
    encounter_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    effectiveTiming_parser_ (0),
    effectiveInstant_parser_ (0),
    issued_parser_ (0),
    performer_parser_ (0),
    valueQuantity_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueString_parser_ (0),
    valueBoolean_parser_ (0),
    valueInteger_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueSampledData_parser_ (0),
    valueTime_parser_ (0),
    valueDateTime_parser_ (0),
    valuePeriod_parser_ (0),
    dataAbsentReason_parser_ (0),
    interpretation_parser_ (0),
    note_parser_ (0),
    bodySite_parser_ (0),
    method_parser_ (0),
    specimen_parser_ (0),
    device_parser_ (0),
    referenceRange_parser_ (0),
    hasMember_parser_ (0),
    derivedFrom_parser_ (0),
    component_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Observation_ReferenceRange_pskel
  //

  void Observation_ReferenceRange_pskel::
  low_parser (::fhir::Quantity_pskel& p)
  {
    this->low_parser_ = &p;
  }

  void Observation_ReferenceRange_pskel::
  high_parser (::fhir::Quantity_pskel& p)
  {
    this->high_parser_ = &p;
  }

  void Observation_ReferenceRange_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Observation_ReferenceRange_pskel::
  appliesTo_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->appliesTo_parser_ = &p;
  }

  void Observation_ReferenceRange_pskel::
  age_parser (::fhir::Range_pskel& p)
  {
    this->age_parser_ = &p;
  }

  void Observation_ReferenceRange_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void Observation_ReferenceRange_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Quantity_pskel& low,
           ::fhir::Quantity_pskel& high,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& appliesTo,
           ::fhir::Range_pskel& age,
           ::fhir::string_pskel& text)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->low_parser_ = &low;
    this->high_parser_ = &high;
    this->type_parser_ = &type;
    this->appliesTo_parser_ = &appliesTo;
    this->age_parser_ = &age;
    this->text_parser_ = &text;
  }

  Observation_ReferenceRange_pskel::
  Observation_ReferenceRange_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Observation_ReferenceRange_impl_ (0),
    low_parser_ (0),
    high_parser_ (0),
    type_parser_ (0),
    appliesTo_parser_ (0),
    age_parser_ (0),
    text_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Observation_ReferenceRange_pskel::
  Observation_ReferenceRange_pskel (Observation_ReferenceRange_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Observation_ReferenceRange_impl_ (impl),
    low_parser_ (0),
    high_parser_ (0),
    type_parser_ (0),
    appliesTo_parser_ (0),
    age_parser_ (0),
    text_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Observation_Component_pskel
  //

  void Observation_Component_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCodeableConcept_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueRange_parser (::fhir::Range_pskel& p)
  {
    this->valueRange_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->valueRatio_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueSampledData_parser (::fhir::SampledData_pskel& p)
  {
    this->valueSampledData_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void Observation_Component_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void Observation_Component_pskel::
  valuePeriod_parser (::fhir::Period_pskel& p)
  {
    this->valuePeriod_parser_ = &p;
  }

  void Observation_Component_pskel::
  dataAbsentReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->dataAbsentReason_parser_ = &p;
  }

  void Observation_Component_pskel::
  interpretation_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->interpretation_parser_ = &p;
  }

  void Observation_Component_pskel::
  referenceRange_parser (::fhir::Observation_ReferenceRange_pskel& p)
  {
    this->referenceRange_parser_ = &p;
  }

  void Observation_Component_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::CodeableConcept_pskel& valueCodeableConcept,
           ::fhir::string_pskel& valueString,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::Range_pskel& valueRange,
           ::fhir::Ratio_pskel& valueRatio,
           ::fhir::SampledData_pskel& valueSampledData,
           ::fhir::time_pskel& valueTime,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::Period_pskel& valuePeriod,
           ::fhir::CodeableConcept_pskel& dataAbsentReason,
           ::fhir::CodeableConcept_pskel& interpretation,
           ::fhir::Observation_ReferenceRange_pskel& referenceRange)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueCodeableConcept_parser_ = &valueCodeableConcept;
    this->valueString_parser_ = &valueString;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueInteger_parser_ = &valueInteger;
    this->valueRange_parser_ = &valueRange;
    this->valueRatio_parser_ = &valueRatio;
    this->valueSampledData_parser_ = &valueSampledData;
    this->valueTime_parser_ = &valueTime;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valuePeriod_parser_ = &valuePeriod;
    this->dataAbsentReason_parser_ = &dataAbsentReason;
    this->interpretation_parser_ = &interpretation;
    this->referenceRange_parser_ = &referenceRange;
  }

  Observation_Component_pskel::
  Observation_Component_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Observation_Component_impl_ (0),
    code_parser_ (0),
    valueQuantity_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueString_parser_ (0),
    valueBoolean_parser_ (0),
    valueInteger_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueSampledData_parser_ (0),
    valueTime_parser_ (0),
    valueDateTime_parser_ (0),
    valuePeriod_parser_ (0),
    dataAbsentReason_parser_ (0),
    interpretation_parser_ (0),
    referenceRange_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Observation_Component_pskel::
  Observation_Component_pskel (Observation_Component_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Observation_Component_impl_ (impl),
    code_parser_ (0),
    valueQuantity_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueString_parser_ (0),
    valueBoolean_parser_ (0),
    valueInteger_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueSampledData_parser_ (0),
    valueTime_parser_ (0),
    valueDateTime_parser_ (0),
    valuePeriod_parser_ (0),
    dataAbsentReason_parser_ (0),
    interpretation_parser_ (0),
    referenceRange_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Observation_pskel
  //

  void Observation_pskel::
  identifier ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->identifier ();
  }

  void Observation_pskel::
  basedOn ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->basedOn ();
  }

  void Observation_pskel::
  partOf ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->partOf ();
  }

  void Observation_pskel::
  status ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->status ();
  }

  void Observation_pskel::
  category ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->category ();
  }

  void Observation_pskel::
  code ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->code ();
  }

  void Observation_pskel::
  subject ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->subject ();
  }

  void Observation_pskel::
  focus ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->focus ();
  }

  void Observation_pskel::
  encounter ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->encounter ();
  }

  void Observation_pskel::
  effectiveDateTime ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->effectiveDateTime ();
  }

  void Observation_pskel::
  effectivePeriod ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->effectivePeriod ();
  }

  void Observation_pskel::
  effectiveTiming ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->effectiveTiming ();
  }

  void Observation_pskel::
  effectiveInstant ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->effectiveInstant ();
  }

  void Observation_pskel::
  issued ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->issued ();
  }

  void Observation_pskel::
  performer ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->performer ();
  }

  void Observation_pskel::
  valueQuantity ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueQuantity ();
  }

  void Observation_pskel::
  valueCodeableConcept ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueCodeableConcept ();
  }

  void Observation_pskel::
  valueString ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueString ();
  }

  void Observation_pskel::
  valueBoolean ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueBoolean ();
  }

  void Observation_pskel::
  valueInteger ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueInteger ();
  }

  void Observation_pskel::
  valueRange ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueRange ();
  }

  void Observation_pskel::
  valueRatio ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueRatio ();
  }

  void Observation_pskel::
  valueSampledData ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueSampledData ();
  }

  void Observation_pskel::
  valueTime ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueTime ();
  }

  void Observation_pskel::
  valueDateTime ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valueDateTime ();
  }

  void Observation_pskel::
  valuePeriod ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->valuePeriod ();
  }

  void Observation_pskel::
  dataAbsentReason ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->dataAbsentReason ();
  }

  void Observation_pskel::
  interpretation ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->interpretation ();
  }

  void Observation_pskel::
  note ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->note ();
  }

  void Observation_pskel::
  bodySite ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->bodySite ();
  }

  void Observation_pskel::
  method ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->method ();
  }

  void Observation_pskel::
  specimen ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->specimen ();
  }

  void Observation_pskel::
  device ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->device ();
  }

  void Observation_pskel::
  referenceRange ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->referenceRange ();
  }

  void Observation_pskel::
  hasMember ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->hasMember ();
  }

  void Observation_pskel::
  derivedFrom ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->derivedFrom ();
  }

  void Observation_pskel::
  component ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->component ();
  }

  void Observation_pskel::
  post_Observation ()
  {
    if (this->Observation_impl_)
      this->Observation_impl_->post_Observation ();
    else
      post_DomainResource ();
  }

  void Observation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->focus_parser_)
      this->focus_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->effectiveDateTime_parser_)
      this->effectiveDateTime_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->effectiveTiming_parser_)
      this->effectiveTiming_parser_->_reset ();

    if (this->effectiveInstant_parser_)
      this->effectiveInstant_parser_->_reset ();

    if (this->issued_parser_)
      this->issued_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueCodeableConcept_parser_)
      this->valueCodeableConcept_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueRange_parser_)
      this->valueRange_parser_->_reset ();

    if (this->valueRatio_parser_)
      this->valueRatio_parser_->_reset ();

    if (this->valueSampledData_parser_)
      this->valueSampledData_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valuePeriod_parser_)
      this->valuePeriod_parser_->_reset ();

    if (this->dataAbsentReason_parser_)
      this->dataAbsentReason_parser_->_reset ();

    if (this->interpretation_parser_)
      this->interpretation_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->method_parser_)
      this->method_parser_->_reset ();

    if (this->specimen_parser_)
      this->specimen_parser_->_reset ();

    if (this->device_parser_)
      this->device_parser_->_reset ();

    if (this->referenceRange_parser_)
      this->referenceRange_parser_->_reset ();

    if (this->hasMember_parser_)
      this->hasMember_parser_->_reset ();

    if (this->derivedFrom_parser_)
      this->derivedFrom_parser_->_reset ();

    if (this->component_parser_)
      this->component_parser_->_reset ();

    this->resetting_ = false;
  }

  // Observation_ReferenceRange_pskel
  //

  void Observation_ReferenceRange_pskel::
  low ()
  {
    if (this->Observation_ReferenceRange_impl_)
      this->Observation_ReferenceRange_impl_->low ();
  }

  void Observation_ReferenceRange_pskel::
  high ()
  {
    if (this->Observation_ReferenceRange_impl_)
      this->Observation_ReferenceRange_impl_->high ();
  }

  void Observation_ReferenceRange_pskel::
  type ()
  {
    if (this->Observation_ReferenceRange_impl_)
      this->Observation_ReferenceRange_impl_->type ();
  }

  void Observation_ReferenceRange_pskel::
  appliesTo ()
  {
    if (this->Observation_ReferenceRange_impl_)
      this->Observation_ReferenceRange_impl_->appliesTo ();
  }

  void Observation_ReferenceRange_pskel::
  age ()
  {
    if (this->Observation_ReferenceRange_impl_)
      this->Observation_ReferenceRange_impl_->age ();
  }

  void Observation_ReferenceRange_pskel::
  text ()
  {
    if (this->Observation_ReferenceRange_impl_)
      this->Observation_ReferenceRange_impl_->text ();
  }

  void Observation_ReferenceRange_pskel::
  post_Observation_ReferenceRange ()
  {
    if (this->Observation_ReferenceRange_impl_)
      this->Observation_ReferenceRange_impl_->post_Observation_ReferenceRange ();
    else
      post_BackboneElement ();
  }

  void Observation_ReferenceRange_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->low_parser_)
      this->low_parser_->_reset ();

    if (this->high_parser_)
      this->high_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->appliesTo_parser_)
      this->appliesTo_parser_->_reset ();

    if (this->age_parser_)
      this->age_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    this->resetting_ = false;
  }

  // Observation_Component_pskel
  //

  void Observation_Component_pskel::
  code ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->code ();
  }

  void Observation_Component_pskel::
  valueQuantity ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueQuantity ();
  }

  void Observation_Component_pskel::
  valueCodeableConcept ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueCodeableConcept ();
  }

  void Observation_Component_pskel::
  valueString ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueString ();
  }

  void Observation_Component_pskel::
  valueBoolean ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueBoolean ();
  }

  void Observation_Component_pskel::
  valueInteger ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueInteger ();
  }

  void Observation_Component_pskel::
  valueRange ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueRange ();
  }

  void Observation_Component_pskel::
  valueRatio ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueRatio ();
  }

  void Observation_Component_pskel::
  valueSampledData ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueSampledData ();
  }

  void Observation_Component_pskel::
  valueTime ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueTime ();
  }

  void Observation_Component_pskel::
  valueDateTime ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valueDateTime ();
  }

  void Observation_Component_pskel::
  valuePeriod ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->valuePeriod ();
  }

  void Observation_Component_pskel::
  dataAbsentReason ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->dataAbsentReason ();
  }

  void Observation_Component_pskel::
  interpretation ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->interpretation ();
  }

  void Observation_Component_pskel::
  referenceRange ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->referenceRange ();
  }

  void Observation_Component_pskel::
  post_Observation_Component ()
  {
    if (this->Observation_Component_impl_)
      this->Observation_Component_impl_->post_Observation_Component ();
    else
      post_BackboneElement ();
  }

  void Observation_Component_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueCodeableConcept_parser_)
      this->valueCodeableConcept_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueRange_parser_)
      this->valueRange_parser_->_reset ();

    if (this->valueRatio_parser_)
      this->valueRatio_parser_->_reset ();

    if (this->valueSampledData_parser_)
      this->valueSampledData_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valuePeriod_parser_)
      this->valuePeriod_parser_->_reset ();

    if (this->dataAbsentReason_parser_)
      this->dataAbsentReason_parser_->_reset ();

    if (this->interpretation_parser_)
      this->interpretation_parser_->_reset ();

    if (this->referenceRange_parser_)
      this->referenceRange_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Observation_pskel.
  //
  bool Observation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Observation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Observation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Observation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Observation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Observation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ObservationStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "focus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focus_parser_)
            {
              this->focus_parser_->pre ();
              ctx.nested_parser (this->focus_parser_);
            }
          }
          else
          {
            if (this->focus_parser_ != 0)
            {
              this->focus_parser_->post_Reference ();
              this->focus ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "effectiveDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectiveDateTime_parser_)
            {
              this->effectiveDateTime_parser_->pre ();
              ctx.nested_parser (this->effectiveDateTime_parser_);
            }
          }
          else
          {
            if (this->effectiveDateTime_parser_ != 0)
            {
              this->effectiveDateTime_parser_->post_dateTime ();
              this->effectiveDateTime ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "effectiveTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectiveTiming_parser_)
            {
              this->effectiveTiming_parser_->pre ();
              ctx.nested_parser (this->effectiveTiming_parser_);
            }
          }
          else
          {
            if (this->effectiveTiming_parser_ != 0)
            {
              this->effectiveTiming_parser_->post_Timing ();
              this->effectiveTiming ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "effectiveInstant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectiveInstant_parser_)
            {
              this->effectiveInstant_parser_->pre ();
              ctx.nested_parser (this->effectiveInstant_parser_);
            }
          }
          else
          {
            if (this->effectiveInstant_parser_ != 0)
            {
              this->effectiveInstant_parser_->post_instant ();
              this->effectiveInstant ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "issued" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issued_parser_)
            {
              this->issued_parser_->pre ();
              ctx.nested_parser (this->issued_parser_);
            }
          }
          else
          {
            if (this->issued_parser_ != 0)
            {
              this->issued_parser_->post_instant ();
              this->issued ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "valueCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCodeableConcept_parser_)
            {
              this->valueCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->valueCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->valueCodeableConcept_parser_ != 0)
            {
              this->valueCodeableConcept_parser_->post_CodeableConcept ();
              this->valueCodeableConcept ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "valueRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRange_parser_)
            {
              this->valueRange_parser_->pre ();
              ctx.nested_parser (this->valueRange_parser_);
            }
          }
          else
          {
            if (this->valueRange_parser_ != 0)
            {
              this->valueRange_parser_->post_Range ();
              this->valueRange ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "valueRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRatio_parser_)
            {
              this->valueRatio_parser_->pre ();
              ctx.nested_parser (this->valueRatio_parser_);
            }
          }
          else
          {
            if (this->valueRatio_parser_ != 0)
            {
              this->valueRatio_parser_->post_Ratio ();
              this->valueRatio ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "valueSampledData" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSampledData_parser_)
            {
              this->valueSampledData_parser_->pre ();
              ctx.nested_parser (this->valueSampledData_parser_);
            }
          }
          else
          {
            if (this->valueSampledData_parser_ != 0)
            {
              this->valueSampledData_parser_->post_SampledData ();
              this->valueSampledData ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "valuePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valuePeriod_parser_)
            {
              this->valuePeriod_parser_->pre ();
              ctx.nested_parser (this->valuePeriod_parser_);
            }
          }
          else
          {
            if (this->valuePeriod_parser_ != 0)
            {
              this->valuePeriod_parser_->post_Period ();
              this->valuePeriod ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "dataAbsentReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dataAbsentReason_parser_)
            {
              this->dataAbsentReason_parser_->pre ();
              ctx.nested_parser (this->dataAbsentReason_parser_);
            }
          }
          else
          {
            if (this->dataAbsentReason_parser_ != 0)
            {
              this->dataAbsentReason_parser_->post_CodeableConcept ();
              this->dataAbsentReason ();
            }

            count = 0;
            state = 27UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "interpretation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->interpretation_parser_)
            {
              this->interpretation_parser_->pre ();
              ctx.nested_parser (this->interpretation_parser_);
            }
          }
          else
          {
            if (this->interpretation_parser_ != 0)
            {
              this->interpretation_parser_->post_CodeableConcept ();
              this->interpretation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "method" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->method_parser_)
            {
              this->method_parser_->pre ();
              ctx.nested_parser (this->method_parser_);
            }
          }
          else
          {
            if (this->method_parser_ != 0)
            {
              this->method_parser_->post_CodeableConcept ();
              this->method ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "specimen" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specimen_parser_)
            {
              this->specimen_parser_->pre ();
              ctx.nested_parser (this->specimen_parser_);
            }
          }
          else
          {
            if (this->specimen_parser_ != 0)
            {
              this->specimen_parser_->post_Reference ();
              this->specimen ();
            }

            count = 0;
            state = 32UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "device" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->device_parser_)
            {
              this->device_parser_->pre ();
              ctx.nested_parser (this->device_parser_);
            }
          }
          else
          {
            if (this->device_parser_ != 0)
            {
              this->device_parser_->post_Reference ();
              this->device ();
            }

            count = 0;
            state = 33UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "referenceRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referenceRange_parser_)
            {
              this->referenceRange_parser_->pre ();
              ctx.nested_parser (this->referenceRange_parser_);
            }
          }
          else
          {
            if (this->referenceRange_parser_ != 0)
            {
              this->referenceRange_parser_->post_Observation_ReferenceRange ();
              this->referenceRange ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 34UL;
          // Fall through.
        }
      }
      case 34UL:
      {
        if (n == "hasMember" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->hasMember_parser_)
            {
              this->hasMember_parser_->pre ();
              ctx.nested_parser (this->hasMember_parser_);
            }
          }
          else
          {
            if (this->hasMember_parser_ != 0)
            {
              this->hasMember_parser_->post_Reference ();
              this->hasMember ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 35UL;
          // Fall through.
        }
      }
      case 35UL:
      {
        if (n == "derivedFrom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->derivedFrom_parser_)
            {
              this->derivedFrom_parser_->pre ();
              ctx.nested_parser (this->derivedFrom_parser_);
            }
          }
          else
          {
            if (this->derivedFrom_parser_ != 0)
            {
              this->derivedFrom_parser_->post_Reference ();
              this->derivedFrom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 36UL;
          // Fall through.
        }
      }
      case 36UL:
      {
        if (n == "component" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->component_parser_)
            {
              this->component_parser_->pre ();
              ctx.nested_parser (this->component_parser_);
            }
          }
          else
          {
            if (this->component_parser_ != 0)
            {
              this->component_parser_->post_Observation_Component ();
              this->component ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Observation_ReferenceRange_pskel.
  //
  bool Observation_ReferenceRange_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "low" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "high" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "appliesTo" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "age" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Observation_ReferenceRange_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Observation_ReferenceRange_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Observation_ReferenceRange_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Observation_ReferenceRange_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Observation_ReferenceRange_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "low" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->low_parser_)
            {
              this->low_parser_->pre ();
              ctx.nested_parser (this->low_parser_);
            }
          }
          else
          {
            if (this->low_parser_ != 0)
            {
              this->low_parser_->post_Quantity ();
              this->low ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "high" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->high_parser_)
            {
              this->high_parser_->pre ();
              ctx.nested_parser (this->high_parser_);
            }
          }
          else
          {
            if (this->high_parser_ != 0)
            {
              this->high_parser_->post_Quantity ();
              this->high ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "appliesTo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->appliesTo_parser_)
            {
              this->appliesTo_parser_->pre ();
              ctx.nested_parser (this->appliesTo_parser_);
            }
          }
          else
          {
            if (this->appliesTo_parser_ != 0)
            {
              this->appliesTo_parser_->post_CodeableConcept ();
              this->appliesTo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "age" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->age_parser_)
            {
              this->age_parser_->pre ();
              ctx.nested_parser (this->age_parser_);
            }
          }
          else
          {
            if (this->age_parser_ != 0)
            {
              this->age_parser_->post_Range ();
              this->age ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Observation_Component_pskel.
  //
  bool Observation_Component_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Observation_Component_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Observation_Component_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Observation_Component_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Observation_Component_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Observation_Component_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCodeableConcept_parser_)
            {
              this->valueCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->valueCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->valueCodeableConcept_parser_ != 0)
            {
              this->valueCodeableConcept_parser_->post_CodeableConcept ();
              this->valueCodeableConcept ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRange_parser_)
            {
              this->valueRange_parser_->pre ();
              ctx.nested_parser (this->valueRange_parser_);
            }
          }
          else
          {
            if (this->valueRange_parser_ != 0)
            {
              this->valueRange_parser_->post_Range ();
              this->valueRange ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRatio_parser_)
            {
              this->valueRatio_parser_->pre ();
              ctx.nested_parser (this->valueRatio_parser_);
            }
          }
          else
          {
            if (this->valueRatio_parser_ != 0)
            {
              this->valueRatio_parser_->post_Ratio ();
              this->valueRatio ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "valueSampledData" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSampledData_parser_)
            {
              this->valueSampledData_parser_->pre ();
              ctx.nested_parser (this->valueSampledData_parser_);
            }
          }
          else
          {
            if (this->valueSampledData_parser_ != 0)
            {
              this->valueSampledData_parser_->post_SampledData ();
              this->valueSampledData ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "valuePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valuePeriod_parser_)
            {
              this->valuePeriod_parser_->pre ();
              ctx.nested_parser (this->valuePeriod_parser_);
            }
          }
          else
          {
            if (this->valuePeriod_parser_ != 0)
            {
              this->valuePeriod_parser_->post_Period ();
              this->valuePeriod ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "dataAbsentReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dataAbsentReason_parser_)
            {
              this->dataAbsentReason_parser_->pre ();
              ctx.nested_parser (this->dataAbsentReason_parser_);
            }
          }
          else
          {
            if (this->dataAbsentReason_parser_ != 0)
            {
              this->dataAbsentReason_parser_->post_CodeableConcept ();
              this->dataAbsentReason ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "interpretation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->interpretation_parser_)
            {
              this->interpretation_parser_->pre ();
              ctx.nested_parser (this->interpretation_parser_);
            }
          }
          else
          {
            if (this->interpretation_parser_ != 0)
            {
              this->interpretation_parser_->post_CodeableConcept ();
              this->interpretation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "referenceRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referenceRange_parser_)
            {
              this->referenceRange_parser_->pre ();
              ctx.nested_parser (this->referenceRange_parser_);
            }
          }
          else
          {
            if (this->referenceRange_parser_ != 0)
            {
              this->referenceRange_parser_->post_Observation_ReferenceRange ();
              this->referenceRange ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

