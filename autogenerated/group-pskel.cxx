// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "group-pskel.hxx"

namespace fhir
{
  // Group_pskel
  //

  void Group_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Group_pskel::
  active_parser (::fhir::boolean_pskel& p)
  {
    this->active_parser_ = &p;
  }

  void Group_pskel::
  type_parser (::fhir::GroupType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Group_pskel::
  actual_parser (::fhir::boolean_pskel& p)
  {
    this->actual_parser_ = &p;
  }

  void Group_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Group_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Group_pskel::
  quantity_parser (::fhir::unsignedInt_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void Group_pskel::
  managingEntity_parser (::fhir::Reference_pskel& p)
  {
    this->managingEntity_parser_ = &p;
  }

  void Group_pskel::
  characteristic_parser (::fhir::Group_Characteristic_pskel& p)
  {
    this->characteristic_parser_ = &p;
  }

  void Group_pskel::
  member_parser (::fhir::Group_Member_pskel& p)
  {
    this->member_parser_ = &p;
  }

  void Group_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::boolean_pskel& active,
           ::fhir::GroupType_pskel& type,
           ::fhir::boolean_pskel& actual,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::string_pskel& name,
           ::fhir::unsignedInt_pskel& quantity,
           ::fhir::Reference_pskel& managingEntity,
           ::fhir::Group_Characteristic_pskel& characteristic,
           ::fhir::Group_Member_pskel& member)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->active_parser_ = &active;
    this->type_parser_ = &type;
    this->actual_parser_ = &actual;
    this->code_parser_ = &code;
    this->name_parser_ = &name;
    this->quantity_parser_ = &quantity;
    this->managingEntity_parser_ = &managingEntity;
    this->characteristic_parser_ = &characteristic;
    this->member_parser_ = &member;
  }

  Group_pskel::
  Group_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Group_impl_ (0),
    identifier_parser_ (0),
    active_parser_ (0),
    type_parser_ (0),
    actual_parser_ (0),
    code_parser_ (0),
    name_parser_ (0),
    quantity_parser_ (0),
    managingEntity_parser_ (0),
    characteristic_parser_ (0),
    member_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Group_pskel::
  Group_pskel (Group_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Group_impl_ (impl),
    identifier_parser_ (0),
    active_parser_ (0),
    type_parser_ (0),
    actual_parser_ (0),
    code_parser_ (0),
    name_parser_ (0),
    quantity_parser_ (0),
    managingEntity_parser_ (0),
    characteristic_parser_ (0),
    member_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Group_Characteristic_pskel
  //

  void Group_Characteristic_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  valueCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCodeableConcept_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  valueRange_parser (::fhir::Range_pskel& p)
  {
    this->valueRange_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  exclude_parser (::fhir::boolean_pskel& p)
  {
    this->exclude_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Group_Characteristic_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& valueCodeableConcept,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Range_pskel& valueRange,
           ::fhir::Reference_pskel& valueReference,
           ::fhir::boolean_pskel& exclude,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->valueCodeableConcept_parser_ = &valueCodeableConcept;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueRange_parser_ = &valueRange;
    this->valueReference_parser_ = &valueReference;
    this->exclude_parser_ = &exclude;
    this->period_parser_ = &period;
  }

  Group_Characteristic_pskel::
  Group_Characteristic_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Group_Characteristic_impl_ (0),
    code_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueBoolean_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueReference_parser_ (0),
    exclude_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Group_Characteristic_pskel::
  Group_Characteristic_pskel (Group_Characteristic_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Group_Characteristic_impl_ (impl),
    code_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueBoolean_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueReference_parser_ (0),
    exclude_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Group_Member_pskel
  //

  void Group_Member_pskel::
  entity_parser (::fhir::Reference_pskel& p)
  {
    this->entity_parser_ = &p;
  }

  void Group_Member_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Group_Member_pskel::
  inactive_parser (::fhir::boolean_pskel& p)
  {
    this->inactive_parser_ = &p;
  }

  void Group_Member_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& entity,
           ::fhir::Period_pskel& period,
           ::fhir::boolean_pskel& inactive)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->entity_parser_ = &entity;
    this->period_parser_ = &period;
    this->inactive_parser_ = &inactive;
  }

  Group_Member_pskel::
  Group_Member_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Group_Member_impl_ (0),
    entity_parser_ (0),
    period_parser_ (0),
    inactive_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Group_Member_pskel::
  Group_Member_pskel (Group_Member_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Group_Member_impl_ (impl),
    entity_parser_ (0),
    period_parser_ (0),
    inactive_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GroupType_list_pskel
  //

  GroupType_list_pskel::
  GroupType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    GroupType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_GroupType_list_pskel_enums_, 6UL);
  }

  GroupType_list_pskel::
  GroupType_list_pskel (GroupType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    GroupType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_GroupType_list_pskel_enums_, 6UL);
  }

  // GroupType_pskel
  //

  void GroupType_pskel::
  value_parser (::fhir::GroupType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void GroupType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::GroupType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  GroupType_pskel::
  GroupType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    GroupType_impl_ (0),
    value_parser_ (0)
  {
  }

  GroupType_pskel::
  GroupType_pskel (GroupType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    GroupType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Group_pskel
  //

  void Group_pskel::
  identifier ()
  {
    if (this->Group_impl_)
      this->Group_impl_->identifier ();
  }

  void Group_pskel::
  active ()
  {
    if (this->Group_impl_)
      this->Group_impl_->active ();
  }

  void Group_pskel::
  type ()
  {
    if (this->Group_impl_)
      this->Group_impl_->type ();
  }

  void Group_pskel::
  actual ()
  {
    if (this->Group_impl_)
      this->Group_impl_->actual ();
  }

  void Group_pskel::
  code ()
  {
    if (this->Group_impl_)
      this->Group_impl_->code ();
  }

  void Group_pskel::
  name ()
  {
    if (this->Group_impl_)
      this->Group_impl_->name ();
  }

  void Group_pskel::
  quantity ()
  {
    if (this->Group_impl_)
      this->Group_impl_->quantity ();
  }

  void Group_pskel::
  managingEntity ()
  {
    if (this->Group_impl_)
      this->Group_impl_->managingEntity ();
  }

  void Group_pskel::
  characteristic ()
  {
    if (this->Group_impl_)
      this->Group_impl_->characteristic ();
  }

  void Group_pskel::
  member ()
  {
    if (this->Group_impl_)
      this->Group_impl_->member ();
  }

  void Group_pskel::
  post_Group ()
  {
    if (this->Group_impl_)
      this->Group_impl_->post_Group ();
    else
      post_DomainResource ();
  }

  void Group_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->active_parser_)
      this->active_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->actual_parser_)
      this->actual_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->managingEntity_parser_)
      this->managingEntity_parser_->_reset ();

    if (this->characteristic_parser_)
      this->characteristic_parser_->_reset ();

    if (this->member_parser_)
      this->member_parser_->_reset ();

    this->resetting_ = false;
  }

  // Group_Characteristic_pskel
  //

  void Group_Characteristic_pskel::
  code ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->code ();
  }

  void Group_Characteristic_pskel::
  valueCodeableConcept ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->valueCodeableConcept ();
  }

  void Group_Characteristic_pskel::
  valueBoolean ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->valueBoolean ();
  }

  void Group_Characteristic_pskel::
  valueQuantity ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->valueQuantity ();
  }

  void Group_Characteristic_pskel::
  valueRange ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->valueRange ();
  }

  void Group_Characteristic_pskel::
  valueReference ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->valueReference ();
  }

  void Group_Characteristic_pskel::
  exclude ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->exclude ();
  }

  void Group_Characteristic_pskel::
  period ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->period ();
  }

  void Group_Characteristic_pskel::
  post_Group_Characteristic ()
  {
    if (this->Group_Characteristic_impl_)
      this->Group_Characteristic_impl_->post_Group_Characteristic ();
    else
      post_BackboneElement ();
  }

  void Group_Characteristic_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->valueCodeableConcept_parser_)
      this->valueCodeableConcept_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueRange_parser_)
      this->valueRange_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    if (this->exclude_parser_)
      this->exclude_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // Group_Member_pskel
  //

  void Group_Member_pskel::
  entity ()
  {
    if (this->Group_Member_impl_)
      this->Group_Member_impl_->entity ();
  }

  void Group_Member_pskel::
  period ()
  {
    if (this->Group_Member_impl_)
      this->Group_Member_impl_->period ();
  }

  void Group_Member_pskel::
  inactive ()
  {
    if (this->Group_Member_impl_)
      this->Group_Member_impl_->inactive ();
  }

  void Group_Member_pskel::
  post_Group_Member ()
  {
    if (this->Group_Member_impl_)
      this->Group_Member_impl_->post_Group_Member ();
    else
      post_BackboneElement ();
  }

  void Group_Member_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->entity_parser_)
      this->entity_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->inactive_parser_)
      this->inactive_parser_->_reset ();

    this->resetting_ = false;
  }

  // GroupType_list_pskel
  //

  void GroupType_list_pskel::
  post_GroupType_list ()
  {
    if (this->GroupType_list_impl_)
      this->GroupType_list_impl_->post_GroupType_list ();
    else
      post_code_primitive ();
  }

  const char* const GroupType_list_pskel::_xsde_GroupType_list_pskel_enums_[6UL] = 
  {
    "animal",
    "device",
    "medication",
    "person",
    "practitioner",
    "substance"
  };

  // GroupType_pskel
  //

  void GroupType_pskel::
  value ()
  {
    if (this->GroupType_impl_)
      this->GroupType_impl_->value ();
  }

  void GroupType_pskel::
  post_GroupType ()
  {
    if (this->GroupType_impl_)
      this->GroupType_impl_->post_GroupType ();
    else
      post_Element ();
  }

  void GroupType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Group_pskel.
  //
  bool Group_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "active" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Group_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Group_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Group_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Group_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Group_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "active" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->active_parser_)
            {
              this->active_parser_->pre ();
              ctx.nested_parser (this->active_parser_);
            }
          }
          else
          {
            if (this->active_parser_ != 0)
            {
              this->active_parser_->post_boolean ();
              this->active ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_GroupType ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "actual" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actual_parser_)
            {
              this->actual_parser_->pre ();
              ctx.nested_parser (this->actual_parser_);
            }
          }
          else
          {
            if (this->actual_parser_ != 0)
            {
              this->actual_parser_->post_boolean ();
              this->actual ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_unsignedInt ();
              this->quantity ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "managingEntity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->managingEntity_parser_)
            {
              this->managingEntity_parser_->pre ();
              ctx.nested_parser (this->managingEntity_parser_);
            }
          }
          else
          {
            if (this->managingEntity_parser_ != 0)
            {
              this->managingEntity_parser_->post_Reference ();
              this->managingEntity ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "characteristic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->characteristic_parser_)
            {
              this->characteristic_parser_->pre ();
              ctx.nested_parser (this->characteristic_parser_);
            }
          }
          else
          {
            if (this->characteristic_parser_ != 0)
            {
              this->characteristic_parser_->post_Group_Characteristic ();
              this->characteristic ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "member" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->member_parser_)
            {
              this->member_parser_->pre ();
              ctx.nested_parser (this->member_parser_);
            }
          }
          else
          {
            if (this->member_parser_ != 0)
            {
              this->member_parser_->post_Group_Member ();
              this->member ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Group_Characteristic_pskel.
  //
  bool Group_Characteristic_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Group_Characteristic_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Group_Characteristic_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Group_Characteristic_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Group_Characteristic_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Group_Characteristic_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCodeableConcept_parser_)
            {
              this->valueCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->valueCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->valueCodeableConcept_parser_ != 0)
            {
              this->valueCodeableConcept_parser_->post_CodeableConcept ();
              this->valueCodeableConcept ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRange_parser_)
            {
              this->valueRange_parser_->pre ();
              ctx.nested_parser (this->valueRange_parser_);
            }
          }
          else
          {
            if (this->valueRange_parser_ != 0)
            {
              this->valueRange_parser_->post_Range ();
              this->valueRange ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "exclude" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exclude_parser_)
            {
              this->exclude_parser_->pre ();
              ctx.nested_parser (this->exclude_parser_);
            }
          }
          else
          {
            if (this->exclude_parser_ != 0)
            {
              this->exclude_parser_->post_boolean ();
              this->exclude ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Group_Member_pskel.
  //
  bool Group_Member_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "entity" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Group_Member_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Group_Member_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Group_Member_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Group_Member_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Group_Member_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "entity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entity_parser_)
            {
              this->entity_parser_->pre ();
              ctx.nested_parser (this->entity_parser_);
            }
          }
          else
          {
            if (this->entity_parser_ != 0)
            {
              this->entity_parser_->post_Reference ();
              this->entity ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "inactive" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->inactive_parser_)
            {
              this->inactive_parser_->pre ();
              ctx.nested_parser (this->inactive_parser_);
            }
          }
          else
          {
            if (this->inactive_parser_ != 0)
            {
              this->inactive_parser_->post_boolean ();
              this->inactive ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for GroupType_pskel.
  //
  bool GroupType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_GroupType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

