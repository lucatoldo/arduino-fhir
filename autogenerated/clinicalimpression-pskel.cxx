// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "clinicalimpression-pskel.hxx"

namespace fhir
{
  // ClinicalImpression_pskel
  //

  void ClinicalImpression_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  status_parser (::fhir::ClinicalImpressionStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  effectiveDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->effectiveDateTime_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  assessor_parser (::fhir::Reference_pskel& p)
  {
    this->assessor_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  previous_parser (::fhir::Reference_pskel& p)
  {
    this->previous_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  problem_parser (::fhir::Reference_pskel& p)
  {
    this->problem_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  investigation_parser (::fhir::ClinicalImpression_Investigation_pskel& p)
  {
    this->investigation_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  protocol_parser (::fhir::uri_pskel& p)
  {
    this->protocol_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  summary_parser (::fhir::string_pskel& p)
  {
    this->summary_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  finding_parser (::fhir::ClinicalImpression_Finding_pskel& p)
  {
    this->finding_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  prognosisCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->prognosisCodeableConcept_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  prognosisReference_parser (::fhir::Reference_pskel& p)
  {
    this->prognosisReference_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  supportingInfo_parser (::fhir::Reference_pskel& p)
  {
    this->supportingInfo_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void ClinicalImpression_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::ClinicalImpressionStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::string_pskel& description,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& effectiveDateTime,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::dateTime_pskel& date,
           ::fhir::Reference_pskel& assessor,
           ::fhir::Reference_pskel& previous,
           ::fhir::Reference_pskel& problem,
           ::fhir::ClinicalImpression_Investigation_pskel& investigation,
           ::fhir::uri_pskel& protocol,
           ::fhir::string_pskel& summary,
           ::fhir::ClinicalImpression_Finding_pskel& finding,
           ::fhir::CodeableConcept_pskel& prognosisCodeableConcept,
           ::fhir::Reference_pskel& prognosisReference,
           ::fhir::Reference_pskel& supportingInfo,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->code_parser_ = &code;
    this->description_parser_ = &description;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->effectiveDateTime_parser_ = &effectiveDateTime;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->date_parser_ = &date;
    this->assessor_parser_ = &assessor;
    this->previous_parser_ = &previous;
    this->problem_parser_ = &problem;
    this->investigation_parser_ = &investigation;
    this->protocol_parser_ = &protocol;
    this->summary_parser_ = &summary;
    this->finding_parser_ = &finding;
    this->prognosisCodeableConcept_parser_ = &prognosisCodeableConcept;
    this->prognosisReference_parser_ = &prognosisReference;
    this->supportingInfo_parser_ = &supportingInfo;
    this->note_parser_ = &note;
  }

  ClinicalImpression_pskel::
  ClinicalImpression_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ClinicalImpression_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    code_parser_ (0),
    description_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    date_parser_ (0),
    assessor_parser_ (0),
    previous_parser_ (0),
    problem_parser_ (0),
    investigation_parser_ (0),
    protocol_parser_ (0),
    summary_parser_ (0),
    finding_parser_ (0),
    prognosisCodeableConcept_parser_ (0),
    prognosisReference_parser_ (0),
    supportingInfo_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClinicalImpression_pskel::
  ClinicalImpression_pskel (ClinicalImpression_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ClinicalImpression_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    code_parser_ (0),
    description_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    date_parser_ (0),
    assessor_parser_ (0),
    previous_parser_ (0),
    problem_parser_ (0),
    investigation_parser_ (0),
    protocol_parser_ (0),
    summary_parser_ (0),
    finding_parser_ (0),
    prognosisCodeableConcept_parser_ (0),
    prognosisReference_parser_ (0),
    supportingInfo_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClinicalImpression_Investigation_pskel
  //

  void ClinicalImpression_Investigation_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ClinicalImpression_Investigation_pskel::
  item_parser (::fhir::Reference_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void ClinicalImpression_Investigation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& item)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->item_parser_ = &item;
  }

  ClinicalImpression_Investigation_pskel::
  ClinicalImpression_Investigation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClinicalImpression_Investigation_impl_ (0),
    code_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClinicalImpression_Investigation_pskel::
  ClinicalImpression_Investigation_pskel (ClinicalImpression_Investigation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClinicalImpression_Investigation_impl_ (impl),
    code_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClinicalImpression_Finding_pskel
  //

  void ClinicalImpression_Finding_pskel::
  itemCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->itemCodeableConcept_parser_ = &p;
  }

  void ClinicalImpression_Finding_pskel::
  itemReference_parser (::fhir::Reference_pskel& p)
  {
    this->itemReference_parser_ = &p;
  }

  void ClinicalImpression_Finding_pskel::
  basis_parser (::fhir::string_pskel& p)
  {
    this->basis_parser_ = &p;
  }

  void ClinicalImpression_Finding_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& itemCodeableConcept,
           ::fhir::Reference_pskel& itemReference,
           ::fhir::string_pskel& basis)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->itemCodeableConcept_parser_ = &itemCodeableConcept;
    this->itemReference_parser_ = &itemReference;
    this->basis_parser_ = &basis;
  }

  ClinicalImpression_Finding_pskel::
  ClinicalImpression_Finding_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ClinicalImpression_Finding_impl_ (0),
    itemCodeableConcept_parser_ (0),
    itemReference_parser_ (0),
    basis_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ClinicalImpression_Finding_pskel::
  ClinicalImpression_Finding_pskel (ClinicalImpression_Finding_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ClinicalImpression_Finding_impl_ (impl),
    itemCodeableConcept_parser_ (0),
    itemReference_parser_ (0),
    basis_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ClinicalImpressionStatus_list_pskel
  //

  ClinicalImpressionStatus_list_pskel::
  ClinicalImpressionStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ClinicalImpressionStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ClinicalImpressionStatus_list_pskel_enums_, 3UL);
  }

  ClinicalImpressionStatus_list_pskel::
  ClinicalImpressionStatus_list_pskel (ClinicalImpressionStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ClinicalImpressionStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ClinicalImpressionStatus_list_pskel_enums_, 3UL);
  }

  // ClinicalImpressionStatus_pskel
  //

  void ClinicalImpressionStatus_pskel::
  value_parser (::fhir::ClinicalImpressionStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ClinicalImpressionStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ClinicalImpressionStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ClinicalImpressionStatus_pskel::
  ClinicalImpressionStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ClinicalImpressionStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  ClinicalImpressionStatus_pskel::
  ClinicalImpressionStatus_pskel (ClinicalImpressionStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ClinicalImpressionStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ClinicalImpression_pskel
  //

  void ClinicalImpression_pskel::
  identifier ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->identifier ();
  }

  void ClinicalImpression_pskel::
  status ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->status ();
  }

  void ClinicalImpression_pskel::
  statusReason ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->statusReason ();
  }

  void ClinicalImpression_pskel::
  code ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->code ();
  }

  void ClinicalImpression_pskel::
  description ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->description ();
  }

  void ClinicalImpression_pskel::
  subject ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->subject ();
  }

  void ClinicalImpression_pskel::
  encounter ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->encounter ();
  }

  void ClinicalImpression_pskel::
  effectiveDateTime ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->effectiveDateTime ();
  }

  void ClinicalImpression_pskel::
  effectivePeriod ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->effectivePeriod ();
  }

  void ClinicalImpression_pskel::
  date ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->date ();
  }

  void ClinicalImpression_pskel::
  assessor ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->assessor ();
  }

  void ClinicalImpression_pskel::
  previous ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->previous ();
  }

  void ClinicalImpression_pskel::
  problem ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->problem ();
  }

  void ClinicalImpression_pskel::
  investigation ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->investigation ();
  }

  void ClinicalImpression_pskel::
  protocol ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->protocol ();
  }

  void ClinicalImpression_pskel::
  summary ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->summary ();
  }

  void ClinicalImpression_pskel::
  finding ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->finding ();
  }

  void ClinicalImpression_pskel::
  prognosisCodeableConcept ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->prognosisCodeableConcept ();
  }

  void ClinicalImpression_pskel::
  prognosisReference ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->prognosisReference ();
  }

  void ClinicalImpression_pskel::
  supportingInfo ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->supportingInfo ();
  }

  void ClinicalImpression_pskel::
  note ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->note ();
  }

  void ClinicalImpression_pskel::
  post_ClinicalImpression ()
  {
    if (this->ClinicalImpression_impl_)
      this->ClinicalImpression_impl_->post_ClinicalImpression ();
    else
      post_DomainResource ();
  }

  void ClinicalImpression_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->effectiveDateTime_parser_)
      this->effectiveDateTime_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->assessor_parser_)
      this->assessor_parser_->_reset ();

    if (this->previous_parser_)
      this->previous_parser_->_reset ();

    if (this->problem_parser_)
      this->problem_parser_->_reset ();

    if (this->investigation_parser_)
      this->investigation_parser_->_reset ();

    if (this->protocol_parser_)
      this->protocol_parser_->_reset ();

    if (this->summary_parser_)
      this->summary_parser_->_reset ();

    if (this->finding_parser_)
      this->finding_parser_->_reset ();

    if (this->prognosisCodeableConcept_parser_)
      this->prognosisCodeableConcept_parser_->_reset ();

    if (this->prognosisReference_parser_)
      this->prognosisReference_parser_->_reset ();

    if (this->supportingInfo_parser_)
      this->supportingInfo_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClinicalImpression_Investigation_pskel
  //

  void ClinicalImpression_Investigation_pskel::
  code ()
  {
    if (this->ClinicalImpression_Investigation_impl_)
      this->ClinicalImpression_Investigation_impl_->code ();
  }

  void ClinicalImpression_Investigation_pskel::
  item ()
  {
    if (this->ClinicalImpression_Investigation_impl_)
      this->ClinicalImpression_Investigation_impl_->item ();
  }

  void ClinicalImpression_Investigation_pskel::
  post_ClinicalImpression_Investigation ()
  {
    if (this->ClinicalImpression_Investigation_impl_)
      this->ClinicalImpression_Investigation_impl_->post_ClinicalImpression_Investigation ();
    else
      post_BackboneElement ();
  }

  void ClinicalImpression_Investigation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClinicalImpression_Finding_pskel
  //

  void ClinicalImpression_Finding_pskel::
  itemCodeableConcept ()
  {
    if (this->ClinicalImpression_Finding_impl_)
      this->ClinicalImpression_Finding_impl_->itemCodeableConcept ();
  }

  void ClinicalImpression_Finding_pskel::
  itemReference ()
  {
    if (this->ClinicalImpression_Finding_impl_)
      this->ClinicalImpression_Finding_impl_->itemReference ();
  }

  void ClinicalImpression_Finding_pskel::
  basis ()
  {
    if (this->ClinicalImpression_Finding_impl_)
      this->ClinicalImpression_Finding_impl_->basis ();
  }

  void ClinicalImpression_Finding_pskel::
  post_ClinicalImpression_Finding ()
  {
    if (this->ClinicalImpression_Finding_impl_)
      this->ClinicalImpression_Finding_impl_->post_ClinicalImpression_Finding ();
    else
      post_BackboneElement ();
  }

  void ClinicalImpression_Finding_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->itemCodeableConcept_parser_)
      this->itemCodeableConcept_parser_->_reset ();

    if (this->itemReference_parser_)
      this->itemReference_parser_->_reset ();

    if (this->basis_parser_)
      this->basis_parser_->_reset ();

    this->resetting_ = false;
  }

  // ClinicalImpressionStatus_list_pskel
  //

  void ClinicalImpressionStatus_list_pskel::
  post_ClinicalImpressionStatus_list ()
  {
    if (this->ClinicalImpressionStatus_list_impl_)
      this->ClinicalImpressionStatus_list_impl_->post_ClinicalImpressionStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const ClinicalImpressionStatus_list_pskel::_xsde_ClinicalImpressionStatus_list_pskel_enums_[3UL] = 
  {
    "completed",
    "entered-in-error",
    "in-progress"
  };

  // ClinicalImpressionStatus_pskel
  //

  void ClinicalImpressionStatus_pskel::
  value ()
  {
    if (this->ClinicalImpressionStatus_impl_)
      this->ClinicalImpressionStatus_impl_->value ();
  }

  void ClinicalImpressionStatus_pskel::
  post_ClinicalImpressionStatus ()
  {
    if (this->ClinicalImpressionStatus_impl_)
      this->ClinicalImpressionStatus_impl_->post_ClinicalImpressionStatus ();
    else
      post_Element ();
  }

  void ClinicalImpressionStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ClinicalImpression_pskel.
  //
  bool ClinicalImpression_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClinicalImpression_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClinicalImpression_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClinicalImpression_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ClinicalImpression_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClinicalImpression_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ClinicalImpressionStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "effectiveDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectiveDateTime_parser_)
            {
              this->effectiveDateTime_parser_->pre ();
              ctx.nested_parser (this->effectiveDateTime_parser_);
            }
          }
          else
          {
            if (this->effectiveDateTime_parser_ != 0)
            {
              this->effectiveDateTime_parser_->post_dateTime ();
              this->effectiveDateTime ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "assessor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->assessor_parser_)
            {
              this->assessor_parser_->pre ();
              ctx.nested_parser (this->assessor_parser_);
            }
          }
          else
          {
            if (this->assessor_parser_ != 0)
            {
              this->assessor_parser_->post_Reference ();
              this->assessor ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "previous" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->previous_parser_)
            {
              this->previous_parser_->pre ();
              ctx.nested_parser (this->previous_parser_);
            }
          }
          else
          {
            if (this->previous_parser_ != 0)
            {
              this->previous_parser_->post_Reference ();
              this->previous ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "problem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->problem_parser_)
            {
              this->problem_parser_->pre ();
              ctx.nested_parser (this->problem_parser_);
            }
          }
          else
          {
            if (this->problem_parser_ != 0)
            {
              this->problem_parser_->post_Reference ();
              this->problem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "investigation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->investigation_parser_)
            {
              this->investigation_parser_->pre ();
              ctx.nested_parser (this->investigation_parser_);
            }
          }
          else
          {
            if (this->investigation_parser_ != 0)
            {
              this->investigation_parser_->post_ClinicalImpression_Investigation ();
              this->investigation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "protocol" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->protocol_parser_)
            {
              this->protocol_parser_->pre ();
              ctx.nested_parser (this->protocol_parser_);
            }
          }
          else
          {
            if (this->protocol_parser_ != 0)
            {
              this->protocol_parser_->post_uri ();
              this->protocol ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "summary" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->summary_parser_)
            {
              this->summary_parser_->pre ();
              ctx.nested_parser (this->summary_parser_);
            }
          }
          else
          {
            if (this->summary_parser_ != 0)
            {
              this->summary_parser_->post_string ();
              this->summary ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "finding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->finding_parser_)
            {
              this->finding_parser_->pre ();
              ctx.nested_parser (this->finding_parser_);
            }
          }
          else
          {
            if (this->finding_parser_ != 0)
            {
              this->finding_parser_->post_ClinicalImpression_Finding ();
              this->finding ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "prognosisCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prognosisCodeableConcept_parser_)
            {
              this->prognosisCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->prognosisCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->prognosisCodeableConcept_parser_ != 0)
            {
              this->prognosisCodeableConcept_parser_->post_CodeableConcept ();
              this->prognosisCodeableConcept ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "prognosisReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prognosisReference_parser_)
            {
              this->prognosisReference_parser_->pre ();
              ctx.nested_parser (this->prognosisReference_parser_);
            }
          }
          else
          {
            if (this->prognosisReference_parser_ != 0)
            {
              this->prognosisReference_parser_->post_Reference ();
              this->prognosisReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "supportingInfo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInfo_parser_)
            {
              this->supportingInfo_parser_->pre ();
              ctx.nested_parser (this->supportingInfo_parser_);
            }
          }
          else
          {
            if (this->supportingInfo_parser_ != 0)
            {
              this->supportingInfo_parser_->post_Reference ();
              this->supportingInfo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClinicalImpression_Investigation_pskel.
  //
  bool ClinicalImpression_Investigation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClinicalImpression_Investigation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClinicalImpression_Investigation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClinicalImpression_Investigation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClinicalImpression_Investigation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ClinicalImpression_Investigation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_Reference ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ClinicalImpression_Finding_pskel.
  //
  bool ClinicalImpression_Finding_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "itemCodeableConcept" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "itemReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "basis" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ClinicalImpression_Finding_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ClinicalImpression_Finding_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ClinicalImpression_Finding_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ClinicalImpression_Finding_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ClinicalImpression_Finding_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "itemCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemCodeableConcept_parser_)
            {
              this->itemCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->itemCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->itemCodeableConcept_parser_ != 0)
            {
              this->itemCodeableConcept_parser_->post_CodeableConcept ();
              this->itemCodeableConcept ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "itemReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemReference_parser_)
            {
              this->itemReference_parser_->pre ();
              ctx.nested_parser (this->itemReference_parser_);
            }
          }
          else
          {
            if (this->itemReference_parser_ != 0)
            {
              this->itemReference_parser_->post_Reference ();
              this->itemReference ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "basis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basis_parser_)
            {
              this->basis_parser_->pre ();
              ctx.nested_parser (this->basis_parser_);
            }
          }
          else
          {
            if (this->basis_parser_ != 0)
            {
              this->basis_parser_->post_string ();
              this->basis ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ClinicalImpressionStatus_pskel.
  //
  bool ClinicalImpressionStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ClinicalImpressionStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

