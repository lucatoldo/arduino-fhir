// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "medicationstatement-pskel.hxx"

namespace fhir
{
  // MedicationStatement_pskel
  //

  void MedicationStatement_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicationStatement_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void MedicationStatement_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void MedicationStatement_pskel::
  status_parser (::fhir::MedicationStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void MedicationStatement_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void MedicationStatement_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void MedicationStatement_pskel::
  medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->medicationCodeableConcept_parser_ = &p;
  }

  void MedicationStatement_pskel::
  medicationReference_parser (::fhir::Reference_pskel& p)
  {
    this->medicationReference_parser_ = &p;
  }

  void MedicationStatement_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void MedicationStatement_pskel::
  context_parser (::fhir::Reference_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void MedicationStatement_pskel::
  effectiveDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->effectiveDateTime_parser_ = &p;
  }

  void MedicationStatement_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void MedicationStatement_pskel::
  dateAsserted_parser (::fhir::dateTime_pskel& p)
  {
    this->dateAsserted_parser_ = &p;
  }

  void MedicationStatement_pskel::
  informationSource_parser (::fhir::Reference_pskel& p)
  {
    this->informationSource_parser_ = &p;
  }

  void MedicationStatement_pskel::
  derivedFrom_parser (::fhir::Reference_pskel& p)
  {
    this->derivedFrom_parser_ = &p;
  }

  void MedicationStatement_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void MedicationStatement_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void MedicationStatement_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void MedicationStatement_pskel::
  dosage_parser (::fhir::Dosage_pskel& p)
  {
    this->dosage_parser_ = &p;
  }

  void MedicationStatement_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& partOf,
           ::fhir::MedicationStatusCodes_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& medicationCodeableConcept,
           ::fhir::Reference_pskel& medicationReference,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& context,
           ::fhir::dateTime_pskel& effectiveDateTime,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::dateTime_pskel& dateAsserted,
           ::fhir::Reference_pskel& informationSource,
           ::fhir::Reference_pskel& derivedFrom,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Annotation_pskel& note,
           ::fhir::Dosage_pskel& dosage)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->basedOn_parser_ = &basedOn;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->category_parser_ = &category;
    this->medicationCodeableConcept_parser_ = &medicationCodeableConcept;
    this->medicationReference_parser_ = &medicationReference;
    this->subject_parser_ = &subject;
    this->context_parser_ = &context;
    this->effectiveDateTime_parser_ = &effectiveDateTime;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->dateAsserted_parser_ = &dateAsserted;
    this->informationSource_parser_ = &informationSource;
    this->derivedFrom_parser_ = &derivedFrom;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->note_parser_ = &note;
    this->dosage_parser_ = &dosage;
  }

  MedicationStatement_pskel::
  MedicationStatement_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MedicationStatement_impl_ (0),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    category_parser_ (0),
    medicationCodeableConcept_parser_ (0),
    medicationReference_parser_ (0),
    subject_parser_ (0),
    context_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    dateAsserted_parser_ (0),
    informationSource_parser_ (0),
    derivedFrom_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    dosage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicationStatement_pskel::
  MedicationStatement_pskel (MedicationStatement_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MedicationStatement_impl_ (impl),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    category_parser_ (0),
    medicationCodeableConcept_parser_ (0),
    medicationReference_parser_ (0),
    subject_parser_ (0),
    context_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    dateAsserted_parser_ (0),
    informationSource_parser_ (0),
    derivedFrom_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    dosage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MedicationStatement_pskel
  //

  void MedicationStatement_pskel::
  identifier ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->identifier ();
  }

  void MedicationStatement_pskel::
  basedOn ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->basedOn ();
  }

  void MedicationStatement_pskel::
  partOf ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->partOf ();
  }

  void MedicationStatement_pskel::
  status ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->status ();
  }

  void MedicationStatement_pskel::
  statusReason ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->statusReason ();
  }

  void MedicationStatement_pskel::
  category ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->category ();
  }

  void MedicationStatement_pskel::
  medicationCodeableConcept ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->medicationCodeableConcept ();
  }

  void MedicationStatement_pskel::
  medicationReference ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->medicationReference ();
  }

  void MedicationStatement_pskel::
  subject ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->subject ();
  }

  void MedicationStatement_pskel::
  context ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->context ();
  }

  void MedicationStatement_pskel::
  effectiveDateTime ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->effectiveDateTime ();
  }

  void MedicationStatement_pskel::
  effectivePeriod ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->effectivePeriod ();
  }

  void MedicationStatement_pskel::
  dateAsserted ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->dateAsserted ();
  }

  void MedicationStatement_pskel::
  informationSource ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->informationSource ();
  }

  void MedicationStatement_pskel::
  derivedFrom ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->derivedFrom ();
  }

  void MedicationStatement_pskel::
  reasonCode ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->reasonCode ();
  }

  void MedicationStatement_pskel::
  reasonReference ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->reasonReference ();
  }

  void MedicationStatement_pskel::
  note ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->note ();
  }

  void MedicationStatement_pskel::
  dosage ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->dosage ();
  }

  void MedicationStatement_pskel::
  post_MedicationStatement ()
  {
    if (this->MedicationStatement_impl_)
      this->MedicationStatement_impl_->post_MedicationStatement ();
    else
      post_DomainResource ();
  }

  void MedicationStatement_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->medicationCodeableConcept_parser_)
      this->medicationCodeableConcept_parser_->_reset ();

    if (this->medicationReference_parser_)
      this->medicationReference_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->effectiveDateTime_parser_)
      this->effectiveDateTime_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->dateAsserted_parser_)
      this->dateAsserted_parser_->_reset ();

    if (this->informationSource_parser_)
      this->informationSource_parser_->_reset ();

    if (this->derivedFrom_parser_)
      this->derivedFrom_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->dosage_parser_)
      this->dosage_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MedicationStatement_pskel.
  //
  bool MedicationStatement_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicationStatement_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicationStatement_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicationStatement_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MedicationStatement_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicationStatement_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_MedicationStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "medicationCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->medicationCodeableConcept_parser_)
            {
              this->medicationCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->medicationCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->medicationCodeableConcept_parser_ != 0)
            {
              this->medicationCodeableConcept_parser_->post_CodeableConcept ();
              this->medicationCodeableConcept ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "medicationReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->medicationReference_parser_)
            {
              this->medicationReference_parser_->pre ();
              ctx.nested_parser (this->medicationReference_parser_);
            }
          }
          else
          {
            if (this->medicationReference_parser_ != 0)
            {
              this->medicationReference_parser_->post_Reference ();
              this->medicationReference ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_Reference ();
              this->context ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "effectiveDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectiveDateTime_parser_)
            {
              this->effectiveDateTime_parser_->pre ();
              ctx.nested_parser (this->effectiveDateTime_parser_);
            }
          }
          else
          {
            if (this->effectiveDateTime_parser_ != 0)
            {
              this->effectiveDateTime_parser_->post_dateTime ();
              this->effectiveDateTime ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "dateAsserted" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dateAsserted_parser_)
            {
              this->dateAsserted_parser_->pre ();
              ctx.nested_parser (this->dateAsserted_parser_);
            }
          }
          else
          {
            if (this->dateAsserted_parser_ != 0)
            {
              this->dateAsserted_parser_->post_dateTime ();
              this->dateAsserted ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "informationSource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->informationSource_parser_)
            {
              this->informationSource_parser_->pre ();
              ctx.nested_parser (this->informationSource_parser_);
            }
          }
          else
          {
            if (this->informationSource_parser_ != 0)
            {
              this->informationSource_parser_->post_Reference ();
              this->informationSource ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "derivedFrom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->derivedFrom_parser_)
            {
              this->derivedFrom_parser_->pre ();
              ctx.nested_parser (this->derivedFrom_parser_);
            }
          }
          else
          {
            if (this->derivedFrom_parser_ != 0)
            {
              this->derivedFrom_parser_->post_Reference ();
              this->derivedFrom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "dosage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dosage_parser_)
            {
              this->dosage_parser_->pre ();
              ctx.nested_parser (this->dosage_parser_);
            }
          }
          else
          {
            if (this->dosage_parser_ != 0)
            {
              this->dosage_parser_->post_Dosage ();
              this->dosage ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

