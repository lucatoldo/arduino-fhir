// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef NUTRITIONORDER_PSKEL_HXX
#define NUTRITIONORDER_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class NutritionOrder_pskel;
  class NutritionOrder_OralDiet_pskel;
  class NutritionOrder_Nutrient_pskel;
  class NutritionOrder_Texture_pskel;
  class NutritionOrder_Supplement_pskel;
  class NutritionOrder_EnteralFormula_pskel;
  class NutritionOrder_Administration_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class NutritionOrder_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    instantiates ();

    virtual void
    status ();

    virtual void
    intent ();

    virtual void
    patient ();

    virtual void
    encounter ();

    virtual void
    dateTime ();

    virtual void
    orderer ();

    virtual void
    allergyIntolerance ();

    virtual void
    foodPreferenceModifier ();

    virtual void
    excludeFoodModifier ();

    virtual void
    oralDiet ();

    virtual void
    supplement ();

    virtual void
    enteralFormula ();

    virtual void
    note ();

    virtual void
    post_NutritionOrder ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::uri_pskel& /* instantiates */,
             ::fhir::RequestStatus_pskel& /* status */,
             ::fhir::RequestIntent_pskel& /* intent */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* dateTime */,
             ::fhir::Reference_pskel& /* orderer */,
             ::fhir::Reference_pskel& /* allergyIntolerance */,
             ::fhir::CodeableConcept_pskel& /* foodPreferenceModifier */,
             ::fhir::CodeableConcept_pskel& /* excludeFoodModifier */,
             ::fhir::NutritionOrder_OralDiet_pskel& /* oralDiet */,
             ::fhir::NutritionOrder_Supplement_pskel& /* supplement */,
             ::fhir::NutritionOrder_EnteralFormula_pskel& /* enteralFormula */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    instantiates_parser (::fhir::uri_pskel&);

    void
    status_parser (::fhir::RequestStatus_pskel&);

    void
    intent_parser (::fhir::RequestIntent_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    dateTime_parser (::fhir::dateTime_pskel&);

    void
    orderer_parser (::fhir::Reference_pskel&);

    void
    allergyIntolerance_parser (::fhir::Reference_pskel&);

    void
    foodPreferenceModifier_parser (::fhir::CodeableConcept_pskel&);

    void
    excludeFoodModifier_parser (::fhir::CodeableConcept_pskel&);

    void
    oralDiet_parser (::fhir::NutritionOrder_OralDiet_pskel&);

    void
    supplement_parser (::fhir::NutritionOrder_Supplement_pskel&);

    void
    enteralFormula_parser (::fhir::NutritionOrder_EnteralFormula_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_pskel* NutritionOrder_impl_;
    NutritionOrder_pskel (NutritionOrder_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::uri_pskel* instantiates_parser_;
    ::fhir::RequestStatus_pskel* status_parser_;
    ::fhir::RequestIntent_pskel* intent_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* dateTime_parser_;
    ::fhir::Reference_pskel* orderer_parser_;
    ::fhir::Reference_pskel* allergyIntolerance_parser_;
    ::fhir::CodeableConcept_pskel* foodPreferenceModifier_parser_;
    ::fhir::CodeableConcept_pskel* excludeFoodModifier_parser_;
    ::fhir::NutritionOrder_OralDiet_pskel* oralDiet_parser_;
    ::fhir::NutritionOrder_Supplement_pskel* supplement_parser_;
    ::fhir::NutritionOrder_EnteralFormula_pskel* enteralFormula_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_OralDiet_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    schedule ();

    virtual void
    nutrient ();

    virtual void
    texture ();

    virtual void
    fluidConsistencyType ();

    virtual void
    instruction ();

    virtual void
    post_NutritionOrder_OralDiet ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Timing_pskel& /* schedule */,
             ::fhir::NutritionOrder_Nutrient_pskel& /* nutrient */,
             ::fhir::NutritionOrder_Texture_pskel& /* texture */,
             ::fhir::CodeableConcept_pskel& /* fluidConsistencyType */,
             ::fhir::string_pskel& /* instruction */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    schedule_parser (::fhir::Timing_pskel&);

    void
    nutrient_parser (::fhir::NutritionOrder_Nutrient_pskel&);

    void
    texture_parser (::fhir::NutritionOrder_Texture_pskel&);

    void
    fluidConsistencyType_parser (::fhir::CodeableConcept_pskel&);

    void
    instruction_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_OralDiet_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_OralDiet_pskel* NutritionOrder_OralDiet_impl_;
    NutritionOrder_OralDiet_pskel (NutritionOrder_OralDiet_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Timing_pskel* schedule_parser_;
    ::fhir::NutritionOrder_Nutrient_pskel* nutrient_parser_;
    ::fhir::NutritionOrder_Texture_pskel* texture_parser_;
    ::fhir::CodeableConcept_pskel* fluidConsistencyType_parser_;
    ::fhir::string_pskel* instruction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_OralDiet_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Nutrient_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    modifier ();

    virtual void
    amount ();

    virtual void
    post_NutritionOrder_Nutrient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Quantity_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Nutrient_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Nutrient_pskel* NutritionOrder_Nutrient_impl_;
    NutritionOrder_Nutrient_pskel (NutritionOrder_Nutrient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Quantity_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Nutrient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Texture_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    modifier ();

    virtual void
    foodType ();

    virtual void
    post_NutritionOrder_Texture ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* foodType */);

    // Individual element parsers.
    //
    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    foodType_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Texture_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Texture_pskel* NutritionOrder_Texture_impl_;
    NutritionOrder_Texture_pskel (NutritionOrder_Texture_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* foodType_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Texture_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Supplement_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    productName ();

    virtual void
    schedule ();

    virtual void
    quantity ();

    virtual void
    instruction ();

    virtual void
    post_NutritionOrder_Supplement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* productName */,
             ::fhir::Timing_pskel& /* schedule */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::string_pskel& /* instruction */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    productName_parser (::fhir::string_pskel&);

    void
    schedule_parser (::fhir::Timing_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    instruction_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Supplement_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Supplement_pskel* NutritionOrder_Supplement_impl_;
    NutritionOrder_Supplement_pskel (NutritionOrder_Supplement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* productName_parser_;
    ::fhir::Timing_pskel* schedule_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::string_pskel* instruction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Supplement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_EnteralFormula_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    baseFormulaType ();

    virtual void
    baseFormulaProductName ();

    virtual void
    additiveType ();

    virtual void
    additiveProductName ();

    virtual void
    caloricDensity ();

    virtual void
    routeofAdministration ();

    virtual void
    administration ();

    virtual void
    maxVolumeToDeliver ();

    virtual void
    administrationInstruction ();

    virtual void
    post_NutritionOrder_EnteralFormula ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* baseFormulaType */,
             ::fhir::string_pskel& /* baseFormulaProductName */,
             ::fhir::CodeableConcept_pskel& /* additiveType */,
             ::fhir::string_pskel& /* additiveProductName */,
             ::fhir::Quantity_pskel& /* caloricDensity */,
             ::fhir::CodeableConcept_pskel& /* routeofAdministration */,
             ::fhir::NutritionOrder_Administration_pskel& /* administration */,
             ::fhir::Quantity_pskel& /* maxVolumeToDeliver */,
             ::fhir::string_pskel& /* administrationInstruction */);

    // Individual element parsers.
    //
    void
    baseFormulaType_parser (::fhir::CodeableConcept_pskel&);

    void
    baseFormulaProductName_parser (::fhir::string_pskel&);

    void
    additiveType_parser (::fhir::CodeableConcept_pskel&);

    void
    additiveProductName_parser (::fhir::string_pskel&);

    void
    caloricDensity_parser (::fhir::Quantity_pskel&);

    void
    routeofAdministration_parser (::fhir::CodeableConcept_pskel&);

    void
    administration_parser (::fhir::NutritionOrder_Administration_pskel&);

    void
    maxVolumeToDeliver_parser (::fhir::Quantity_pskel&);

    void
    administrationInstruction_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_EnteralFormula_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_EnteralFormula_pskel* NutritionOrder_EnteralFormula_impl_;
    NutritionOrder_EnteralFormula_pskel (NutritionOrder_EnteralFormula_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* baseFormulaType_parser_;
    ::fhir::string_pskel* baseFormulaProductName_parser_;
    ::fhir::CodeableConcept_pskel* additiveType_parser_;
    ::fhir::string_pskel* additiveProductName_parser_;
    ::fhir::Quantity_pskel* caloricDensity_parser_;
    ::fhir::CodeableConcept_pskel* routeofAdministration_parser_;
    ::fhir::NutritionOrder_Administration_pskel* administration_parser_;
    ::fhir::Quantity_pskel* maxVolumeToDeliver_parser_;
    ::fhir::string_pskel* administrationInstruction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_EnteralFormula_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Administration_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    schedule ();

    virtual void
    quantity ();

    virtual void
    rateQuantity ();

    virtual void
    rateRatio ();

    virtual void
    post_NutritionOrder_Administration ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Timing_pskel& /* schedule */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Quantity_pskel& /* rateQuantity */,
             ::fhir::Ratio_pskel& /* rateRatio */);

    // Individual element parsers.
    //
    void
    schedule_parser (::fhir::Timing_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    rateQuantity_parser (::fhir::Quantity_pskel&);

    void
    rateRatio_parser (::fhir::Ratio_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Administration_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Administration_pskel* NutritionOrder_Administration_impl_;
    NutritionOrder_Administration_pskel (NutritionOrder_Administration_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Timing_pskel* schedule_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Quantity_pskel* rateQuantity_parser_;
    ::fhir::Ratio_pskel* rateRatio_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Administration_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // NUTRITIONORDER_PSKEL_HXX
