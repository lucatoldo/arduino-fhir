// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "location-pskel.hxx"

namespace fhir
{
  // Location_pskel
  //

  void Location_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Location_pskel::
  status_parser (::fhir::LocationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Location_pskel::
  operationalStatus_parser (::fhir::Coding_pskel& p)
  {
    this->operationalStatus_parser_ = &p;
  }

  void Location_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Location_pskel::
  alias_parser (::fhir::string_pskel& p)
  {
    this->alias_parser_ = &p;
  }

  void Location_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Location_pskel::
  mode_parser (::fhir::LocationMode_pskel& p)
  {
    this->mode_parser_ = &p;
  }

  void Location_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Location_pskel::
  telecom_parser (::fhir::ContactPoint_pskel& p)
  {
    this->telecom_parser_ = &p;
  }

  void Location_pskel::
  address_parser (::fhir::Address_pskel& p)
  {
    this->address_parser_ = &p;
  }

  void Location_pskel::
  physicalType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->physicalType_parser_ = &p;
  }

  void Location_pskel::
  position_parser (::fhir::Location_Position_pskel& p)
  {
    this->position_parser_ = &p;
  }

  void Location_pskel::
  managingOrganization_parser (::fhir::Reference_pskel& p)
  {
    this->managingOrganization_parser_ = &p;
  }

  void Location_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void Location_pskel::
  hoursOfOperation_parser (::fhir::Location_HoursOfOperation_pskel& p)
  {
    this->hoursOfOperation_parser_ = &p;
  }

  void Location_pskel::
  availabilityExceptions_parser (::fhir::string_pskel& p)
  {
    this->availabilityExceptions_parser_ = &p;
  }

  void Location_pskel::
  endpoint_parser (::fhir::Reference_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void Location_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::LocationStatus_pskel& status,
           ::fhir::Coding_pskel& operationalStatus,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& alias,
           ::fhir::string_pskel& description,
           ::fhir::LocationMode_pskel& mode,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::ContactPoint_pskel& telecom,
           ::fhir::Address_pskel& address,
           ::fhir::CodeableConcept_pskel& physicalType,
           ::fhir::Location_Position_pskel& position,
           ::fhir::Reference_pskel& managingOrganization,
           ::fhir::Reference_pskel& partOf,
           ::fhir::Location_HoursOfOperation_pskel& hoursOfOperation,
           ::fhir::string_pskel& availabilityExceptions,
           ::fhir::Reference_pskel& endpoint)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->operationalStatus_parser_ = &operationalStatus;
    this->name_parser_ = &name;
    this->alias_parser_ = &alias;
    this->description_parser_ = &description;
    this->mode_parser_ = &mode;
    this->type_parser_ = &type;
    this->telecom_parser_ = &telecom;
    this->address_parser_ = &address;
    this->physicalType_parser_ = &physicalType;
    this->position_parser_ = &position;
    this->managingOrganization_parser_ = &managingOrganization;
    this->partOf_parser_ = &partOf;
    this->hoursOfOperation_parser_ = &hoursOfOperation;
    this->availabilityExceptions_parser_ = &availabilityExceptions;
    this->endpoint_parser_ = &endpoint;
  }

  Location_pskel::
  Location_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Location_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    operationalStatus_parser_ (0),
    name_parser_ (0),
    alias_parser_ (0),
    description_parser_ (0),
    mode_parser_ (0),
    type_parser_ (0),
    telecom_parser_ (0),
    address_parser_ (0),
    physicalType_parser_ (0),
    position_parser_ (0),
    managingOrganization_parser_ (0),
    partOf_parser_ (0),
    hoursOfOperation_parser_ (0),
    availabilityExceptions_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Location_pskel::
  Location_pskel (Location_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Location_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    operationalStatus_parser_ (0),
    name_parser_ (0),
    alias_parser_ (0),
    description_parser_ (0),
    mode_parser_ (0),
    type_parser_ (0),
    telecom_parser_ (0),
    address_parser_ (0),
    physicalType_parser_ (0),
    position_parser_ (0),
    managingOrganization_parser_ (0),
    partOf_parser_ (0),
    hoursOfOperation_parser_ (0),
    availabilityExceptions_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Location_Position_pskel
  //

  void Location_Position_pskel::
  longitude_parser (::fhir::decimal_pskel& p)
  {
    this->longitude_parser_ = &p;
  }

  void Location_Position_pskel::
  latitude_parser (::fhir::decimal_pskel& p)
  {
    this->latitude_parser_ = &p;
  }

  void Location_Position_pskel::
  altitude_parser (::fhir::decimal_pskel& p)
  {
    this->altitude_parser_ = &p;
  }

  void Location_Position_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::decimal_pskel& longitude,
           ::fhir::decimal_pskel& latitude,
           ::fhir::decimal_pskel& altitude)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->longitude_parser_ = &longitude;
    this->latitude_parser_ = &latitude;
    this->altitude_parser_ = &altitude;
  }

  Location_Position_pskel::
  Location_Position_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Location_Position_impl_ (0),
    longitude_parser_ (0),
    latitude_parser_ (0),
    altitude_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Location_Position_pskel::
  Location_Position_pskel (Location_Position_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Location_Position_impl_ (impl),
    longitude_parser_ (0),
    latitude_parser_ (0),
    altitude_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Location_HoursOfOperation_pskel
  //

  void Location_HoursOfOperation_pskel::
  daysOfWeek_parser (::fhir::DaysOfWeek_pskel& p)
  {
    this->daysOfWeek_parser_ = &p;
  }

  void Location_HoursOfOperation_pskel::
  allDay_parser (::fhir::boolean_pskel& p)
  {
    this->allDay_parser_ = &p;
  }

  void Location_HoursOfOperation_pskel::
  openingTime_parser (::fhir::time_pskel& p)
  {
    this->openingTime_parser_ = &p;
  }

  void Location_HoursOfOperation_pskel::
  closingTime_parser (::fhir::time_pskel& p)
  {
    this->closingTime_parser_ = &p;
  }

  void Location_HoursOfOperation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::DaysOfWeek_pskel& daysOfWeek,
           ::fhir::boolean_pskel& allDay,
           ::fhir::time_pskel& openingTime,
           ::fhir::time_pskel& closingTime)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->daysOfWeek_parser_ = &daysOfWeek;
    this->allDay_parser_ = &allDay;
    this->openingTime_parser_ = &openingTime;
    this->closingTime_parser_ = &closingTime;
  }

  Location_HoursOfOperation_pskel::
  Location_HoursOfOperation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Location_HoursOfOperation_impl_ (0),
    daysOfWeek_parser_ (0),
    allDay_parser_ (0),
    openingTime_parser_ (0),
    closingTime_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Location_HoursOfOperation_pskel::
  Location_HoursOfOperation_pskel (Location_HoursOfOperation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Location_HoursOfOperation_impl_ (impl),
    daysOfWeek_parser_ (0),
    allDay_parser_ (0),
    openingTime_parser_ (0),
    closingTime_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // LocationMode_list_pskel
  //

  LocationMode_list_pskel::
  LocationMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    LocationMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_LocationMode_list_pskel_enums_, 2UL);
  }

  LocationMode_list_pskel::
  LocationMode_list_pskel (LocationMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    LocationMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_LocationMode_list_pskel_enums_, 2UL);
  }

  // LocationMode_pskel
  //

  void LocationMode_pskel::
  value_parser (::fhir::LocationMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void LocationMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::LocationMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  LocationMode_pskel::
  LocationMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    LocationMode_impl_ (0),
    value_parser_ (0)
  {
  }

  LocationMode_pskel::
  LocationMode_pskel (LocationMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    LocationMode_impl_ (impl),
    value_parser_ (0)
  {
  }

  // LocationStatus_list_pskel
  //

  LocationStatus_list_pskel::
  LocationStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    LocationStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_LocationStatus_list_pskel_enums_, 3UL);
  }

  LocationStatus_list_pskel::
  LocationStatus_list_pskel (LocationStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    LocationStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_LocationStatus_list_pskel_enums_, 3UL);
  }

  // LocationStatus_pskel
  //

  void LocationStatus_pskel::
  value_parser (::fhir::LocationStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void LocationStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::LocationStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  LocationStatus_pskel::
  LocationStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    LocationStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  LocationStatus_pskel::
  LocationStatus_pskel (LocationStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    LocationStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Location_pskel
  //

  void Location_pskel::
  identifier ()
  {
    if (this->Location_impl_)
      this->Location_impl_->identifier ();
  }

  void Location_pskel::
  status ()
  {
    if (this->Location_impl_)
      this->Location_impl_->status ();
  }

  void Location_pskel::
  operationalStatus ()
  {
    if (this->Location_impl_)
      this->Location_impl_->operationalStatus ();
  }

  void Location_pskel::
  name ()
  {
    if (this->Location_impl_)
      this->Location_impl_->name ();
  }

  void Location_pskel::
  alias ()
  {
    if (this->Location_impl_)
      this->Location_impl_->alias ();
  }

  void Location_pskel::
  description ()
  {
    if (this->Location_impl_)
      this->Location_impl_->description ();
  }

  void Location_pskel::
  mode ()
  {
    if (this->Location_impl_)
      this->Location_impl_->mode ();
  }

  void Location_pskel::
  type ()
  {
    if (this->Location_impl_)
      this->Location_impl_->type ();
  }

  void Location_pskel::
  telecom ()
  {
    if (this->Location_impl_)
      this->Location_impl_->telecom ();
  }

  void Location_pskel::
  address ()
  {
    if (this->Location_impl_)
      this->Location_impl_->address ();
  }

  void Location_pskel::
  physicalType ()
  {
    if (this->Location_impl_)
      this->Location_impl_->physicalType ();
  }

  void Location_pskel::
  position ()
  {
    if (this->Location_impl_)
      this->Location_impl_->position ();
  }

  void Location_pskel::
  managingOrganization ()
  {
    if (this->Location_impl_)
      this->Location_impl_->managingOrganization ();
  }

  void Location_pskel::
  partOf ()
  {
    if (this->Location_impl_)
      this->Location_impl_->partOf ();
  }

  void Location_pskel::
  hoursOfOperation ()
  {
    if (this->Location_impl_)
      this->Location_impl_->hoursOfOperation ();
  }

  void Location_pskel::
  availabilityExceptions ()
  {
    if (this->Location_impl_)
      this->Location_impl_->availabilityExceptions ();
  }

  void Location_pskel::
  endpoint ()
  {
    if (this->Location_impl_)
      this->Location_impl_->endpoint ();
  }

  void Location_pskel::
  post_Location ()
  {
    if (this->Location_impl_)
      this->Location_impl_->post_Location ();
    else
      post_DomainResource ();
  }

  void Location_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->operationalStatus_parser_)
      this->operationalStatus_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->alias_parser_)
      this->alias_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->mode_parser_)
      this->mode_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->telecom_parser_)
      this->telecom_parser_->_reset ();

    if (this->address_parser_)
      this->address_parser_->_reset ();

    if (this->physicalType_parser_)
      this->physicalType_parser_->_reset ();

    if (this->position_parser_)
      this->position_parser_->_reset ();

    if (this->managingOrganization_parser_)
      this->managingOrganization_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->hoursOfOperation_parser_)
      this->hoursOfOperation_parser_->_reset ();

    if (this->availabilityExceptions_parser_)
      this->availabilityExceptions_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    this->resetting_ = false;
  }

  // Location_Position_pskel
  //

  void Location_Position_pskel::
  longitude ()
  {
    if (this->Location_Position_impl_)
      this->Location_Position_impl_->longitude ();
  }

  void Location_Position_pskel::
  latitude ()
  {
    if (this->Location_Position_impl_)
      this->Location_Position_impl_->latitude ();
  }

  void Location_Position_pskel::
  altitude ()
  {
    if (this->Location_Position_impl_)
      this->Location_Position_impl_->altitude ();
  }

  void Location_Position_pskel::
  post_Location_Position ()
  {
    if (this->Location_Position_impl_)
      this->Location_Position_impl_->post_Location_Position ();
    else
      post_BackboneElement ();
  }

  void Location_Position_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->longitude_parser_)
      this->longitude_parser_->_reset ();

    if (this->latitude_parser_)
      this->latitude_parser_->_reset ();

    if (this->altitude_parser_)
      this->altitude_parser_->_reset ();

    this->resetting_ = false;
  }

  // Location_HoursOfOperation_pskel
  //

  void Location_HoursOfOperation_pskel::
  daysOfWeek ()
  {
    if (this->Location_HoursOfOperation_impl_)
      this->Location_HoursOfOperation_impl_->daysOfWeek ();
  }

  void Location_HoursOfOperation_pskel::
  allDay ()
  {
    if (this->Location_HoursOfOperation_impl_)
      this->Location_HoursOfOperation_impl_->allDay ();
  }

  void Location_HoursOfOperation_pskel::
  openingTime ()
  {
    if (this->Location_HoursOfOperation_impl_)
      this->Location_HoursOfOperation_impl_->openingTime ();
  }

  void Location_HoursOfOperation_pskel::
  closingTime ()
  {
    if (this->Location_HoursOfOperation_impl_)
      this->Location_HoursOfOperation_impl_->closingTime ();
  }

  void Location_HoursOfOperation_pskel::
  post_Location_HoursOfOperation ()
  {
    if (this->Location_HoursOfOperation_impl_)
      this->Location_HoursOfOperation_impl_->post_Location_HoursOfOperation ();
    else
      post_BackboneElement ();
  }

  void Location_HoursOfOperation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->daysOfWeek_parser_)
      this->daysOfWeek_parser_->_reset ();

    if (this->allDay_parser_)
      this->allDay_parser_->_reset ();

    if (this->openingTime_parser_)
      this->openingTime_parser_->_reset ();

    if (this->closingTime_parser_)
      this->closingTime_parser_->_reset ();

    this->resetting_ = false;
  }

  // LocationMode_list_pskel
  //

  void LocationMode_list_pskel::
  post_LocationMode_list ()
  {
    if (this->LocationMode_list_impl_)
      this->LocationMode_list_impl_->post_LocationMode_list ();
    else
      post_code_primitive ();
  }

  const char* const LocationMode_list_pskel::_xsde_LocationMode_list_pskel_enums_[2UL] = 
  {
    "instance",
    "kind"
  };

  // LocationMode_pskel
  //

  void LocationMode_pskel::
  value ()
  {
    if (this->LocationMode_impl_)
      this->LocationMode_impl_->value ();
  }

  void LocationMode_pskel::
  post_LocationMode ()
  {
    if (this->LocationMode_impl_)
      this->LocationMode_impl_->post_LocationMode ();
    else
      post_Element ();
  }

  void LocationMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // LocationStatus_list_pskel
  //

  void LocationStatus_list_pskel::
  post_LocationStatus_list ()
  {
    if (this->LocationStatus_list_impl_)
      this->LocationStatus_list_impl_->post_LocationStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const LocationStatus_list_pskel::_xsde_LocationStatus_list_pskel_enums_[3UL] = 
  {
    "active",
    "inactive",
    "suspended"
  };

  // LocationStatus_pskel
  //

  void LocationStatus_pskel::
  value ()
  {
    if (this->LocationStatus_impl_)
      this->LocationStatus_impl_->value ();
  }

  void LocationStatus_pskel::
  post_LocationStatus ()
  {
    if (this->LocationStatus_impl_)
      this->LocationStatus_impl_->post_LocationStatus ();
    else
      post_Element ();
  }

  void LocationStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Location_pskel.
  //
  bool Location_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "operationalStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "alias" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "mode" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "telecom" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "address" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "physicalType" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "position" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "managingOrganization" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "hoursOfOperation" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "availabilityExceptions" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "endpoint" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Location_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Location_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Location_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Location_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Location_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_LocationStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "operationalStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operationalStatus_parser_)
            {
              this->operationalStatus_parser_->pre ();
              ctx.nested_parser (this->operationalStatus_parser_);
            }
          }
          else
          {
            if (this->operationalStatus_parser_ != 0)
            {
              this->operationalStatus_parser_->post_Coding ();
              this->operationalStatus ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "alias" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->alias_parser_)
            {
              this->alias_parser_->pre ();
              ctx.nested_parser (this->alias_parser_);
            }
          }
          else
          {
            if (this->alias_parser_ != 0)
            {
              this->alias_parser_->post_string ();
              this->alias ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mode_parser_)
            {
              this->mode_parser_->pre ();
              ctx.nested_parser (this->mode_parser_);
            }
          }
          else
          {
            if (this->mode_parser_ != 0)
            {
              this->mode_parser_->post_LocationMode ();
              this->mode ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "telecom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->telecom_parser_)
            {
              this->telecom_parser_->pre ();
              ctx.nested_parser (this->telecom_parser_);
            }
          }
          else
          {
            if (this->telecom_parser_ != 0)
            {
              this->telecom_parser_->post_ContactPoint ();
              this->telecom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "address" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->address_parser_)
            {
              this->address_parser_->pre ();
              ctx.nested_parser (this->address_parser_);
            }
          }
          else
          {
            if (this->address_parser_ != 0)
            {
              this->address_parser_->post_Address ();
              this->address ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "physicalType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->physicalType_parser_)
            {
              this->physicalType_parser_->pre ();
              ctx.nested_parser (this->physicalType_parser_);
            }
          }
          else
          {
            if (this->physicalType_parser_ != 0)
            {
              this->physicalType_parser_->post_CodeableConcept ();
              this->physicalType ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "position" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->position_parser_)
            {
              this->position_parser_->pre ();
              ctx.nested_parser (this->position_parser_);
            }
          }
          else
          {
            if (this->position_parser_ != 0)
            {
              this->position_parser_->post_Location_Position ();
              this->position ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "managingOrganization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->managingOrganization_parser_)
            {
              this->managingOrganization_parser_->pre ();
              ctx.nested_parser (this->managingOrganization_parser_);
            }
          }
          else
          {
            if (this->managingOrganization_parser_ != 0)
            {
              this->managingOrganization_parser_->post_Reference ();
              this->managingOrganization ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "hoursOfOperation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->hoursOfOperation_parser_)
            {
              this->hoursOfOperation_parser_->pre ();
              ctx.nested_parser (this->hoursOfOperation_parser_);
            }
          }
          else
          {
            if (this->hoursOfOperation_parser_ != 0)
            {
              this->hoursOfOperation_parser_->post_Location_HoursOfOperation ();
              this->hoursOfOperation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "availabilityExceptions" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availabilityExceptions_parser_)
            {
              this->availabilityExceptions_parser_->pre ();
              ctx.nested_parser (this->availabilityExceptions_parser_);
            }
          }
          else
          {
            if (this->availabilityExceptions_parser_ != 0)
            {
              this->availabilityExceptions_parser_->post_string ();
              this->availabilityExceptions ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_Reference ();
              this->endpoint ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Location_Position_pskel.
  //
  bool Location_Position_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "longitude" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Location_Position_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Location_Position_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Location_Position_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Location_Position_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Location_Position_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "longitude" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->longitude_parser_)
            {
              this->longitude_parser_->pre ();
              ctx.nested_parser (this->longitude_parser_);
            }
          }
          else
          {
            if (this->longitude_parser_ != 0)
            {
              this->longitude_parser_->post_decimal ();
              this->longitude ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "latitude" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->latitude_parser_)
            {
              this->latitude_parser_->pre ();
              ctx.nested_parser (this->latitude_parser_);
            }
          }
          else
          {
            if (this->latitude_parser_ != 0)
            {
              this->latitude_parser_->post_decimal ();
              this->latitude ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "altitude" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->altitude_parser_)
            {
              this->altitude_parser_->pre ();
              ctx.nested_parser (this->altitude_parser_);
            }
          }
          else
          {
            if (this->altitude_parser_ != 0)
            {
              this->altitude_parser_->post_decimal ();
              this->altitude ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Location_HoursOfOperation_pskel.
  //
  bool Location_HoursOfOperation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "daysOfWeek" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "allDay" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "openingTime" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "closingTime" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Location_HoursOfOperation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Location_HoursOfOperation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Location_HoursOfOperation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Location_HoursOfOperation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Location_HoursOfOperation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "daysOfWeek" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->daysOfWeek_parser_)
            {
              this->daysOfWeek_parser_->pre ();
              ctx.nested_parser (this->daysOfWeek_parser_);
            }
          }
          else
          {
            if (this->daysOfWeek_parser_ != 0)
            {
              this->daysOfWeek_parser_->post_DaysOfWeek ();
              this->daysOfWeek ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "allDay" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allDay_parser_)
            {
              this->allDay_parser_->pre ();
              ctx.nested_parser (this->allDay_parser_);
            }
          }
          else
          {
            if (this->allDay_parser_ != 0)
            {
              this->allDay_parser_->post_boolean ();
              this->allDay ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "openingTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->openingTime_parser_)
            {
              this->openingTime_parser_->pre ();
              ctx.nested_parser (this->openingTime_parser_);
            }
          }
          else
          {
            if (this->openingTime_parser_ != 0)
            {
              this->openingTime_parser_->post_time ();
              this->openingTime ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "closingTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->closingTime_parser_)
            {
              this->closingTime_parser_->pre ();
              ctx.nested_parser (this->closingTime_parser_);
            }
          }
          else
          {
            if (this->closingTime_parser_ != 0)
            {
              this->closingTime_parser_->post_time ();
              this->closingTime ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for LocationMode_pskel.
  //
  bool LocationMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_LocationMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for LocationStatus_pskel.
  //
  bool LocationStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_LocationStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

