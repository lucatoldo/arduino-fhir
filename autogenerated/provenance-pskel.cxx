// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "provenance-pskel.hxx"

namespace fhir
{
  // Provenance_pskel
  //

  void Provenance_pskel::
  target_parser (::fhir::Reference_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void Provenance_pskel::
  occurredPeriod_parser (::fhir::Period_pskel& p)
  {
    this->occurredPeriod_parser_ = &p;
  }

  void Provenance_pskel::
  occurredDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->occurredDateTime_parser_ = &p;
  }

  void Provenance_pskel::
  recorded_parser (::fhir::instant_pskel& p)
  {
    this->recorded_parser_ = &p;
  }

  void Provenance_pskel::
  policy_parser (::fhir::uri_pskel& p)
  {
    this->policy_parser_ = &p;
  }

  void Provenance_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Provenance_pskel::
  reason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void Provenance_pskel::
  activity_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->activity_parser_ = &p;
  }

  void Provenance_pskel::
  agent_parser (::fhir::Provenance_Agent_pskel& p)
  {
    this->agent_parser_ = &p;
  }

  void Provenance_pskel::
  entity_parser (::fhir::Provenance_Entity_pskel& p)
  {
    this->entity_parser_ = &p;
  }

  void Provenance_pskel::
  signature_parser (::fhir::Signature_pskel& p)
  {
    this->signature_parser_ = &p;
  }

  void Provenance_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& target,
           ::fhir::Period_pskel& occurredPeriod,
           ::fhir::dateTime_pskel& occurredDateTime,
           ::fhir::instant_pskel& recorded,
           ::fhir::uri_pskel& policy,
           ::fhir::Reference_pskel& location,
           ::fhir::CodeableConcept_pskel& reason,
           ::fhir::CodeableConcept_pskel& activity,
           ::fhir::Provenance_Agent_pskel& agent,
           ::fhir::Provenance_Entity_pskel& entity,
           ::fhir::Signature_pskel& signature)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->target_parser_ = &target;
    this->occurredPeriod_parser_ = &occurredPeriod;
    this->occurredDateTime_parser_ = &occurredDateTime;
    this->recorded_parser_ = &recorded;
    this->policy_parser_ = &policy;
    this->location_parser_ = &location;
    this->reason_parser_ = &reason;
    this->activity_parser_ = &activity;
    this->agent_parser_ = &agent;
    this->entity_parser_ = &entity;
    this->signature_parser_ = &signature;
  }

  Provenance_pskel::
  Provenance_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Provenance_impl_ (0),
    target_parser_ (0),
    occurredPeriod_parser_ (0),
    occurredDateTime_parser_ (0),
    recorded_parser_ (0),
    policy_parser_ (0),
    location_parser_ (0),
    reason_parser_ (0),
    activity_parser_ (0),
    agent_parser_ (0),
    entity_parser_ (0),
    signature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Provenance_pskel::
  Provenance_pskel (Provenance_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Provenance_impl_ (impl),
    target_parser_ (0),
    occurredPeriod_parser_ (0),
    occurredDateTime_parser_ (0),
    recorded_parser_ (0),
    policy_parser_ (0),
    location_parser_ (0),
    reason_parser_ (0),
    activity_parser_ (0),
    agent_parser_ (0),
    entity_parser_ (0),
    signature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Provenance_Agent_pskel
  //

  void Provenance_Agent_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Provenance_Agent_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void Provenance_Agent_pskel::
  who_parser (::fhir::Reference_pskel& p)
  {
    this->who_parser_ = &p;
  }

  void Provenance_Agent_pskel::
  onBehalfOf_parser (::fhir::Reference_pskel& p)
  {
    this->onBehalfOf_parser_ = &p;
  }

  void Provenance_Agent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::Reference_pskel& who,
           ::fhir::Reference_pskel& onBehalfOf)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->role_parser_ = &role;
    this->who_parser_ = &who;
    this->onBehalfOf_parser_ = &onBehalfOf;
  }

  Provenance_Agent_pskel::
  Provenance_Agent_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Provenance_Agent_impl_ (0),
    type_parser_ (0),
    role_parser_ (0),
    who_parser_ (0),
    onBehalfOf_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Provenance_Agent_pskel::
  Provenance_Agent_pskel (Provenance_Agent_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Provenance_Agent_impl_ (impl),
    type_parser_ (0),
    role_parser_ (0),
    who_parser_ (0),
    onBehalfOf_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Provenance_Entity_pskel
  //

  void Provenance_Entity_pskel::
  role_parser (::fhir::ProvenanceEntityRole_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void Provenance_Entity_pskel::
  what_parser (::fhir::Reference_pskel& p)
  {
    this->what_parser_ = &p;
  }

  void Provenance_Entity_pskel::
  agent_parser (::fhir::Provenance_Agent_pskel& p)
  {
    this->agent_parser_ = &p;
  }

  void Provenance_Entity_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ProvenanceEntityRole_pskel& role,
           ::fhir::Reference_pskel& what,
           ::fhir::Provenance_Agent_pskel& agent)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->role_parser_ = &role;
    this->what_parser_ = &what;
    this->agent_parser_ = &agent;
  }

  Provenance_Entity_pskel::
  Provenance_Entity_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Provenance_Entity_impl_ (0),
    role_parser_ (0),
    what_parser_ (0),
    agent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Provenance_Entity_pskel::
  Provenance_Entity_pskel (Provenance_Entity_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Provenance_Entity_impl_ (impl),
    role_parser_ (0),
    what_parser_ (0),
    agent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ProvenanceEntityRole_list_pskel
  //

  ProvenanceEntityRole_list_pskel::
  ProvenanceEntityRole_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ProvenanceEntityRole_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ProvenanceEntityRole_list_pskel_enums_, 5UL);
  }

  ProvenanceEntityRole_list_pskel::
  ProvenanceEntityRole_list_pskel (ProvenanceEntityRole_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ProvenanceEntityRole_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ProvenanceEntityRole_list_pskel_enums_, 5UL);
  }

  // ProvenanceEntityRole_pskel
  //

  void ProvenanceEntityRole_pskel::
  value_parser (::fhir::ProvenanceEntityRole_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ProvenanceEntityRole_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ProvenanceEntityRole_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ProvenanceEntityRole_pskel::
  ProvenanceEntityRole_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ProvenanceEntityRole_impl_ (0),
    value_parser_ (0)
  {
  }

  ProvenanceEntityRole_pskel::
  ProvenanceEntityRole_pskel (ProvenanceEntityRole_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ProvenanceEntityRole_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Provenance_pskel
  //

  void Provenance_pskel::
  target ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->target ();
  }

  void Provenance_pskel::
  occurredPeriod ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->occurredPeriod ();
  }

  void Provenance_pskel::
  occurredDateTime ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->occurredDateTime ();
  }

  void Provenance_pskel::
  recorded ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->recorded ();
  }

  void Provenance_pskel::
  policy ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->policy ();
  }

  void Provenance_pskel::
  location ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->location ();
  }

  void Provenance_pskel::
  reason ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->reason ();
  }

  void Provenance_pskel::
  activity ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->activity ();
  }

  void Provenance_pskel::
  agent ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->agent ();
  }

  void Provenance_pskel::
  entity ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->entity ();
  }

  void Provenance_pskel::
  signature ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->signature ();
  }

  void Provenance_pskel::
  post_Provenance ()
  {
    if (this->Provenance_impl_)
      this->Provenance_impl_->post_Provenance ();
    else
      post_DomainResource ();
  }

  void Provenance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->target_parser_)
      this->target_parser_->_reset ();

    if (this->occurredPeriod_parser_)
      this->occurredPeriod_parser_->_reset ();

    if (this->occurredDateTime_parser_)
      this->occurredDateTime_parser_->_reset ();

    if (this->recorded_parser_)
      this->recorded_parser_->_reset ();

    if (this->policy_parser_)
      this->policy_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    if (this->activity_parser_)
      this->activity_parser_->_reset ();

    if (this->agent_parser_)
      this->agent_parser_->_reset ();

    if (this->entity_parser_)
      this->entity_parser_->_reset ();

    if (this->signature_parser_)
      this->signature_parser_->_reset ();

    this->resetting_ = false;
  }

  // Provenance_Agent_pskel
  //

  void Provenance_Agent_pskel::
  type ()
  {
    if (this->Provenance_Agent_impl_)
      this->Provenance_Agent_impl_->type ();
  }

  void Provenance_Agent_pskel::
  role ()
  {
    if (this->Provenance_Agent_impl_)
      this->Provenance_Agent_impl_->role ();
  }

  void Provenance_Agent_pskel::
  who ()
  {
    if (this->Provenance_Agent_impl_)
      this->Provenance_Agent_impl_->who ();
  }

  void Provenance_Agent_pskel::
  onBehalfOf ()
  {
    if (this->Provenance_Agent_impl_)
      this->Provenance_Agent_impl_->onBehalfOf ();
  }

  void Provenance_Agent_pskel::
  post_Provenance_Agent ()
  {
    if (this->Provenance_Agent_impl_)
      this->Provenance_Agent_impl_->post_Provenance_Agent ();
    else
      post_BackboneElement ();
  }

  void Provenance_Agent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->who_parser_)
      this->who_parser_->_reset ();

    if (this->onBehalfOf_parser_)
      this->onBehalfOf_parser_->_reset ();

    this->resetting_ = false;
  }

  // Provenance_Entity_pskel
  //

  void Provenance_Entity_pskel::
  role ()
  {
    if (this->Provenance_Entity_impl_)
      this->Provenance_Entity_impl_->role ();
  }

  void Provenance_Entity_pskel::
  what ()
  {
    if (this->Provenance_Entity_impl_)
      this->Provenance_Entity_impl_->what ();
  }

  void Provenance_Entity_pskel::
  agent ()
  {
    if (this->Provenance_Entity_impl_)
      this->Provenance_Entity_impl_->agent ();
  }

  void Provenance_Entity_pskel::
  post_Provenance_Entity ()
  {
    if (this->Provenance_Entity_impl_)
      this->Provenance_Entity_impl_->post_Provenance_Entity ();
    else
      post_BackboneElement ();
  }

  void Provenance_Entity_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->what_parser_)
      this->what_parser_->_reset ();

    if (this->agent_parser_)
      this->agent_parser_->_reset ();

    this->resetting_ = false;
  }

  // ProvenanceEntityRole_list_pskel
  //

  void ProvenanceEntityRole_list_pskel::
  post_ProvenanceEntityRole_list ()
  {
    if (this->ProvenanceEntityRole_list_impl_)
      this->ProvenanceEntityRole_list_impl_->post_ProvenanceEntityRole_list ();
    else
      post_code_primitive ();
  }

  const char* const ProvenanceEntityRole_list_pskel::_xsde_ProvenanceEntityRole_list_pskel_enums_[5UL] = 
  {
    "derivation",
    "quotation",
    "removal",
    "revision",
    "source"
  };

  // ProvenanceEntityRole_pskel
  //

  void ProvenanceEntityRole_pskel::
  value ()
  {
    if (this->ProvenanceEntityRole_impl_)
      this->ProvenanceEntityRole_impl_->value ();
  }

  void ProvenanceEntityRole_pskel::
  post_ProvenanceEntityRole ()
  {
    if (this->ProvenanceEntityRole_impl_)
      this->ProvenanceEntityRole_impl_->post_ProvenanceEntityRole ();
    else
      post_Element ();
  }

  void ProvenanceEntityRole_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Provenance_pskel.
  //
  bool Provenance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "target" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Provenance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Provenance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Provenance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Provenance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Provenance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_Reference ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "occurredPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurredPeriod_parser_)
            {
              this->occurredPeriod_parser_->pre ();
              ctx.nested_parser (this->occurredPeriod_parser_);
            }
          }
          else
          {
            if (this->occurredPeriod_parser_ != 0)
            {
              this->occurredPeriod_parser_->post_Period ();
              this->occurredPeriod ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "occurredDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurredDateTime_parser_)
            {
              this->occurredDateTime_parser_->pre ();
              ctx.nested_parser (this->occurredDateTime_parser_);
            }
          }
          else
          {
            if (this->occurredDateTime_parser_ != 0)
            {
              this->occurredDateTime_parser_->post_dateTime ();
              this->occurredDateTime ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "recorded" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recorded_parser_)
            {
              this->recorded_parser_->pre ();
              ctx.nested_parser (this->recorded_parser_);
            }
          }
          else
          {
            if (this->recorded_parser_ != 0)
            {
              this->recorded_parser_->post_instant ();
              this->recorded ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "policy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->policy_parser_)
            {
              this->policy_parser_->pre ();
              ctx.nested_parser (this->policy_parser_);
            }
          }
          else
          {
            if (this->policy_parser_ != 0)
            {
              this->policy_parser_->post_uri ();
              this->policy ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_CodeableConcept ();
              this->reason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "activity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->activity_parser_)
            {
              this->activity_parser_->pre ();
              ctx.nested_parser (this->activity_parser_);
            }
          }
          else
          {
            if (this->activity_parser_ != 0)
            {
              this->activity_parser_->post_CodeableConcept ();
              this->activity ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "agent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->agent_parser_)
            {
              this->agent_parser_->pre ();
              ctx.nested_parser (this->agent_parser_);
            }
          }
          else
          {
            if (this->agent_parser_ != 0)
            {
              this->agent_parser_->post_Provenance_Agent ();
              this->agent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "entity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entity_parser_)
            {
              this->entity_parser_->pre ();
              ctx.nested_parser (this->entity_parser_);
            }
          }
          else
          {
            if (this->entity_parser_ != 0)
            {
              this->entity_parser_->post_Provenance_Entity ();
              this->entity ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "signature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->signature_parser_)
            {
              this->signature_parser_->pre ();
              ctx.nested_parser (this->signature_parser_);
            }
          }
          else
          {
            if (this->signature_parser_ != 0)
            {
              this->signature_parser_->post_Signature ();
              this->signature ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Provenance_Agent_pskel.
  //
  bool Provenance_Agent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "role" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "who" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Provenance_Agent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Provenance_Agent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Provenance_Agent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Provenance_Agent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Provenance_Agent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "who" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->who_parser_)
            {
              this->who_parser_->pre ();
              ctx.nested_parser (this->who_parser_);
            }
          }
          else
          {
            if (this->who_parser_ != 0)
            {
              this->who_parser_->post_Reference ();
              this->who ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "onBehalfOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onBehalfOf_parser_)
            {
              this->onBehalfOf_parser_->pre ();
              ctx.nested_parser (this->onBehalfOf_parser_);
            }
          }
          else
          {
            if (this->onBehalfOf_parser_ != 0)
            {
              this->onBehalfOf_parser_->post_Reference ();
              this->onBehalfOf ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Provenance_Entity_pskel.
  //
  bool Provenance_Entity_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "role" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Provenance_Entity_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Provenance_Entity_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Provenance_Entity_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Provenance_Entity_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Provenance_Entity_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_ProvenanceEntityRole ();
              this->role ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "what" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->what_parser_)
            {
              this->what_parser_->pre ();
              ctx.nested_parser (this->what_parser_);
            }
          }
          else
          {
            if (this->what_parser_ != 0)
            {
              this->what_parser_->post_Reference ();
              this->what ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "agent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->agent_parser_)
            {
              this->agent_parser_->pre ();
              ctx.nested_parser (this->agent_parser_);
            }
          }
          else
          {
            if (this->agent_parser_ != 0)
            {
              this->agent_parser_->post_Provenance_Agent ();
              this->agent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ProvenanceEntityRole_pskel.
  //
  bool ProvenanceEntityRole_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ProvenanceEntityRole_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

