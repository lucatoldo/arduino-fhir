// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "endpoint-pskel.hxx"

namespace fhir
{
  // Endpoint_pskel
  //

  void Endpoint_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Endpoint_pskel::
  status_parser (::fhir::EndpointStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Endpoint_pskel::
  connectionType_parser (::fhir::Coding_pskel& p)
  {
    this->connectionType_parser_ = &p;
  }

  void Endpoint_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Endpoint_pskel::
  managingOrganization_parser (::fhir::Reference_pskel& p)
  {
    this->managingOrganization_parser_ = &p;
  }

  void Endpoint_pskel::
  contact_parser (::fhir::ContactPoint_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void Endpoint_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Endpoint_pskel::
  payloadType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->payloadType_parser_ = &p;
  }

  void Endpoint_pskel::
  payloadMimeType_parser (::fhir::code_pskel& p)
  {
    this->payloadMimeType_parser_ = &p;
  }

  void Endpoint_pskel::
  address_parser (::fhir::url_pskel& p)
  {
    this->address_parser_ = &p;
  }

  void Endpoint_pskel::
  header_parser (::fhir::string_pskel& p)
  {
    this->header_parser_ = &p;
  }

  void Endpoint_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::EndpointStatus_pskel& status,
           ::fhir::Coding_pskel& connectionType,
           ::fhir::string_pskel& name,
           ::fhir::Reference_pskel& managingOrganization,
           ::fhir::ContactPoint_pskel& contact,
           ::fhir::Period_pskel& period,
           ::fhir::CodeableConcept_pskel& payloadType,
           ::fhir::code_pskel& payloadMimeType,
           ::fhir::url_pskel& address,
           ::fhir::string_pskel& header)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->connectionType_parser_ = &connectionType;
    this->name_parser_ = &name;
    this->managingOrganization_parser_ = &managingOrganization;
    this->contact_parser_ = &contact;
    this->period_parser_ = &period;
    this->payloadType_parser_ = &payloadType;
    this->payloadMimeType_parser_ = &payloadMimeType;
    this->address_parser_ = &address;
    this->header_parser_ = &header;
  }

  Endpoint_pskel::
  Endpoint_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Endpoint_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    connectionType_parser_ (0),
    name_parser_ (0),
    managingOrganization_parser_ (0),
    contact_parser_ (0),
    period_parser_ (0),
    payloadType_parser_ (0),
    payloadMimeType_parser_ (0),
    address_parser_ (0),
    header_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Endpoint_pskel::
  Endpoint_pskel (Endpoint_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Endpoint_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    connectionType_parser_ (0),
    name_parser_ (0),
    managingOrganization_parser_ (0),
    contact_parser_ (0),
    period_parser_ (0),
    payloadType_parser_ (0),
    payloadMimeType_parser_ (0),
    address_parser_ (0),
    header_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EndpointStatus_list_pskel
  //

  EndpointStatus_list_pskel::
  EndpointStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EndpointStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EndpointStatus_list_pskel_enums_, 6UL);
  }

  EndpointStatus_list_pskel::
  EndpointStatus_list_pskel (EndpointStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EndpointStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EndpointStatus_list_pskel_enums_, 6UL);
  }

  // EndpointStatus_pskel
  //

  void EndpointStatus_pskel::
  value_parser (::fhir::EndpointStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EndpointStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EndpointStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EndpointStatus_pskel::
  EndpointStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EndpointStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  EndpointStatus_pskel::
  EndpointStatus_pskel (EndpointStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EndpointStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Endpoint_pskel
  //

  void Endpoint_pskel::
  identifier ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->identifier ();
  }

  void Endpoint_pskel::
  status ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->status ();
  }

  void Endpoint_pskel::
  connectionType ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->connectionType ();
  }

  void Endpoint_pskel::
  name ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->name ();
  }

  void Endpoint_pskel::
  managingOrganization ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->managingOrganization ();
  }

  void Endpoint_pskel::
  contact ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->contact ();
  }

  void Endpoint_pskel::
  period ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->period ();
  }

  void Endpoint_pskel::
  payloadType ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->payloadType ();
  }

  void Endpoint_pskel::
  payloadMimeType ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->payloadMimeType ();
  }

  void Endpoint_pskel::
  address ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->address ();
  }

  void Endpoint_pskel::
  header ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->header ();
  }

  void Endpoint_pskel::
  post_Endpoint ()
  {
    if (this->Endpoint_impl_)
      this->Endpoint_impl_->post_Endpoint ();
    else
      post_DomainResource ();
  }

  void Endpoint_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->connectionType_parser_)
      this->connectionType_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->managingOrganization_parser_)
      this->managingOrganization_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->payloadType_parser_)
      this->payloadType_parser_->_reset ();

    if (this->payloadMimeType_parser_)
      this->payloadMimeType_parser_->_reset ();

    if (this->address_parser_)
      this->address_parser_->_reset ();

    if (this->header_parser_)
      this->header_parser_->_reset ();

    this->resetting_ = false;
  }

  // EndpointStatus_list_pskel
  //

  void EndpointStatus_list_pskel::
  post_EndpointStatus_list ()
  {
    if (this->EndpointStatus_list_impl_)
      this->EndpointStatus_list_impl_->post_EndpointStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const EndpointStatus_list_pskel::_xsde_EndpointStatus_list_pskel_enums_[6UL] = 
  {
    "active",
    "entered-in-error",
    "error",
    "off",
    "suspended",
    "test"
  };

  // EndpointStatus_pskel
  //

  void EndpointStatus_pskel::
  value ()
  {
    if (this->EndpointStatus_impl_)
      this->EndpointStatus_impl_->value ();
  }

  void EndpointStatus_pskel::
  post_EndpointStatus ()
  {
    if (this->EndpointStatus_impl_)
      this->EndpointStatus_impl_->post_EndpointStatus ();
    else
      post_Element ();
  }

  void EndpointStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Endpoint_pskel.
  //
  bool Endpoint_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Endpoint_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Endpoint_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Endpoint_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Endpoint_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Endpoint_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EndpointStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "connectionType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->connectionType_parser_)
            {
              this->connectionType_parser_->pre ();
              ctx.nested_parser (this->connectionType_parser_);
            }
          }
          else
          {
            if (this->connectionType_parser_ != 0)
            {
              this->connectionType_parser_->post_Coding ();
              this->connectionType ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "managingOrganization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->managingOrganization_parser_)
            {
              this->managingOrganization_parser_->pre ();
              ctx.nested_parser (this->managingOrganization_parser_);
            }
          }
          else
          {
            if (this->managingOrganization_parser_ != 0)
            {
              this->managingOrganization_parser_->post_Reference ();
              this->managingOrganization ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactPoint ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "payloadType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payloadType_parser_)
            {
              this->payloadType_parser_->pre ();
              ctx.nested_parser (this->payloadType_parser_);
            }
          }
          else
          {
            if (this->payloadType_parser_ != 0)
            {
              this->payloadType_parser_->post_CodeableConcept ();
              this->payloadType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "payloadMimeType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payloadMimeType_parser_)
            {
              this->payloadMimeType_parser_->pre ();
              ctx.nested_parser (this->payloadMimeType_parser_);
            }
          }
          else
          {
            if (this->payloadMimeType_parser_ != 0)
            {
              this->payloadMimeType_parser_->post_code ();
              this->payloadMimeType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "address" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->address_parser_)
            {
              this->address_parser_->pre ();
              ctx.nested_parser (this->address_parser_);
            }
          }
          else
          {
            if (this->address_parser_ != 0)
            {
              this->address_parser_->post_url ();
              this->address ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "header" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->header_parser_)
            {
              this->header_parser_->pre ();
              ctx.nested_parser (this->header_parser_);
            }
          }
          else
          {
            if (this->header_parser_ != 0)
            {
              this->header_parser_->post_string ();
              this->header ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for EndpointStatus_pskel.
  //
  bool EndpointStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EndpointStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

