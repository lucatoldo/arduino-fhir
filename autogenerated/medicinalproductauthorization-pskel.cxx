// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "medicinalproductauthorization-pskel.hxx"

namespace fhir
{
  // MedicinalProductAuthorization_pskel
  //

  void MedicinalProductAuthorization_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  country_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->country_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  status_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  statusDate_parser (::fhir::dateTime_pskel& p)
  {
    this->statusDate_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  restoreDate_parser (::fhir::dateTime_pskel& p)
  {
    this->restoreDate_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  validityPeriod_parser (::fhir::Period_pskel& p)
  {
    this->validityPeriod_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  dataExclusivityPeriod_parser (::fhir::Period_pskel& p)
  {
    this->dataExclusivityPeriod_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  dateOfFirstAuthorization_parser (::fhir::dateTime_pskel& p)
  {
    this->dateOfFirstAuthorization_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  internationalBirthDate_parser (::fhir::dateTime_pskel& p)
  {
    this->internationalBirthDate_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  legalBasis_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->legalBasis_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  jurisdictionalAuthorization_parser (::fhir::MedicinalProductAuthorization_JurisdictionalAuthorization_pskel& p)
  {
    this->jurisdictionalAuthorization_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  holder_parser (::fhir::Reference_pskel& p)
  {
    this->holder_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  regulator_parser (::fhir::Reference_pskel& p)
  {
    this->regulator_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  procedure_parser (::fhir::MedicinalProductAuthorization_Procedure_pskel& p)
  {
    this->procedure_parser_ = &p;
  }

  void MedicinalProductAuthorization_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& subject,
           ::fhir::CodeableConcept_pskel& country,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::CodeableConcept_pskel& status,
           ::fhir::dateTime_pskel& statusDate,
           ::fhir::dateTime_pskel& restoreDate,
           ::fhir::Period_pskel& validityPeriod,
           ::fhir::Period_pskel& dataExclusivityPeriod,
           ::fhir::dateTime_pskel& dateOfFirstAuthorization,
           ::fhir::dateTime_pskel& internationalBirthDate,
           ::fhir::CodeableConcept_pskel& legalBasis,
           ::fhir::MedicinalProductAuthorization_JurisdictionalAuthorization_pskel& jurisdictionalAuthorization,
           ::fhir::Reference_pskel& holder,
           ::fhir::Reference_pskel& regulator,
           ::fhir::MedicinalProductAuthorization_Procedure_pskel& procedure)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->subject_parser_ = &subject;
    this->country_parser_ = &country;
    this->jurisdiction_parser_ = &jurisdiction;
    this->status_parser_ = &status;
    this->statusDate_parser_ = &statusDate;
    this->restoreDate_parser_ = &restoreDate;
    this->validityPeriod_parser_ = &validityPeriod;
    this->dataExclusivityPeriod_parser_ = &dataExclusivityPeriod;
    this->dateOfFirstAuthorization_parser_ = &dateOfFirstAuthorization;
    this->internationalBirthDate_parser_ = &internationalBirthDate;
    this->legalBasis_parser_ = &legalBasis;
    this->jurisdictionalAuthorization_parser_ = &jurisdictionalAuthorization;
    this->holder_parser_ = &holder;
    this->regulator_parser_ = &regulator;
    this->procedure_parser_ = &procedure;
  }

  MedicinalProductAuthorization_pskel::
  MedicinalProductAuthorization_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MedicinalProductAuthorization_impl_ (0),
    identifier_parser_ (0),
    subject_parser_ (0),
    country_parser_ (0),
    jurisdiction_parser_ (0),
    status_parser_ (0),
    statusDate_parser_ (0),
    restoreDate_parser_ (0),
    validityPeriod_parser_ (0),
    dataExclusivityPeriod_parser_ (0),
    dateOfFirstAuthorization_parser_ (0),
    internationalBirthDate_parser_ (0),
    legalBasis_parser_ (0),
    jurisdictionalAuthorization_parser_ (0),
    holder_parser_ (0),
    regulator_parser_ (0),
    procedure_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductAuthorization_pskel::
  MedicinalProductAuthorization_pskel (MedicinalProductAuthorization_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MedicinalProductAuthorization_impl_ (impl),
    identifier_parser_ (0),
    subject_parser_ (0),
    country_parser_ (0),
    jurisdiction_parser_ (0),
    status_parser_ (0),
    statusDate_parser_ (0),
    restoreDate_parser_ (0),
    validityPeriod_parser_ (0),
    dataExclusivityPeriod_parser_ (0),
    dateOfFirstAuthorization_parser_ (0),
    internationalBirthDate_parser_ (0),
    legalBasis_parser_ (0),
    jurisdictionalAuthorization_parser_ (0),
    holder_parser_ (0),
    regulator_parser_ (0),
    procedure_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductAuthorization_JurisdictionalAuthorization_pskel
  //

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  country_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->country_parser_ = &p;
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  legalStatusOfSupply_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->legalStatusOfSupply_parser_ = &p;
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  validityPeriod_parser (::fhir::Period_pskel& p)
  {
    this->validityPeriod_parser_ = &p;
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& country,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::CodeableConcept_pskel& legalStatusOfSupply,
           ::fhir::Period_pskel& validityPeriod)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->country_parser_ = &country;
    this->jurisdiction_parser_ = &jurisdiction;
    this->legalStatusOfSupply_parser_ = &legalStatusOfSupply;
    this->validityPeriod_parser_ = &validityPeriod;
  }

  MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  MedicinalProductAuthorization_JurisdictionalAuthorization_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductAuthorization_JurisdictionalAuthorization_impl_ (0),
    identifier_parser_ (0),
    country_parser_ (0),
    jurisdiction_parser_ (0),
    legalStatusOfSupply_parser_ (0),
    validityPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  MedicinalProductAuthorization_JurisdictionalAuthorization_pskel (MedicinalProductAuthorization_JurisdictionalAuthorization_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductAuthorization_JurisdictionalAuthorization_impl_ (impl),
    identifier_parser_ (0),
    country_parser_ (0),
    jurisdiction_parser_ (0),
    legalStatusOfSupply_parser_ (0),
    validityPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductAuthorization_Procedure_pskel
  //

  void MedicinalProductAuthorization_Procedure_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  datePeriod_parser (::fhir::Period_pskel& p)
  {
    this->datePeriod_parser_ = &p;
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  dateDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->dateDateTime_parser_ = &p;
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  application_parser (::fhir::MedicinalProductAuthorization_Procedure_pskel& p)
  {
    this->application_parser_ = &p;
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Period_pskel& datePeriod,
           ::fhir::dateTime_pskel& dateDateTime,
           ::fhir::MedicinalProductAuthorization_Procedure_pskel& application)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->type_parser_ = &type;
    this->datePeriod_parser_ = &datePeriod;
    this->dateDateTime_parser_ = &dateDateTime;
    this->application_parser_ = &application;
  }

  MedicinalProductAuthorization_Procedure_pskel::
  MedicinalProductAuthorization_Procedure_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductAuthorization_Procedure_impl_ (0),
    identifier_parser_ (0),
    type_parser_ (0),
    datePeriod_parser_ (0),
    dateDateTime_parser_ (0),
    application_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductAuthorization_Procedure_pskel::
  MedicinalProductAuthorization_Procedure_pskel (MedicinalProductAuthorization_Procedure_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductAuthorization_Procedure_impl_ (impl),
    identifier_parser_ (0),
    type_parser_ (0),
    datePeriod_parser_ (0),
    dateDateTime_parser_ (0),
    application_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MedicinalProductAuthorization_pskel
  //

  void MedicinalProductAuthorization_pskel::
  identifier ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->identifier ();
  }

  void MedicinalProductAuthorization_pskel::
  subject ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->subject ();
  }

  void MedicinalProductAuthorization_pskel::
  country ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->country ();
  }

  void MedicinalProductAuthorization_pskel::
  jurisdiction ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->jurisdiction ();
  }

  void MedicinalProductAuthorization_pskel::
  status ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->status ();
  }

  void MedicinalProductAuthorization_pskel::
  statusDate ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->statusDate ();
  }

  void MedicinalProductAuthorization_pskel::
  restoreDate ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->restoreDate ();
  }

  void MedicinalProductAuthorization_pskel::
  validityPeriod ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->validityPeriod ();
  }

  void MedicinalProductAuthorization_pskel::
  dataExclusivityPeriod ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->dataExclusivityPeriod ();
  }

  void MedicinalProductAuthorization_pskel::
  dateOfFirstAuthorization ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->dateOfFirstAuthorization ();
  }

  void MedicinalProductAuthorization_pskel::
  internationalBirthDate ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->internationalBirthDate ();
  }

  void MedicinalProductAuthorization_pskel::
  legalBasis ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->legalBasis ();
  }

  void MedicinalProductAuthorization_pskel::
  jurisdictionalAuthorization ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->jurisdictionalAuthorization ();
  }

  void MedicinalProductAuthorization_pskel::
  holder ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->holder ();
  }

  void MedicinalProductAuthorization_pskel::
  regulator ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->regulator ();
  }

  void MedicinalProductAuthorization_pskel::
  procedure ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->procedure ();
  }

  void MedicinalProductAuthorization_pskel::
  post_MedicinalProductAuthorization ()
  {
    if (this->MedicinalProductAuthorization_impl_)
      this->MedicinalProductAuthorization_impl_->post_MedicinalProductAuthorization ();
    else
      post_DomainResource ();
  }

  void MedicinalProductAuthorization_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->country_parser_)
      this->country_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusDate_parser_)
      this->statusDate_parser_->_reset ();

    if (this->restoreDate_parser_)
      this->restoreDate_parser_->_reset ();

    if (this->validityPeriod_parser_)
      this->validityPeriod_parser_->_reset ();

    if (this->dataExclusivityPeriod_parser_)
      this->dataExclusivityPeriod_parser_->_reset ();

    if (this->dateOfFirstAuthorization_parser_)
      this->dateOfFirstAuthorization_parser_->_reset ();

    if (this->internationalBirthDate_parser_)
      this->internationalBirthDate_parser_->_reset ();

    if (this->legalBasis_parser_)
      this->legalBasis_parser_->_reset ();

    if (this->jurisdictionalAuthorization_parser_)
      this->jurisdictionalAuthorization_parser_->_reset ();

    if (this->holder_parser_)
      this->holder_parser_->_reset ();

    if (this->regulator_parser_)
      this->regulator_parser_->_reset ();

    if (this->procedure_parser_)
      this->procedure_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductAuthorization_JurisdictionalAuthorization_pskel
  //

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  identifier ()
  {
    if (this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_)
      this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_->identifier ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  country ()
  {
    if (this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_)
      this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_->country ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  jurisdiction ()
  {
    if (this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_)
      this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_->jurisdiction ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  legalStatusOfSupply ()
  {
    if (this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_)
      this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_->legalStatusOfSupply ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  validityPeriod ()
  {
    if (this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_)
      this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_->validityPeriod ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  post_MedicinalProductAuthorization_JurisdictionalAuthorization ()
  {
    if (this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_)
      this->MedicinalProductAuthorization_JurisdictionalAuthorization_impl_->post_MedicinalProductAuthorization_JurisdictionalAuthorization ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->country_parser_)
      this->country_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->legalStatusOfSupply_parser_)
      this->legalStatusOfSupply_parser_->_reset ();

    if (this->validityPeriod_parser_)
      this->validityPeriod_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductAuthorization_Procedure_pskel
  //

  void MedicinalProductAuthorization_Procedure_pskel::
  identifier ()
  {
    if (this->MedicinalProductAuthorization_Procedure_impl_)
      this->MedicinalProductAuthorization_Procedure_impl_->identifier ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  type ()
  {
    if (this->MedicinalProductAuthorization_Procedure_impl_)
      this->MedicinalProductAuthorization_Procedure_impl_->type ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  datePeriod ()
  {
    if (this->MedicinalProductAuthorization_Procedure_impl_)
      this->MedicinalProductAuthorization_Procedure_impl_->datePeriod ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  dateDateTime ()
  {
    if (this->MedicinalProductAuthorization_Procedure_impl_)
      this->MedicinalProductAuthorization_Procedure_impl_->dateDateTime ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  application ()
  {
    if (this->MedicinalProductAuthorization_Procedure_impl_)
      this->MedicinalProductAuthorization_Procedure_impl_->application ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  post_MedicinalProductAuthorization_Procedure ()
  {
    if (this->MedicinalProductAuthorization_Procedure_impl_)
      this->MedicinalProductAuthorization_Procedure_impl_->post_MedicinalProductAuthorization_Procedure ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->datePeriod_parser_)
      this->datePeriod_parser_->_reset ();

    if (this->dateDateTime_parser_)
      this->dateDateTime_parser_->_reset ();

    if (this->application_parser_)
      this->application_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MedicinalProductAuthorization_pskel.
  //
  bool MedicinalProductAuthorization_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "subject" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "country" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "jurisdiction" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "statusDate" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "restoreDate" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "validityPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "dataExclusivityPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "dateOfFirstAuthorization" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "internationalBirthDate" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "legalBasis" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "jurisdictionalAuthorization" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "holder" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "regulator" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "procedure" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductAuthorization_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductAuthorization_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductAuthorization_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductAuthorization_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MedicinalProductAuthorization_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "country" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->country_parser_)
            {
              this->country_parser_->pre ();
              ctx.nested_parser (this->country_parser_);
            }
          }
          else
          {
            if (this->country_parser_ != 0)
            {
              this->country_parser_->post_CodeableConcept ();
              this->country ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CodeableConcept ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "statusDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusDate_parser_)
            {
              this->statusDate_parser_->pre ();
              ctx.nested_parser (this->statusDate_parser_);
            }
          }
          else
          {
            if (this->statusDate_parser_ != 0)
            {
              this->statusDate_parser_->post_dateTime ();
              this->statusDate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "restoreDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->restoreDate_parser_)
            {
              this->restoreDate_parser_->pre ();
              ctx.nested_parser (this->restoreDate_parser_);
            }
          }
          else
          {
            if (this->restoreDate_parser_ != 0)
            {
              this->restoreDate_parser_->post_dateTime ();
              this->restoreDate ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "validityPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validityPeriod_parser_)
            {
              this->validityPeriod_parser_->pre ();
              ctx.nested_parser (this->validityPeriod_parser_);
            }
          }
          else
          {
            if (this->validityPeriod_parser_ != 0)
            {
              this->validityPeriod_parser_->post_Period ();
              this->validityPeriod ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "dataExclusivityPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dataExclusivityPeriod_parser_)
            {
              this->dataExclusivityPeriod_parser_->pre ();
              ctx.nested_parser (this->dataExclusivityPeriod_parser_);
            }
          }
          else
          {
            if (this->dataExclusivityPeriod_parser_ != 0)
            {
              this->dataExclusivityPeriod_parser_->post_Period ();
              this->dataExclusivityPeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "dateOfFirstAuthorization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dateOfFirstAuthorization_parser_)
            {
              this->dateOfFirstAuthorization_parser_->pre ();
              ctx.nested_parser (this->dateOfFirstAuthorization_parser_);
            }
          }
          else
          {
            if (this->dateOfFirstAuthorization_parser_ != 0)
            {
              this->dateOfFirstAuthorization_parser_->post_dateTime ();
              this->dateOfFirstAuthorization ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "internationalBirthDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->internationalBirthDate_parser_)
            {
              this->internationalBirthDate_parser_->pre ();
              ctx.nested_parser (this->internationalBirthDate_parser_);
            }
          }
          else
          {
            if (this->internationalBirthDate_parser_ != 0)
            {
              this->internationalBirthDate_parser_->post_dateTime ();
              this->internationalBirthDate ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "legalBasis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->legalBasis_parser_)
            {
              this->legalBasis_parser_->pre ();
              ctx.nested_parser (this->legalBasis_parser_);
            }
          }
          else
          {
            if (this->legalBasis_parser_ != 0)
            {
              this->legalBasis_parser_->post_CodeableConcept ();
              this->legalBasis ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "jurisdictionalAuthorization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdictionalAuthorization_parser_)
            {
              this->jurisdictionalAuthorization_parser_->pre ();
              ctx.nested_parser (this->jurisdictionalAuthorization_parser_);
            }
          }
          else
          {
            if (this->jurisdictionalAuthorization_parser_ != 0)
            {
              this->jurisdictionalAuthorization_parser_->post_MedicinalProductAuthorization_JurisdictionalAuthorization ();
              this->jurisdictionalAuthorization ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "holder" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->holder_parser_)
            {
              this->holder_parser_->pre ();
              ctx.nested_parser (this->holder_parser_);
            }
          }
          else
          {
            if (this->holder_parser_ != 0)
            {
              this->holder_parser_->post_Reference ();
              this->holder ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "regulator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->regulator_parser_)
            {
              this->regulator_parser_->pre ();
              ctx.nested_parser (this->regulator_parser_);
            }
          }
          else
          {
            if (this->regulator_parser_ != 0)
            {
              this->regulator_parser_->post_Reference ();
              this->regulator ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "procedure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedure_parser_)
            {
              this->procedure_parser_->pre ();
              ctx.nested_parser (this->procedure_parser_);
            }
          }
          else
          {
            if (this->procedure_parser_ != 0)
            {
              this->procedure_parser_->post_MedicinalProductAuthorization_Procedure ();
              this->procedure ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductAuthorization_JurisdictionalAuthorization_pskel.
  //
  bool MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "country" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "jurisdiction" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "legalStatusOfSupply" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "validityPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "country" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->country_parser_)
            {
              this->country_parser_->pre ();
              ctx.nested_parser (this->country_parser_);
            }
          }
          else
          {
            if (this->country_parser_ != 0)
            {
              this->country_parser_->post_CodeableConcept ();
              this->country ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "legalStatusOfSupply" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->legalStatusOfSupply_parser_)
            {
              this->legalStatusOfSupply_parser_->pre ();
              ctx.nested_parser (this->legalStatusOfSupply_parser_);
            }
          }
          else
          {
            if (this->legalStatusOfSupply_parser_ != 0)
            {
              this->legalStatusOfSupply_parser_->post_CodeableConcept ();
              this->legalStatusOfSupply ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "validityPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validityPeriod_parser_)
            {
              this->validityPeriod_parser_->pre ();
              ctx.nested_parser (this->validityPeriod_parser_);
            }
          }
          else
          {
            if (this->validityPeriod_parser_ != 0)
            {
              this->validityPeriod_parser_->post_Period ();
              this->validityPeriod ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductAuthorization_Procedure_pskel.
  //
  bool MedicinalProductAuthorization_Procedure_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductAuthorization_Procedure_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductAuthorization_Procedure_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductAuthorization_Procedure_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "datePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->datePeriod_parser_)
            {
              this->datePeriod_parser_->pre ();
              ctx.nested_parser (this->datePeriod_parser_);
            }
          }
          else
          {
            if (this->datePeriod_parser_ != 0)
            {
              this->datePeriod_parser_->post_Period ();
              this->datePeriod ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "dateDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dateDateTime_parser_)
            {
              this->dateDateTime_parser_->pre ();
              ctx.nested_parser (this->dateDateTime_parser_);
            }
          }
          else
          {
            if (this->dateDateTime_parser_ != 0)
            {
              this->dateDateTime_parser_->post_dateTime ();
              this->dateDateTime ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "application" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->application_parser_)
            {
              this->application_parser_->pre ();
              ctx.nested_parser (this->application_parser_);
            }
          }
          else
          {
            if (this->application_parser_ != 0)
            {
              this->application_parser_->post_MedicinalProductAuthorization_Procedure ();
              this->application ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

