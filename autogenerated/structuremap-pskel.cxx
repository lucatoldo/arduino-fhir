// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "structuremap-pskel.hxx"

namespace fhir
{
  // StructureMap_pskel
  //

  void StructureMap_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void StructureMap_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void StructureMap_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void StructureMap_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void StructureMap_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void StructureMap_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void StructureMap_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void StructureMap_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void StructureMap_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void StructureMap_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void StructureMap_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void StructureMap_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void StructureMap_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void StructureMap_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void StructureMap_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void StructureMap_pskel::
  structure_parser (::fhir::StructureMap_Structure_pskel& p)
  {
    this->structure_parser_ = &p;
  }

  void StructureMap_pskel::
  import_parser (::fhir::canonical_pskel& p)
  {
    this->import_parser_ = &p;
  }

  void StructureMap_pskel::
  group_parser (::fhir::StructureMap_Group_pskel& p)
  {
    this->group_parser_ = &p;
  }

  void StructureMap_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::markdown_pskel& copyright,
           ::fhir::StructureMap_Structure_pskel& structure,
           ::fhir::canonical_pskel& import,
           ::fhir::StructureMap_Group_pskel& group)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->copyright_parser_ = &copyright;
    this->structure_parser_ = &structure;
    this->import_parser_ = &import;
    this->group_parser_ = &group;
  }

  StructureMap_pskel::
  StructureMap_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    StructureMap_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    structure_parser_ (0),
    import_parser_ (0),
    group_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_pskel::
  StructureMap_pskel (StructureMap_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    StructureMap_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    structure_parser_ (0),
    import_parser_ (0),
    group_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Structure_pskel
  //

  void StructureMap_Structure_pskel::
  url_parser (::fhir::canonical_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void StructureMap_Structure_pskel::
  mode_parser (::fhir::StructureMapModelMode_pskel& p)
  {
    this->mode_parser_ = &p;
  }

  void StructureMap_Structure_pskel::
  alias_parser (::fhir::string_pskel& p)
  {
    this->alias_parser_ = &p;
  }

  void StructureMap_Structure_pskel::
  documentation_parser (::fhir::string_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void StructureMap_Structure_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::canonical_pskel& url,
           ::fhir::StructureMapModelMode_pskel& mode,
           ::fhir::string_pskel& alias,
           ::fhir::string_pskel& documentation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->mode_parser_ = &mode;
    this->alias_parser_ = &alias;
    this->documentation_parser_ = &documentation;
  }

  StructureMap_Structure_pskel::
  StructureMap_Structure_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Structure_impl_ (0),
    url_parser_ (0),
    mode_parser_ (0),
    alias_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Structure_pskel::
  StructureMap_Structure_pskel (StructureMap_Structure_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Structure_impl_ (impl),
    url_parser_ (0),
    mode_parser_ (0),
    alias_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Group_pskel
  //

  void StructureMap_Group_pskel::
  name_parser (::fhir::id_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void StructureMap_Group_pskel::
  extends_parser (::fhir::id_pskel& p)
  {
    this->extends_parser_ = &p;
  }

  void StructureMap_Group_pskel::
  typeMode_parser (::fhir::StructureMapGroupTypeMode_pskel& p)
  {
    this->typeMode_parser_ = &p;
  }

  void StructureMap_Group_pskel::
  documentation_parser (::fhir::string_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void StructureMap_Group_pskel::
  input_parser (::fhir::StructureMap_Input_pskel& p)
  {
    this->input_parser_ = &p;
  }

  void StructureMap_Group_pskel::
  rule_parser (::fhir::StructureMap_Rule_pskel& p)
  {
    this->rule_parser_ = &p;
  }

  void StructureMap_Group_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& name,
           ::fhir::id_pskel& extends,
           ::fhir::StructureMapGroupTypeMode_pskel& typeMode,
           ::fhir::string_pskel& documentation,
           ::fhir::StructureMap_Input_pskel& input,
           ::fhir::StructureMap_Rule_pskel& rule)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->extends_parser_ = &extends;
    this->typeMode_parser_ = &typeMode;
    this->documentation_parser_ = &documentation;
    this->input_parser_ = &input;
    this->rule_parser_ = &rule;
  }

  StructureMap_Group_pskel::
  StructureMap_Group_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Group_impl_ (0),
    name_parser_ (0),
    extends_parser_ (0),
    typeMode_parser_ (0),
    documentation_parser_ (0),
    input_parser_ (0),
    rule_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Group_pskel::
  StructureMap_Group_pskel (StructureMap_Group_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Group_impl_ (impl),
    name_parser_ (0),
    extends_parser_ (0),
    typeMode_parser_ (0),
    documentation_parser_ (0),
    input_parser_ (0),
    rule_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Input_pskel
  //

  void StructureMap_Input_pskel::
  name_parser (::fhir::id_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void StructureMap_Input_pskel::
  type_parser (::fhir::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void StructureMap_Input_pskel::
  mode_parser (::fhir::StructureMapInputMode_pskel& p)
  {
    this->mode_parser_ = &p;
  }

  void StructureMap_Input_pskel::
  documentation_parser (::fhir::string_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void StructureMap_Input_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& name,
           ::fhir::string_pskel& type,
           ::fhir::StructureMapInputMode_pskel& mode,
           ::fhir::string_pskel& documentation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->type_parser_ = &type;
    this->mode_parser_ = &mode;
    this->documentation_parser_ = &documentation;
  }

  StructureMap_Input_pskel::
  StructureMap_Input_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Input_impl_ (0),
    name_parser_ (0),
    type_parser_ (0),
    mode_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Input_pskel::
  StructureMap_Input_pskel (StructureMap_Input_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Input_impl_ (impl),
    name_parser_ (0),
    type_parser_ (0),
    mode_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Rule_pskel
  //

  void StructureMap_Rule_pskel::
  name_parser (::fhir::id_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void StructureMap_Rule_pskel::
  source_parser (::fhir::StructureMap_Source_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void StructureMap_Rule_pskel::
  target_parser (::fhir::StructureMap_Target_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void StructureMap_Rule_pskel::
  rule_parser (::fhir::StructureMap_Rule_pskel& p)
  {
    this->rule_parser_ = &p;
  }

  void StructureMap_Rule_pskel::
  dependent_parser (::fhir::StructureMap_Dependent_pskel& p)
  {
    this->dependent_parser_ = &p;
  }

  void StructureMap_Rule_pskel::
  documentation_parser (::fhir::string_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void StructureMap_Rule_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& name,
           ::fhir::StructureMap_Source_pskel& source,
           ::fhir::StructureMap_Target_pskel& target,
           ::fhir::StructureMap_Rule_pskel& rule,
           ::fhir::StructureMap_Dependent_pskel& dependent,
           ::fhir::string_pskel& documentation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->source_parser_ = &source;
    this->target_parser_ = &target;
    this->rule_parser_ = &rule;
    this->dependent_parser_ = &dependent;
    this->documentation_parser_ = &documentation;
  }

  StructureMap_Rule_pskel::
  StructureMap_Rule_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Rule_impl_ (0),
    name_parser_ (0),
    source_parser_ (0),
    target_parser_ (0),
    rule_parser_ (0),
    dependent_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Rule_pskel::
  StructureMap_Rule_pskel (StructureMap_Rule_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Rule_impl_ (impl),
    name_parser_ (0),
    source_parser_ (0),
    target_parser_ (0),
    rule_parser_ (0),
    dependent_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Source_pskel
  //

  void StructureMap_Source_pskel::
  context_parser (::fhir::id_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  min_parser (::fhir::integer_pskel& p)
  {
    this->min_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  max_parser (::fhir::string_pskel& p)
  {
    this->max_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  type_parser (::fhir::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueBase64Binary_parser (::fhir::base64Binary_pskel& p)
  {
    this->defaultValueBase64Binary_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->defaultValueBoolean_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->defaultValueCanonical_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueCode_parser (::fhir::code_pskel& p)
  {
    this->defaultValueCode_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueDate_parser (::fhir::date_pskel& p)
  {
    this->defaultValueDate_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->defaultValueDateTime_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->defaultValueDecimal_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueId_parser (::fhir::id_pskel& p)
  {
    this->defaultValueId_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueInstant_parser (::fhir::instant_pskel& p)
  {
    this->defaultValueInstant_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueInteger_parser (::fhir::integer_pskel& p)
  {
    this->defaultValueInteger_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueMarkdown_parser (::fhir::markdown_pskel& p)
  {
    this->defaultValueMarkdown_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueOid_parser (::fhir::oid_pskel& p)
  {
    this->defaultValueOid_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValuePositiveInt_parser (::fhir::positiveInt_pskel& p)
  {
    this->defaultValuePositiveInt_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueString_parser (::fhir::string_pskel& p)
  {
    this->defaultValueString_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueTime_parser (::fhir::time_pskel& p)
  {
    this->defaultValueTime_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueUnsignedInt_parser (::fhir::unsignedInt_pskel& p)
  {
    this->defaultValueUnsignedInt_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueUri_parser (::fhir::uri_pskel& p)
  {
    this->defaultValueUri_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueUrl_parser (::fhir::url_pskel& p)
  {
    this->defaultValueUrl_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueUuid_parser (::fhir::uuid_pskel& p)
  {
    this->defaultValueUuid_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueAddress_parser (::fhir::Address_pskel& p)
  {
    this->defaultValueAddress_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueAge_parser (::fhir::Age_pskel& p)
  {
    this->defaultValueAge_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueAnnotation_parser (::fhir::Annotation_pskel& p)
  {
    this->defaultValueAnnotation_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->defaultValueAttachment_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->defaultValueCodeableConcept_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->defaultValueCoding_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueContactPoint_parser (::fhir::ContactPoint_pskel& p)
  {
    this->defaultValueContactPoint_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueCount_parser (::fhir::Count_pskel& p)
  {
    this->defaultValueCount_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueDistance_parser (::fhir::Distance_pskel& p)
  {
    this->defaultValueDistance_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueDuration_parser (::fhir::Duration_pskel& p)
  {
    this->defaultValueDuration_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueHumanName_parser (::fhir::HumanName_pskel& p)
  {
    this->defaultValueHumanName_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->defaultValueIdentifier_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueMoney_parser (::fhir::Money_pskel& p)
  {
    this->defaultValueMoney_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValuePeriod_parser (::fhir::Period_pskel& p)
  {
    this->defaultValuePeriod_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->defaultValueQuantity_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueRange_parser (::fhir::Range_pskel& p)
  {
    this->defaultValueRange_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->defaultValueRatio_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueReference_parser (::fhir::Reference_pskel& p)
  {
    this->defaultValueReference_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueSampledData_parser (::fhir::SampledData_pskel& p)
  {
    this->defaultValueSampledData_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueSignature_parser (::fhir::Signature_pskel& p)
  {
    this->defaultValueSignature_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueTiming_parser (::fhir::Timing_pskel& p)
  {
    this->defaultValueTiming_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueContactDetail_parser (::fhir::ContactDetail_pskel& p)
  {
    this->defaultValueContactDetail_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueContributor_parser (::fhir::Contributor_pskel& p)
  {
    this->defaultValueContributor_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueDataRequirement_parser (::fhir::DataRequirement_pskel& p)
  {
    this->defaultValueDataRequirement_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueExpression_parser (::fhir::Expression_pskel& p)
  {
    this->defaultValueExpression_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueParameterDefinition_parser (::fhir::ParameterDefinition_pskel& p)
  {
    this->defaultValueParameterDefinition_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->defaultValueRelatedArtifact_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel& p)
  {
    this->defaultValueTriggerDefinition_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueUsageContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->defaultValueUsageContext_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueDosage_parser (::fhir::Dosage_pskel& p)
  {
    this->defaultValueDosage_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  defaultValueMeta_parser (::fhir::Meta_pskel& p)
  {
    this->defaultValueMeta_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  element_parser (::fhir::string_pskel& p)
  {
    this->element_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  listMode_parser (::fhir::StructureMapSourceListMode_pskel& p)
  {
    this->listMode_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  variable_parser (::fhir::id_pskel& p)
  {
    this->variable_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  condition_parser (::fhir::string_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  check_parser (::fhir::string_pskel& p)
  {
    this->check_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  logMessage_parser (::fhir::string_pskel& p)
  {
    this->logMessage_parser_ = &p;
  }

  void StructureMap_Source_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& context,
           ::fhir::integer_pskel& min,
           ::fhir::string_pskel& max,
           ::fhir::string_pskel& type,
           ::fhir::base64Binary_pskel& defaultValueBase64Binary,
           ::fhir::boolean_pskel& defaultValueBoolean,
           ::fhir::canonical_pskel& defaultValueCanonical,
           ::fhir::code_pskel& defaultValueCode,
           ::fhir::date_pskel& defaultValueDate,
           ::fhir::dateTime_pskel& defaultValueDateTime,
           ::fhir::decimal_pskel& defaultValueDecimal,
           ::fhir::id_pskel& defaultValueId,
           ::fhir::instant_pskel& defaultValueInstant,
           ::fhir::integer_pskel& defaultValueInteger,
           ::fhir::markdown_pskel& defaultValueMarkdown,
           ::fhir::oid_pskel& defaultValueOid,
           ::fhir::positiveInt_pskel& defaultValuePositiveInt,
           ::fhir::string_pskel& defaultValueString,
           ::fhir::time_pskel& defaultValueTime,
           ::fhir::unsignedInt_pskel& defaultValueUnsignedInt,
           ::fhir::uri_pskel& defaultValueUri,
           ::fhir::url_pskel& defaultValueUrl,
           ::fhir::uuid_pskel& defaultValueUuid,
           ::fhir::Address_pskel& defaultValueAddress,
           ::fhir::Age_pskel& defaultValueAge,
           ::fhir::Annotation_pskel& defaultValueAnnotation,
           ::fhir::Attachment_pskel& defaultValueAttachment,
           ::fhir::CodeableConcept_pskel& defaultValueCodeableConcept,
           ::fhir::Coding_pskel& defaultValueCoding,
           ::fhir::ContactPoint_pskel& defaultValueContactPoint,
           ::fhir::Count_pskel& defaultValueCount,
           ::fhir::Distance_pskel& defaultValueDistance,
           ::fhir::Duration_pskel& defaultValueDuration,
           ::fhir::HumanName_pskel& defaultValueHumanName,
           ::fhir::Identifier_pskel& defaultValueIdentifier,
           ::fhir::Money_pskel& defaultValueMoney,
           ::fhir::Period_pskel& defaultValuePeriod,
           ::fhir::Quantity_pskel& defaultValueQuantity,
           ::fhir::Range_pskel& defaultValueRange,
           ::fhir::Ratio_pskel& defaultValueRatio,
           ::fhir::Reference_pskel& defaultValueReference,
           ::fhir::SampledData_pskel& defaultValueSampledData,
           ::fhir::Signature_pskel& defaultValueSignature,
           ::fhir::Timing_pskel& defaultValueTiming,
           ::fhir::ContactDetail_pskel& defaultValueContactDetail,
           ::fhir::Contributor_pskel& defaultValueContributor,
           ::fhir::DataRequirement_pskel& defaultValueDataRequirement,
           ::fhir::Expression_pskel& defaultValueExpression,
           ::fhir::ParameterDefinition_pskel& defaultValueParameterDefinition,
           ::fhir::RelatedArtifact_pskel& defaultValueRelatedArtifact,
           ::fhir::TriggerDefinition_pskel& defaultValueTriggerDefinition,
           ::fhir::UsageContext_pskel& defaultValueUsageContext,
           ::fhir::Dosage_pskel& defaultValueDosage,
           ::fhir::Meta_pskel& defaultValueMeta,
           ::fhir::string_pskel& element,
           ::fhir::StructureMapSourceListMode_pskel& listMode,
           ::fhir::id_pskel& variable,
           ::fhir::string_pskel& condition,
           ::fhir::string_pskel& check,
           ::fhir::string_pskel& logMessage)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->context_parser_ = &context;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->type_parser_ = &type;
    this->defaultValueBase64Binary_parser_ = &defaultValueBase64Binary;
    this->defaultValueBoolean_parser_ = &defaultValueBoolean;
    this->defaultValueCanonical_parser_ = &defaultValueCanonical;
    this->defaultValueCode_parser_ = &defaultValueCode;
    this->defaultValueDate_parser_ = &defaultValueDate;
    this->defaultValueDateTime_parser_ = &defaultValueDateTime;
    this->defaultValueDecimal_parser_ = &defaultValueDecimal;
    this->defaultValueId_parser_ = &defaultValueId;
    this->defaultValueInstant_parser_ = &defaultValueInstant;
    this->defaultValueInteger_parser_ = &defaultValueInteger;
    this->defaultValueMarkdown_parser_ = &defaultValueMarkdown;
    this->defaultValueOid_parser_ = &defaultValueOid;
    this->defaultValuePositiveInt_parser_ = &defaultValuePositiveInt;
    this->defaultValueString_parser_ = &defaultValueString;
    this->defaultValueTime_parser_ = &defaultValueTime;
    this->defaultValueUnsignedInt_parser_ = &defaultValueUnsignedInt;
    this->defaultValueUri_parser_ = &defaultValueUri;
    this->defaultValueUrl_parser_ = &defaultValueUrl;
    this->defaultValueUuid_parser_ = &defaultValueUuid;
    this->defaultValueAddress_parser_ = &defaultValueAddress;
    this->defaultValueAge_parser_ = &defaultValueAge;
    this->defaultValueAnnotation_parser_ = &defaultValueAnnotation;
    this->defaultValueAttachment_parser_ = &defaultValueAttachment;
    this->defaultValueCodeableConcept_parser_ = &defaultValueCodeableConcept;
    this->defaultValueCoding_parser_ = &defaultValueCoding;
    this->defaultValueContactPoint_parser_ = &defaultValueContactPoint;
    this->defaultValueCount_parser_ = &defaultValueCount;
    this->defaultValueDistance_parser_ = &defaultValueDistance;
    this->defaultValueDuration_parser_ = &defaultValueDuration;
    this->defaultValueHumanName_parser_ = &defaultValueHumanName;
    this->defaultValueIdentifier_parser_ = &defaultValueIdentifier;
    this->defaultValueMoney_parser_ = &defaultValueMoney;
    this->defaultValuePeriod_parser_ = &defaultValuePeriod;
    this->defaultValueQuantity_parser_ = &defaultValueQuantity;
    this->defaultValueRange_parser_ = &defaultValueRange;
    this->defaultValueRatio_parser_ = &defaultValueRatio;
    this->defaultValueReference_parser_ = &defaultValueReference;
    this->defaultValueSampledData_parser_ = &defaultValueSampledData;
    this->defaultValueSignature_parser_ = &defaultValueSignature;
    this->defaultValueTiming_parser_ = &defaultValueTiming;
    this->defaultValueContactDetail_parser_ = &defaultValueContactDetail;
    this->defaultValueContributor_parser_ = &defaultValueContributor;
    this->defaultValueDataRequirement_parser_ = &defaultValueDataRequirement;
    this->defaultValueExpression_parser_ = &defaultValueExpression;
    this->defaultValueParameterDefinition_parser_ = &defaultValueParameterDefinition;
    this->defaultValueRelatedArtifact_parser_ = &defaultValueRelatedArtifact;
    this->defaultValueTriggerDefinition_parser_ = &defaultValueTriggerDefinition;
    this->defaultValueUsageContext_parser_ = &defaultValueUsageContext;
    this->defaultValueDosage_parser_ = &defaultValueDosage;
    this->defaultValueMeta_parser_ = &defaultValueMeta;
    this->element_parser_ = &element;
    this->listMode_parser_ = &listMode;
    this->variable_parser_ = &variable;
    this->condition_parser_ = &condition;
    this->check_parser_ = &check;
    this->logMessage_parser_ = &logMessage;
  }

  StructureMap_Source_pskel::
  StructureMap_Source_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Source_impl_ (0),
    context_parser_ (0),
    min_parser_ (0),
    max_parser_ (0),
    type_parser_ (0),
    defaultValueBase64Binary_parser_ (0),
    defaultValueBoolean_parser_ (0),
    defaultValueCanonical_parser_ (0),
    defaultValueCode_parser_ (0),
    defaultValueDate_parser_ (0),
    defaultValueDateTime_parser_ (0),
    defaultValueDecimal_parser_ (0),
    defaultValueId_parser_ (0),
    defaultValueInstant_parser_ (0),
    defaultValueInteger_parser_ (0),
    defaultValueMarkdown_parser_ (0),
    defaultValueOid_parser_ (0),
    defaultValuePositiveInt_parser_ (0),
    defaultValueString_parser_ (0),
    defaultValueTime_parser_ (0),
    defaultValueUnsignedInt_parser_ (0),
    defaultValueUri_parser_ (0),
    defaultValueUrl_parser_ (0),
    defaultValueUuid_parser_ (0),
    defaultValueAddress_parser_ (0),
    defaultValueAge_parser_ (0),
    defaultValueAnnotation_parser_ (0),
    defaultValueAttachment_parser_ (0),
    defaultValueCodeableConcept_parser_ (0),
    defaultValueCoding_parser_ (0),
    defaultValueContactPoint_parser_ (0),
    defaultValueCount_parser_ (0),
    defaultValueDistance_parser_ (0),
    defaultValueDuration_parser_ (0),
    defaultValueHumanName_parser_ (0),
    defaultValueIdentifier_parser_ (0),
    defaultValueMoney_parser_ (0),
    defaultValuePeriod_parser_ (0),
    defaultValueQuantity_parser_ (0),
    defaultValueRange_parser_ (0),
    defaultValueRatio_parser_ (0),
    defaultValueReference_parser_ (0),
    defaultValueSampledData_parser_ (0),
    defaultValueSignature_parser_ (0),
    defaultValueTiming_parser_ (0),
    defaultValueContactDetail_parser_ (0),
    defaultValueContributor_parser_ (0),
    defaultValueDataRequirement_parser_ (0),
    defaultValueExpression_parser_ (0),
    defaultValueParameterDefinition_parser_ (0),
    defaultValueRelatedArtifact_parser_ (0),
    defaultValueTriggerDefinition_parser_ (0),
    defaultValueUsageContext_parser_ (0),
    defaultValueDosage_parser_ (0),
    defaultValueMeta_parser_ (0),
    element_parser_ (0),
    listMode_parser_ (0),
    variable_parser_ (0),
    condition_parser_ (0),
    check_parser_ (0),
    logMessage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Source_pskel::
  StructureMap_Source_pskel (StructureMap_Source_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Source_impl_ (impl),
    context_parser_ (0),
    min_parser_ (0),
    max_parser_ (0),
    type_parser_ (0),
    defaultValueBase64Binary_parser_ (0),
    defaultValueBoolean_parser_ (0),
    defaultValueCanonical_parser_ (0),
    defaultValueCode_parser_ (0),
    defaultValueDate_parser_ (0),
    defaultValueDateTime_parser_ (0),
    defaultValueDecimal_parser_ (0),
    defaultValueId_parser_ (0),
    defaultValueInstant_parser_ (0),
    defaultValueInteger_parser_ (0),
    defaultValueMarkdown_parser_ (0),
    defaultValueOid_parser_ (0),
    defaultValuePositiveInt_parser_ (0),
    defaultValueString_parser_ (0),
    defaultValueTime_parser_ (0),
    defaultValueUnsignedInt_parser_ (0),
    defaultValueUri_parser_ (0),
    defaultValueUrl_parser_ (0),
    defaultValueUuid_parser_ (0),
    defaultValueAddress_parser_ (0),
    defaultValueAge_parser_ (0),
    defaultValueAnnotation_parser_ (0),
    defaultValueAttachment_parser_ (0),
    defaultValueCodeableConcept_parser_ (0),
    defaultValueCoding_parser_ (0),
    defaultValueContactPoint_parser_ (0),
    defaultValueCount_parser_ (0),
    defaultValueDistance_parser_ (0),
    defaultValueDuration_parser_ (0),
    defaultValueHumanName_parser_ (0),
    defaultValueIdentifier_parser_ (0),
    defaultValueMoney_parser_ (0),
    defaultValuePeriod_parser_ (0),
    defaultValueQuantity_parser_ (0),
    defaultValueRange_parser_ (0),
    defaultValueRatio_parser_ (0),
    defaultValueReference_parser_ (0),
    defaultValueSampledData_parser_ (0),
    defaultValueSignature_parser_ (0),
    defaultValueTiming_parser_ (0),
    defaultValueContactDetail_parser_ (0),
    defaultValueContributor_parser_ (0),
    defaultValueDataRequirement_parser_ (0),
    defaultValueExpression_parser_ (0),
    defaultValueParameterDefinition_parser_ (0),
    defaultValueRelatedArtifact_parser_ (0),
    defaultValueTriggerDefinition_parser_ (0),
    defaultValueUsageContext_parser_ (0),
    defaultValueDosage_parser_ (0),
    defaultValueMeta_parser_ (0),
    element_parser_ (0),
    listMode_parser_ (0),
    variable_parser_ (0),
    condition_parser_ (0),
    check_parser_ (0),
    logMessage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Target_pskel
  //

  void StructureMap_Target_pskel::
  context_parser (::fhir::id_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  contextType_parser (::fhir::StructureMapContextType_pskel& p)
  {
    this->contextType_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  element_parser (::fhir::string_pskel& p)
  {
    this->element_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  variable_parser (::fhir::id_pskel& p)
  {
    this->variable_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  listMode_parser (::fhir::StructureMapTargetListMode_pskel& p)
  {
    this->listMode_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  listRuleId_parser (::fhir::id_pskel& p)
  {
    this->listRuleId_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  transform_parser (::fhir::StructureMapTransform_pskel& p)
  {
    this->transform_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  parameter_parser (::fhir::StructureMap_Parameter_pskel& p)
  {
    this->parameter_parser_ = &p;
  }

  void StructureMap_Target_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& context,
           ::fhir::StructureMapContextType_pskel& contextType,
           ::fhir::string_pskel& element,
           ::fhir::id_pskel& variable,
           ::fhir::StructureMapTargetListMode_pskel& listMode,
           ::fhir::id_pskel& listRuleId,
           ::fhir::StructureMapTransform_pskel& transform,
           ::fhir::StructureMap_Parameter_pskel& parameter)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->context_parser_ = &context;
    this->contextType_parser_ = &contextType;
    this->element_parser_ = &element;
    this->variable_parser_ = &variable;
    this->listMode_parser_ = &listMode;
    this->listRuleId_parser_ = &listRuleId;
    this->transform_parser_ = &transform;
    this->parameter_parser_ = &parameter;
  }

  StructureMap_Target_pskel::
  StructureMap_Target_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Target_impl_ (0),
    context_parser_ (0),
    contextType_parser_ (0),
    element_parser_ (0),
    variable_parser_ (0),
    listMode_parser_ (0),
    listRuleId_parser_ (0),
    transform_parser_ (0),
    parameter_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Target_pskel::
  StructureMap_Target_pskel (StructureMap_Target_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Target_impl_ (impl),
    context_parser_ (0),
    contextType_parser_ (0),
    element_parser_ (0),
    variable_parser_ (0),
    listMode_parser_ (0),
    listRuleId_parser_ (0),
    transform_parser_ (0),
    parameter_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Parameter_pskel
  //

  void StructureMap_Parameter_pskel::
  valueId_parser (::fhir::id_pskel& p)
  {
    this->valueId_parser_ = &p;
  }

  void StructureMap_Parameter_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void StructureMap_Parameter_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void StructureMap_Parameter_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void StructureMap_Parameter_pskel::
  valueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->valueDecimal_parser_ = &p;
  }

  void StructureMap_Parameter_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& valueId,
           ::fhir::string_pskel& valueString,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::decimal_pskel& valueDecimal)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->valueId_parser_ = &valueId;
    this->valueString_parser_ = &valueString;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueInteger_parser_ = &valueInteger;
    this->valueDecimal_parser_ = &valueDecimal;
  }

  StructureMap_Parameter_pskel::
  StructureMap_Parameter_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Parameter_impl_ (0),
    valueId_parser_ (0),
    valueString_parser_ (0),
    valueBoolean_parser_ (0),
    valueInteger_parser_ (0),
    valueDecimal_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Parameter_pskel::
  StructureMap_Parameter_pskel (StructureMap_Parameter_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Parameter_impl_ (impl),
    valueId_parser_ (0),
    valueString_parser_ (0),
    valueBoolean_parser_ (0),
    valueInteger_parser_ (0),
    valueDecimal_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMap_Dependent_pskel
  //

  void StructureMap_Dependent_pskel::
  name_parser (::fhir::id_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void StructureMap_Dependent_pskel::
  variable_parser (::fhir::string_pskel& p)
  {
    this->variable_parser_ = &p;
  }

  void StructureMap_Dependent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& name,
           ::fhir::string_pskel& variable)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->variable_parser_ = &variable;
  }

  StructureMap_Dependent_pskel::
  StructureMap_Dependent_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureMap_Dependent_impl_ (0),
    name_parser_ (0),
    variable_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureMap_Dependent_pskel::
  StructureMap_Dependent_pskel (StructureMap_Dependent_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureMap_Dependent_impl_ (impl),
    name_parser_ (0),
    variable_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureMapInputMode_list_pskel
  //

  StructureMapInputMode_list_pskel::
  StructureMapInputMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureMapInputMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureMapInputMode_list_pskel_enums_, 2UL);
  }

  StructureMapInputMode_list_pskel::
  StructureMapInputMode_list_pskel (StructureMapInputMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureMapInputMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureMapInputMode_list_pskel_enums_, 2UL);
  }

  // StructureMapInputMode_pskel
  //

  void StructureMapInputMode_pskel::
  value_parser (::fhir::StructureMapInputMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureMapInputMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureMapInputMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureMapInputMode_pskel::
  StructureMapInputMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureMapInputMode_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureMapInputMode_pskel::
  StructureMapInputMode_pskel (StructureMapInputMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureMapInputMode_impl_ (impl),
    value_parser_ (0)
  {
  }

  // StructureMapContextType_list_pskel
  //

  StructureMapContextType_list_pskel::
  StructureMapContextType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureMapContextType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureMapContextType_list_pskel_enums_, 2UL);
  }

  StructureMapContextType_list_pskel::
  StructureMapContextType_list_pskel (StructureMapContextType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureMapContextType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureMapContextType_list_pskel_enums_, 2UL);
  }

  // StructureMapContextType_pskel
  //

  void StructureMapContextType_pskel::
  value_parser (::fhir::StructureMapContextType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureMapContextType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureMapContextType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureMapContextType_pskel::
  StructureMapContextType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureMapContextType_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureMapContextType_pskel::
  StructureMapContextType_pskel (StructureMapContextType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureMapContextType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // StructureMapTargetListMode_list_pskel
  //

  StructureMapTargetListMode_list_pskel::
  StructureMapTargetListMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureMapTargetListMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureMapTargetListMode_list_pskel_enums_, 4UL);
  }

  StructureMapTargetListMode_list_pskel::
  StructureMapTargetListMode_list_pskel (StructureMapTargetListMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureMapTargetListMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureMapTargetListMode_list_pskel_enums_, 4UL);
  }

  // StructureMapTargetListMode_pskel
  //

  void StructureMapTargetListMode_pskel::
  value_parser (::fhir::StructureMapTargetListMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureMapTargetListMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureMapTargetListMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureMapTargetListMode_pskel::
  StructureMapTargetListMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureMapTargetListMode_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureMapTargetListMode_pskel::
  StructureMapTargetListMode_pskel (StructureMapTargetListMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureMapTargetListMode_impl_ (impl),
    value_parser_ (0)
  {
  }

  // StructureMapTransform_list_pskel
  //

  StructureMapTransform_list_pskel::
  StructureMapTransform_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureMapTransform_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureMapTransform_list_pskel_enums_, 17UL);
  }

  StructureMapTransform_list_pskel::
  StructureMapTransform_list_pskel (StructureMapTransform_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureMapTransform_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureMapTransform_list_pskel_enums_, 17UL);
  }

  // StructureMapTransform_pskel
  //

  void StructureMapTransform_pskel::
  value_parser (::fhir::StructureMapTransform_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureMapTransform_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureMapTransform_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureMapTransform_pskel::
  StructureMapTransform_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureMapTransform_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureMapTransform_pskel::
  StructureMapTransform_pskel (StructureMapTransform_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureMapTransform_impl_ (impl),
    value_parser_ (0)
  {
  }

  // StructureMapSourceListMode_list_pskel
  //

  StructureMapSourceListMode_list_pskel::
  StructureMapSourceListMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureMapSourceListMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureMapSourceListMode_list_pskel_enums_, 5UL);
  }

  StructureMapSourceListMode_list_pskel::
  StructureMapSourceListMode_list_pskel (StructureMapSourceListMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureMapSourceListMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureMapSourceListMode_list_pskel_enums_, 5UL);
  }

  // StructureMapSourceListMode_pskel
  //

  void StructureMapSourceListMode_pskel::
  value_parser (::fhir::StructureMapSourceListMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureMapSourceListMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureMapSourceListMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureMapSourceListMode_pskel::
  StructureMapSourceListMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureMapSourceListMode_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureMapSourceListMode_pskel::
  StructureMapSourceListMode_pskel (StructureMapSourceListMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureMapSourceListMode_impl_ (impl),
    value_parser_ (0)
  {
  }

  // StructureMapGroupTypeMode_list_pskel
  //

  StructureMapGroupTypeMode_list_pskel::
  StructureMapGroupTypeMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureMapGroupTypeMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureMapGroupTypeMode_list_pskel_enums_, 3UL);
  }

  StructureMapGroupTypeMode_list_pskel::
  StructureMapGroupTypeMode_list_pskel (StructureMapGroupTypeMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureMapGroupTypeMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureMapGroupTypeMode_list_pskel_enums_, 3UL);
  }

  // StructureMapGroupTypeMode_pskel
  //

  void StructureMapGroupTypeMode_pskel::
  value_parser (::fhir::StructureMapGroupTypeMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureMapGroupTypeMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureMapGroupTypeMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureMapGroupTypeMode_pskel::
  StructureMapGroupTypeMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureMapGroupTypeMode_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureMapGroupTypeMode_pskel::
  StructureMapGroupTypeMode_pskel (StructureMapGroupTypeMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureMapGroupTypeMode_impl_ (impl),
    value_parser_ (0)
  {
  }

  // StructureMapModelMode_list_pskel
  //

  StructureMapModelMode_list_pskel::
  StructureMapModelMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureMapModelMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureMapModelMode_list_pskel_enums_, 4UL);
  }

  StructureMapModelMode_list_pskel::
  StructureMapModelMode_list_pskel (StructureMapModelMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureMapModelMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureMapModelMode_list_pskel_enums_, 4UL);
  }

  // StructureMapModelMode_pskel
  //

  void StructureMapModelMode_pskel::
  value_parser (::fhir::StructureMapModelMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureMapModelMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureMapModelMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureMapModelMode_pskel::
  StructureMapModelMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureMapModelMode_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureMapModelMode_pskel::
  StructureMapModelMode_pskel (StructureMapModelMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureMapModelMode_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // StructureMap_pskel
  //

  void StructureMap_pskel::
  url ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->url ();
  }

  void StructureMap_pskel::
  identifier ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->identifier ();
  }

  void StructureMap_pskel::
  version ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->version ();
  }

  void StructureMap_pskel::
  name ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->name ();
  }

  void StructureMap_pskel::
  title ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->title ();
  }

  void StructureMap_pskel::
  status ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->status ();
  }

  void StructureMap_pskel::
  experimental ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->experimental ();
  }

  void StructureMap_pskel::
  date ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->date ();
  }

  void StructureMap_pskel::
  publisher ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->publisher ();
  }

  void StructureMap_pskel::
  contact ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->contact ();
  }

  void StructureMap_pskel::
  description ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->description ();
  }

  void StructureMap_pskel::
  useContext ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->useContext ();
  }

  void StructureMap_pskel::
  jurisdiction ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->jurisdiction ();
  }

  void StructureMap_pskel::
  purpose ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->purpose ();
  }

  void StructureMap_pskel::
  copyright ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->copyright ();
  }

  void StructureMap_pskel::
  structure ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->structure ();
  }

  void StructureMap_pskel::
  import ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->import ();
  }

  void StructureMap_pskel::
  group ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->group ();
  }

  void StructureMap_pskel::
  post_StructureMap ()
  {
    if (this->StructureMap_impl_)
      this->StructureMap_impl_->post_StructureMap ();
    else
      post_DomainResource ();
  }

  void StructureMap_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->structure_parser_)
      this->structure_parser_->_reset ();

    if (this->import_parser_)
      this->import_parser_->_reset ();

    if (this->group_parser_)
      this->group_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Structure_pskel
  //

  void StructureMap_Structure_pskel::
  url ()
  {
    if (this->StructureMap_Structure_impl_)
      this->StructureMap_Structure_impl_->url ();
  }

  void StructureMap_Structure_pskel::
  mode ()
  {
    if (this->StructureMap_Structure_impl_)
      this->StructureMap_Structure_impl_->mode ();
  }

  void StructureMap_Structure_pskel::
  alias ()
  {
    if (this->StructureMap_Structure_impl_)
      this->StructureMap_Structure_impl_->alias ();
  }

  void StructureMap_Structure_pskel::
  documentation ()
  {
    if (this->StructureMap_Structure_impl_)
      this->StructureMap_Structure_impl_->documentation ();
  }

  void StructureMap_Structure_pskel::
  post_StructureMap_Structure ()
  {
    if (this->StructureMap_Structure_impl_)
      this->StructureMap_Structure_impl_->post_StructureMap_Structure ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Structure_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->mode_parser_)
      this->mode_parser_->_reset ();

    if (this->alias_parser_)
      this->alias_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Group_pskel
  //

  void StructureMap_Group_pskel::
  name ()
  {
    if (this->StructureMap_Group_impl_)
      this->StructureMap_Group_impl_->name ();
  }

  void StructureMap_Group_pskel::
  extends ()
  {
    if (this->StructureMap_Group_impl_)
      this->StructureMap_Group_impl_->extends ();
  }

  void StructureMap_Group_pskel::
  typeMode ()
  {
    if (this->StructureMap_Group_impl_)
      this->StructureMap_Group_impl_->typeMode ();
  }

  void StructureMap_Group_pskel::
  documentation ()
  {
    if (this->StructureMap_Group_impl_)
      this->StructureMap_Group_impl_->documentation ();
  }

  void StructureMap_Group_pskel::
  input ()
  {
    if (this->StructureMap_Group_impl_)
      this->StructureMap_Group_impl_->input ();
  }

  void StructureMap_Group_pskel::
  rule ()
  {
    if (this->StructureMap_Group_impl_)
      this->StructureMap_Group_impl_->rule ();
  }

  void StructureMap_Group_pskel::
  post_StructureMap_Group ()
  {
    if (this->StructureMap_Group_impl_)
      this->StructureMap_Group_impl_->post_StructureMap_Group ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Group_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->extends_parser_)
      this->extends_parser_->_reset ();

    if (this->typeMode_parser_)
      this->typeMode_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    if (this->input_parser_)
      this->input_parser_->_reset ();

    if (this->rule_parser_)
      this->rule_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Input_pskel
  //

  void StructureMap_Input_pskel::
  name ()
  {
    if (this->StructureMap_Input_impl_)
      this->StructureMap_Input_impl_->name ();
  }

  void StructureMap_Input_pskel::
  type ()
  {
    if (this->StructureMap_Input_impl_)
      this->StructureMap_Input_impl_->type ();
  }

  void StructureMap_Input_pskel::
  mode ()
  {
    if (this->StructureMap_Input_impl_)
      this->StructureMap_Input_impl_->mode ();
  }

  void StructureMap_Input_pskel::
  documentation ()
  {
    if (this->StructureMap_Input_impl_)
      this->StructureMap_Input_impl_->documentation ();
  }

  void StructureMap_Input_pskel::
  post_StructureMap_Input ()
  {
    if (this->StructureMap_Input_impl_)
      this->StructureMap_Input_impl_->post_StructureMap_Input ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Input_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->mode_parser_)
      this->mode_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Rule_pskel
  //

  void StructureMap_Rule_pskel::
  name ()
  {
    if (this->StructureMap_Rule_impl_)
      this->StructureMap_Rule_impl_->name ();
  }

  void StructureMap_Rule_pskel::
  source ()
  {
    if (this->StructureMap_Rule_impl_)
      this->StructureMap_Rule_impl_->source ();
  }

  void StructureMap_Rule_pskel::
  target ()
  {
    if (this->StructureMap_Rule_impl_)
      this->StructureMap_Rule_impl_->target ();
  }

  void StructureMap_Rule_pskel::
  rule ()
  {
    if (this->StructureMap_Rule_impl_)
      this->StructureMap_Rule_impl_->rule ();
  }

  void StructureMap_Rule_pskel::
  dependent ()
  {
    if (this->StructureMap_Rule_impl_)
      this->StructureMap_Rule_impl_->dependent ();
  }

  void StructureMap_Rule_pskel::
  documentation ()
  {
    if (this->StructureMap_Rule_impl_)
      this->StructureMap_Rule_impl_->documentation ();
  }

  void StructureMap_Rule_pskel::
  post_StructureMap_Rule ()
  {
    if (this->StructureMap_Rule_impl_)
      this->StructureMap_Rule_impl_->post_StructureMap_Rule ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Rule_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    if (this->rule_parser_)
      this->rule_parser_->_reset ();

    if (this->dependent_parser_)
      this->dependent_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Source_pskel
  //

  void StructureMap_Source_pskel::
  context ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->context ();
  }

  void StructureMap_Source_pskel::
  min ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->min ();
  }

  void StructureMap_Source_pskel::
  max ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->max ();
  }

  void StructureMap_Source_pskel::
  type ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->type ();
  }

  void StructureMap_Source_pskel::
  defaultValueBase64Binary ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueBase64Binary ();
  }

  void StructureMap_Source_pskel::
  defaultValueBoolean ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueBoolean ();
  }

  void StructureMap_Source_pskel::
  defaultValueCanonical ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueCanonical ();
  }

  void StructureMap_Source_pskel::
  defaultValueCode ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueCode ();
  }

  void StructureMap_Source_pskel::
  defaultValueDate ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueDate ();
  }

  void StructureMap_Source_pskel::
  defaultValueDateTime ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueDateTime ();
  }

  void StructureMap_Source_pskel::
  defaultValueDecimal ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueDecimal ();
  }

  void StructureMap_Source_pskel::
  defaultValueId ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueId ();
  }

  void StructureMap_Source_pskel::
  defaultValueInstant ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueInstant ();
  }

  void StructureMap_Source_pskel::
  defaultValueInteger ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueInteger ();
  }

  void StructureMap_Source_pskel::
  defaultValueMarkdown ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueMarkdown ();
  }

  void StructureMap_Source_pskel::
  defaultValueOid ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueOid ();
  }

  void StructureMap_Source_pskel::
  defaultValuePositiveInt ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValuePositiveInt ();
  }

  void StructureMap_Source_pskel::
  defaultValueString ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueString ();
  }

  void StructureMap_Source_pskel::
  defaultValueTime ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueTime ();
  }

  void StructureMap_Source_pskel::
  defaultValueUnsignedInt ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueUnsignedInt ();
  }

  void StructureMap_Source_pskel::
  defaultValueUri ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueUri ();
  }

  void StructureMap_Source_pskel::
  defaultValueUrl ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueUrl ();
  }

  void StructureMap_Source_pskel::
  defaultValueUuid ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueUuid ();
  }

  void StructureMap_Source_pskel::
  defaultValueAddress ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueAddress ();
  }

  void StructureMap_Source_pskel::
  defaultValueAge ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueAge ();
  }

  void StructureMap_Source_pskel::
  defaultValueAnnotation ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueAnnotation ();
  }

  void StructureMap_Source_pskel::
  defaultValueAttachment ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueAttachment ();
  }

  void StructureMap_Source_pskel::
  defaultValueCodeableConcept ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueCodeableConcept ();
  }

  void StructureMap_Source_pskel::
  defaultValueCoding ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueCoding ();
  }

  void StructureMap_Source_pskel::
  defaultValueContactPoint ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueContactPoint ();
  }

  void StructureMap_Source_pskel::
  defaultValueCount ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueCount ();
  }

  void StructureMap_Source_pskel::
  defaultValueDistance ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueDistance ();
  }

  void StructureMap_Source_pskel::
  defaultValueDuration ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueDuration ();
  }

  void StructureMap_Source_pskel::
  defaultValueHumanName ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueHumanName ();
  }

  void StructureMap_Source_pskel::
  defaultValueIdentifier ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueIdentifier ();
  }

  void StructureMap_Source_pskel::
  defaultValueMoney ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueMoney ();
  }

  void StructureMap_Source_pskel::
  defaultValuePeriod ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValuePeriod ();
  }

  void StructureMap_Source_pskel::
  defaultValueQuantity ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueQuantity ();
  }

  void StructureMap_Source_pskel::
  defaultValueRange ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueRange ();
  }

  void StructureMap_Source_pskel::
  defaultValueRatio ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueRatio ();
  }

  void StructureMap_Source_pskel::
  defaultValueReference ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueReference ();
  }

  void StructureMap_Source_pskel::
  defaultValueSampledData ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueSampledData ();
  }

  void StructureMap_Source_pskel::
  defaultValueSignature ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueSignature ();
  }

  void StructureMap_Source_pskel::
  defaultValueTiming ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueTiming ();
  }

  void StructureMap_Source_pskel::
  defaultValueContactDetail ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueContactDetail ();
  }

  void StructureMap_Source_pskel::
  defaultValueContributor ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueContributor ();
  }

  void StructureMap_Source_pskel::
  defaultValueDataRequirement ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueDataRequirement ();
  }

  void StructureMap_Source_pskel::
  defaultValueExpression ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueExpression ();
  }

  void StructureMap_Source_pskel::
  defaultValueParameterDefinition ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueParameterDefinition ();
  }

  void StructureMap_Source_pskel::
  defaultValueRelatedArtifact ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueRelatedArtifact ();
  }

  void StructureMap_Source_pskel::
  defaultValueTriggerDefinition ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueTriggerDefinition ();
  }

  void StructureMap_Source_pskel::
  defaultValueUsageContext ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueUsageContext ();
  }

  void StructureMap_Source_pskel::
  defaultValueDosage ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueDosage ();
  }

  void StructureMap_Source_pskel::
  defaultValueMeta ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->defaultValueMeta ();
  }

  void StructureMap_Source_pskel::
  element ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->element ();
  }

  void StructureMap_Source_pskel::
  listMode ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->listMode ();
  }

  void StructureMap_Source_pskel::
  variable ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->variable ();
  }

  void StructureMap_Source_pskel::
  condition ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->condition ();
  }

  void StructureMap_Source_pskel::
  check ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->check ();
  }

  void StructureMap_Source_pskel::
  logMessage ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->logMessage ();
  }

  void StructureMap_Source_pskel::
  post_StructureMap_Source ()
  {
    if (this->StructureMap_Source_impl_)
      this->StructureMap_Source_impl_->post_StructureMap_Source ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Source_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->min_parser_)
      this->min_parser_->_reset ();

    if (this->max_parser_)
      this->max_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->defaultValueBase64Binary_parser_)
      this->defaultValueBase64Binary_parser_->_reset ();

    if (this->defaultValueBoolean_parser_)
      this->defaultValueBoolean_parser_->_reset ();

    if (this->defaultValueCanonical_parser_)
      this->defaultValueCanonical_parser_->_reset ();

    if (this->defaultValueCode_parser_)
      this->defaultValueCode_parser_->_reset ();

    if (this->defaultValueDate_parser_)
      this->defaultValueDate_parser_->_reset ();

    if (this->defaultValueDateTime_parser_)
      this->defaultValueDateTime_parser_->_reset ();

    if (this->defaultValueDecimal_parser_)
      this->defaultValueDecimal_parser_->_reset ();

    if (this->defaultValueId_parser_)
      this->defaultValueId_parser_->_reset ();

    if (this->defaultValueInstant_parser_)
      this->defaultValueInstant_parser_->_reset ();

    if (this->defaultValueInteger_parser_)
      this->defaultValueInteger_parser_->_reset ();

    if (this->defaultValueMarkdown_parser_)
      this->defaultValueMarkdown_parser_->_reset ();

    if (this->defaultValueOid_parser_)
      this->defaultValueOid_parser_->_reset ();

    if (this->defaultValuePositiveInt_parser_)
      this->defaultValuePositiveInt_parser_->_reset ();

    if (this->defaultValueString_parser_)
      this->defaultValueString_parser_->_reset ();

    if (this->defaultValueTime_parser_)
      this->defaultValueTime_parser_->_reset ();

    if (this->defaultValueUnsignedInt_parser_)
      this->defaultValueUnsignedInt_parser_->_reset ();

    if (this->defaultValueUri_parser_)
      this->defaultValueUri_parser_->_reset ();

    if (this->defaultValueUrl_parser_)
      this->defaultValueUrl_parser_->_reset ();

    if (this->defaultValueUuid_parser_)
      this->defaultValueUuid_parser_->_reset ();

    if (this->defaultValueAddress_parser_)
      this->defaultValueAddress_parser_->_reset ();

    if (this->defaultValueAge_parser_)
      this->defaultValueAge_parser_->_reset ();

    if (this->defaultValueAnnotation_parser_)
      this->defaultValueAnnotation_parser_->_reset ();

    if (this->defaultValueAttachment_parser_)
      this->defaultValueAttachment_parser_->_reset ();

    if (this->defaultValueCodeableConcept_parser_)
      this->defaultValueCodeableConcept_parser_->_reset ();

    if (this->defaultValueCoding_parser_)
      this->defaultValueCoding_parser_->_reset ();

    if (this->defaultValueContactPoint_parser_)
      this->defaultValueContactPoint_parser_->_reset ();

    if (this->defaultValueCount_parser_)
      this->defaultValueCount_parser_->_reset ();

    if (this->defaultValueDistance_parser_)
      this->defaultValueDistance_parser_->_reset ();

    if (this->defaultValueDuration_parser_)
      this->defaultValueDuration_parser_->_reset ();

    if (this->defaultValueHumanName_parser_)
      this->defaultValueHumanName_parser_->_reset ();

    if (this->defaultValueIdentifier_parser_)
      this->defaultValueIdentifier_parser_->_reset ();

    if (this->defaultValueMoney_parser_)
      this->defaultValueMoney_parser_->_reset ();

    if (this->defaultValuePeriod_parser_)
      this->defaultValuePeriod_parser_->_reset ();

    if (this->defaultValueQuantity_parser_)
      this->defaultValueQuantity_parser_->_reset ();

    if (this->defaultValueRange_parser_)
      this->defaultValueRange_parser_->_reset ();

    if (this->defaultValueRatio_parser_)
      this->defaultValueRatio_parser_->_reset ();

    if (this->defaultValueReference_parser_)
      this->defaultValueReference_parser_->_reset ();

    if (this->defaultValueSampledData_parser_)
      this->defaultValueSampledData_parser_->_reset ();

    if (this->defaultValueSignature_parser_)
      this->defaultValueSignature_parser_->_reset ();

    if (this->defaultValueTiming_parser_)
      this->defaultValueTiming_parser_->_reset ();

    if (this->defaultValueContactDetail_parser_)
      this->defaultValueContactDetail_parser_->_reset ();

    if (this->defaultValueContributor_parser_)
      this->defaultValueContributor_parser_->_reset ();

    if (this->defaultValueDataRequirement_parser_)
      this->defaultValueDataRequirement_parser_->_reset ();

    if (this->defaultValueExpression_parser_)
      this->defaultValueExpression_parser_->_reset ();

    if (this->defaultValueParameterDefinition_parser_)
      this->defaultValueParameterDefinition_parser_->_reset ();

    if (this->defaultValueRelatedArtifact_parser_)
      this->defaultValueRelatedArtifact_parser_->_reset ();

    if (this->defaultValueTriggerDefinition_parser_)
      this->defaultValueTriggerDefinition_parser_->_reset ();

    if (this->defaultValueUsageContext_parser_)
      this->defaultValueUsageContext_parser_->_reset ();

    if (this->defaultValueDosage_parser_)
      this->defaultValueDosage_parser_->_reset ();

    if (this->defaultValueMeta_parser_)
      this->defaultValueMeta_parser_->_reset ();

    if (this->element_parser_)
      this->element_parser_->_reset ();

    if (this->listMode_parser_)
      this->listMode_parser_->_reset ();

    if (this->variable_parser_)
      this->variable_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->check_parser_)
      this->check_parser_->_reset ();

    if (this->logMessage_parser_)
      this->logMessage_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Target_pskel
  //

  void StructureMap_Target_pskel::
  context ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->context ();
  }

  void StructureMap_Target_pskel::
  contextType ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->contextType ();
  }

  void StructureMap_Target_pskel::
  element ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->element ();
  }

  void StructureMap_Target_pskel::
  variable ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->variable ();
  }

  void StructureMap_Target_pskel::
  listMode ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->listMode ();
  }

  void StructureMap_Target_pskel::
  listRuleId ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->listRuleId ();
  }

  void StructureMap_Target_pskel::
  transform ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->transform ();
  }

  void StructureMap_Target_pskel::
  parameter ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->parameter ();
  }

  void StructureMap_Target_pskel::
  post_StructureMap_Target ()
  {
    if (this->StructureMap_Target_impl_)
      this->StructureMap_Target_impl_->post_StructureMap_Target ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Target_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->contextType_parser_)
      this->contextType_parser_->_reset ();

    if (this->element_parser_)
      this->element_parser_->_reset ();

    if (this->variable_parser_)
      this->variable_parser_->_reset ();

    if (this->listMode_parser_)
      this->listMode_parser_->_reset ();

    if (this->listRuleId_parser_)
      this->listRuleId_parser_->_reset ();

    if (this->transform_parser_)
      this->transform_parser_->_reset ();

    if (this->parameter_parser_)
      this->parameter_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Parameter_pskel
  //

  void StructureMap_Parameter_pskel::
  valueId ()
  {
    if (this->StructureMap_Parameter_impl_)
      this->StructureMap_Parameter_impl_->valueId ();
  }

  void StructureMap_Parameter_pskel::
  valueString ()
  {
    if (this->StructureMap_Parameter_impl_)
      this->StructureMap_Parameter_impl_->valueString ();
  }

  void StructureMap_Parameter_pskel::
  valueBoolean ()
  {
    if (this->StructureMap_Parameter_impl_)
      this->StructureMap_Parameter_impl_->valueBoolean ();
  }

  void StructureMap_Parameter_pskel::
  valueInteger ()
  {
    if (this->StructureMap_Parameter_impl_)
      this->StructureMap_Parameter_impl_->valueInteger ();
  }

  void StructureMap_Parameter_pskel::
  valueDecimal ()
  {
    if (this->StructureMap_Parameter_impl_)
      this->StructureMap_Parameter_impl_->valueDecimal ();
  }

  void StructureMap_Parameter_pskel::
  post_StructureMap_Parameter ()
  {
    if (this->StructureMap_Parameter_impl_)
      this->StructureMap_Parameter_impl_->post_StructureMap_Parameter ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Parameter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->valueId_parser_)
      this->valueId_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueDecimal_parser_)
      this->valueDecimal_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMap_Dependent_pskel
  //

  void StructureMap_Dependent_pskel::
  name ()
  {
    if (this->StructureMap_Dependent_impl_)
      this->StructureMap_Dependent_impl_->name ();
  }

  void StructureMap_Dependent_pskel::
  variable ()
  {
    if (this->StructureMap_Dependent_impl_)
      this->StructureMap_Dependent_impl_->variable ();
  }

  void StructureMap_Dependent_pskel::
  post_StructureMap_Dependent ()
  {
    if (this->StructureMap_Dependent_impl_)
      this->StructureMap_Dependent_impl_->post_StructureMap_Dependent ();
    else
      post_BackboneElement ();
  }

  void StructureMap_Dependent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->variable_parser_)
      this->variable_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureMapInputMode_list_pskel
  //

  void StructureMapInputMode_list_pskel::
  post_StructureMapInputMode_list ()
  {
    if (this->StructureMapInputMode_list_impl_)
      this->StructureMapInputMode_list_impl_->post_StructureMapInputMode_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureMapInputMode_list_pskel::_xsde_StructureMapInputMode_list_pskel_enums_[2UL] = 
  {
    "source",
    "target"
  };

  // StructureMapInputMode_pskel
  //

  void StructureMapInputMode_pskel::
  value ()
  {
    if (this->StructureMapInputMode_impl_)
      this->StructureMapInputMode_impl_->value ();
  }

  void StructureMapInputMode_pskel::
  post_StructureMapInputMode ()
  {
    if (this->StructureMapInputMode_impl_)
      this->StructureMapInputMode_impl_->post_StructureMapInputMode ();
    else
      post_Element ();
  }

  void StructureMapInputMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // StructureMapContextType_list_pskel
  //

  void StructureMapContextType_list_pskel::
  post_StructureMapContextType_list ()
  {
    if (this->StructureMapContextType_list_impl_)
      this->StructureMapContextType_list_impl_->post_StructureMapContextType_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureMapContextType_list_pskel::_xsde_StructureMapContextType_list_pskel_enums_[2UL] = 
  {
    "type",
    "variable"
  };

  // StructureMapContextType_pskel
  //

  void StructureMapContextType_pskel::
  value ()
  {
    if (this->StructureMapContextType_impl_)
      this->StructureMapContextType_impl_->value ();
  }

  void StructureMapContextType_pskel::
  post_StructureMapContextType ()
  {
    if (this->StructureMapContextType_impl_)
      this->StructureMapContextType_impl_->post_StructureMapContextType ();
    else
      post_Element ();
  }

  void StructureMapContextType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // StructureMapTargetListMode_list_pskel
  //

  void StructureMapTargetListMode_list_pskel::
  post_StructureMapTargetListMode_list ()
  {
    if (this->StructureMapTargetListMode_list_impl_)
      this->StructureMapTargetListMode_list_impl_->post_StructureMapTargetListMode_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureMapTargetListMode_list_pskel::_xsde_StructureMapTargetListMode_list_pskel_enums_[4UL] = 
  {
    "collate",
    "first",
    "last",
    "share"
  };

  // StructureMapTargetListMode_pskel
  //

  void StructureMapTargetListMode_pskel::
  value ()
  {
    if (this->StructureMapTargetListMode_impl_)
      this->StructureMapTargetListMode_impl_->value ();
  }

  void StructureMapTargetListMode_pskel::
  post_StructureMapTargetListMode ()
  {
    if (this->StructureMapTargetListMode_impl_)
      this->StructureMapTargetListMode_impl_->post_StructureMapTargetListMode ();
    else
      post_Element ();
  }

  void StructureMapTargetListMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // StructureMapTransform_list_pskel
  //

  void StructureMapTransform_list_pskel::
  post_StructureMapTransform_list ()
  {
    if (this->StructureMapTransform_list_impl_)
      this->StructureMapTransform_list_impl_->post_StructureMapTransform_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureMapTransform_list_pskel::_xsde_StructureMapTransform_list_pskel_enums_[17UL] = 
  {
    "append",
    "c",
    "cast",
    "cc",
    "copy",
    "cp",
    "create",
    "dateOp",
    "escape",
    "evaluate",
    "id",
    "pointer",
    "qty",
    "reference",
    "translate",
    "truncate",
    "uuid"
  };

  // StructureMapTransform_pskel
  //

  void StructureMapTransform_pskel::
  value ()
  {
    if (this->StructureMapTransform_impl_)
      this->StructureMapTransform_impl_->value ();
  }

  void StructureMapTransform_pskel::
  post_StructureMapTransform ()
  {
    if (this->StructureMapTransform_impl_)
      this->StructureMapTransform_impl_->post_StructureMapTransform ();
    else
      post_Element ();
  }

  void StructureMapTransform_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // StructureMapSourceListMode_list_pskel
  //

  void StructureMapSourceListMode_list_pskel::
  post_StructureMapSourceListMode_list ()
  {
    if (this->StructureMapSourceListMode_list_impl_)
      this->StructureMapSourceListMode_list_impl_->post_StructureMapSourceListMode_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureMapSourceListMode_list_pskel::_xsde_StructureMapSourceListMode_list_pskel_enums_[5UL] = 
  {
    "first",
    "last",
    "not_first",
    "not_last",
    "only_one"
  };

  // StructureMapSourceListMode_pskel
  //

  void StructureMapSourceListMode_pskel::
  value ()
  {
    if (this->StructureMapSourceListMode_impl_)
      this->StructureMapSourceListMode_impl_->value ();
  }

  void StructureMapSourceListMode_pskel::
  post_StructureMapSourceListMode ()
  {
    if (this->StructureMapSourceListMode_impl_)
      this->StructureMapSourceListMode_impl_->post_StructureMapSourceListMode ();
    else
      post_Element ();
  }

  void StructureMapSourceListMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // StructureMapGroupTypeMode_list_pskel
  //

  void StructureMapGroupTypeMode_list_pskel::
  post_StructureMapGroupTypeMode_list ()
  {
    if (this->StructureMapGroupTypeMode_list_impl_)
      this->StructureMapGroupTypeMode_list_impl_->post_StructureMapGroupTypeMode_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureMapGroupTypeMode_list_pskel::_xsde_StructureMapGroupTypeMode_list_pskel_enums_[3UL] = 
  {
    "none",
    "type-and-types",
    "types"
  };

  // StructureMapGroupTypeMode_pskel
  //

  void StructureMapGroupTypeMode_pskel::
  value ()
  {
    if (this->StructureMapGroupTypeMode_impl_)
      this->StructureMapGroupTypeMode_impl_->value ();
  }

  void StructureMapGroupTypeMode_pskel::
  post_StructureMapGroupTypeMode ()
  {
    if (this->StructureMapGroupTypeMode_impl_)
      this->StructureMapGroupTypeMode_impl_->post_StructureMapGroupTypeMode ();
    else
      post_Element ();
  }

  void StructureMapGroupTypeMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // StructureMapModelMode_list_pskel
  //

  void StructureMapModelMode_list_pskel::
  post_StructureMapModelMode_list ()
  {
    if (this->StructureMapModelMode_list_impl_)
      this->StructureMapModelMode_list_impl_->post_StructureMapModelMode_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureMapModelMode_list_pskel::_xsde_StructureMapModelMode_list_pskel_enums_[4UL] = 
  {
    "produced",
    "queried",
    "source",
    "target"
  };

  // StructureMapModelMode_pskel
  //

  void StructureMapModelMode_pskel::
  value ()
  {
    if (this->StructureMapModelMode_impl_)
      this->StructureMapModelMode_impl_->value ();
  }

  void StructureMapModelMode_pskel::
  post_StructureMapModelMode ()
  {
    if (this->StructureMapModelMode_impl_)
      this->StructureMapModelMode_impl_->post_StructureMapModelMode ();
    else
      post_Element ();
  }

  void StructureMapModelMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for StructureMap_pskel.
  //
  bool StructureMap_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureMap_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "structure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->structure_parser_)
            {
              this->structure_parser_->pre ();
              ctx.nested_parser (this->structure_parser_);
            }
          }
          else
          {
            if (this->structure_parser_ != 0)
            {
              this->structure_parser_->post_StructureMap_Structure ();
              this->structure ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "import" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->import_parser_)
            {
              this->import_parser_->pre ();
              ctx.nested_parser (this->import_parser_);
            }
          }
          else
          {
            if (this->import_parser_ != 0)
            {
              this->import_parser_->post_canonical ();
              this->import ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "group" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->group_parser_)
            {
              this->group_parser_->pre ();
              ctx.nested_parser (this->group_parser_);
            }
          }
          else
          {
            if (this->group_parser_ != 0)
            {
              this->group_parser_->post_StructureMap_Group ();
              this->group ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Structure_pskel.
  //
  bool StructureMap_Structure_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Structure_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Structure_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Structure_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Structure_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureMap_Structure_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_canonical ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mode_parser_)
            {
              this->mode_parser_->pre ();
              ctx.nested_parser (this->mode_parser_);
            }
          }
          else
          {
            if (this->mode_parser_ != 0)
            {
              this->mode_parser_->post_StructureMapModelMode ();
              this->mode ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "alias" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->alias_parser_)
            {
              this->alias_parser_->pre ();
              ctx.nested_parser (this->alias_parser_);
            }
          }
          else
          {
            if (this->alias_parser_ != 0)
            {
              this->alias_parser_->post_string ();
              this->alias ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_string ();
              this->documentation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Group_pskel.
  //
  bool StructureMap_Group_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Group_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Group_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Group_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Group_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureMap_Group_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_id ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "extends" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->extends_parser_)
            {
              this->extends_parser_->pre ();
              ctx.nested_parser (this->extends_parser_);
            }
          }
          else
          {
            if (this->extends_parser_ != 0)
            {
              this->extends_parser_->post_id ();
              this->extends ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "typeMode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->typeMode_parser_)
            {
              this->typeMode_parser_->pre ();
              ctx.nested_parser (this->typeMode_parser_);
            }
          }
          else
          {
            if (this->typeMode_parser_ != 0)
            {
              this->typeMode_parser_->post_StructureMapGroupTypeMode ();
              this->typeMode ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_string ();
              this->documentation ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "input" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->input_parser_)
            {
              this->input_parser_->pre ();
              ctx.nested_parser (this->input_parser_);
            }
          }
          else
          {
            if (this->input_parser_ != 0)
            {
              this->input_parser_->post_StructureMap_Input ();
              this->input ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "rule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rule_parser_)
            {
              this->rule_parser_->pre ();
              ctx.nested_parser (this->rule_parser_);
            }
          }
          else
          {
            if (this->rule_parser_ != 0)
            {
              this->rule_parser_->post_StructureMap_Rule ();
              this->rule ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Input_pskel.
  //
  bool StructureMap_Input_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Input_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Input_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Input_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Input_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureMap_Input_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_id ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_string ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mode_parser_)
            {
              this->mode_parser_->pre ();
              ctx.nested_parser (this->mode_parser_);
            }
          }
          else
          {
            if (this->mode_parser_ != 0)
            {
              this->mode_parser_->post_StructureMapInputMode ();
              this->mode ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_string ();
              this->documentation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Rule_pskel.
  //
  bool StructureMap_Rule_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Rule_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Rule_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Rule_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Rule_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureMap_Rule_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_id ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_StructureMap_Source ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_StructureMap_Target ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "rule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rule_parser_)
            {
              this->rule_parser_->pre ();
              ctx.nested_parser (this->rule_parser_);
            }
          }
          else
          {
            if (this->rule_parser_ != 0)
            {
              this->rule_parser_->post_StructureMap_Rule ();
              this->rule ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "dependent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dependent_parser_)
            {
              this->dependent_parser_->pre ();
              ctx.nested_parser (this->dependent_parser_);
            }
          }
          else
          {
            if (this->dependent_parser_ != 0)
            {
              this->dependent_parser_->post_StructureMap_Dependent ();
              this->dependent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_string ();
              this->documentation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Source_pskel.
  //
  bool StructureMap_Source_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "context" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Source_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Source_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Source_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Source_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureMap_Source_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_id ();
              this->context ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "min" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->min_parser_)
            {
              this->min_parser_->pre ();
              ctx.nested_parser (this->min_parser_);
            }
          }
          else
          {
            if (this->min_parser_ != 0)
            {
              this->min_parser_->post_integer ();
              this->min ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "max" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->max_parser_)
            {
              this->max_parser_->pre ();
              ctx.nested_parser (this->max_parser_);
            }
          }
          else
          {
            if (this->max_parser_ != 0)
            {
              this->max_parser_->post_string ();
              this->max ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_string ();
              this->type ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "defaultValueBase64Binary" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueBase64Binary_parser_)
            {
              this->defaultValueBase64Binary_parser_->pre ();
              ctx.nested_parser (this->defaultValueBase64Binary_parser_);
            }
          }
          else
          {
            if (this->defaultValueBase64Binary_parser_ != 0)
            {
              this->defaultValueBase64Binary_parser_->post_base64Binary ();
              this->defaultValueBase64Binary ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "defaultValueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueBoolean_parser_)
            {
              this->defaultValueBoolean_parser_->pre ();
              ctx.nested_parser (this->defaultValueBoolean_parser_);
            }
          }
          else
          {
            if (this->defaultValueBoolean_parser_ != 0)
            {
              this->defaultValueBoolean_parser_->post_boolean ();
              this->defaultValueBoolean ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "defaultValueCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueCanonical_parser_)
            {
              this->defaultValueCanonical_parser_->pre ();
              ctx.nested_parser (this->defaultValueCanonical_parser_);
            }
          }
          else
          {
            if (this->defaultValueCanonical_parser_ != 0)
            {
              this->defaultValueCanonical_parser_->post_canonical ();
              this->defaultValueCanonical ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "defaultValueCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueCode_parser_)
            {
              this->defaultValueCode_parser_->pre ();
              ctx.nested_parser (this->defaultValueCode_parser_);
            }
          }
          else
          {
            if (this->defaultValueCode_parser_ != 0)
            {
              this->defaultValueCode_parser_->post_code ();
              this->defaultValueCode ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "defaultValueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueDate_parser_)
            {
              this->defaultValueDate_parser_->pre ();
              ctx.nested_parser (this->defaultValueDate_parser_);
            }
          }
          else
          {
            if (this->defaultValueDate_parser_ != 0)
            {
              this->defaultValueDate_parser_->post_date ();
              this->defaultValueDate ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "defaultValueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueDateTime_parser_)
            {
              this->defaultValueDateTime_parser_->pre ();
              ctx.nested_parser (this->defaultValueDateTime_parser_);
            }
          }
          else
          {
            if (this->defaultValueDateTime_parser_ != 0)
            {
              this->defaultValueDateTime_parser_->post_dateTime ();
              this->defaultValueDateTime ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "defaultValueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueDecimal_parser_)
            {
              this->defaultValueDecimal_parser_->pre ();
              ctx.nested_parser (this->defaultValueDecimal_parser_);
            }
          }
          else
          {
            if (this->defaultValueDecimal_parser_ != 0)
            {
              this->defaultValueDecimal_parser_->post_decimal ();
              this->defaultValueDecimal ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "defaultValueId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueId_parser_)
            {
              this->defaultValueId_parser_->pre ();
              ctx.nested_parser (this->defaultValueId_parser_);
            }
          }
          else
          {
            if (this->defaultValueId_parser_ != 0)
            {
              this->defaultValueId_parser_->post_id ();
              this->defaultValueId ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "defaultValueInstant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueInstant_parser_)
            {
              this->defaultValueInstant_parser_->pre ();
              ctx.nested_parser (this->defaultValueInstant_parser_);
            }
          }
          else
          {
            if (this->defaultValueInstant_parser_ != 0)
            {
              this->defaultValueInstant_parser_->post_instant ();
              this->defaultValueInstant ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "defaultValueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueInteger_parser_)
            {
              this->defaultValueInteger_parser_->pre ();
              ctx.nested_parser (this->defaultValueInteger_parser_);
            }
          }
          else
          {
            if (this->defaultValueInteger_parser_ != 0)
            {
              this->defaultValueInteger_parser_->post_integer ();
              this->defaultValueInteger ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "defaultValueMarkdown" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueMarkdown_parser_)
            {
              this->defaultValueMarkdown_parser_->pre ();
              ctx.nested_parser (this->defaultValueMarkdown_parser_);
            }
          }
          else
          {
            if (this->defaultValueMarkdown_parser_ != 0)
            {
              this->defaultValueMarkdown_parser_->post_markdown ();
              this->defaultValueMarkdown ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "defaultValueOid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueOid_parser_)
            {
              this->defaultValueOid_parser_->pre ();
              ctx.nested_parser (this->defaultValueOid_parser_);
            }
          }
          else
          {
            if (this->defaultValueOid_parser_ != 0)
            {
              this->defaultValueOid_parser_->post_oid ();
              this->defaultValueOid ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "defaultValuePositiveInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValuePositiveInt_parser_)
            {
              this->defaultValuePositiveInt_parser_->pre ();
              ctx.nested_parser (this->defaultValuePositiveInt_parser_);
            }
          }
          else
          {
            if (this->defaultValuePositiveInt_parser_ != 0)
            {
              this->defaultValuePositiveInt_parser_->post_positiveInt ();
              this->defaultValuePositiveInt ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "defaultValueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueString_parser_)
            {
              this->defaultValueString_parser_->pre ();
              ctx.nested_parser (this->defaultValueString_parser_);
            }
          }
          else
          {
            if (this->defaultValueString_parser_ != 0)
            {
              this->defaultValueString_parser_->post_string ();
              this->defaultValueString ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "defaultValueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueTime_parser_)
            {
              this->defaultValueTime_parser_->pre ();
              ctx.nested_parser (this->defaultValueTime_parser_);
            }
          }
          else
          {
            if (this->defaultValueTime_parser_ != 0)
            {
              this->defaultValueTime_parser_->post_time ();
              this->defaultValueTime ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "defaultValueUnsignedInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueUnsignedInt_parser_)
            {
              this->defaultValueUnsignedInt_parser_->pre ();
              ctx.nested_parser (this->defaultValueUnsignedInt_parser_);
            }
          }
          else
          {
            if (this->defaultValueUnsignedInt_parser_ != 0)
            {
              this->defaultValueUnsignedInt_parser_->post_unsignedInt ();
              this->defaultValueUnsignedInt ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "defaultValueUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueUri_parser_)
            {
              this->defaultValueUri_parser_->pre ();
              ctx.nested_parser (this->defaultValueUri_parser_);
            }
          }
          else
          {
            if (this->defaultValueUri_parser_ != 0)
            {
              this->defaultValueUri_parser_->post_uri ();
              this->defaultValueUri ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "defaultValueUrl" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueUrl_parser_)
            {
              this->defaultValueUrl_parser_->pre ();
              ctx.nested_parser (this->defaultValueUrl_parser_);
            }
          }
          else
          {
            if (this->defaultValueUrl_parser_ != 0)
            {
              this->defaultValueUrl_parser_->post_url ();
              this->defaultValueUrl ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "defaultValueUuid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueUuid_parser_)
            {
              this->defaultValueUuid_parser_->pre ();
              ctx.nested_parser (this->defaultValueUuid_parser_);
            }
          }
          else
          {
            if (this->defaultValueUuid_parser_ != 0)
            {
              this->defaultValueUuid_parser_->post_uuid ();
              this->defaultValueUuid ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "defaultValueAddress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueAddress_parser_)
            {
              this->defaultValueAddress_parser_->pre ();
              ctx.nested_parser (this->defaultValueAddress_parser_);
            }
          }
          else
          {
            if (this->defaultValueAddress_parser_ != 0)
            {
              this->defaultValueAddress_parser_->post_Address ();
              this->defaultValueAddress ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "defaultValueAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueAge_parser_)
            {
              this->defaultValueAge_parser_->pre ();
              ctx.nested_parser (this->defaultValueAge_parser_);
            }
          }
          else
          {
            if (this->defaultValueAge_parser_ != 0)
            {
              this->defaultValueAge_parser_->post_Age ();
              this->defaultValueAge ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "defaultValueAnnotation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueAnnotation_parser_)
            {
              this->defaultValueAnnotation_parser_->pre ();
              ctx.nested_parser (this->defaultValueAnnotation_parser_);
            }
          }
          else
          {
            if (this->defaultValueAnnotation_parser_ != 0)
            {
              this->defaultValueAnnotation_parser_->post_Annotation ();
              this->defaultValueAnnotation ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "defaultValueAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueAttachment_parser_)
            {
              this->defaultValueAttachment_parser_->pre ();
              ctx.nested_parser (this->defaultValueAttachment_parser_);
            }
          }
          else
          {
            if (this->defaultValueAttachment_parser_ != 0)
            {
              this->defaultValueAttachment_parser_->post_Attachment ();
              this->defaultValueAttachment ();
            }

            count = 0;
            state = 27UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "defaultValueCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueCodeableConcept_parser_)
            {
              this->defaultValueCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->defaultValueCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->defaultValueCodeableConcept_parser_ != 0)
            {
              this->defaultValueCodeableConcept_parser_->post_CodeableConcept ();
              this->defaultValueCodeableConcept ();
            }

            count = 0;
            state = 28UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "defaultValueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueCoding_parser_)
            {
              this->defaultValueCoding_parser_->pre ();
              ctx.nested_parser (this->defaultValueCoding_parser_);
            }
          }
          else
          {
            if (this->defaultValueCoding_parser_ != 0)
            {
              this->defaultValueCoding_parser_->post_Coding ();
              this->defaultValueCoding ();
            }

            count = 0;
            state = 29UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "defaultValueContactPoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueContactPoint_parser_)
            {
              this->defaultValueContactPoint_parser_->pre ();
              ctx.nested_parser (this->defaultValueContactPoint_parser_);
            }
          }
          else
          {
            if (this->defaultValueContactPoint_parser_ != 0)
            {
              this->defaultValueContactPoint_parser_->post_ContactPoint ();
              this->defaultValueContactPoint ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "defaultValueCount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueCount_parser_)
            {
              this->defaultValueCount_parser_->pre ();
              ctx.nested_parser (this->defaultValueCount_parser_);
            }
          }
          else
          {
            if (this->defaultValueCount_parser_ != 0)
            {
              this->defaultValueCount_parser_->post_Count ();
              this->defaultValueCount ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "defaultValueDistance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueDistance_parser_)
            {
              this->defaultValueDistance_parser_->pre ();
              ctx.nested_parser (this->defaultValueDistance_parser_);
            }
          }
          else
          {
            if (this->defaultValueDistance_parser_ != 0)
            {
              this->defaultValueDistance_parser_->post_Distance ();
              this->defaultValueDistance ();
            }

            count = 0;
            state = 32UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "defaultValueDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueDuration_parser_)
            {
              this->defaultValueDuration_parser_->pre ();
              ctx.nested_parser (this->defaultValueDuration_parser_);
            }
          }
          else
          {
            if (this->defaultValueDuration_parser_ != 0)
            {
              this->defaultValueDuration_parser_->post_Duration ();
              this->defaultValueDuration ();
            }

            count = 0;
            state = 33UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "defaultValueHumanName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueHumanName_parser_)
            {
              this->defaultValueHumanName_parser_->pre ();
              ctx.nested_parser (this->defaultValueHumanName_parser_);
            }
          }
          else
          {
            if (this->defaultValueHumanName_parser_ != 0)
            {
              this->defaultValueHumanName_parser_->post_HumanName ();
              this->defaultValueHumanName ();
            }

            count = 0;
            state = 34UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 34UL;
          // Fall through.
        }
      }
      case 34UL:
      {
        if (n == "defaultValueIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueIdentifier_parser_)
            {
              this->defaultValueIdentifier_parser_->pre ();
              ctx.nested_parser (this->defaultValueIdentifier_parser_);
            }
          }
          else
          {
            if (this->defaultValueIdentifier_parser_ != 0)
            {
              this->defaultValueIdentifier_parser_->post_Identifier ();
              this->defaultValueIdentifier ();
            }

            count = 0;
            state = 35UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 35UL;
          // Fall through.
        }
      }
      case 35UL:
      {
        if (n == "defaultValueMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueMoney_parser_)
            {
              this->defaultValueMoney_parser_->pre ();
              ctx.nested_parser (this->defaultValueMoney_parser_);
            }
          }
          else
          {
            if (this->defaultValueMoney_parser_ != 0)
            {
              this->defaultValueMoney_parser_->post_Money ();
              this->defaultValueMoney ();
            }

            count = 0;
            state = 36UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 36UL;
          // Fall through.
        }
      }
      case 36UL:
      {
        if (n == "defaultValuePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValuePeriod_parser_)
            {
              this->defaultValuePeriod_parser_->pre ();
              ctx.nested_parser (this->defaultValuePeriod_parser_);
            }
          }
          else
          {
            if (this->defaultValuePeriod_parser_ != 0)
            {
              this->defaultValuePeriod_parser_->post_Period ();
              this->defaultValuePeriod ();
            }

            count = 0;
            state = 37UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 37UL;
          // Fall through.
        }
      }
      case 37UL:
      {
        if (n == "defaultValueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueQuantity_parser_)
            {
              this->defaultValueQuantity_parser_->pre ();
              ctx.nested_parser (this->defaultValueQuantity_parser_);
            }
          }
          else
          {
            if (this->defaultValueQuantity_parser_ != 0)
            {
              this->defaultValueQuantity_parser_->post_Quantity ();
              this->defaultValueQuantity ();
            }

            count = 0;
            state = 38UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 38UL;
          // Fall through.
        }
      }
      case 38UL:
      {
        if (n == "defaultValueRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueRange_parser_)
            {
              this->defaultValueRange_parser_->pre ();
              ctx.nested_parser (this->defaultValueRange_parser_);
            }
          }
          else
          {
            if (this->defaultValueRange_parser_ != 0)
            {
              this->defaultValueRange_parser_->post_Range ();
              this->defaultValueRange ();
            }

            count = 0;
            state = 39UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 39UL;
          // Fall through.
        }
      }
      case 39UL:
      {
        if (n == "defaultValueRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueRatio_parser_)
            {
              this->defaultValueRatio_parser_->pre ();
              ctx.nested_parser (this->defaultValueRatio_parser_);
            }
          }
          else
          {
            if (this->defaultValueRatio_parser_ != 0)
            {
              this->defaultValueRatio_parser_->post_Ratio ();
              this->defaultValueRatio ();
            }

            count = 0;
            state = 40UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 40UL;
          // Fall through.
        }
      }
      case 40UL:
      {
        if (n == "defaultValueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueReference_parser_)
            {
              this->defaultValueReference_parser_->pre ();
              ctx.nested_parser (this->defaultValueReference_parser_);
            }
          }
          else
          {
            if (this->defaultValueReference_parser_ != 0)
            {
              this->defaultValueReference_parser_->post_Reference ();
              this->defaultValueReference ();
            }

            count = 0;
            state = 41UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 41UL;
          // Fall through.
        }
      }
      case 41UL:
      {
        if (n == "defaultValueSampledData" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueSampledData_parser_)
            {
              this->defaultValueSampledData_parser_->pre ();
              ctx.nested_parser (this->defaultValueSampledData_parser_);
            }
          }
          else
          {
            if (this->defaultValueSampledData_parser_ != 0)
            {
              this->defaultValueSampledData_parser_->post_SampledData ();
              this->defaultValueSampledData ();
            }

            count = 0;
            state = 42UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 42UL;
          // Fall through.
        }
      }
      case 42UL:
      {
        if (n == "defaultValueSignature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueSignature_parser_)
            {
              this->defaultValueSignature_parser_->pre ();
              ctx.nested_parser (this->defaultValueSignature_parser_);
            }
          }
          else
          {
            if (this->defaultValueSignature_parser_ != 0)
            {
              this->defaultValueSignature_parser_->post_Signature ();
              this->defaultValueSignature ();
            }

            count = 0;
            state = 43UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 43UL;
          // Fall through.
        }
      }
      case 43UL:
      {
        if (n == "defaultValueTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueTiming_parser_)
            {
              this->defaultValueTiming_parser_->pre ();
              ctx.nested_parser (this->defaultValueTiming_parser_);
            }
          }
          else
          {
            if (this->defaultValueTiming_parser_ != 0)
            {
              this->defaultValueTiming_parser_->post_Timing ();
              this->defaultValueTiming ();
            }

            count = 0;
            state = 44UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 44UL;
          // Fall through.
        }
      }
      case 44UL:
      {
        if (n == "defaultValueContactDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueContactDetail_parser_)
            {
              this->defaultValueContactDetail_parser_->pre ();
              ctx.nested_parser (this->defaultValueContactDetail_parser_);
            }
          }
          else
          {
            if (this->defaultValueContactDetail_parser_ != 0)
            {
              this->defaultValueContactDetail_parser_->post_ContactDetail ();
              this->defaultValueContactDetail ();
            }

            count = 0;
            state = 45UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 45UL;
          // Fall through.
        }
      }
      case 45UL:
      {
        if (n == "defaultValueContributor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueContributor_parser_)
            {
              this->defaultValueContributor_parser_->pre ();
              ctx.nested_parser (this->defaultValueContributor_parser_);
            }
          }
          else
          {
            if (this->defaultValueContributor_parser_ != 0)
            {
              this->defaultValueContributor_parser_->post_Contributor ();
              this->defaultValueContributor ();
            }

            count = 0;
            state = 46UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 46UL;
          // Fall through.
        }
      }
      case 46UL:
      {
        if (n == "defaultValueDataRequirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueDataRequirement_parser_)
            {
              this->defaultValueDataRequirement_parser_->pre ();
              ctx.nested_parser (this->defaultValueDataRequirement_parser_);
            }
          }
          else
          {
            if (this->defaultValueDataRequirement_parser_ != 0)
            {
              this->defaultValueDataRequirement_parser_->post_DataRequirement ();
              this->defaultValueDataRequirement ();
            }

            count = 0;
            state = 47UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 47UL;
          // Fall through.
        }
      }
      case 47UL:
      {
        if (n == "defaultValueExpression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueExpression_parser_)
            {
              this->defaultValueExpression_parser_->pre ();
              ctx.nested_parser (this->defaultValueExpression_parser_);
            }
          }
          else
          {
            if (this->defaultValueExpression_parser_ != 0)
            {
              this->defaultValueExpression_parser_->post_Expression ();
              this->defaultValueExpression ();
            }

            count = 0;
            state = 48UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 48UL;
          // Fall through.
        }
      }
      case 48UL:
      {
        if (n == "defaultValueParameterDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueParameterDefinition_parser_)
            {
              this->defaultValueParameterDefinition_parser_->pre ();
              ctx.nested_parser (this->defaultValueParameterDefinition_parser_);
            }
          }
          else
          {
            if (this->defaultValueParameterDefinition_parser_ != 0)
            {
              this->defaultValueParameterDefinition_parser_->post_ParameterDefinition ();
              this->defaultValueParameterDefinition ();
            }

            count = 0;
            state = 49UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 49UL;
          // Fall through.
        }
      }
      case 49UL:
      {
        if (n == "defaultValueRelatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueRelatedArtifact_parser_)
            {
              this->defaultValueRelatedArtifact_parser_->pre ();
              ctx.nested_parser (this->defaultValueRelatedArtifact_parser_);
            }
          }
          else
          {
            if (this->defaultValueRelatedArtifact_parser_ != 0)
            {
              this->defaultValueRelatedArtifact_parser_->post_RelatedArtifact ();
              this->defaultValueRelatedArtifact ();
            }

            count = 0;
            state = 50UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 50UL;
          // Fall through.
        }
      }
      case 50UL:
      {
        if (n == "defaultValueTriggerDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueTriggerDefinition_parser_)
            {
              this->defaultValueTriggerDefinition_parser_->pre ();
              ctx.nested_parser (this->defaultValueTriggerDefinition_parser_);
            }
          }
          else
          {
            if (this->defaultValueTriggerDefinition_parser_ != 0)
            {
              this->defaultValueTriggerDefinition_parser_->post_TriggerDefinition ();
              this->defaultValueTriggerDefinition ();
            }

            count = 0;
            state = 51UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 51UL;
          // Fall through.
        }
      }
      case 51UL:
      {
        if (n == "defaultValueUsageContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueUsageContext_parser_)
            {
              this->defaultValueUsageContext_parser_->pre ();
              ctx.nested_parser (this->defaultValueUsageContext_parser_);
            }
          }
          else
          {
            if (this->defaultValueUsageContext_parser_ != 0)
            {
              this->defaultValueUsageContext_parser_->post_UsageContext ();
              this->defaultValueUsageContext ();
            }

            count = 0;
            state = 52UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 52UL;
          // Fall through.
        }
      }
      case 52UL:
      {
        if (n == "defaultValueDosage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueDosage_parser_)
            {
              this->defaultValueDosage_parser_->pre ();
              ctx.nested_parser (this->defaultValueDosage_parser_);
            }
          }
          else
          {
            if (this->defaultValueDosage_parser_ != 0)
            {
              this->defaultValueDosage_parser_->post_Dosage ();
              this->defaultValueDosage ();
            }

            count = 0;
            state = 53UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 53UL;
          // Fall through.
        }
      }
      case 53UL:
      {
        if (n == "defaultValueMeta" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->defaultValueMeta_parser_)
            {
              this->defaultValueMeta_parser_->pre ();
              ctx.nested_parser (this->defaultValueMeta_parser_);
            }
          }
          else
          {
            if (this->defaultValueMeta_parser_ != 0)
            {
              this->defaultValueMeta_parser_->post_Meta ();
              this->defaultValueMeta ();
            }

            count = 0;
            state = 54UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 54UL;
          // Fall through.
        }
      }
      case 54UL:
      {
        if (n == "element" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->element_parser_)
            {
              this->element_parser_->pre ();
              ctx.nested_parser (this->element_parser_);
            }
          }
          else
          {
            if (this->element_parser_ != 0)
            {
              this->element_parser_->post_string ();
              this->element ();
            }

            count = 0;
            state = 55UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 55UL;
          // Fall through.
        }
      }
      case 55UL:
      {
        if (n == "listMode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->listMode_parser_)
            {
              this->listMode_parser_->pre ();
              ctx.nested_parser (this->listMode_parser_);
            }
          }
          else
          {
            if (this->listMode_parser_ != 0)
            {
              this->listMode_parser_->post_StructureMapSourceListMode ();
              this->listMode ();
            }

            count = 0;
            state = 56UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 56UL;
          // Fall through.
        }
      }
      case 56UL:
      {
        if (n == "variable" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->variable_parser_)
            {
              this->variable_parser_->pre ();
              ctx.nested_parser (this->variable_parser_);
            }
          }
          else
          {
            if (this->variable_parser_ != 0)
            {
              this->variable_parser_->post_id ();
              this->variable ();
            }

            count = 0;
            state = 57UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 57UL;
          // Fall through.
        }
      }
      case 57UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_string ();
              this->condition ();
            }

            count = 0;
            state = 58UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 58UL;
          // Fall through.
        }
      }
      case 58UL:
      {
        if (n == "check" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->check_parser_)
            {
              this->check_parser_->pre ();
              ctx.nested_parser (this->check_parser_);
            }
          }
          else
          {
            if (this->check_parser_ != 0)
            {
              this->check_parser_->post_string ();
              this->check ();
            }

            count = 0;
            state = 59UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 59UL;
          // Fall through.
        }
      }
      case 59UL:
      {
        if (n == "logMessage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->logMessage_parser_)
            {
              this->logMessage_parser_->pre ();
              ctx.nested_parser (this->logMessage_parser_);
            }
          }
          else
          {
            if (this->logMessage_parser_ != 0)
            {
              this->logMessage_parser_->post_string ();
              this->logMessage ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Target_pskel.
  //
  bool StructureMap_Target_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "context" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "contextType" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "element" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "variable" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "listMode" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "listRuleId" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "transform" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "parameter" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Target_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Target_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Target_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Target_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void StructureMap_Target_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_id ();
              this->context ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "contextType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contextType_parser_)
            {
              this->contextType_parser_->pre ();
              ctx.nested_parser (this->contextType_parser_);
            }
          }
          else
          {
            if (this->contextType_parser_ != 0)
            {
              this->contextType_parser_->post_StructureMapContextType ();
              this->contextType ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "element" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->element_parser_)
            {
              this->element_parser_->pre ();
              ctx.nested_parser (this->element_parser_);
            }
          }
          else
          {
            if (this->element_parser_ != 0)
            {
              this->element_parser_->post_string ();
              this->element ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "variable" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->variable_parser_)
            {
              this->variable_parser_->pre ();
              ctx.nested_parser (this->variable_parser_);
            }
          }
          else
          {
            if (this->variable_parser_ != 0)
            {
              this->variable_parser_->post_id ();
              this->variable ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "listMode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->listMode_parser_)
            {
              this->listMode_parser_->pre ();
              ctx.nested_parser (this->listMode_parser_);
            }
          }
          else
          {
            if (this->listMode_parser_ != 0)
            {
              this->listMode_parser_->post_StructureMapTargetListMode ();
              this->listMode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "listRuleId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->listRuleId_parser_)
            {
              this->listRuleId_parser_->pre ();
              ctx.nested_parser (this->listRuleId_parser_);
            }
          }
          else
          {
            if (this->listRuleId_parser_ != 0)
            {
              this->listRuleId_parser_->post_id ();
              this->listRuleId ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "transform" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->transform_parser_)
            {
              this->transform_parser_->pre ();
              ctx.nested_parser (this->transform_parser_);
            }
          }
          else
          {
            if (this->transform_parser_ != 0)
            {
              this->transform_parser_->post_StructureMapTransform ();
              this->transform ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "parameter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parameter_parser_)
            {
              this->parameter_parser_->pre ();
              ctx.nested_parser (this->parameter_parser_);
            }
          }
          else
          {
            if (this->parameter_parser_ != 0)
            {
              this->parameter_parser_->post_StructureMap_Parameter ();
              this->parameter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Parameter_pskel.
  //
  bool StructureMap_Parameter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "valueId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "valueString" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "valueBoolean" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "valueInteger" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "valueDecimal" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Parameter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Parameter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Parameter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Parameter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void StructureMap_Parameter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "valueId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueId_parser_)
            {
              this->valueId_parser_->pre ();
              ctx.nested_parser (this->valueId_parser_);
            }
          }
          else
          {
            if (this->valueId_parser_ != 0)
            {
              this->valueId_parser_->post_id ();
              this->valueId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDecimal_parser_)
            {
              this->valueDecimal_parser_->pre ();
              ctx.nested_parser (this->valueDecimal_parser_);
            }
          }
          else
          {
            if (this->valueDecimal_parser_ != 0)
            {
              this->valueDecimal_parser_->post_decimal ();
              this->valueDecimal ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureMap_Dependent_pskel.
  //
  bool StructureMap_Dependent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureMap_Dependent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureMap_Dependent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureMap_Dependent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureMap_Dependent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureMap_Dependent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_id ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "variable" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->variable_parser_)
            {
              this->variable_parser_->pre ();
              ctx.nested_parser (this->variable_parser_);
            }
          }
          else
          {
            if (this->variable_parser_ != 0)
            {
              this->variable_parser_->post_string ();
              this->variable ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for StructureMapInputMode_pskel.
  //
  bool StructureMapInputMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureMapInputMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for StructureMapContextType_pskel.
  //
  bool StructureMapContextType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureMapContextType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for StructureMapTargetListMode_pskel.
  //
  bool StructureMapTargetListMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureMapTargetListMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for StructureMapTransform_pskel.
  //
  bool StructureMapTransform_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureMapTransform_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for StructureMapSourceListMode_pskel.
  //
  bool StructureMapSourceListMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureMapSourceListMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for StructureMapGroupTypeMode_pskel.
  //
  bool StructureMapGroupTypeMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureMapGroupTypeMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for StructureMapModelMode_pskel.
  //
  bool StructureMapModelMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureMapModelMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

