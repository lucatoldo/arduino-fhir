// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef STRUCTUREMAP_PSKEL_HXX
#define STRUCTUREMAP_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class StructureMap_pskel;
  class StructureMap_Structure_pskel;
  class StructureMap_Group_pskel;
  class StructureMap_Input_pskel;
  class StructureMap_Rule_pskel;
  class StructureMap_Source_pskel;
  class StructureMap_Target_pskel;
  class StructureMap_Parameter_pskel;
  class StructureMap_Dependent_pskel;
  class StructureMapInputMode_list_pskel;
  class StructureMapInputMode_pskel;
  class StructureMapContextType_list_pskel;
  class StructureMapContextType_pskel;
  class StructureMapTargetListMode_list_pskel;
  class StructureMapTargetListMode_pskel;
  class StructureMapTransform_list_pskel;
  class StructureMapTransform_pskel;
  class StructureMapSourceListMode_list_pskel;
  class StructureMapSourceListMode_pskel;
  class StructureMapGroupTypeMode_list_pskel;
  class StructureMapGroupTypeMode_pskel;
  class StructureMapModelMode_list_pskel;
  class StructureMapModelMode_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class StructureMap_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    structure ();

    virtual void
    import ();

    virtual void
    group ();

    virtual void
    post_StructureMap ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::StructureMap_Structure_pskel& /* structure */,
             ::fhir::canonical_pskel& /* import */,
             ::fhir::StructureMap_Group_pskel& /* group */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    structure_parser (::fhir::StructureMap_Structure_pskel&);

    void
    import_parser (::fhir::canonical_pskel&);

    void
    group_parser (::fhir::StructureMap_Group_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_pskel* StructureMap_impl_;
    StructureMap_pskel (StructureMap_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::StructureMap_Structure_pskel* structure_parser_;
    ::fhir::canonical_pskel* import_parser_;
    ::fhir::StructureMap_Group_pskel* group_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Structure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    mode ();

    virtual void
    alias ();

    virtual void
    documentation ();

    virtual void
    post_StructureMap_Structure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* url */,
             ::fhir::StructureMapModelMode_pskel& /* mode */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::canonical_pskel&);

    void
    mode_parser (::fhir::StructureMapModelMode_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Structure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Structure_pskel* StructureMap_Structure_impl_;
    StructureMap_Structure_pskel (StructureMap_Structure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* url_parser_;
    ::fhir::StructureMapModelMode_pskel* mode_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Structure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Group_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    extends ();

    virtual void
    typeMode ();

    virtual void
    documentation ();

    virtual void
    input ();

    virtual void
    rule ();

    virtual void
    post_StructureMap_Group ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::id_pskel& /* extends */,
             ::fhir::StructureMapGroupTypeMode_pskel& /* typeMode */,
             ::fhir::string_pskel& /* documentation */,
             ::fhir::StructureMap_Input_pskel& /* input */,
             ::fhir::StructureMap_Rule_pskel& /* rule */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    extends_parser (::fhir::id_pskel&);

    void
    typeMode_parser (::fhir::StructureMapGroupTypeMode_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    void
    input_parser (::fhir::StructureMap_Input_pskel&);

    void
    rule_parser (::fhir::StructureMap_Rule_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Group_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Group_pskel* StructureMap_Group_impl_;
    StructureMap_Group_pskel (StructureMap_Group_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::id_pskel* extends_parser_;
    ::fhir::StructureMapGroupTypeMode_pskel* typeMode_parser_;
    ::fhir::string_pskel* documentation_parser_;
    ::fhir::StructureMap_Input_pskel* input_parser_;
    ::fhir::StructureMap_Rule_pskel* rule_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Group_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Input_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    mode ();

    virtual void
    documentation ();

    virtual void
    post_StructureMap_Input ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::string_pskel& /* type */,
             ::fhir::StructureMapInputMode_pskel& /* mode */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    type_parser (::fhir::string_pskel&);

    void
    mode_parser (::fhir::StructureMapInputMode_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Input_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Input_pskel* StructureMap_Input_impl_;
    StructureMap_Input_pskel (StructureMap_Input_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::string_pskel* type_parser_;
    ::fhir::StructureMapInputMode_pskel* mode_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Input_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Rule_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    source ();

    virtual void
    target ();

    virtual void
    rule ();

    virtual void
    dependent ();

    virtual void
    documentation ();

    virtual void
    post_StructureMap_Rule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::StructureMap_Source_pskel& /* source */,
             ::fhir::StructureMap_Target_pskel& /* target */,
             ::fhir::StructureMap_Rule_pskel& /* rule */,
             ::fhir::StructureMap_Dependent_pskel& /* dependent */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    source_parser (::fhir::StructureMap_Source_pskel&);

    void
    target_parser (::fhir::StructureMap_Target_pskel&);

    void
    rule_parser (::fhir::StructureMap_Rule_pskel&);

    void
    dependent_parser (::fhir::StructureMap_Dependent_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Rule_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Rule_pskel* StructureMap_Rule_impl_;
    StructureMap_Rule_pskel (StructureMap_Rule_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::StructureMap_Source_pskel* source_parser_;
    ::fhir::StructureMap_Target_pskel* target_parser_;
    ::fhir::StructureMap_Rule_pskel* rule_parser_;
    ::fhir::StructureMap_Dependent_pskel* dependent_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Rule_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Source_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    context ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    type ();

    virtual void
    defaultValueBase64Binary ();

    virtual void
    defaultValueBoolean ();

    virtual void
    defaultValueCanonical ();

    virtual void
    defaultValueCode ();

    virtual void
    defaultValueDate ();

    virtual void
    defaultValueDateTime ();

    virtual void
    defaultValueDecimal ();

    virtual void
    defaultValueId ();

    virtual void
    defaultValueInstant ();

    virtual void
    defaultValueInteger ();

    virtual void
    defaultValueMarkdown ();

    virtual void
    defaultValueOid ();

    virtual void
    defaultValuePositiveInt ();

    virtual void
    defaultValueString ();

    virtual void
    defaultValueTime ();

    virtual void
    defaultValueUnsignedInt ();

    virtual void
    defaultValueUri ();

    virtual void
    defaultValueUrl ();

    virtual void
    defaultValueUuid ();

    virtual void
    defaultValueAddress ();

    virtual void
    defaultValueAge ();

    virtual void
    defaultValueAnnotation ();

    virtual void
    defaultValueAttachment ();

    virtual void
    defaultValueCodeableConcept ();

    virtual void
    defaultValueCoding ();

    virtual void
    defaultValueContactPoint ();

    virtual void
    defaultValueCount ();

    virtual void
    defaultValueDistance ();

    virtual void
    defaultValueDuration ();

    virtual void
    defaultValueHumanName ();

    virtual void
    defaultValueIdentifier ();

    virtual void
    defaultValueMoney ();

    virtual void
    defaultValuePeriod ();

    virtual void
    defaultValueQuantity ();

    virtual void
    defaultValueRange ();

    virtual void
    defaultValueRatio ();

    virtual void
    defaultValueReference ();

    virtual void
    defaultValueSampledData ();

    virtual void
    defaultValueSignature ();

    virtual void
    defaultValueTiming ();

    virtual void
    defaultValueContactDetail ();

    virtual void
    defaultValueContributor ();

    virtual void
    defaultValueDataRequirement ();

    virtual void
    defaultValueExpression ();

    virtual void
    defaultValueParameterDefinition ();

    virtual void
    defaultValueRelatedArtifact ();

    virtual void
    defaultValueTriggerDefinition ();

    virtual void
    defaultValueUsageContext ();

    virtual void
    defaultValueDosage ();

    virtual void
    defaultValueMeta ();

    virtual void
    element ();

    virtual void
    listMode ();

    virtual void
    variable ();

    virtual void
    condition ();

    virtual void
    check ();

    virtual void
    logMessage ();

    virtual void
    post_StructureMap_Source ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* context */,
             ::fhir::integer_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::string_pskel& /* type */,
             ::fhir::base64Binary_pskel& /* defaultValueBase64Binary */,
             ::fhir::boolean_pskel& /* defaultValueBoolean */,
             ::fhir::canonical_pskel& /* defaultValueCanonical */,
             ::fhir::code_pskel& /* defaultValueCode */,
             ::fhir::date_pskel& /* defaultValueDate */,
             ::fhir::dateTime_pskel& /* defaultValueDateTime */,
             ::fhir::decimal_pskel& /* defaultValueDecimal */,
             ::fhir::id_pskel& /* defaultValueId */,
             ::fhir::instant_pskel& /* defaultValueInstant */,
             ::fhir::integer_pskel& /* defaultValueInteger */,
             ::fhir::markdown_pskel& /* defaultValueMarkdown */,
             ::fhir::oid_pskel& /* defaultValueOid */,
             ::fhir::positiveInt_pskel& /* defaultValuePositiveInt */,
             ::fhir::string_pskel& /* defaultValueString */,
             ::fhir::time_pskel& /* defaultValueTime */,
             ::fhir::unsignedInt_pskel& /* defaultValueUnsignedInt */,
             ::fhir::uri_pskel& /* defaultValueUri */,
             ::fhir::url_pskel& /* defaultValueUrl */,
             ::fhir::uuid_pskel& /* defaultValueUuid */,
             ::fhir::Address_pskel& /* defaultValueAddress */,
             ::fhir::Age_pskel& /* defaultValueAge */,
             ::fhir::Annotation_pskel& /* defaultValueAnnotation */,
             ::fhir::Attachment_pskel& /* defaultValueAttachment */,
             ::fhir::CodeableConcept_pskel& /* defaultValueCodeableConcept */,
             ::fhir::Coding_pskel& /* defaultValueCoding */,
             ::fhir::ContactPoint_pskel& /* defaultValueContactPoint */,
             ::fhir::Count_pskel& /* defaultValueCount */,
             ::fhir::Distance_pskel& /* defaultValueDistance */,
             ::fhir::Duration_pskel& /* defaultValueDuration */,
             ::fhir::HumanName_pskel& /* defaultValueHumanName */,
             ::fhir::Identifier_pskel& /* defaultValueIdentifier */,
             ::fhir::Money_pskel& /* defaultValueMoney */,
             ::fhir::Period_pskel& /* defaultValuePeriod */,
             ::fhir::Quantity_pskel& /* defaultValueQuantity */,
             ::fhir::Range_pskel& /* defaultValueRange */,
             ::fhir::Ratio_pskel& /* defaultValueRatio */,
             ::fhir::Reference_pskel& /* defaultValueReference */,
             ::fhir::SampledData_pskel& /* defaultValueSampledData */,
             ::fhir::Signature_pskel& /* defaultValueSignature */,
             ::fhir::Timing_pskel& /* defaultValueTiming */,
             ::fhir::ContactDetail_pskel& /* defaultValueContactDetail */,
             ::fhir::Contributor_pskel& /* defaultValueContributor */,
             ::fhir::DataRequirement_pskel& /* defaultValueDataRequirement */,
             ::fhir::Expression_pskel& /* defaultValueExpression */,
             ::fhir::ParameterDefinition_pskel& /* defaultValueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* defaultValueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* defaultValueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* defaultValueUsageContext */,
             ::fhir::Dosage_pskel& /* defaultValueDosage */,
             ::fhir::Meta_pskel& /* defaultValueMeta */,
             ::fhir::string_pskel& /* element */,
             ::fhir::StructureMapSourceListMode_pskel& /* listMode */,
             ::fhir::id_pskel& /* variable */,
             ::fhir::string_pskel& /* condition */,
             ::fhir::string_pskel& /* check */,
             ::fhir::string_pskel& /* logMessage */);

    // Individual element parsers.
    //
    void
    context_parser (::fhir::id_pskel&);

    void
    min_parser (::fhir::integer_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::string_pskel&);

    void
    defaultValueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    defaultValueBoolean_parser (::fhir::boolean_pskel&);

    void
    defaultValueCanonical_parser (::fhir::canonical_pskel&);

    void
    defaultValueCode_parser (::fhir::code_pskel&);

    void
    defaultValueDate_parser (::fhir::date_pskel&);

    void
    defaultValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    defaultValueDecimal_parser (::fhir::decimal_pskel&);

    void
    defaultValueId_parser (::fhir::id_pskel&);

    void
    defaultValueInstant_parser (::fhir::instant_pskel&);

    void
    defaultValueInteger_parser (::fhir::integer_pskel&);

    void
    defaultValueMarkdown_parser (::fhir::markdown_pskel&);

    void
    defaultValueOid_parser (::fhir::oid_pskel&);

    void
    defaultValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    defaultValueString_parser (::fhir::string_pskel&);

    void
    defaultValueTime_parser (::fhir::time_pskel&);

    void
    defaultValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    defaultValueUri_parser (::fhir::uri_pskel&);

    void
    defaultValueUrl_parser (::fhir::url_pskel&);

    void
    defaultValueUuid_parser (::fhir::uuid_pskel&);

    void
    defaultValueAddress_parser (::fhir::Address_pskel&);

    void
    defaultValueAge_parser (::fhir::Age_pskel&);

    void
    defaultValueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    defaultValueAttachment_parser (::fhir::Attachment_pskel&);

    void
    defaultValueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    defaultValueCoding_parser (::fhir::Coding_pskel&);

    void
    defaultValueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    defaultValueCount_parser (::fhir::Count_pskel&);

    void
    defaultValueDistance_parser (::fhir::Distance_pskel&);

    void
    defaultValueDuration_parser (::fhir::Duration_pskel&);

    void
    defaultValueHumanName_parser (::fhir::HumanName_pskel&);

    void
    defaultValueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    defaultValueMoney_parser (::fhir::Money_pskel&);

    void
    defaultValuePeriod_parser (::fhir::Period_pskel&);

    void
    defaultValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    defaultValueRange_parser (::fhir::Range_pskel&);

    void
    defaultValueRatio_parser (::fhir::Ratio_pskel&);

    void
    defaultValueReference_parser (::fhir::Reference_pskel&);

    void
    defaultValueSampledData_parser (::fhir::SampledData_pskel&);

    void
    defaultValueSignature_parser (::fhir::Signature_pskel&);

    void
    defaultValueTiming_parser (::fhir::Timing_pskel&);

    void
    defaultValueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    defaultValueContributor_parser (::fhir::Contributor_pskel&);

    void
    defaultValueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    defaultValueExpression_parser (::fhir::Expression_pskel&);

    void
    defaultValueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    defaultValueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    defaultValueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    defaultValueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    defaultValueDosage_parser (::fhir::Dosage_pskel&);

    void
    defaultValueMeta_parser (::fhir::Meta_pskel&);

    void
    element_parser (::fhir::string_pskel&);

    void
    listMode_parser (::fhir::StructureMapSourceListMode_pskel&);

    void
    variable_parser (::fhir::id_pskel&);

    void
    condition_parser (::fhir::string_pskel&);

    void
    check_parser (::fhir::string_pskel&);

    void
    logMessage_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Source_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Source_pskel* StructureMap_Source_impl_;
    StructureMap_Source_pskel (StructureMap_Source_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* context_parser_;
    ::fhir::integer_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::string_pskel* type_parser_;
    ::fhir::base64Binary_pskel* defaultValueBase64Binary_parser_;
    ::fhir::boolean_pskel* defaultValueBoolean_parser_;
    ::fhir::canonical_pskel* defaultValueCanonical_parser_;
    ::fhir::code_pskel* defaultValueCode_parser_;
    ::fhir::date_pskel* defaultValueDate_parser_;
    ::fhir::dateTime_pskel* defaultValueDateTime_parser_;
    ::fhir::decimal_pskel* defaultValueDecimal_parser_;
    ::fhir::id_pskel* defaultValueId_parser_;
    ::fhir::instant_pskel* defaultValueInstant_parser_;
    ::fhir::integer_pskel* defaultValueInteger_parser_;
    ::fhir::markdown_pskel* defaultValueMarkdown_parser_;
    ::fhir::oid_pskel* defaultValueOid_parser_;
    ::fhir::positiveInt_pskel* defaultValuePositiveInt_parser_;
    ::fhir::string_pskel* defaultValueString_parser_;
    ::fhir::time_pskel* defaultValueTime_parser_;
    ::fhir::unsignedInt_pskel* defaultValueUnsignedInt_parser_;
    ::fhir::uri_pskel* defaultValueUri_parser_;
    ::fhir::url_pskel* defaultValueUrl_parser_;
    ::fhir::uuid_pskel* defaultValueUuid_parser_;
    ::fhir::Address_pskel* defaultValueAddress_parser_;
    ::fhir::Age_pskel* defaultValueAge_parser_;
    ::fhir::Annotation_pskel* defaultValueAnnotation_parser_;
    ::fhir::Attachment_pskel* defaultValueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* defaultValueCodeableConcept_parser_;
    ::fhir::Coding_pskel* defaultValueCoding_parser_;
    ::fhir::ContactPoint_pskel* defaultValueContactPoint_parser_;
    ::fhir::Count_pskel* defaultValueCount_parser_;
    ::fhir::Distance_pskel* defaultValueDistance_parser_;
    ::fhir::Duration_pskel* defaultValueDuration_parser_;
    ::fhir::HumanName_pskel* defaultValueHumanName_parser_;
    ::fhir::Identifier_pskel* defaultValueIdentifier_parser_;
    ::fhir::Money_pskel* defaultValueMoney_parser_;
    ::fhir::Period_pskel* defaultValuePeriod_parser_;
    ::fhir::Quantity_pskel* defaultValueQuantity_parser_;
    ::fhir::Range_pskel* defaultValueRange_parser_;
    ::fhir::Ratio_pskel* defaultValueRatio_parser_;
    ::fhir::Reference_pskel* defaultValueReference_parser_;
    ::fhir::SampledData_pskel* defaultValueSampledData_parser_;
    ::fhir::Signature_pskel* defaultValueSignature_parser_;
    ::fhir::Timing_pskel* defaultValueTiming_parser_;
    ::fhir::ContactDetail_pskel* defaultValueContactDetail_parser_;
    ::fhir::Contributor_pskel* defaultValueContributor_parser_;
    ::fhir::DataRequirement_pskel* defaultValueDataRequirement_parser_;
    ::fhir::Expression_pskel* defaultValueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* defaultValueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* defaultValueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* defaultValueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* defaultValueUsageContext_parser_;
    ::fhir::Dosage_pskel* defaultValueDosage_parser_;
    ::fhir::Meta_pskel* defaultValueMeta_parser_;
    ::fhir::string_pskel* element_parser_;
    ::fhir::StructureMapSourceListMode_pskel* listMode_parser_;
    ::fhir::id_pskel* variable_parser_;
    ::fhir::string_pskel* condition_parser_;
    ::fhir::string_pskel* check_parser_;
    ::fhir::string_pskel* logMessage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Source_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    context ();

    virtual void
    contextType ();

    virtual void
    element ();

    virtual void
    variable ();

    virtual void
    listMode ();

    virtual void
    listRuleId ();

    virtual void
    transform ();

    virtual void
    parameter ();

    virtual void
    post_StructureMap_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* context */,
             ::fhir::StructureMapContextType_pskel& /* contextType */,
             ::fhir::string_pskel& /* element */,
             ::fhir::id_pskel& /* variable */,
             ::fhir::StructureMapTargetListMode_pskel& /* listMode */,
             ::fhir::id_pskel& /* listRuleId */,
             ::fhir::StructureMapTransform_pskel& /* transform */,
             ::fhir::StructureMap_Parameter_pskel& /* parameter */);

    // Individual element parsers.
    //
    void
    context_parser (::fhir::id_pskel&);

    void
    contextType_parser (::fhir::StructureMapContextType_pskel&);

    void
    element_parser (::fhir::string_pskel&);

    void
    variable_parser (::fhir::id_pskel&);

    void
    listMode_parser (::fhir::StructureMapTargetListMode_pskel&);

    void
    listRuleId_parser (::fhir::id_pskel&);

    void
    transform_parser (::fhir::StructureMapTransform_pskel&);

    void
    parameter_parser (::fhir::StructureMap_Parameter_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Target_pskel* StructureMap_Target_impl_;
    StructureMap_Target_pskel (StructureMap_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* context_parser_;
    ::fhir::StructureMapContextType_pskel* contextType_parser_;
    ::fhir::string_pskel* element_parser_;
    ::fhir::id_pskel* variable_parser_;
    ::fhir::StructureMapTargetListMode_pskel* listMode_parser_;
    ::fhir::id_pskel* listRuleId_parser_;
    ::fhir::StructureMapTransform_pskel* transform_parser_;
    ::fhir::StructureMap_Parameter_pskel* parameter_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    valueId ();

    virtual void
    valueString ();

    virtual void
    valueBoolean ();

    virtual void
    valueInteger ();

    virtual void
    valueDecimal ();

    virtual void
    post_StructureMap_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::decimal_pskel& /* valueDecimal */);

    // Individual element parsers.
    //
    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Parameter_pskel* StructureMap_Parameter_impl_;
    StructureMap_Parameter_pskel (StructureMap_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Dependent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    variable ();

    virtual void
    post_StructureMap_Dependent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::string_pskel& /* variable */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    variable_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Dependent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Dependent_pskel* StructureMap_Dependent_impl_;
    StructureMap_Dependent_pskel (StructureMap_Dependent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::string_pskel* variable_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Dependent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMapInputMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapInputMode_list ();

    // Constructor.
    //
    StructureMapInputMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapInputMode_list_pskel* StructureMapInputMode_list_impl_;
    StructureMapInputMode_list_pskel (StructureMapInputMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapInputMode_list_pskel_enums_[2UL];
  };

  class StructureMapInputMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapInputMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapInputMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapInputMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapInputMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapInputMode_pskel* StructureMapInputMode_impl_;
    StructureMapInputMode_pskel (StructureMapInputMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapInputMode_list_pskel* value_parser_;
  };

  class StructureMapContextType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapContextType_list ();

    // Constructor.
    //
    StructureMapContextType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapContextType_list_pskel* StructureMapContextType_list_impl_;
    StructureMapContextType_list_pskel (StructureMapContextType_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapContextType_list_pskel_enums_[2UL];
  };

  class StructureMapContextType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapContextType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapContextType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapContextType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapContextType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapContextType_pskel* StructureMapContextType_impl_;
    StructureMapContextType_pskel (StructureMapContextType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapContextType_list_pskel* value_parser_;
  };

  class StructureMapTargetListMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapTargetListMode_list ();

    // Constructor.
    //
    StructureMapTargetListMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTargetListMode_list_pskel* StructureMapTargetListMode_list_impl_;
    StructureMapTargetListMode_list_pskel (StructureMapTargetListMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapTargetListMode_list_pskel_enums_[4UL];
  };

  class StructureMapTargetListMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapTargetListMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapTargetListMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapTargetListMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapTargetListMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTargetListMode_pskel* StructureMapTargetListMode_impl_;
    StructureMapTargetListMode_pskel (StructureMapTargetListMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapTargetListMode_list_pskel* value_parser_;
  };

  class StructureMapTransform_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapTransform_list ();

    // Constructor.
    //
    StructureMapTransform_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTransform_list_pskel* StructureMapTransform_list_impl_;
    StructureMapTransform_list_pskel (StructureMapTransform_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapTransform_list_pskel_enums_[17UL];
  };

  class StructureMapTransform_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapTransform ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapTransform_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapTransform_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapTransform_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTransform_pskel* StructureMapTransform_impl_;
    StructureMapTransform_pskel (StructureMapTransform_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapTransform_list_pskel* value_parser_;
  };

  class StructureMapSourceListMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapSourceListMode_list ();

    // Constructor.
    //
    StructureMapSourceListMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapSourceListMode_list_pskel* StructureMapSourceListMode_list_impl_;
    StructureMapSourceListMode_list_pskel (StructureMapSourceListMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapSourceListMode_list_pskel_enums_[5UL];
  };

  class StructureMapSourceListMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapSourceListMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapSourceListMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapSourceListMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapSourceListMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapSourceListMode_pskel* StructureMapSourceListMode_impl_;
    StructureMapSourceListMode_pskel (StructureMapSourceListMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapSourceListMode_list_pskel* value_parser_;
  };

  class StructureMapGroupTypeMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapGroupTypeMode_list ();

    // Constructor.
    //
    StructureMapGroupTypeMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapGroupTypeMode_list_pskel* StructureMapGroupTypeMode_list_impl_;
    StructureMapGroupTypeMode_list_pskel (StructureMapGroupTypeMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapGroupTypeMode_list_pskel_enums_[3UL];
  };

  class StructureMapGroupTypeMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapGroupTypeMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapGroupTypeMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapGroupTypeMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapGroupTypeMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapGroupTypeMode_pskel* StructureMapGroupTypeMode_impl_;
    StructureMapGroupTypeMode_pskel (StructureMapGroupTypeMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapGroupTypeMode_list_pskel* value_parser_;
  };

  class StructureMapModelMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapModelMode_list ();

    // Constructor.
    //
    StructureMapModelMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapModelMode_list_pskel* StructureMapModelMode_list_impl_;
    StructureMapModelMode_list_pskel (StructureMapModelMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapModelMode_list_pskel_enums_[4UL];
  };

  class StructureMapModelMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapModelMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapModelMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapModelMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapModelMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapModelMode_pskel* StructureMapModelMode_impl_;
    StructureMapModelMode_pskel (StructureMapModelMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapModelMode_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // STRUCTUREMAP_PSKEL_HXX
