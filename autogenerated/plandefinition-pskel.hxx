// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef PLANDEFINITION_PSKEL_HXX
#define PLANDEFINITION_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class PlanDefinition_pskel;
  class PlanDefinition_Goal_pskel;
  class PlanDefinition_Target_pskel;
  class PlanDefinition_Action_pskel;
  class PlanDefinition_Condition_pskel;
  class PlanDefinition_RelatedAction_pskel;
  class PlanDefinition_Participant_pskel;
  class PlanDefinition_DynamicValue_pskel;
  class ActionRequiredBehavior_list_pskel;
  class ActionRequiredBehavior_pskel;
  class ActionRelationshipType_list_pskel;
  class ActionRelationshipType_pskel;
  class ActionGroupingBehavior_list_pskel;
  class ActionGroupingBehavior_pskel;
  class ActionSelectionBehavior_list_pskel;
  class ActionSelectionBehavior_pskel;
  class ActionCardinalityBehavior_list_pskel;
  class ActionCardinalityBehavior_pskel;
  class ActionPrecheckBehavior_list_pskel;
  class ActionPrecheckBehavior_pskel;
  class ActionConditionKind_list_pskel;
  class ActionConditionKind_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class PlanDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    type ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    library ();

    virtual void
    goal ();

    virtual void
    action ();

    virtual void
    post_PlanDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::canonical_pskel& /* library */,
             ::fhir::PlanDefinition_Goal_pskel& /* goal */,
             ::fhir::PlanDefinition_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    library_parser (::fhir::canonical_pskel&);

    void
    goal_parser (::fhir::PlanDefinition_Goal_pskel&);

    void
    action_parser (::fhir::PlanDefinition_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_pskel* PlanDefinition_impl_;
    PlanDefinition_pskel (PlanDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::canonical_pskel* library_parser_;
    ::fhir::PlanDefinition_Goal_pskel* goal_parser_;
    ::fhir::PlanDefinition_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Goal_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    description ();

    virtual void
    priority ();

    virtual void
    start ();

    virtual void
    addresses ();

    virtual void
    documentation ();

    virtual void
    target ();

    virtual void
    post_PlanDefinition_Goal ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* start */,
             ::fhir::CodeableConcept_pskel& /* addresses */,
             ::fhir::RelatedArtifact_pskel& /* documentation */,
             ::fhir::PlanDefinition_Target_pskel& /* target */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    start_parser (::fhir::CodeableConcept_pskel&);

    void
    addresses_parser (::fhir::CodeableConcept_pskel&);

    void
    documentation_parser (::fhir::RelatedArtifact_pskel&);

    void
    target_parser (::fhir::PlanDefinition_Target_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Goal_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Goal_pskel* PlanDefinition_Goal_impl_;
    PlanDefinition_Goal_pskel (PlanDefinition_Goal_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* start_parser_;
    ::fhir::CodeableConcept_pskel* addresses_parser_;
    ::fhir::RelatedArtifact_pskel* documentation_parser_;
    ::fhir::PlanDefinition_Target_pskel* target_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Goal_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    measure ();

    virtual void
    detailQuantity ();

    virtual void
    detailRange ();

    virtual void
    detailCodeableConcept ();

    virtual void
    due ();

    virtual void
    post_PlanDefinition_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* measure */,
             ::fhir::Quantity_pskel& /* detailQuantity */,
             ::fhir::Range_pskel& /* detailRange */,
             ::fhir::CodeableConcept_pskel& /* detailCodeableConcept */,
             ::fhir::Duration_pskel& /* due */);

    // Individual element parsers.
    //
    void
    measure_parser (::fhir::CodeableConcept_pskel&);

    void
    detailQuantity_parser (::fhir::Quantity_pskel&);

    void
    detailRange_parser (::fhir::Range_pskel&);

    void
    detailCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    due_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Target_pskel* PlanDefinition_Target_impl_;
    PlanDefinition_Target_pskel (PlanDefinition_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* measure_parser_;
    ::fhir::Quantity_pskel* detailQuantity_parser_;
    ::fhir::Range_pskel* detailRange_parser_;
    ::fhir::CodeableConcept_pskel* detailCodeableConcept_parser_;
    ::fhir::Duration_pskel* due_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    prefix ();

    virtual void
    title ();

    virtual void
    description ();

    virtual void
    textEquivalent ();

    virtual void
    priority ();

    virtual void
    code ();

    virtual void
    reason ();

    virtual void
    documentation ();

    virtual void
    goalId ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    trigger ();

    virtual void
    condition ();

    virtual void
    input ();

    virtual void
    output ();

    virtual void
    relatedAction ();

    virtual void
    timingDateTime ();

    virtual void
    timingAge ();

    virtual void
    timingPeriod ();

    virtual void
    timingDuration ();

    virtual void
    timingRange ();

    virtual void
    timingTiming ();

    virtual void
    participant ();

    virtual void
    type ();

    virtual void
    groupingBehavior ();

    virtual void
    selectionBehavior ();

    virtual void
    requiredBehavior ();

    virtual void
    precheckBehavior ();

    virtual void
    cardinalityBehavior ();

    virtual void
    definitionCanonical ();

    virtual void
    definitionUri ();

    virtual void
    transform ();

    virtual void
    dynamicValue ();

    virtual void
    action ();

    virtual void
    post_PlanDefinition_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* prefix */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* textEquivalent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::RelatedArtifact_pskel& /* documentation */,
             ::fhir::id_pskel& /* goalId */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::TriggerDefinition_pskel& /* trigger */,
             ::fhir::PlanDefinition_Condition_pskel& /* condition */,
             ::fhir::DataRequirement_pskel& /* input */,
             ::fhir::DataRequirement_pskel& /* output */,
             ::fhir::PlanDefinition_RelatedAction_pskel& /* relatedAction */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::Age_pskel& /* timingAge */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::Duration_pskel& /* timingDuration */,
             ::fhir::Range_pskel& /* timingRange */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::PlanDefinition_Participant_pskel& /* participant */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::ActionGroupingBehavior_pskel& /* groupingBehavior */,
             ::fhir::ActionSelectionBehavior_pskel& /* selectionBehavior */,
             ::fhir::ActionRequiredBehavior_pskel& /* requiredBehavior */,
             ::fhir::ActionPrecheckBehavior_pskel& /* precheckBehavior */,
             ::fhir::ActionCardinalityBehavior_pskel& /* cardinalityBehavior */,
             ::fhir::canonical_pskel& /* definitionCanonical */,
             ::fhir::uri_pskel& /* definitionUri */,
             ::fhir::canonical_pskel& /* transform */,
             ::fhir::PlanDefinition_DynamicValue_pskel& /* dynamicValue */,
             ::fhir::PlanDefinition_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    prefix_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    textEquivalent_parser (::fhir::string_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    documentation_parser (::fhir::RelatedArtifact_pskel&);

    void
    goalId_parser (::fhir::id_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    trigger_parser (::fhir::TriggerDefinition_pskel&);

    void
    condition_parser (::fhir::PlanDefinition_Condition_pskel&);

    void
    input_parser (::fhir::DataRequirement_pskel&);

    void
    output_parser (::fhir::DataRequirement_pskel&);

    void
    relatedAction_parser (::fhir::PlanDefinition_RelatedAction_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    timingAge_parser (::fhir::Age_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    timingDuration_parser (::fhir::Duration_pskel&);

    void
    timingRange_parser (::fhir::Range_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    participant_parser (::fhir::PlanDefinition_Participant_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    groupingBehavior_parser (::fhir::ActionGroupingBehavior_pskel&);

    void
    selectionBehavior_parser (::fhir::ActionSelectionBehavior_pskel&);

    void
    requiredBehavior_parser (::fhir::ActionRequiredBehavior_pskel&);

    void
    precheckBehavior_parser (::fhir::ActionPrecheckBehavior_pskel&);

    void
    cardinalityBehavior_parser (::fhir::ActionCardinalityBehavior_pskel&);

    void
    definitionCanonical_parser (::fhir::canonical_pskel&);

    void
    definitionUri_parser (::fhir::uri_pskel&);

    void
    transform_parser (::fhir::canonical_pskel&);

    void
    dynamicValue_parser (::fhir::PlanDefinition_DynamicValue_pskel&);

    void
    action_parser (::fhir::PlanDefinition_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Action_pskel* PlanDefinition_Action_impl_;
    PlanDefinition_Action_pskel (PlanDefinition_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* prefix_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* textEquivalent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::RelatedArtifact_pskel* documentation_parser_;
    ::fhir::id_pskel* goalId_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::TriggerDefinition_pskel* trigger_parser_;
    ::fhir::PlanDefinition_Condition_pskel* condition_parser_;
    ::fhir::DataRequirement_pskel* input_parser_;
    ::fhir::DataRequirement_pskel* output_parser_;
    ::fhir::PlanDefinition_RelatedAction_pskel* relatedAction_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::Age_pskel* timingAge_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::Duration_pskel* timingDuration_parser_;
    ::fhir::Range_pskel* timingRange_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::PlanDefinition_Participant_pskel* participant_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::ActionGroupingBehavior_pskel* groupingBehavior_parser_;
    ::fhir::ActionSelectionBehavior_pskel* selectionBehavior_parser_;
    ::fhir::ActionRequiredBehavior_pskel* requiredBehavior_parser_;
    ::fhir::ActionPrecheckBehavior_pskel* precheckBehavior_parser_;
    ::fhir::ActionCardinalityBehavior_pskel* cardinalityBehavior_parser_;
    ::fhir::canonical_pskel* definitionCanonical_parser_;
    ::fhir::uri_pskel* definitionUri_parser_;
    ::fhir::canonical_pskel* transform_parser_;
    ::fhir::PlanDefinition_DynamicValue_pskel* dynamicValue_parser_;
    ::fhir::PlanDefinition_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Condition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    kind ();

    virtual void
    expression ();

    virtual void
    post_PlanDefinition_Condition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ActionConditionKind_pskel& /* kind */,
             ::fhir::Expression_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    kind_parser (::fhir::ActionConditionKind_pskel&);

    void
    expression_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Condition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Condition_pskel* PlanDefinition_Condition_impl_;
    PlanDefinition_Condition_pskel (PlanDefinition_Condition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ActionConditionKind_pskel* kind_parser_;
    ::fhir::Expression_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Condition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_RelatedAction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    actionId ();

    virtual void
    relationship ();

    virtual void
    offsetDuration ();

    virtual void
    offsetRange ();

    virtual void
    post_PlanDefinition_RelatedAction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* actionId */,
             ::fhir::ActionRelationshipType_pskel& /* relationship */,
             ::fhir::Duration_pskel& /* offsetDuration */,
             ::fhir::Range_pskel& /* offsetRange */);

    // Individual element parsers.
    //
    void
    actionId_parser (::fhir::id_pskel&);

    void
    relationship_parser (::fhir::ActionRelationshipType_pskel&);

    void
    offsetDuration_parser (::fhir::Duration_pskel&);

    void
    offsetRange_parser (::fhir::Range_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_RelatedAction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_RelatedAction_pskel* PlanDefinition_RelatedAction_impl_;
    PlanDefinition_RelatedAction_pskel (PlanDefinition_RelatedAction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* actionId_parser_;
    ::fhir::ActionRelationshipType_pskel* relationship_parser_;
    ::fhir::Duration_pskel* offsetDuration_parser_;
    ::fhir::Range_pskel* offsetRange_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_RelatedAction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    role ();

    virtual void
    post_PlanDefinition_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ActionParticipantType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ActionParticipantType_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Participant_pskel* PlanDefinition_Participant_impl_;
    PlanDefinition_Participant_pskel (PlanDefinition_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ActionParticipantType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_DynamicValue_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    expression ();

    virtual void
    post_PlanDefinition_DynamicValue ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::Expression_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_DynamicValue_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_DynamicValue_pskel* PlanDefinition_DynamicValue_impl_;
    PlanDefinition_DynamicValue_pskel (PlanDefinition_DynamicValue_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::Expression_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_DynamicValue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActionRequiredBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionRequiredBehavior_list ();

    // Constructor.
    //
    ActionRequiredBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRequiredBehavior_list_pskel* ActionRequiredBehavior_list_impl_;
    ActionRequiredBehavior_list_pskel (ActionRequiredBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionRequiredBehavior_list_pskel_enums_[3UL];
  };

  class ActionRequiredBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionRequiredBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionRequiredBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionRequiredBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionRequiredBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRequiredBehavior_pskel* ActionRequiredBehavior_impl_;
    ActionRequiredBehavior_pskel (ActionRequiredBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionRequiredBehavior_list_pskel* value_parser_;
  };

  class ActionRelationshipType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionRelationshipType_list ();

    // Constructor.
    //
    ActionRelationshipType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRelationshipType_list_pskel* ActionRelationshipType_list_impl_;
    ActionRelationshipType_list_pskel (ActionRelationshipType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionRelationshipType_list_pskel_enums_[9UL];
  };

  class ActionRelationshipType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionRelationshipType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionRelationshipType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionRelationshipType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionRelationshipType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRelationshipType_pskel* ActionRelationshipType_impl_;
    ActionRelationshipType_pskel (ActionRelationshipType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionRelationshipType_list_pskel* value_parser_;
  };

  class ActionGroupingBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionGroupingBehavior_list ();

    // Constructor.
    //
    ActionGroupingBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionGroupingBehavior_list_pskel* ActionGroupingBehavior_list_impl_;
    ActionGroupingBehavior_list_pskel (ActionGroupingBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionGroupingBehavior_list_pskel_enums_[3UL];
  };

  class ActionGroupingBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionGroupingBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionGroupingBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionGroupingBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionGroupingBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionGroupingBehavior_pskel* ActionGroupingBehavior_impl_;
    ActionGroupingBehavior_pskel (ActionGroupingBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionGroupingBehavior_list_pskel* value_parser_;
  };

  class ActionSelectionBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionSelectionBehavior_list ();

    // Constructor.
    //
    ActionSelectionBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionSelectionBehavior_list_pskel* ActionSelectionBehavior_list_impl_;
    ActionSelectionBehavior_list_pskel (ActionSelectionBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionSelectionBehavior_list_pskel_enums_[6UL];
  };

  class ActionSelectionBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionSelectionBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionSelectionBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionSelectionBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionSelectionBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionSelectionBehavior_pskel* ActionSelectionBehavior_impl_;
    ActionSelectionBehavior_pskel (ActionSelectionBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionSelectionBehavior_list_pskel* value_parser_;
  };

  class ActionCardinalityBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionCardinalityBehavior_list ();

    // Constructor.
    //
    ActionCardinalityBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionCardinalityBehavior_list_pskel* ActionCardinalityBehavior_list_impl_;
    ActionCardinalityBehavior_list_pskel (ActionCardinalityBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionCardinalityBehavior_list_pskel_enums_[2UL];
  };

  class ActionCardinalityBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionCardinalityBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionCardinalityBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionCardinalityBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionCardinalityBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionCardinalityBehavior_pskel* ActionCardinalityBehavior_impl_;
    ActionCardinalityBehavior_pskel (ActionCardinalityBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionCardinalityBehavior_list_pskel* value_parser_;
  };

  class ActionPrecheckBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionPrecheckBehavior_list ();

    // Constructor.
    //
    ActionPrecheckBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionPrecheckBehavior_list_pskel* ActionPrecheckBehavior_list_impl_;
    ActionPrecheckBehavior_list_pskel (ActionPrecheckBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionPrecheckBehavior_list_pskel_enums_[2UL];
  };

  class ActionPrecheckBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionPrecheckBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionPrecheckBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionPrecheckBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionPrecheckBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionPrecheckBehavior_pskel* ActionPrecheckBehavior_impl_;
    ActionPrecheckBehavior_pskel (ActionPrecheckBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionPrecheckBehavior_list_pskel* value_parser_;
  };

  class ActionConditionKind_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionConditionKind_list ();

    // Constructor.
    //
    ActionConditionKind_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionConditionKind_list_pskel* ActionConditionKind_list_impl_;
    ActionConditionKind_list_pskel (ActionConditionKind_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionConditionKind_list_pskel_enums_[3UL];
  };

  class ActionConditionKind_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionConditionKind ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionConditionKind_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionConditionKind_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionConditionKind_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionConditionKind_pskel* ActionConditionKind_impl_;
    ActionConditionKind_pskel (ActionConditionKind_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionConditionKind_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PLANDEFINITION_PSKEL_HXX
