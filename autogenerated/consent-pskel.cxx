// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "consent-pskel.hxx"

namespace fhir
{
  // Consent_pskel
  //

  void Consent_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Consent_pskel::
  status_parser (::fhir::ConsentState_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Consent_pskel::
  scope_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->scope_parser_ = &p;
  }

  void Consent_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void Consent_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void Consent_pskel::
  dateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->dateTime_parser_ = &p;
  }

  void Consent_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void Consent_pskel::
  organization_parser (::fhir::Reference_pskel& p)
  {
    this->organization_parser_ = &p;
  }

  void Consent_pskel::
  sourceAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->sourceAttachment_parser_ = &p;
  }

  void Consent_pskel::
  sourceReference_parser (::fhir::Reference_pskel& p)
  {
    this->sourceReference_parser_ = &p;
  }

  void Consent_pskel::
  policy_parser (::fhir::Consent_Policy_pskel& p)
  {
    this->policy_parser_ = &p;
  }

  void Consent_pskel::
  policyRule_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->policyRule_parser_ = &p;
  }

  void Consent_pskel::
  verification_parser (::fhir::Consent_Verification_pskel& p)
  {
    this->verification_parser_ = &p;
  }

  void Consent_pskel::
  provision_parser (::fhir::Consent_Provision_pskel& p)
  {
    this->provision_parser_ = &p;
  }

  void Consent_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::ConsentState_pskel& status,
           ::fhir::CodeableConcept_pskel& scope,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::Reference_pskel& patient,
           ::fhir::dateTime_pskel& dateTime,
           ::fhir::Reference_pskel& performer,
           ::fhir::Reference_pskel& organization,
           ::fhir::Attachment_pskel& sourceAttachment,
           ::fhir::Reference_pskel& sourceReference,
           ::fhir::Consent_Policy_pskel& policy,
           ::fhir::CodeableConcept_pskel& policyRule,
           ::fhir::Consent_Verification_pskel& verification,
           ::fhir::Consent_Provision_pskel& provision)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->scope_parser_ = &scope;
    this->category_parser_ = &category;
    this->patient_parser_ = &patient;
    this->dateTime_parser_ = &dateTime;
    this->performer_parser_ = &performer;
    this->organization_parser_ = &organization;
    this->sourceAttachment_parser_ = &sourceAttachment;
    this->sourceReference_parser_ = &sourceReference;
    this->policy_parser_ = &policy;
    this->policyRule_parser_ = &policyRule;
    this->verification_parser_ = &verification;
    this->provision_parser_ = &provision;
  }

  Consent_pskel::
  Consent_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Consent_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    scope_parser_ (0),
    category_parser_ (0),
    patient_parser_ (0),
    dateTime_parser_ (0),
    performer_parser_ (0),
    organization_parser_ (0),
    sourceAttachment_parser_ (0),
    sourceReference_parser_ (0),
    policy_parser_ (0),
    policyRule_parser_ (0),
    verification_parser_ (0),
    provision_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Consent_pskel::
  Consent_pskel (Consent_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Consent_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    scope_parser_ (0),
    category_parser_ (0),
    patient_parser_ (0),
    dateTime_parser_ (0),
    performer_parser_ (0),
    organization_parser_ (0),
    sourceAttachment_parser_ (0),
    sourceReference_parser_ (0),
    policy_parser_ (0),
    policyRule_parser_ (0),
    verification_parser_ (0),
    provision_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Consent_Policy_pskel
  //

  void Consent_Policy_pskel::
  authority_parser (::fhir::uri_pskel& p)
  {
    this->authority_parser_ = &p;
  }

  void Consent_Policy_pskel::
  uri_parser (::fhir::uri_pskel& p)
  {
    this->uri_parser_ = &p;
  }

  void Consent_Policy_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& authority,
           ::fhir::uri_pskel& uri)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->authority_parser_ = &authority;
    this->uri_parser_ = &uri;
  }

  Consent_Policy_pskel::
  Consent_Policy_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Consent_Policy_impl_ (0),
    authority_parser_ (0),
    uri_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Consent_Policy_pskel::
  Consent_Policy_pskel (Consent_Policy_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Consent_Policy_impl_ (impl),
    authority_parser_ (0),
    uri_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Consent_Verification_pskel
  //

  void Consent_Verification_pskel::
  verified_parser (::fhir::boolean_pskel& p)
  {
    this->verified_parser_ = &p;
  }

  void Consent_Verification_pskel::
  verifiedWith_parser (::fhir::Reference_pskel& p)
  {
    this->verifiedWith_parser_ = &p;
  }

  void Consent_Verification_pskel::
  verificationDate_parser (::fhir::dateTime_pskel& p)
  {
    this->verificationDate_parser_ = &p;
  }

  void Consent_Verification_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& verified,
           ::fhir::Reference_pskel& verifiedWith,
           ::fhir::dateTime_pskel& verificationDate)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->verified_parser_ = &verified;
    this->verifiedWith_parser_ = &verifiedWith;
    this->verificationDate_parser_ = &verificationDate;
  }

  Consent_Verification_pskel::
  Consent_Verification_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Consent_Verification_impl_ (0),
    verified_parser_ (0),
    verifiedWith_parser_ (0),
    verificationDate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Consent_Verification_pskel::
  Consent_Verification_pskel (Consent_Verification_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Consent_Verification_impl_ (impl),
    verified_parser_ (0),
    verifiedWith_parser_ (0),
    verificationDate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Consent_Provision_pskel
  //

  void Consent_Provision_pskel::
  type_parser (::fhir::ConsentProvisionType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Consent_Provision_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Consent_Provision_pskel::
  actor_parser (::fhir::Consent_Actor_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void Consent_Provision_pskel::
  action_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void Consent_Provision_pskel::
  securityLabel_parser (::fhir::Coding_pskel& p)
  {
    this->securityLabel_parser_ = &p;
  }

  void Consent_Provision_pskel::
  purpose_parser (::fhir::Coding_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void Consent_Provision_pskel::
  class__parser (::fhir::Coding_pskel& p)
  {
    this->class__parser_ = &p;
  }

  void Consent_Provision_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Consent_Provision_pskel::
  dataPeriod_parser (::fhir::Period_pskel& p)
  {
    this->dataPeriod_parser_ = &p;
  }

  void Consent_Provision_pskel::
  data_parser (::fhir::Consent_Data_pskel& p)
  {
    this->data_parser_ = &p;
  }

  void Consent_Provision_pskel::
  provision_parser (::fhir::Consent_Provision_pskel& p)
  {
    this->provision_parser_ = &p;
  }

  void Consent_Provision_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ConsentProvisionType_pskel& type,
           ::fhir::Period_pskel& period,
           ::fhir::Consent_Actor_pskel& actor,
           ::fhir::CodeableConcept_pskel& action,
           ::fhir::Coding_pskel& securityLabel,
           ::fhir::Coding_pskel& purpose,
           ::fhir::Coding_pskel& class_,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Period_pskel& dataPeriod,
           ::fhir::Consent_Data_pskel& data,
           ::fhir::Consent_Provision_pskel& provision)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->period_parser_ = &period;
    this->actor_parser_ = &actor;
    this->action_parser_ = &action;
    this->securityLabel_parser_ = &securityLabel;
    this->purpose_parser_ = &purpose;
    this->class__parser_ = &class_;
    this->code_parser_ = &code;
    this->dataPeriod_parser_ = &dataPeriod;
    this->data_parser_ = &data;
    this->provision_parser_ = &provision;
  }

  Consent_Provision_pskel::
  Consent_Provision_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Consent_Provision_impl_ (0),
    type_parser_ (0),
    period_parser_ (0),
    actor_parser_ (0),
    action_parser_ (0),
    securityLabel_parser_ (0),
    purpose_parser_ (0),
    class__parser_ (0),
    code_parser_ (0),
    dataPeriod_parser_ (0),
    data_parser_ (0),
    provision_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Consent_Provision_pskel::
  Consent_Provision_pskel (Consent_Provision_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Consent_Provision_impl_ (impl),
    type_parser_ (0),
    period_parser_ (0),
    actor_parser_ (0),
    action_parser_ (0),
    securityLabel_parser_ (0),
    purpose_parser_ (0),
    class__parser_ (0),
    code_parser_ (0),
    dataPeriod_parser_ (0),
    data_parser_ (0),
    provision_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Consent_Actor_pskel
  //

  void Consent_Actor_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void Consent_Actor_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void Consent_Actor_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::Reference_pskel& reference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->role_parser_ = &role;
    this->reference_parser_ = &reference;
  }

  Consent_Actor_pskel::
  Consent_Actor_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Consent_Actor_impl_ (0),
    role_parser_ (0),
    reference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Consent_Actor_pskel::
  Consent_Actor_pskel (Consent_Actor_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Consent_Actor_impl_ (impl),
    role_parser_ (0),
    reference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Consent_Data_pskel
  //

  void Consent_Data_pskel::
  meaning_parser (::fhir::ConsentDataMeaning_pskel& p)
  {
    this->meaning_parser_ = &p;
  }

  void Consent_Data_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void Consent_Data_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ConsentDataMeaning_pskel& meaning,
           ::fhir::Reference_pskel& reference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->meaning_parser_ = &meaning;
    this->reference_parser_ = &reference;
  }

  Consent_Data_pskel::
  Consent_Data_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Consent_Data_impl_ (0),
    meaning_parser_ (0),
    reference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Consent_Data_pskel::
  Consent_Data_pskel (Consent_Data_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Consent_Data_impl_ (impl),
    meaning_parser_ (0),
    reference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ConsentProvisionType_list_pskel
  //

  ConsentProvisionType_list_pskel::
  ConsentProvisionType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ConsentProvisionType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ConsentProvisionType_list_pskel_enums_, 2UL);
  }

  ConsentProvisionType_list_pskel::
  ConsentProvisionType_list_pskel (ConsentProvisionType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ConsentProvisionType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ConsentProvisionType_list_pskel_enums_, 2UL);
  }

  // ConsentProvisionType_pskel
  //

  void ConsentProvisionType_pskel::
  value_parser (::fhir::ConsentProvisionType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ConsentProvisionType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ConsentProvisionType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ConsentProvisionType_pskel::
  ConsentProvisionType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ConsentProvisionType_impl_ (0),
    value_parser_ (0)
  {
  }

  ConsentProvisionType_pskel::
  ConsentProvisionType_pskel (ConsentProvisionType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ConsentProvisionType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ConsentDataMeaning_list_pskel
  //

  ConsentDataMeaning_list_pskel::
  ConsentDataMeaning_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ConsentDataMeaning_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ConsentDataMeaning_list_pskel_enums_, 4UL);
  }

  ConsentDataMeaning_list_pskel::
  ConsentDataMeaning_list_pskel (ConsentDataMeaning_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ConsentDataMeaning_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ConsentDataMeaning_list_pskel_enums_, 4UL);
  }

  // ConsentDataMeaning_pskel
  //

  void ConsentDataMeaning_pskel::
  value_parser (::fhir::ConsentDataMeaning_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ConsentDataMeaning_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ConsentDataMeaning_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ConsentDataMeaning_pskel::
  ConsentDataMeaning_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ConsentDataMeaning_impl_ (0),
    value_parser_ (0)
  {
  }

  ConsentDataMeaning_pskel::
  ConsentDataMeaning_pskel (ConsentDataMeaning_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ConsentDataMeaning_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ConsentState_list_pskel
  //

  ConsentState_list_pskel::
  ConsentState_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ConsentState_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ConsentState_list_pskel_enums_, 6UL);
  }

  ConsentState_list_pskel::
  ConsentState_list_pskel (ConsentState_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ConsentState_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ConsentState_list_pskel_enums_, 6UL);
  }

  // ConsentState_pskel
  //

  void ConsentState_pskel::
  value_parser (::fhir::ConsentState_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ConsentState_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ConsentState_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ConsentState_pskel::
  ConsentState_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ConsentState_impl_ (0),
    value_parser_ (0)
  {
  }

  ConsentState_pskel::
  ConsentState_pskel (ConsentState_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ConsentState_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Consent_pskel
  //

  void Consent_pskel::
  identifier ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->identifier ();
  }

  void Consent_pskel::
  status ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->status ();
  }

  void Consent_pskel::
  scope ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->scope ();
  }

  void Consent_pskel::
  category ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->category ();
  }

  void Consent_pskel::
  patient ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->patient ();
  }

  void Consent_pskel::
  dateTime ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->dateTime ();
  }

  void Consent_pskel::
  performer ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->performer ();
  }

  void Consent_pskel::
  organization ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->organization ();
  }

  void Consent_pskel::
  sourceAttachment ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->sourceAttachment ();
  }

  void Consent_pskel::
  sourceReference ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->sourceReference ();
  }

  void Consent_pskel::
  policy ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->policy ();
  }

  void Consent_pskel::
  policyRule ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->policyRule ();
  }

  void Consent_pskel::
  verification ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->verification ();
  }

  void Consent_pskel::
  provision ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->provision ();
  }

  void Consent_pskel::
  post_Consent ()
  {
    if (this->Consent_impl_)
      this->Consent_impl_->post_Consent ();
    else
      post_DomainResource ();
  }

  void Consent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->scope_parser_)
      this->scope_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->dateTime_parser_)
      this->dateTime_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->organization_parser_)
      this->organization_parser_->_reset ();

    if (this->sourceAttachment_parser_)
      this->sourceAttachment_parser_->_reset ();

    if (this->sourceReference_parser_)
      this->sourceReference_parser_->_reset ();

    if (this->policy_parser_)
      this->policy_parser_->_reset ();

    if (this->policyRule_parser_)
      this->policyRule_parser_->_reset ();

    if (this->verification_parser_)
      this->verification_parser_->_reset ();

    if (this->provision_parser_)
      this->provision_parser_->_reset ();

    this->resetting_ = false;
  }

  // Consent_Policy_pskel
  //

  void Consent_Policy_pskel::
  authority ()
  {
    if (this->Consent_Policy_impl_)
      this->Consent_Policy_impl_->authority ();
  }

  void Consent_Policy_pskel::
  uri ()
  {
    if (this->Consent_Policy_impl_)
      this->Consent_Policy_impl_->uri ();
  }

  void Consent_Policy_pskel::
  post_Consent_Policy ()
  {
    if (this->Consent_Policy_impl_)
      this->Consent_Policy_impl_->post_Consent_Policy ();
    else
      post_BackboneElement ();
  }

  void Consent_Policy_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->authority_parser_)
      this->authority_parser_->_reset ();

    if (this->uri_parser_)
      this->uri_parser_->_reset ();

    this->resetting_ = false;
  }

  // Consent_Verification_pskel
  //

  void Consent_Verification_pskel::
  verified ()
  {
    if (this->Consent_Verification_impl_)
      this->Consent_Verification_impl_->verified ();
  }

  void Consent_Verification_pskel::
  verifiedWith ()
  {
    if (this->Consent_Verification_impl_)
      this->Consent_Verification_impl_->verifiedWith ();
  }

  void Consent_Verification_pskel::
  verificationDate ()
  {
    if (this->Consent_Verification_impl_)
      this->Consent_Verification_impl_->verificationDate ();
  }

  void Consent_Verification_pskel::
  post_Consent_Verification ()
  {
    if (this->Consent_Verification_impl_)
      this->Consent_Verification_impl_->post_Consent_Verification ();
    else
      post_BackboneElement ();
  }

  void Consent_Verification_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->verified_parser_)
      this->verified_parser_->_reset ();

    if (this->verifiedWith_parser_)
      this->verifiedWith_parser_->_reset ();

    if (this->verificationDate_parser_)
      this->verificationDate_parser_->_reset ();

    this->resetting_ = false;
  }

  // Consent_Provision_pskel
  //

  void Consent_Provision_pskel::
  type ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->type ();
  }

  void Consent_Provision_pskel::
  period ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->period ();
  }

  void Consent_Provision_pskel::
  actor ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->actor ();
  }

  void Consent_Provision_pskel::
  action ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->action ();
  }

  void Consent_Provision_pskel::
  securityLabel ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->securityLabel ();
  }

  void Consent_Provision_pskel::
  purpose ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->purpose ();
  }

  void Consent_Provision_pskel::
  class_ ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->class_ ();
  }

  void Consent_Provision_pskel::
  code ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->code ();
  }

  void Consent_Provision_pskel::
  dataPeriod ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->dataPeriod ();
  }

  void Consent_Provision_pskel::
  data ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->data ();
  }

  void Consent_Provision_pskel::
  provision ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->provision ();
  }

  void Consent_Provision_pskel::
  post_Consent_Provision ()
  {
    if (this->Consent_Provision_impl_)
      this->Consent_Provision_impl_->post_Consent_Provision ();
    else
      post_BackboneElement ();
  }

  void Consent_Provision_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    if (this->securityLabel_parser_)
      this->securityLabel_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->class__parser_)
      this->class__parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->dataPeriod_parser_)
      this->dataPeriod_parser_->_reset ();

    if (this->data_parser_)
      this->data_parser_->_reset ();

    if (this->provision_parser_)
      this->provision_parser_->_reset ();

    this->resetting_ = false;
  }

  // Consent_Actor_pskel
  //

  void Consent_Actor_pskel::
  role ()
  {
    if (this->Consent_Actor_impl_)
      this->Consent_Actor_impl_->role ();
  }

  void Consent_Actor_pskel::
  reference ()
  {
    if (this->Consent_Actor_impl_)
      this->Consent_Actor_impl_->reference ();
  }

  void Consent_Actor_pskel::
  post_Consent_Actor ()
  {
    if (this->Consent_Actor_impl_)
      this->Consent_Actor_impl_->post_Consent_Actor ();
    else
      post_BackboneElement ();
  }

  void Consent_Actor_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Consent_Data_pskel
  //

  void Consent_Data_pskel::
  meaning ()
  {
    if (this->Consent_Data_impl_)
      this->Consent_Data_impl_->meaning ();
  }

  void Consent_Data_pskel::
  reference ()
  {
    if (this->Consent_Data_impl_)
      this->Consent_Data_impl_->reference ();
  }

  void Consent_Data_pskel::
  post_Consent_Data ()
  {
    if (this->Consent_Data_impl_)
      this->Consent_Data_impl_->post_Consent_Data ();
    else
      post_BackboneElement ();
  }

  void Consent_Data_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->meaning_parser_)
      this->meaning_parser_->_reset ();

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    this->resetting_ = false;
  }

  // ConsentProvisionType_list_pskel
  //

  void ConsentProvisionType_list_pskel::
  post_ConsentProvisionType_list ()
  {
    if (this->ConsentProvisionType_list_impl_)
      this->ConsentProvisionType_list_impl_->post_ConsentProvisionType_list ();
    else
      post_code_primitive ();
  }

  const char* const ConsentProvisionType_list_pskel::_xsde_ConsentProvisionType_list_pskel_enums_[2UL] = 
  {
    "deny",
    "permit"
  };

  // ConsentProvisionType_pskel
  //

  void ConsentProvisionType_pskel::
  value ()
  {
    if (this->ConsentProvisionType_impl_)
      this->ConsentProvisionType_impl_->value ();
  }

  void ConsentProvisionType_pskel::
  post_ConsentProvisionType ()
  {
    if (this->ConsentProvisionType_impl_)
      this->ConsentProvisionType_impl_->post_ConsentProvisionType ();
    else
      post_Element ();
  }

  void ConsentProvisionType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ConsentDataMeaning_list_pskel
  //

  void ConsentDataMeaning_list_pskel::
  post_ConsentDataMeaning_list ()
  {
    if (this->ConsentDataMeaning_list_impl_)
      this->ConsentDataMeaning_list_impl_->post_ConsentDataMeaning_list ();
    else
      post_code_primitive ();
  }

  const char* const ConsentDataMeaning_list_pskel::_xsde_ConsentDataMeaning_list_pskel_enums_[4UL] = 
  {
    "authoredby",
    "dependents",
    "instance",
    "related"
  };

  // ConsentDataMeaning_pskel
  //

  void ConsentDataMeaning_pskel::
  value ()
  {
    if (this->ConsentDataMeaning_impl_)
      this->ConsentDataMeaning_impl_->value ();
  }

  void ConsentDataMeaning_pskel::
  post_ConsentDataMeaning ()
  {
    if (this->ConsentDataMeaning_impl_)
      this->ConsentDataMeaning_impl_->post_ConsentDataMeaning ();
    else
      post_Element ();
  }

  void ConsentDataMeaning_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ConsentState_list_pskel
  //

  void ConsentState_list_pskel::
  post_ConsentState_list ()
  {
    if (this->ConsentState_list_impl_)
      this->ConsentState_list_impl_->post_ConsentState_list ();
    else
      post_code_primitive ();
  }

  const char* const ConsentState_list_pskel::_xsde_ConsentState_list_pskel_enums_[6UL] = 
  {
    "active",
    "draft",
    "entered-in-error",
    "inactive",
    "proposed",
    "rejected"
  };

  // ConsentState_pskel
  //

  void ConsentState_pskel::
  value ()
  {
    if (this->ConsentState_impl_)
      this->ConsentState_impl_->value ();
  }

  void ConsentState_pskel::
  post_ConsentState ()
  {
    if (this->ConsentState_impl_)
      this->ConsentState_impl_->post_ConsentState ();
    else
      post_Element ();
  }

  void ConsentState_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Consent_pskel.
  //
  bool Consent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Consent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Consent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Consent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Consent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Consent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ConsentState ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "scope" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scope_parser_)
            {
              this->scope_parser_->pre ();
              ctx.nested_parser (this->scope_parser_);
            }
          }
          else
          {
            if (this->scope_parser_ != 0)
            {
              this->scope_parser_->post_CodeableConcept ();
              this->scope ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "dateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dateTime_parser_)
            {
              this->dateTime_parser_->pre ();
              ctx.nested_parser (this->dateTime_parser_);
            }
          }
          else
          {
            if (this->dateTime_parser_ != 0)
            {
              this->dateTime_parser_->post_dateTime ();
              this->dateTime ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "organization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organization_parser_)
            {
              this->organization_parser_->pre ();
              ctx.nested_parser (this->organization_parser_);
            }
          }
          else
          {
            if (this->organization_parser_ != 0)
            {
              this->organization_parser_->post_Reference ();
              this->organization ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "sourceAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceAttachment_parser_)
            {
              this->sourceAttachment_parser_->pre ();
              ctx.nested_parser (this->sourceAttachment_parser_);
            }
          }
          else
          {
            if (this->sourceAttachment_parser_ != 0)
            {
              this->sourceAttachment_parser_->post_Attachment ();
              this->sourceAttachment ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "sourceReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceReference_parser_)
            {
              this->sourceReference_parser_->pre ();
              ctx.nested_parser (this->sourceReference_parser_);
            }
          }
          else
          {
            if (this->sourceReference_parser_ != 0)
            {
              this->sourceReference_parser_->post_Reference ();
              this->sourceReference ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "policy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->policy_parser_)
            {
              this->policy_parser_->pre ();
              ctx.nested_parser (this->policy_parser_);
            }
          }
          else
          {
            if (this->policy_parser_ != 0)
            {
              this->policy_parser_->post_Consent_Policy ();
              this->policy ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "policyRule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->policyRule_parser_)
            {
              this->policyRule_parser_->pre ();
              ctx.nested_parser (this->policyRule_parser_);
            }
          }
          else
          {
            if (this->policyRule_parser_ != 0)
            {
              this->policyRule_parser_->post_CodeableConcept ();
              this->policyRule ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "verification" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->verification_parser_)
            {
              this->verification_parser_->pre ();
              ctx.nested_parser (this->verification_parser_);
            }
          }
          else
          {
            if (this->verification_parser_ != 0)
            {
              this->verification_parser_->post_Consent_Verification ();
              this->verification ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "provision" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provision_parser_)
            {
              this->provision_parser_->pre ();
              ctx.nested_parser (this->provision_parser_);
            }
          }
          else
          {
            if (this->provision_parser_ != 0)
            {
              this->provision_parser_->post_Consent_Provision ();
              this->provision ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Consent_Policy_pskel.
  //
  bool Consent_Policy_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "authority" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "uri" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Consent_Policy_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Consent_Policy_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Consent_Policy_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Consent_Policy_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Consent_Policy_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "authority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authority_parser_)
            {
              this->authority_parser_->pre ();
              ctx.nested_parser (this->authority_parser_);
            }
          }
          else
          {
            if (this->authority_parser_ != 0)
            {
              this->authority_parser_->post_uri ();
              this->authority ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uri_parser_)
            {
              this->uri_parser_->pre ();
              ctx.nested_parser (this->uri_parser_);
            }
          }
          else
          {
            if (this->uri_parser_ != 0)
            {
              this->uri_parser_->post_uri ();
              this->uri ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Consent_Verification_pskel.
  //
  bool Consent_Verification_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "verified" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Consent_Verification_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Consent_Verification_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Consent_Verification_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Consent_Verification_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Consent_Verification_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "verified" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->verified_parser_)
            {
              this->verified_parser_->pre ();
              ctx.nested_parser (this->verified_parser_);
            }
          }
          else
          {
            if (this->verified_parser_ != 0)
            {
              this->verified_parser_->post_boolean ();
              this->verified ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "verifiedWith" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->verifiedWith_parser_)
            {
              this->verifiedWith_parser_->pre ();
              ctx.nested_parser (this->verifiedWith_parser_);
            }
          }
          else
          {
            if (this->verifiedWith_parser_ != 0)
            {
              this->verifiedWith_parser_->post_Reference ();
              this->verifiedWith ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "verificationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->verificationDate_parser_)
            {
              this->verificationDate_parser_->pre ();
              ctx.nested_parser (this->verificationDate_parser_);
            }
          }
          else
          {
            if (this->verificationDate_parser_ != 0)
            {
              this->verificationDate_parser_->post_dateTime ();
              this->verificationDate ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Consent_Provision_pskel.
  //
  bool Consent_Provision_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "actor" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "action" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "securityLabel" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "purpose" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "class" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "dataPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "data" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "provision" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Consent_Provision_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Consent_Provision_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Consent_Provision_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Consent_Provision_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Consent_Provision_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_ConsentProvisionType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_Consent_Actor ();
              this->actor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_CodeableConcept ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "securityLabel" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabel_parser_)
            {
              this->securityLabel_parser_->pre ();
              ctx.nested_parser (this->securityLabel_parser_);
            }
          }
          else
          {
            if (this->securityLabel_parser_ != 0)
            {
              this->securityLabel_parser_->post_Coding ();
              this->securityLabel ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_Coding ();
              this->purpose ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "class" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->class__parser_)
            {
              this->class__parser_->pre ();
              ctx.nested_parser (this->class__parser_);
            }
          }
          else
          {
            if (this->class__parser_ != 0)
            {
              this->class__parser_->post_Coding ();
              this->class_ ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "dataPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dataPeriod_parser_)
            {
              this->dataPeriod_parser_->pre ();
              ctx.nested_parser (this->dataPeriod_parser_);
            }
          }
          else
          {
            if (this->dataPeriod_parser_ != 0)
            {
              this->dataPeriod_parser_->post_Period ();
              this->dataPeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "data" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->data_parser_)
            {
              this->data_parser_->pre ();
              ctx.nested_parser (this->data_parser_);
            }
          }
          else
          {
            if (this->data_parser_ != 0)
            {
              this->data_parser_->post_Consent_Data ();
              this->data ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "provision" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provision_parser_)
            {
              this->provision_parser_->pre ();
              ctx.nested_parser (this->provision_parser_);
            }
          }
          else
          {
            if (this->provision_parser_ != 0)
            {
              this->provision_parser_->post_Consent_Provision ();
              this->provision ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Consent_Actor_pskel.
  //
  bool Consent_Actor_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "role" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Consent_Actor_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Consent_Actor_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Consent_Actor_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Consent_Actor_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Consent_Actor_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Consent_Data_pskel.
  //
  bool Consent_Data_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "meaning" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Consent_Data_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Consent_Data_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Consent_Data_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Consent_Data_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Consent_Data_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "meaning" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->meaning_parser_)
            {
              this->meaning_parser_->pre ();
              ctx.nested_parser (this->meaning_parser_);
            }
          }
          else
          {
            if (this->meaning_parser_ != 0)
            {
              this->meaning_parser_->post_ConsentDataMeaning ();
              this->meaning ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ConsentProvisionType_pskel.
  //
  bool ConsentProvisionType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ConsentProvisionType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ConsentDataMeaning_pskel.
  //
  bool ConsentDataMeaning_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ConsentDataMeaning_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ConsentState_pskel.
  //
  bool ConsentState_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ConsentState_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

