// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "visionprescription-pskel.hxx"

namespace fhir
{
  // VisionPrescription_pskel
  //

  void VisionPrescription_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void VisionPrescription_pskel::
  status_parser (::fhir::FinancialResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void VisionPrescription_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void VisionPrescription_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void VisionPrescription_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void VisionPrescription_pskel::
  dateWritten_parser (::fhir::dateTime_pskel& p)
  {
    this->dateWritten_parser_ = &p;
  }

  void VisionPrescription_pskel::
  prescriber_parser (::fhir::Reference_pskel& p)
  {
    this->prescriber_parser_ = &p;
  }

  void VisionPrescription_pskel::
  lensSpecification_parser (::fhir::VisionPrescription_LensSpecification_pskel& p)
  {
    this->lensSpecification_parser_ = &p;
  }

  void VisionPrescription_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::FinancialResourceStatusCodes_pskel& status,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& patient,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& dateWritten,
           ::fhir::Reference_pskel& prescriber,
           ::fhir::VisionPrescription_LensSpecification_pskel& lensSpecification)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->created_parser_ = &created;
    this->patient_parser_ = &patient;
    this->encounter_parser_ = &encounter;
    this->dateWritten_parser_ = &dateWritten;
    this->prescriber_parser_ = &prescriber;
    this->lensSpecification_parser_ = &lensSpecification;
  }

  VisionPrescription_pskel::
  VisionPrescription_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    VisionPrescription_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    created_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    dateWritten_parser_ (0),
    prescriber_parser_ (0),
    lensSpecification_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  VisionPrescription_pskel::
  VisionPrescription_pskel (VisionPrescription_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    VisionPrescription_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    created_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    dateWritten_parser_ (0),
    prescriber_parser_ (0),
    lensSpecification_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // VisionPrescription_LensSpecification_pskel
  //

  void VisionPrescription_LensSpecification_pskel::
  product_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->product_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  eye_parser (::fhir::VisionEyes_pskel& p)
  {
    this->eye_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  sphere_parser (::fhir::decimal_pskel& p)
  {
    this->sphere_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  cylinder_parser (::fhir::decimal_pskel& p)
  {
    this->cylinder_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  axis_parser (::fhir::integer_pskel& p)
  {
    this->axis_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  prism_parser (::fhir::VisionPrescription_Prism_pskel& p)
  {
    this->prism_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  add_parser (::fhir::decimal_pskel& p)
  {
    this->add_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  power_parser (::fhir::decimal_pskel& p)
  {
    this->power_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  backCurve_parser (::fhir::decimal_pskel& p)
  {
    this->backCurve_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  diameter_parser (::fhir::decimal_pskel& p)
  {
    this->diameter_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  duration_parser (::fhir::Quantity_pskel& p)
  {
    this->duration_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  color_parser (::fhir::string_pskel& p)
  {
    this->color_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  brand_parser (::fhir::string_pskel& p)
  {
    this->brand_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void VisionPrescription_LensSpecification_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& product,
           ::fhir::VisionEyes_pskel& eye,
           ::fhir::decimal_pskel& sphere,
           ::fhir::decimal_pskel& cylinder,
           ::fhir::integer_pskel& axis,
           ::fhir::VisionPrescription_Prism_pskel& prism,
           ::fhir::decimal_pskel& add,
           ::fhir::decimal_pskel& power,
           ::fhir::decimal_pskel& backCurve,
           ::fhir::decimal_pskel& diameter,
           ::fhir::Quantity_pskel& duration,
           ::fhir::string_pskel& color,
           ::fhir::string_pskel& brand,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->product_parser_ = &product;
    this->eye_parser_ = &eye;
    this->sphere_parser_ = &sphere;
    this->cylinder_parser_ = &cylinder;
    this->axis_parser_ = &axis;
    this->prism_parser_ = &prism;
    this->add_parser_ = &add;
    this->power_parser_ = &power;
    this->backCurve_parser_ = &backCurve;
    this->diameter_parser_ = &diameter;
    this->duration_parser_ = &duration;
    this->color_parser_ = &color;
    this->brand_parser_ = &brand;
    this->note_parser_ = &note;
  }

  VisionPrescription_LensSpecification_pskel::
  VisionPrescription_LensSpecification_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    VisionPrescription_LensSpecification_impl_ (0),
    product_parser_ (0),
    eye_parser_ (0),
    sphere_parser_ (0),
    cylinder_parser_ (0),
    axis_parser_ (0),
    prism_parser_ (0),
    add_parser_ (0),
    power_parser_ (0),
    backCurve_parser_ (0),
    diameter_parser_ (0),
    duration_parser_ (0),
    color_parser_ (0),
    brand_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  VisionPrescription_LensSpecification_pskel::
  VisionPrescription_LensSpecification_pskel (VisionPrescription_LensSpecification_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    VisionPrescription_LensSpecification_impl_ (impl),
    product_parser_ (0),
    eye_parser_ (0),
    sphere_parser_ (0),
    cylinder_parser_ (0),
    axis_parser_ (0),
    prism_parser_ (0),
    add_parser_ (0),
    power_parser_ (0),
    backCurve_parser_ (0),
    diameter_parser_ (0),
    duration_parser_ (0),
    color_parser_ (0),
    brand_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // VisionPrescription_Prism_pskel
  //

  void VisionPrescription_Prism_pskel::
  amount_parser (::fhir::decimal_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void VisionPrescription_Prism_pskel::
  base_parser (::fhir::VisionBase_pskel& p)
  {
    this->base_parser_ = &p;
  }

  void VisionPrescription_Prism_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::decimal_pskel& amount,
           ::fhir::VisionBase_pskel& base)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->amount_parser_ = &amount;
    this->base_parser_ = &base;
  }

  VisionPrescription_Prism_pskel::
  VisionPrescription_Prism_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    VisionPrescription_Prism_impl_ (0),
    amount_parser_ (0),
    base_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  VisionPrescription_Prism_pskel::
  VisionPrescription_Prism_pskel (VisionPrescription_Prism_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    VisionPrescription_Prism_impl_ (impl),
    amount_parser_ (0),
    base_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // VisionBase_list_pskel
  //

  VisionBase_list_pskel::
  VisionBase_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    VisionBase_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_VisionBase_list_pskel_enums_, 4UL);
  }

  VisionBase_list_pskel::
  VisionBase_list_pskel (VisionBase_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    VisionBase_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_VisionBase_list_pskel_enums_, 4UL);
  }

  // VisionBase_pskel
  //

  void VisionBase_pskel::
  value_parser (::fhir::VisionBase_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void VisionBase_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::VisionBase_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  VisionBase_pskel::
  VisionBase_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    VisionBase_impl_ (0),
    value_parser_ (0)
  {
  }

  VisionBase_pskel::
  VisionBase_pskel (VisionBase_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    VisionBase_impl_ (impl),
    value_parser_ (0)
  {
  }

  // VisionEyes_list_pskel
  //

  VisionEyes_list_pskel::
  VisionEyes_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    VisionEyes_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_VisionEyes_list_pskel_enums_, 2UL);
  }

  VisionEyes_list_pskel::
  VisionEyes_list_pskel (VisionEyes_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    VisionEyes_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_VisionEyes_list_pskel_enums_, 2UL);
  }

  // VisionEyes_pskel
  //

  void VisionEyes_pskel::
  value_parser (::fhir::VisionEyes_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void VisionEyes_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::VisionEyes_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  VisionEyes_pskel::
  VisionEyes_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    VisionEyes_impl_ (0),
    value_parser_ (0)
  {
  }

  VisionEyes_pskel::
  VisionEyes_pskel (VisionEyes_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    VisionEyes_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // VisionPrescription_pskel
  //

  void VisionPrescription_pskel::
  identifier ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->identifier ();
  }

  void VisionPrescription_pskel::
  status ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->status ();
  }

  void VisionPrescription_pskel::
  created ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->created ();
  }

  void VisionPrescription_pskel::
  patient ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->patient ();
  }

  void VisionPrescription_pskel::
  encounter ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->encounter ();
  }

  void VisionPrescription_pskel::
  dateWritten ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->dateWritten ();
  }

  void VisionPrescription_pskel::
  prescriber ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->prescriber ();
  }

  void VisionPrescription_pskel::
  lensSpecification ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->lensSpecification ();
  }

  void VisionPrescription_pskel::
  post_VisionPrescription ()
  {
    if (this->VisionPrescription_impl_)
      this->VisionPrescription_impl_->post_VisionPrescription ();
    else
      post_DomainResource ();
  }

  void VisionPrescription_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->dateWritten_parser_)
      this->dateWritten_parser_->_reset ();

    if (this->prescriber_parser_)
      this->prescriber_parser_->_reset ();

    if (this->lensSpecification_parser_)
      this->lensSpecification_parser_->_reset ();

    this->resetting_ = false;
  }

  // VisionPrescription_LensSpecification_pskel
  //

  void VisionPrescription_LensSpecification_pskel::
  product ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->product ();
  }

  void VisionPrescription_LensSpecification_pskel::
  eye ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->eye ();
  }

  void VisionPrescription_LensSpecification_pskel::
  sphere ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->sphere ();
  }

  void VisionPrescription_LensSpecification_pskel::
  cylinder ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->cylinder ();
  }

  void VisionPrescription_LensSpecification_pskel::
  axis ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->axis ();
  }

  void VisionPrescription_LensSpecification_pskel::
  prism ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->prism ();
  }

  void VisionPrescription_LensSpecification_pskel::
  add ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->add ();
  }

  void VisionPrescription_LensSpecification_pskel::
  power ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->power ();
  }

  void VisionPrescription_LensSpecification_pskel::
  backCurve ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->backCurve ();
  }

  void VisionPrescription_LensSpecification_pskel::
  diameter ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->diameter ();
  }

  void VisionPrescription_LensSpecification_pskel::
  duration ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->duration ();
  }

  void VisionPrescription_LensSpecification_pskel::
  color ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->color ();
  }

  void VisionPrescription_LensSpecification_pskel::
  brand ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->brand ();
  }

  void VisionPrescription_LensSpecification_pskel::
  note ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->note ();
  }

  void VisionPrescription_LensSpecification_pskel::
  post_VisionPrescription_LensSpecification ()
  {
    if (this->VisionPrescription_LensSpecification_impl_)
      this->VisionPrescription_LensSpecification_impl_->post_VisionPrescription_LensSpecification ();
    else
      post_BackboneElement ();
  }

  void VisionPrescription_LensSpecification_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->product_parser_)
      this->product_parser_->_reset ();

    if (this->eye_parser_)
      this->eye_parser_->_reset ();

    if (this->sphere_parser_)
      this->sphere_parser_->_reset ();

    if (this->cylinder_parser_)
      this->cylinder_parser_->_reset ();

    if (this->axis_parser_)
      this->axis_parser_->_reset ();

    if (this->prism_parser_)
      this->prism_parser_->_reset ();

    if (this->add_parser_)
      this->add_parser_->_reset ();

    if (this->power_parser_)
      this->power_parser_->_reset ();

    if (this->backCurve_parser_)
      this->backCurve_parser_->_reset ();

    if (this->diameter_parser_)
      this->diameter_parser_->_reset ();

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    if (this->color_parser_)
      this->color_parser_->_reset ();

    if (this->brand_parser_)
      this->brand_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // VisionPrescription_Prism_pskel
  //

  void VisionPrescription_Prism_pskel::
  amount ()
  {
    if (this->VisionPrescription_Prism_impl_)
      this->VisionPrescription_Prism_impl_->amount ();
  }

  void VisionPrescription_Prism_pskel::
  base ()
  {
    if (this->VisionPrescription_Prism_impl_)
      this->VisionPrescription_Prism_impl_->base ();
  }

  void VisionPrescription_Prism_pskel::
  post_VisionPrescription_Prism ()
  {
    if (this->VisionPrescription_Prism_impl_)
      this->VisionPrescription_Prism_impl_->post_VisionPrescription_Prism ();
    else
      post_BackboneElement ();
  }

  void VisionPrescription_Prism_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    if (this->base_parser_)
      this->base_parser_->_reset ();

    this->resetting_ = false;
  }

  // VisionBase_list_pskel
  //

  void VisionBase_list_pskel::
  post_VisionBase_list ()
  {
    if (this->VisionBase_list_impl_)
      this->VisionBase_list_impl_->post_VisionBase_list ();
    else
      post_code_primitive ();
  }

  const char* const VisionBase_list_pskel::_xsde_VisionBase_list_pskel_enums_[4UL] = 
  {
    "down",
    "in",
    "out",
    "up"
  };

  // VisionBase_pskel
  //

  void VisionBase_pskel::
  value ()
  {
    if (this->VisionBase_impl_)
      this->VisionBase_impl_->value ();
  }

  void VisionBase_pskel::
  post_VisionBase ()
  {
    if (this->VisionBase_impl_)
      this->VisionBase_impl_->post_VisionBase ();
    else
      post_Element ();
  }

  void VisionBase_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // VisionEyes_list_pskel
  //

  void VisionEyes_list_pskel::
  post_VisionEyes_list ()
  {
    if (this->VisionEyes_list_impl_)
      this->VisionEyes_list_impl_->post_VisionEyes_list ();
    else
      post_code_primitive ();
  }

  const char* const VisionEyes_list_pskel::_xsde_VisionEyes_list_pskel_enums_[2UL] = 
  {
    "left",
    "right"
  };

  // VisionEyes_pskel
  //

  void VisionEyes_pskel::
  value ()
  {
    if (this->VisionEyes_impl_)
      this->VisionEyes_impl_->value ();
  }

  void VisionEyes_pskel::
  post_VisionEyes ()
  {
    if (this->VisionEyes_impl_)
      this->VisionEyes_impl_->post_VisionEyes ();
    else
      post_Element ();
  }

  void VisionEyes_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for VisionPrescription_pskel.
  //
  bool VisionPrescription_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &VisionPrescription_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool VisionPrescription_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void VisionPrescription_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void VisionPrescription_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void VisionPrescription_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FinancialResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "dateWritten" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dateWritten_parser_)
            {
              this->dateWritten_parser_->pre ();
              ctx.nested_parser (this->dateWritten_parser_);
            }
          }
          else
          {
            if (this->dateWritten_parser_ != 0)
            {
              this->dateWritten_parser_->post_dateTime ();
              this->dateWritten ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "prescriber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prescriber_parser_)
            {
              this->prescriber_parser_->pre ();
              ctx.nested_parser (this->prescriber_parser_);
            }
          }
          else
          {
            if (this->prescriber_parser_ != 0)
            {
              this->prescriber_parser_->post_Reference ();
              this->prescriber ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "lensSpecification" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lensSpecification_parser_)
            {
              this->lensSpecification_parser_->pre ();
              ctx.nested_parser (this->lensSpecification_parser_);
            }
          }
          else
          {
            if (this->lensSpecification_parser_ != 0)
            {
              this->lensSpecification_parser_->post_VisionPrescription_LensSpecification ();
              this->lensSpecification ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for VisionPrescription_LensSpecification_pskel.
  //
  bool VisionPrescription_LensSpecification_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "product" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &VisionPrescription_LensSpecification_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool VisionPrescription_LensSpecification_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void VisionPrescription_LensSpecification_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void VisionPrescription_LensSpecification_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void VisionPrescription_LensSpecification_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "product" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->product_parser_)
            {
              this->product_parser_->pre ();
              ctx.nested_parser (this->product_parser_);
            }
          }
          else
          {
            if (this->product_parser_ != 0)
            {
              this->product_parser_->post_CodeableConcept ();
              this->product ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "eye" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->eye_parser_)
            {
              this->eye_parser_->pre ();
              ctx.nested_parser (this->eye_parser_);
            }
          }
          else
          {
            if (this->eye_parser_ != 0)
            {
              this->eye_parser_->post_VisionEyes ();
              this->eye ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "sphere" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sphere_parser_)
            {
              this->sphere_parser_->pre ();
              ctx.nested_parser (this->sphere_parser_);
            }
          }
          else
          {
            if (this->sphere_parser_ != 0)
            {
              this->sphere_parser_->post_decimal ();
              this->sphere ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "cylinder" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->cylinder_parser_)
            {
              this->cylinder_parser_->pre ();
              ctx.nested_parser (this->cylinder_parser_);
            }
          }
          else
          {
            if (this->cylinder_parser_ != 0)
            {
              this->cylinder_parser_->post_decimal ();
              this->cylinder ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "axis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->axis_parser_)
            {
              this->axis_parser_->pre ();
              ctx.nested_parser (this->axis_parser_);
            }
          }
          else
          {
            if (this->axis_parser_ != 0)
            {
              this->axis_parser_->post_integer ();
              this->axis ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "prism" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prism_parser_)
            {
              this->prism_parser_->pre ();
              ctx.nested_parser (this->prism_parser_);
            }
          }
          else
          {
            if (this->prism_parser_ != 0)
            {
              this->prism_parser_->post_VisionPrescription_Prism ();
              this->prism ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "add" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->add_parser_)
            {
              this->add_parser_->pre ();
              ctx.nested_parser (this->add_parser_);
            }
          }
          else
          {
            if (this->add_parser_ != 0)
            {
              this->add_parser_->post_decimal ();
              this->add ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "power" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->power_parser_)
            {
              this->power_parser_->pre ();
              ctx.nested_parser (this->power_parser_);
            }
          }
          else
          {
            if (this->power_parser_ != 0)
            {
              this->power_parser_->post_decimal ();
              this->power ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "backCurve" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->backCurve_parser_)
            {
              this->backCurve_parser_->pre ();
              ctx.nested_parser (this->backCurve_parser_);
            }
          }
          else
          {
            if (this->backCurve_parser_ != 0)
            {
              this->backCurve_parser_->post_decimal ();
              this->backCurve ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "diameter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diameter_parser_)
            {
              this->diameter_parser_->pre ();
              ctx.nested_parser (this->diameter_parser_);
            }
          }
          else
          {
            if (this->diameter_parser_ != 0)
            {
              this->diameter_parser_->post_decimal ();
              this->diameter ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "duration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->duration_parser_)
            {
              this->duration_parser_->pre ();
              ctx.nested_parser (this->duration_parser_);
            }
          }
          else
          {
            if (this->duration_parser_ != 0)
            {
              this->duration_parser_->post_Quantity ();
              this->duration ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "color" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->color_parser_)
            {
              this->color_parser_->pre ();
              ctx.nested_parser (this->color_parser_);
            }
          }
          else
          {
            if (this->color_parser_ != 0)
            {
              this->color_parser_->post_string ();
              this->color ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "brand" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->brand_parser_)
            {
              this->brand_parser_->pre ();
              ctx.nested_parser (this->brand_parser_);
            }
          }
          else
          {
            if (this->brand_parser_ != 0)
            {
              this->brand_parser_->post_string ();
              this->brand ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for VisionPrescription_Prism_pskel.
  //
  bool VisionPrescription_Prism_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &VisionPrescription_Prism_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool VisionPrescription_Prism_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void VisionPrescription_Prism_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void VisionPrescription_Prism_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void VisionPrescription_Prism_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_decimal ();
              this->amount ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "base" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->base_parser_)
            {
              this->base_parser_->pre ();
              ctx.nested_parser (this->base_parser_);
            }
          }
          else
          {
            if (this->base_parser_ != 0)
            {
              this->base_parser_->post_VisionBase ();
              this->base ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for VisionBase_pskel.
  //
  bool VisionBase_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_VisionBase_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for VisionEyes_pskel.
  //
  bool VisionEyes_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_VisionEyes_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

