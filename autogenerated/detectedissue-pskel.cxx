// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "detectedissue-pskel.hxx"

namespace fhir
{
  // DetectedIssue_pskel
  //

  void DetectedIssue_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void DetectedIssue_pskel::
  status_parser (::fhir::ObservationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void DetectedIssue_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void DetectedIssue_pskel::
  severity_parser (::fhir::DetectedIssueSeverity_pskel& p)
  {
    this->severity_parser_ = &p;
  }

  void DetectedIssue_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void DetectedIssue_pskel::
  identifiedDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->identifiedDateTime_parser_ = &p;
  }

  void DetectedIssue_pskel::
  identifiedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->identifiedPeriod_parser_ = &p;
  }

  void DetectedIssue_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void DetectedIssue_pskel::
  implicated_parser (::fhir::Reference_pskel& p)
  {
    this->implicated_parser_ = &p;
  }

  void DetectedIssue_pskel::
  evidence_parser (::fhir::DetectedIssue_Evidence_pskel& p)
  {
    this->evidence_parser_ = &p;
  }

  void DetectedIssue_pskel::
  detail_parser (::fhir::string_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void DetectedIssue_pskel::
  reference_parser (::fhir::uri_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void DetectedIssue_pskel::
  mitigation_parser (::fhir::DetectedIssue_Mitigation_pskel& p)
  {
    this->mitigation_parser_ = &p;
  }

  void DetectedIssue_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::ObservationStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::DetectedIssueSeverity_pskel& severity,
           ::fhir::Reference_pskel& patient,
           ::fhir::dateTime_pskel& identifiedDateTime,
           ::fhir::Period_pskel& identifiedPeriod,
           ::fhir::Reference_pskel& author,
           ::fhir::Reference_pskel& implicated,
           ::fhir::DetectedIssue_Evidence_pskel& evidence,
           ::fhir::string_pskel& detail,
           ::fhir::uri_pskel& reference,
           ::fhir::DetectedIssue_Mitigation_pskel& mitigation)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->code_parser_ = &code;
    this->severity_parser_ = &severity;
    this->patient_parser_ = &patient;
    this->identifiedDateTime_parser_ = &identifiedDateTime;
    this->identifiedPeriod_parser_ = &identifiedPeriod;
    this->author_parser_ = &author;
    this->implicated_parser_ = &implicated;
    this->evidence_parser_ = &evidence;
    this->detail_parser_ = &detail;
    this->reference_parser_ = &reference;
    this->mitigation_parser_ = &mitigation;
  }

  DetectedIssue_pskel::
  DetectedIssue_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    DetectedIssue_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    code_parser_ (0),
    severity_parser_ (0),
    patient_parser_ (0),
    identifiedDateTime_parser_ (0),
    identifiedPeriod_parser_ (0),
    author_parser_ (0),
    implicated_parser_ (0),
    evidence_parser_ (0),
    detail_parser_ (0),
    reference_parser_ (0),
    mitigation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DetectedIssue_pskel::
  DetectedIssue_pskel (DetectedIssue_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    DetectedIssue_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    code_parser_ (0),
    severity_parser_ (0),
    patient_parser_ (0),
    identifiedDateTime_parser_ (0),
    identifiedPeriod_parser_ (0),
    author_parser_ (0),
    implicated_parser_ (0),
    evidence_parser_ (0),
    detail_parser_ (0),
    reference_parser_ (0),
    mitigation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DetectedIssue_Evidence_pskel
  //

  void DetectedIssue_Evidence_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void DetectedIssue_Evidence_pskel::
  detail_parser (::fhir::Reference_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void DetectedIssue_Evidence_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->detail_parser_ = &detail;
  }

  DetectedIssue_Evidence_pskel::
  DetectedIssue_Evidence_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DetectedIssue_Evidence_impl_ (0),
    code_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DetectedIssue_Evidence_pskel::
  DetectedIssue_Evidence_pskel (DetectedIssue_Evidence_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DetectedIssue_Evidence_impl_ (impl),
    code_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DetectedIssue_Mitigation_pskel
  //

  void DetectedIssue_Mitigation_pskel::
  action_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void DetectedIssue_Mitigation_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void DetectedIssue_Mitigation_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void DetectedIssue_Mitigation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& action,
           ::fhir::dateTime_pskel& date,
           ::fhir::Reference_pskel& author)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->action_parser_ = &action;
    this->date_parser_ = &date;
    this->author_parser_ = &author;
  }

  DetectedIssue_Mitigation_pskel::
  DetectedIssue_Mitigation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DetectedIssue_Mitigation_impl_ (0),
    action_parser_ (0),
    date_parser_ (0),
    author_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DetectedIssue_Mitigation_pskel::
  DetectedIssue_Mitigation_pskel (DetectedIssue_Mitigation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DetectedIssue_Mitigation_impl_ (impl),
    action_parser_ (0),
    date_parser_ (0),
    author_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ObservationStatus_list_pskel
  //

  ObservationStatus_list_pskel::
  ObservationStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ObservationStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ObservationStatus_list_pskel_enums_, 8UL);
  }

  ObservationStatus_list_pskel::
  ObservationStatus_list_pskel (ObservationStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ObservationStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ObservationStatus_list_pskel_enums_, 8UL);
  }

  // ObservationStatus_pskel
  //

  void ObservationStatus_pskel::
  value_parser (::fhir::ObservationStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ObservationStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ObservationStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ObservationStatus_pskel::
  ObservationStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ObservationStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  ObservationStatus_pskel::
  ObservationStatus_pskel (ObservationStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ObservationStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // DetectedIssueSeverity_list_pskel
  //

  DetectedIssueSeverity_list_pskel::
  DetectedIssueSeverity_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DetectedIssueSeverity_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DetectedIssueSeverity_list_pskel_enums_, 3UL);
  }

  DetectedIssueSeverity_list_pskel::
  DetectedIssueSeverity_list_pskel (DetectedIssueSeverity_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DetectedIssueSeverity_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DetectedIssueSeverity_list_pskel_enums_, 3UL);
  }

  // DetectedIssueSeverity_pskel
  //

  void DetectedIssueSeverity_pskel::
  value_parser (::fhir::DetectedIssueSeverity_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DetectedIssueSeverity_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DetectedIssueSeverity_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DetectedIssueSeverity_pskel::
  DetectedIssueSeverity_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DetectedIssueSeverity_impl_ (0),
    value_parser_ (0)
  {
  }

  DetectedIssueSeverity_pskel::
  DetectedIssueSeverity_pskel (DetectedIssueSeverity_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DetectedIssueSeverity_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // DetectedIssue_pskel
  //

  void DetectedIssue_pskel::
  identifier ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->identifier ();
  }

  void DetectedIssue_pskel::
  status ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->status ();
  }

  void DetectedIssue_pskel::
  code ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->code ();
  }

  void DetectedIssue_pskel::
  severity ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->severity ();
  }

  void DetectedIssue_pskel::
  patient ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->patient ();
  }

  void DetectedIssue_pskel::
  identifiedDateTime ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->identifiedDateTime ();
  }

  void DetectedIssue_pskel::
  identifiedPeriod ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->identifiedPeriod ();
  }

  void DetectedIssue_pskel::
  author ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->author ();
  }

  void DetectedIssue_pskel::
  implicated ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->implicated ();
  }

  void DetectedIssue_pskel::
  evidence ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->evidence ();
  }

  void DetectedIssue_pskel::
  detail ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->detail ();
  }

  void DetectedIssue_pskel::
  reference ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->reference ();
  }

  void DetectedIssue_pskel::
  mitigation ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->mitigation ();
  }

  void DetectedIssue_pskel::
  post_DetectedIssue ()
  {
    if (this->DetectedIssue_impl_)
      this->DetectedIssue_impl_->post_DetectedIssue ();
    else
      post_DomainResource ();
  }

  void DetectedIssue_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->severity_parser_)
      this->severity_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->identifiedDateTime_parser_)
      this->identifiedDateTime_parser_->_reset ();

    if (this->identifiedPeriod_parser_)
      this->identifiedPeriod_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->implicated_parser_)
      this->implicated_parser_->_reset ();

    if (this->evidence_parser_)
      this->evidence_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->mitigation_parser_)
      this->mitigation_parser_->_reset ();

    this->resetting_ = false;
  }

  // DetectedIssue_Evidence_pskel
  //

  void DetectedIssue_Evidence_pskel::
  code ()
  {
    if (this->DetectedIssue_Evidence_impl_)
      this->DetectedIssue_Evidence_impl_->code ();
  }

  void DetectedIssue_Evidence_pskel::
  detail ()
  {
    if (this->DetectedIssue_Evidence_impl_)
      this->DetectedIssue_Evidence_impl_->detail ();
  }

  void DetectedIssue_Evidence_pskel::
  post_DetectedIssue_Evidence ()
  {
    if (this->DetectedIssue_Evidence_impl_)
      this->DetectedIssue_Evidence_impl_->post_DetectedIssue_Evidence ();
    else
      post_BackboneElement ();
  }

  void DetectedIssue_Evidence_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // DetectedIssue_Mitigation_pskel
  //

  void DetectedIssue_Mitigation_pskel::
  action ()
  {
    if (this->DetectedIssue_Mitigation_impl_)
      this->DetectedIssue_Mitigation_impl_->action ();
  }

  void DetectedIssue_Mitigation_pskel::
  date ()
  {
    if (this->DetectedIssue_Mitigation_impl_)
      this->DetectedIssue_Mitigation_impl_->date ();
  }

  void DetectedIssue_Mitigation_pskel::
  author ()
  {
    if (this->DetectedIssue_Mitigation_impl_)
      this->DetectedIssue_Mitigation_impl_->author ();
  }

  void DetectedIssue_Mitigation_pskel::
  post_DetectedIssue_Mitigation ()
  {
    if (this->DetectedIssue_Mitigation_impl_)
      this->DetectedIssue_Mitigation_impl_->post_DetectedIssue_Mitigation ();
    else
      post_BackboneElement ();
  }

  void DetectedIssue_Mitigation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->action_parser_)
      this->action_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    this->resetting_ = false;
  }

  // ObservationStatus_list_pskel
  //

  void ObservationStatus_list_pskel::
  post_ObservationStatus_list ()
  {
    if (this->ObservationStatus_list_impl_)
      this->ObservationStatus_list_impl_->post_ObservationStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const ObservationStatus_list_pskel::_xsde_ObservationStatus_list_pskel_enums_[8UL] = 
  {
    "amended",
    "cancelled",
    "corrected",
    "entered-in-error",
    "final",
    "preliminary",
    "registered",
    "unknown"
  };

  // ObservationStatus_pskel
  //

  void ObservationStatus_pskel::
  value ()
  {
    if (this->ObservationStatus_impl_)
      this->ObservationStatus_impl_->value ();
  }

  void ObservationStatus_pskel::
  post_ObservationStatus ()
  {
    if (this->ObservationStatus_impl_)
      this->ObservationStatus_impl_->post_ObservationStatus ();
    else
      post_Element ();
  }

  void ObservationStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // DetectedIssueSeverity_list_pskel
  //

  void DetectedIssueSeverity_list_pskel::
  post_DetectedIssueSeverity_list ()
  {
    if (this->DetectedIssueSeverity_list_impl_)
      this->DetectedIssueSeverity_list_impl_->post_DetectedIssueSeverity_list ();
    else
      post_code_primitive ();
  }

  const char* const DetectedIssueSeverity_list_pskel::_xsde_DetectedIssueSeverity_list_pskel_enums_[3UL] = 
  {
    "high",
    "low",
    "moderate"
  };

  // DetectedIssueSeverity_pskel
  //

  void DetectedIssueSeverity_pskel::
  value ()
  {
    if (this->DetectedIssueSeverity_impl_)
      this->DetectedIssueSeverity_impl_->value ();
  }

  void DetectedIssueSeverity_pskel::
  post_DetectedIssueSeverity ()
  {
    if (this->DetectedIssueSeverity_impl_)
      this->DetectedIssueSeverity_impl_->post_DetectedIssueSeverity ();
    else
      post_Element ();
  }

  void DetectedIssueSeverity_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for DetectedIssue_pskel.
  //
  bool DetectedIssue_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DetectedIssue_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DetectedIssue_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DetectedIssue_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void DetectedIssue_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DetectedIssue_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ObservationStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "severity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->severity_parser_)
            {
              this->severity_parser_->pre ();
              ctx.nested_parser (this->severity_parser_);
            }
          }
          else
          {
            if (this->severity_parser_ != 0)
            {
              this->severity_parser_->post_DetectedIssueSeverity ();
              this->severity ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "identifiedDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifiedDateTime_parser_)
            {
              this->identifiedDateTime_parser_->pre ();
              ctx.nested_parser (this->identifiedDateTime_parser_);
            }
          }
          else
          {
            if (this->identifiedDateTime_parser_ != 0)
            {
              this->identifiedDateTime_parser_->post_dateTime ();
              this->identifiedDateTime ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "identifiedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifiedPeriod_parser_)
            {
              this->identifiedPeriod_parser_->pre ();
              ctx.nested_parser (this->identifiedPeriod_parser_);
            }
          }
          else
          {
            if (this->identifiedPeriod_parser_ != 0)
            {
              this->identifiedPeriod_parser_->post_Period ();
              this->identifiedPeriod ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "implicated" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->implicated_parser_)
            {
              this->implicated_parser_->pre ();
              ctx.nested_parser (this->implicated_parser_);
            }
          }
          else
          {
            if (this->implicated_parser_ != 0)
            {
              this->implicated_parser_->post_Reference ();
              this->implicated ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "evidence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->evidence_parser_)
            {
              this->evidence_parser_->pre ();
              ctx.nested_parser (this->evidence_parser_);
            }
          }
          else
          {
            if (this->evidence_parser_ != 0)
            {
              this->evidence_parser_->post_DetectedIssue_Evidence ();
              this->evidence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_string ();
              this->detail ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_uri ();
              this->reference ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "mitigation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mitigation_parser_)
            {
              this->mitigation_parser_->pre ();
              ctx.nested_parser (this->mitigation_parser_);
            }
          }
          else
          {
            if (this->mitigation_parser_ != 0)
            {
              this->mitigation_parser_->post_DetectedIssue_Mitigation ();
              this->mitigation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DetectedIssue_Evidence_pskel.
  //
  bool DetectedIssue_Evidence_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "detail" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DetectedIssue_Evidence_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DetectedIssue_Evidence_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DetectedIssue_Evidence_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DetectedIssue_Evidence_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void DetectedIssue_Evidence_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_Reference ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DetectedIssue_Mitigation_pskel.
  //
  bool DetectedIssue_Mitigation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "action" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DetectedIssue_Mitigation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DetectedIssue_Mitigation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DetectedIssue_Mitigation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DetectedIssue_Mitigation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DetectedIssue_Mitigation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_CodeableConcept ();
              this->action ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ObservationStatus_pskel.
  //
  bool ObservationStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ObservationStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for DetectedIssueSeverity_pskel.
  //
  bool DetectedIssueSeverity_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DetectedIssueSeverity_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

