// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "conceptmap-pskel.hxx"

namespace fhir
{
  // ConceptMap_pskel
  //

  void ConceptMap_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void ConceptMap_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ConceptMap_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void ConceptMap_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ConceptMap_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ConceptMap_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ConceptMap_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void ConceptMap_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ConceptMap_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void ConceptMap_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void ConceptMap_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ConceptMap_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void ConceptMap_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void ConceptMap_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void ConceptMap_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void ConceptMap_pskel::
  sourceUri_parser (::fhir::uri_pskel& p)
  {
    this->sourceUri_parser_ = &p;
  }

  void ConceptMap_pskel::
  sourceCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->sourceCanonical_parser_ = &p;
  }

  void ConceptMap_pskel::
  targetUri_parser (::fhir::uri_pskel& p)
  {
    this->targetUri_parser_ = &p;
  }

  void ConceptMap_pskel::
  targetCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->targetCanonical_parser_ = &p;
  }

  void ConceptMap_pskel::
  group_parser (::fhir::ConceptMap_Group_pskel& p)
  {
    this->group_parser_ = &p;
  }

  void ConceptMap_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::markdown_pskel& copyright,
           ::fhir::uri_pskel& sourceUri,
           ::fhir::canonical_pskel& sourceCanonical,
           ::fhir::uri_pskel& targetUri,
           ::fhir::canonical_pskel& targetCanonical,
           ::fhir::ConceptMap_Group_pskel& group)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->copyright_parser_ = &copyright;
    this->sourceUri_parser_ = &sourceUri;
    this->sourceCanonical_parser_ = &sourceCanonical;
    this->targetUri_parser_ = &targetUri;
    this->targetCanonical_parser_ = &targetCanonical;
    this->group_parser_ = &group;
  }

  ConceptMap_pskel::
  ConceptMap_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ConceptMap_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    sourceUri_parser_ (0),
    sourceCanonical_parser_ (0),
    targetUri_parser_ (0),
    targetCanonical_parser_ (0),
    group_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ConceptMap_pskel::
  ConceptMap_pskel (ConceptMap_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ConceptMap_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    sourceUri_parser_ (0),
    sourceCanonical_parser_ (0),
    targetUri_parser_ (0),
    targetCanonical_parser_ (0),
    group_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ConceptMap_Group_pskel
  //

  void ConceptMap_Group_pskel::
  source_parser (::fhir::uri_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void ConceptMap_Group_pskel::
  sourceVersion_parser (::fhir::string_pskel& p)
  {
    this->sourceVersion_parser_ = &p;
  }

  void ConceptMap_Group_pskel::
  target_parser (::fhir::uri_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void ConceptMap_Group_pskel::
  targetVersion_parser (::fhir::string_pskel& p)
  {
    this->targetVersion_parser_ = &p;
  }

  void ConceptMap_Group_pskel::
  element_parser (::fhir::ConceptMap_Element_pskel& p)
  {
    this->element_parser_ = &p;
  }

  void ConceptMap_Group_pskel::
  unmapped_parser (::fhir::ConceptMap_Unmapped_pskel& p)
  {
    this->unmapped_parser_ = &p;
  }

  void ConceptMap_Group_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& source,
           ::fhir::string_pskel& sourceVersion,
           ::fhir::uri_pskel& target,
           ::fhir::string_pskel& targetVersion,
           ::fhir::ConceptMap_Element_pskel& element,
           ::fhir::ConceptMap_Unmapped_pskel& unmapped)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->source_parser_ = &source;
    this->sourceVersion_parser_ = &sourceVersion;
    this->target_parser_ = &target;
    this->targetVersion_parser_ = &targetVersion;
    this->element_parser_ = &element;
    this->unmapped_parser_ = &unmapped;
  }

  ConceptMap_Group_pskel::
  ConceptMap_Group_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ConceptMap_Group_impl_ (0),
    source_parser_ (0),
    sourceVersion_parser_ (0),
    target_parser_ (0),
    targetVersion_parser_ (0),
    element_parser_ (0),
    unmapped_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ConceptMap_Group_pskel::
  ConceptMap_Group_pskel (ConceptMap_Group_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ConceptMap_Group_impl_ (impl),
    source_parser_ (0),
    sourceVersion_parser_ (0),
    target_parser_ (0),
    targetVersion_parser_ (0),
    element_parser_ (0),
    unmapped_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ConceptMap_Element_pskel
  //

  void ConceptMap_Element_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ConceptMap_Element_pskel::
  display_parser (::fhir::string_pskel& p)
  {
    this->display_parser_ = &p;
  }

  void ConceptMap_Element_pskel::
  target_parser (::fhir::ConceptMap_Target_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void ConceptMap_Element_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::string_pskel& display,
           ::fhir::ConceptMap_Target_pskel& target)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->display_parser_ = &display;
    this->target_parser_ = &target;
  }

  ConceptMap_Element_pskel::
  ConceptMap_Element_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ConceptMap_Element_impl_ (0),
    code_parser_ (0),
    display_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ConceptMap_Element_pskel::
  ConceptMap_Element_pskel (ConceptMap_Element_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ConceptMap_Element_impl_ (impl),
    code_parser_ (0),
    display_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ConceptMap_Target_pskel
  //

  void ConceptMap_Target_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ConceptMap_Target_pskel::
  display_parser (::fhir::string_pskel& p)
  {
    this->display_parser_ = &p;
  }

  void ConceptMap_Target_pskel::
  equivalence_parser (::fhir::ConceptMapEquivalence_pskel& p)
  {
    this->equivalence_parser_ = &p;
  }

  void ConceptMap_Target_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void ConceptMap_Target_pskel::
  dependsOn_parser (::fhir::ConceptMap_DependsOn_pskel& p)
  {
    this->dependsOn_parser_ = &p;
  }

  void ConceptMap_Target_pskel::
  product_parser (::fhir::ConceptMap_DependsOn_pskel& p)
  {
    this->product_parser_ = &p;
  }

  void ConceptMap_Target_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::string_pskel& display,
           ::fhir::ConceptMapEquivalence_pskel& equivalence,
           ::fhir::string_pskel& comment,
           ::fhir::ConceptMap_DependsOn_pskel& dependsOn,
           ::fhir::ConceptMap_DependsOn_pskel& product)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->display_parser_ = &display;
    this->equivalence_parser_ = &equivalence;
    this->comment_parser_ = &comment;
    this->dependsOn_parser_ = &dependsOn;
    this->product_parser_ = &product;
  }

  ConceptMap_Target_pskel::
  ConceptMap_Target_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ConceptMap_Target_impl_ (0),
    code_parser_ (0),
    display_parser_ (0),
    equivalence_parser_ (0),
    comment_parser_ (0),
    dependsOn_parser_ (0),
    product_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ConceptMap_Target_pskel::
  ConceptMap_Target_pskel (ConceptMap_Target_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ConceptMap_Target_impl_ (impl),
    code_parser_ (0),
    display_parser_ (0),
    equivalence_parser_ (0),
    comment_parser_ (0),
    dependsOn_parser_ (0),
    product_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ConceptMap_DependsOn_pskel
  //

  void ConceptMap_DependsOn_pskel::
  property_parser (::fhir::uri_pskel& p)
  {
    this->property_parser_ = &p;
  }

  void ConceptMap_DependsOn_pskel::
  system_parser (::fhir::canonical_pskel& p)
  {
    this->system_parser_ = &p;
  }

  void ConceptMap_DependsOn_pskel::
  value_parser (::fhir::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ConceptMap_DependsOn_pskel::
  display_parser (::fhir::string_pskel& p)
  {
    this->display_parser_ = &p;
  }

  void ConceptMap_DependsOn_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& property,
           ::fhir::canonical_pskel& system,
           ::fhir::string_pskel& value,
           ::fhir::string_pskel& display)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->property_parser_ = &property;
    this->system_parser_ = &system;
    this->value_parser_ = &value;
    this->display_parser_ = &display;
  }

  ConceptMap_DependsOn_pskel::
  ConceptMap_DependsOn_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ConceptMap_DependsOn_impl_ (0),
    property_parser_ (0),
    system_parser_ (0),
    value_parser_ (0),
    display_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ConceptMap_DependsOn_pskel::
  ConceptMap_DependsOn_pskel (ConceptMap_DependsOn_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ConceptMap_DependsOn_impl_ (impl),
    property_parser_ (0),
    system_parser_ (0),
    value_parser_ (0),
    display_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ConceptMap_Unmapped_pskel
  //

  void ConceptMap_Unmapped_pskel::
  mode_parser (::fhir::ConceptMapGroupUnmappedMode_pskel& p)
  {
    this->mode_parser_ = &p;
  }

  void ConceptMap_Unmapped_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ConceptMap_Unmapped_pskel::
  display_parser (::fhir::string_pskel& p)
  {
    this->display_parser_ = &p;
  }

  void ConceptMap_Unmapped_pskel::
  url_parser (::fhir::canonical_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void ConceptMap_Unmapped_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ConceptMapGroupUnmappedMode_pskel& mode,
           ::fhir::code_pskel& code,
           ::fhir::string_pskel& display,
           ::fhir::canonical_pskel& url)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->mode_parser_ = &mode;
    this->code_parser_ = &code;
    this->display_parser_ = &display;
    this->url_parser_ = &url;
  }

  ConceptMap_Unmapped_pskel::
  ConceptMap_Unmapped_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ConceptMap_Unmapped_impl_ (0),
    mode_parser_ (0),
    code_parser_ (0),
    display_parser_ (0),
    url_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ConceptMap_Unmapped_pskel::
  ConceptMap_Unmapped_pskel (ConceptMap_Unmapped_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ConceptMap_Unmapped_impl_ (impl),
    mode_parser_ (0),
    code_parser_ (0),
    display_parser_ (0),
    url_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ConceptMapGroupUnmappedMode_list_pskel
  //

  ConceptMapGroupUnmappedMode_list_pskel::
  ConceptMapGroupUnmappedMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ConceptMapGroupUnmappedMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ConceptMapGroupUnmappedMode_list_pskel_enums_, 3UL);
  }

  ConceptMapGroupUnmappedMode_list_pskel::
  ConceptMapGroupUnmappedMode_list_pskel (ConceptMapGroupUnmappedMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ConceptMapGroupUnmappedMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ConceptMapGroupUnmappedMode_list_pskel_enums_, 3UL);
  }

  // ConceptMapGroupUnmappedMode_pskel
  //

  void ConceptMapGroupUnmappedMode_pskel::
  value_parser (::fhir::ConceptMapGroupUnmappedMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ConceptMapGroupUnmappedMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ConceptMapGroupUnmappedMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ConceptMapGroupUnmappedMode_pskel::
  ConceptMapGroupUnmappedMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ConceptMapGroupUnmappedMode_impl_ (0),
    value_parser_ (0)
  {
  }

  ConceptMapGroupUnmappedMode_pskel::
  ConceptMapGroupUnmappedMode_pskel (ConceptMapGroupUnmappedMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ConceptMapGroupUnmappedMode_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ConceptMap_pskel
  //

  void ConceptMap_pskel::
  url ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->url ();
  }

  void ConceptMap_pskel::
  identifier ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->identifier ();
  }

  void ConceptMap_pskel::
  version ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->version ();
  }

  void ConceptMap_pskel::
  name ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->name ();
  }

  void ConceptMap_pskel::
  title ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->title ();
  }

  void ConceptMap_pskel::
  status ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->status ();
  }

  void ConceptMap_pskel::
  experimental ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->experimental ();
  }

  void ConceptMap_pskel::
  date ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->date ();
  }

  void ConceptMap_pskel::
  publisher ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->publisher ();
  }

  void ConceptMap_pskel::
  contact ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->contact ();
  }

  void ConceptMap_pskel::
  description ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->description ();
  }

  void ConceptMap_pskel::
  useContext ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->useContext ();
  }

  void ConceptMap_pskel::
  jurisdiction ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->jurisdiction ();
  }

  void ConceptMap_pskel::
  purpose ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->purpose ();
  }

  void ConceptMap_pskel::
  copyright ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->copyright ();
  }

  void ConceptMap_pskel::
  sourceUri ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->sourceUri ();
  }

  void ConceptMap_pskel::
  sourceCanonical ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->sourceCanonical ();
  }

  void ConceptMap_pskel::
  targetUri ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->targetUri ();
  }

  void ConceptMap_pskel::
  targetCanonical ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->targetCanonical ();
  }

  void ConceptMap_pskel::
  group ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->group ();
  }

  void ConceptMap_pskel::
  post_ConceptMap ()
  {
    if (this->ConceptMap_impl_)
      this->ConceptMap_impl_->post_ConceptMap ();
    else
      post_DomainResource ();
  }

  void ConceptMap_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->sourceUri_parser_)
      this->sourceUri_parser_->_reset ();

    if (this->sourceCanonical_parser_)
      this->sourceCanonical_parser_->_reset ();

    if (this->targetUri_parser_)
      this->targetUri_parser_->_reset ();

    if (this->targetCanonical_parser_)
      this->targetCanonical_parser_->_reset ();

    if (this->group_parser_)
      this->group_parser_->_reset ();

    this->resetting_ = false;
  }

  // ConceptMap_Group_pskel
  //

  void ConceptMap_Group_pskel::
  source ()
  {
    if (this->ConceptMap_Group_impl_)
      this->ConceptMap_Group_impl_->source ();
  }

  void ConceptMap_Group_pskel::
  sourceVersion ()
  {
    if (this->ConceptMap_Group_impl_)
      this->ConceptMap_Group_impl_->sourceVersion ();
  }

  void ConceptMap_Group_pskel::
  target ()
  {
    if (this->ConceptMap_Group_impl_)
      this->ConceptMap_Group_impl_->target ();
  }

  void ConceptMap_Group_pskel::
  targetVersion ()
  {
    if (this->ConceptMap_Group_impl_)
      this->ConceptMap_Group_impl_->targetVersion ();
  }

  void ConceptMap_Group_pskel::
  element ()
  {
    if (this->ConceptMap_Group_impl_)
      this->ConceptMap_Group_impl_->element ();
  }

  void ConceptMap_Group_pskel::
  unmapped ()
  {
    if (this->ConceptMap_Group_impl_)
      this->ConceptMap_Group_impl_->unmapped ();
  }

  void ConceptMap_Group_pskel::
  post_ConceptMap_Group ()
  {
    if (this->ConceptMap_Group_impl_)
      this->ConceptMap_Group_impl_->post_ConceptMap_Group ();
    else
      post_BackboneElement ();
  }

  void ConceptMap_Group_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->sourceVersion_parser_)
      this->sourceVersion_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    if (this->targetVersion_parser_)
      this->targetVersion_parser_->_reset ();

    if (this->element_parser_)
      this->element_parser_->_reset ();

    if (this->unmapped_parser_)
      this->unmapped_parser_->_reset ();

    this->resetting_ = false;
  }

  // ConceptMap_Element_pskel
  //

  void ConceptMap_Element_pskel::
  code ()
  {
    if (this->ConceptMap_Element_impl_)
      this->ConceptMap_Element_impl_->code ();
  }

  void ConceptMap_Element_pskel::
  display ()
  {
    if (this->ConceptMap_Element_impl_)
      this->ConceptMap_Element_impl_->display ();
  }

  void ConceptMap_Element_pskel::
  target ()
  {
    if (this->ConceptMap_Element_impl_)
      this->ConceptMap_Element_impl_->target ();
  }

  void ConceptMap_Element_pskel::
  post_ConceptMap_Element ()
  {
    if (this->ConceptMap_Element_impl_)
      this->ConceptMap_Element_impl_->post_ConceptMap_Element ();
    else
      post_BackboneElement ();
  }

  void ConceptMap_Element_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->display_parser_)
      this->display_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    this->resetting_ = false;
  }

  // ConceptMap_Target_pskel
  //

  void ConceptMap_Target_pskel::
  code ()
  {
    if (this->ConceptMap_Target_impl_)
      this->ConceptMap_Target_impl_->code ();
  }

  void ConceptMap_Target_pskel::
  display ()
  {
    if (this->ConceptMap_Target_impl_)
      this->ConceptMap_Target_impl_->display ();
  }

  void ConceptMap_Target_pskel::
  equivalence ()
  {
    if (this->ConceptMap_Target_impl_)
      this->ConceptMap_Target_impl_->equivalence ();
  }

  void ConceptMap_Target_pskel::
  comment ()
  {
    if (this->ConceptMap_Target_impl_)
      this->ConceptMap_Target_impl_->comment ();
  }

  void ConceptMap_Target_pskel::
  dependsOn ()
  {
    if (this->ConceptMap_Target_impl_)
      this->ConceptMap_Target_impl_->dependsOn ();
  }

  void ConceptMap_Target_pskel::
  product ()
  {
    if (this->ConceptMap_Target_impl_)
      this->ConceptMap_Target_impl_->product ();
  }

  void ConceptMap_Target_pskel::
  post_ConceptMap_Target ()
  {
    if (this->ConceptMap_Target_impl_)
      this->ConceptMap_Target_impl_->post_ConceptMap_Target ();
    else
      post_BackboneElement ();
  }

  void ConceptMap_Target_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->display_parser_)
      this->display_parser_->_reset ();

    if (this->equivalence_parser_)
      this->equivalence_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->dependsOn_parser_)
      this->dependsOn_parser_->_reset ();

    if (this->product_parser_)
      this->product_parser_->_reset ();

    this->resetting_ = false;
  }

  // ConceptMap_DependsOn_pskel
  //

  void ConceptMap_DependsOn_pskel::
  property ()
  {
    if (this->ConceptMap_DependsOn_impl_)
      this->ConceptMap_DependsOn_impl_->property ();
  }

  void ConceptMap_DependsOn_pskel::
  system ()
  {
    if (this->ConceptMap_DependsOn_impl_)
      this->ConceptMap_DependsOn_impl_->system ();
  }

  void ConceptMap_DependsOn_pskel::
  value ()
  {
    if (this->ConceptMap_DependsOn_impl_)
      this->ConceptMap_DependsOn_impl_->value ();
  }

  void ConceptMap_DependsOn_pskel::
  display ()
  {
    if (this->ConceptMap_DependsOn_impl_)
      this->ConceptMap_DependsOn_impl_->display ();
  }

  void ConceptMap_DependsOn_pskel::
  post_ConceptMap_DependsOn ()
  {
    if (this->ConceptMap_DependsOn_impl_)
      this->ConceptMap_DependsOn_impl_->post_ConceptMap_DependsOn ();
    else
      post_BackboneElement ();
  }

  void ConceptMap_DependsOn_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->property_parser_)
      this->property_parser_->_reset ();

    if (this->system_parser_)
      this->system_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->display_parser_)
      this->display_parser_->_reset ();

    this->resetting_ = false;
  }

  // ConceptMap_Unmapped_pskel
  //

  void ConceptMap_Unmapped_pskel::
  mode ()
  {
    if (this->ConceptMap_Unmapped_impl_)
      this->ConceptMap_Unmapped_impl_->mode ();
  }

  void ConceptMap_Unmapped_pskel::
  code ()
  {
    if (this->ConceptMap_Unmapped_impl_)
      this->ConceptMap_Unmapped_impl_->code ();
  }

  void ConceptMap_Unmapped_pskel::
  display ()
  {
    if (this->ConceptMap_Unmapped_impl_)
      this->ConceptMap_Unmapped_impl_->display ();
  }

  void ConceptMap_Unmapped_pskel::
  url ()
  {
    if (this->ConceptMap_Unmapped_impl_)
      this->ConceptMap_Unmapped_impl_->url ();
  }

  void ConceptMap_Unmapped_pskel::
  post_ConceptMap_Unmapped ()
  {
    if (this->ConceptMap_Unmapped_impl_)
      this->ConceptMap_Unmapped_impl_->post_ConceptMap_Unmapped ();
    else
      post_BackboneElement ();
  }

  void ConceptMap_Unmapped_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->mode_parser_)
      this->mode_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->display_parser_)
      this->display_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    this->resetting_ = false;
  }

  // ConceptMapGroupUnmappedMode_list_pskel
  //

  void ConceptMapGroupUnmappedMode_list_pskel::
  post_ConceptMapGroupUnmappedMode_list ()
  {
    if (this->ConceptMapGroupUnmappedMode_list_impl_)
      this->ConceptMapGroupUnmappedMode_list_impl_->post_ConceptMapGroupUnmappedMode_list ();
    else
      post_code_primitive ();
  }

  const char* const ConceptMapGroupUnmappedMode_list_pskel::_xsde_ConceptMapGroupUnmappedMode_list_pskel_enums_[3UL] = 
  {
    "fixed",
    "other-map",
    "provided"
  };

  // ConceptMapGroupUnmappedMode_pskel
  //

  void ConceptMapGroupUnmappedMode_pskel::
  value ()
  {
    if (this->ConceptMapGroupUnmappedMode_impl_)
      this->ConceptMapGroupUnmappedMode_impl_->value ();
  }

  void ConceptMapGroupUnmappedMode_pskel::
  post_ConceptMapGroupUnmappedMode ()
  {
    if (this->ConceptMapGroupUnmappedMode_impl_)
      this->ConceptMapGroupUnmappedMode_impl_->post_ConceptMapGroupUnmappedMode ();
    else
      post_Element ();
  }

  void ConceptMapGroupUnmappedMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ConceptMap_pskel.
  //
  bool ConceptMap_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ConceptMap_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ConceptMap_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ConceptMap_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ConceptMap_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ConceptMap_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "sourceUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceUri_parser_)
            {
              this->sourceUri_parser_->pre ();
              ctx.nested_parser (this->sourceUri_parser_);
            }
          }
          else
          {
            if (this->sourceUri_parser_ != 0)
            {
              this->sourceUri_parser_->post_uri ();
              this->sourceUri ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "sourceCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceCanonical_parser_)
            {
              this->sourceCanonical_parser_->pre ();
              ctx.nested_parser (this->sourceCanonical_parser_);
            }
          }
          else
          {
            if (this->sourceCanonical_parser_ != 0)
            {
              this->sourceCanonical_parser_->post_canonical ();
              this->sourceCanonical ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "targetUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetUri_parser_)
            {
              this->targetUri_parser_->pre ();
              ctx.nested_parser (this->targetUri_parser_);
            }
          }
          else
          {
            if (this->targetUri_parser_ != 0)
            {
              this->targetUri_parser_->post_uri ();
              this->targetUri ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "targetCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetCanonical_parser_)
            {
              this->targetCanonical_parser_->pre ();
              ctx.nested_parser (this->targetCanonical_parser_);
            }
          }
          else
          {
            if (this->targetCanonical_parser_ != 0)
            {
              this->targetCanonical_parser_->post_canonical ();
              this->targetCanonical ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "group" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->group_parser_)
            {
              this->group_parser_->pre ();
              ctx.nested_parser (this->group_parser_);
            }
          }
          else
          {
            if (this->group_parser_ != 0)
            {
              this->group_parser_->post_ConceptMap_Group ();
              this->group ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ConceptMap_Group_pskel.
  //
  bool ConceptMap_Group_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "source" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "sourceVersion" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "target" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "targetVersion" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "element" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ConceptMap_Group_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ConceptMap_Group_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ConceptMap_Group_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ConceptMap_Group_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ConceptMap_Group_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_uri ();
              this->source ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "sourceVersion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceVersion_parser_)
            {
              this->sourceVersion_parser_->pre ();
              ctx.nested_parser (this->sourceVersion_parser_);
            }
          }
          else
          {
            if (this->sourceVersion_parser_ != 0)
            {
              this->sourceVersion_parser_->post_string ();
              this->sourceVersion ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_uri ();
              this->target ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "targetVersion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetVersion_parser_)
            {
              this->targetVersion_parser_->pre ();
              ctx.nested_parser (this->targetVersion_parser_);
            }
          }
          else
          {
            if (this->targetVersion_parser_ != 0)
            {
              this->targetVersion_parser_->post_string ();
              this->targetVersion ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "element" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->element_parser_)
            {
              this->element_parser_->pre ();
              ctx.nested_parser (this->element_parser_);
            }
          }
          else
          {
            if (this->element_parser_ != 0)
            {
              this->element_parser_->post_ConceptMap_Element ();
              this->element ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "unmapped" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unmapped_parser_)
            {
              this->unmapped_parser_->pre ();
              ctx.nested_parser (this->unmapped_parser_);
            }
          }
          else
          {
            if (this->unmapped_parser_ != 0)
            {
              this->unmapped_parser_->post_ConceptMap_Unmapped ();
              this->unmapped ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ConceptMap_Element_pskel.
  //
  bool ConceptMap_Element_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "display" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "target" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ConceptMap_Element_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ConceptMap_Element_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ConceptMap_Element_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ConceptMap_Element_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ConceptMap_Element_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "display" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->display_parser_)
            {
              this->display_parser_->pre ();
              ctx.nested_parser (this->display_parser_);
            }
          }
          else
          {
            if (this->display_parser_ != 0)
            {
              this->display_parser_->post_string ();
              this->display ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_ConceptMap_Target ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ConceptMap_Target_pskel.
  //
  bool ConceptMap_Target_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "display" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "equivalence" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ConceptMap_Target_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ConceptMap_Target_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ConceptMap_Target_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ConceptMap_Target_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ConceptMap_Target_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "display" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->display_parser_)
            {
              this->display_parser_->pre ();
              ctx.nested_parser (this->display_parser_);
            }
          }
          else
          {
            if (this->display_parser_ != 0)
            {
              this->display_parser_->post_string ();
              this->display ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "equivalence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->equivalence_parser_)
            {
              this->equivalence_parser_->pre ();
              ctx.nested_parser (this->equivalence_parser_);
            }
          }
          else
          {
            if (this->equivalence_parser_ != 0)
            {
              this->equivalence_parser_->post_ConceptMapEquivalence ();
              this->equivalence ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "dependsOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dependsOn_parser_)
            {
              this->dependsOn_parser_->pre ();
              ctx.nested_parser (this->dependsOn_parser_);
            }
          }
          else
          {
            if (this->dependsOn_parser_ != 0)
            {
              this->dependsOn_parser_->post_ConceptMap_DependsOn ();
              this->dependsOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "product" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->product_parser_)
            {
              this->product_parser_->pre ();
              ctx.nested_parser (this->product_parser_);
            }
          }
          else
          {
            if (this->product_parser_ != 0)
            {
              this->product_parser_->post_ConceptMap_DependsOn ();
              this->product ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ConceptMap_DependsOn_pskel.
  //
  bool ConceptMap_DependsOn_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "property" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ConceptMap_DependsOn_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ConceptMap_DependsOn_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ConceptMap_DependsOn_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ConceptMap_DependsOn_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ConceptMap_DependsOn_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "property" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->property_parser_)
            {
              this->property_parser_->pre ();
              ctx.nested_parser (this->property_parser_);
            }
          }
          else
          {
            if (this->property_parser_ != 0)
            {
              this->property_parser_->post_uri ();
              this->property ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "system" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->system_parser_)
            {
              this->system_parser_->pre ();
              ctx.nested_parser (this->system_parser_);
            }
          }
          else
          {
            if (this->system_parser_ != 0)
            {
              this->system_parser_->post_canonical ();
              this->system ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_string ();
              this->value ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "display" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->display_parser_)
            {
              this->display_parser_->pre ();
              ctx.nested_parser (this->display_parser_);
            }
          }
          else
          {
            if (this->display_parser_ != 0)
            {
              this->display_parser_->post_string ();
              this->display ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ConceptMap_Unmapped_pskel.
  //
  bool ConceptMap_Unmapped_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ConceptMap_Unmapped_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ConceptMap_Unmapped_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ConceptMap_Unmapped_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ConceptMap_Unmapped_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ConceptMap_Unmapped_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mode_parser_)
            {
              this->mode_parser_->pre ();
              ctx.nested_parser (this->mode_parser_);
            }
          }
          else
          {
            if (this->mode_parser_ != 0)
            {
              this->mode_parser_->post_ConceptMapGroupUnmappedMode ();
              this->mode ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "display" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->display_parser_)
            {
              this->display_parser_->pre ();
              ctx.nested_parser (this->display_parser_);
            }
          }
          else
          {
            if (this->display_parser_ != 0)
            {
              this->display_parser_->post_string ();
              this->display ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_canonical ();
              this->url ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ConceptMapGroupUnmappedMode_pskel.
  //
  bool ConceptMapGroupUnmappedMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ConceptMapGroupUnmappedMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

