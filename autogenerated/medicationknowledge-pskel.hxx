// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef MEDICATIONKNOWLEDGE_PSKEL_HXX
#define MEDICATIONKNOWLEDGE_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class MedicationKnowledge_pskel;
  class MedicationKnowledge_RelatedMedicationKnowledge_pskel;
  class MedicationKnowledge_Monograph_pskel;
  class MedicationKnowledge_Ingredient_pskel;
  class MedicationKnowledge_Cost_pskel;
  class MedicationKnowledge_MonitoringProgram_pskel;
  class MedicationKnowledge_AdministrationGuidelines_pskel;
  class MedicationKnowledge_Dosage_pskel;
  class MedicationKnowledge_PatientCharacteristics_pskel;
  class MedicationKnowledge_MedicineClassification_pskel;
  class MedicationKnowledge_Packaging_pskel;
  class MedicationKnowledge_DrugCharacteristic_pskel;
  class MedicationKnowledge_Regulatory_pskel;
  class MedicationKnowledge_Substitution_pskel;
  class MedicationKnowledge_Schedule_pskel;
  class MedicationKnowledge_MaxDispense_pskel;
  class MedicationKnowledge_Kinetics_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class MedicationKnowledge_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    status ();

    virtual void
    manufacturer ();

    virtual void
    doseForm ();

    virtual void
    amount ();

    virtual void
    synonym ();

    virtual void
    relatedMedicationKnowledge ();

    virtual void
    associatedMedication ();

    virtual void
    productType ();

    virtual void
    monograph ();

    virtual void
    ingredient ();

    virtual void
    preparationInstruction ();

    virtual void
    intendedRoute ();

    virtual void
    cost ();

    virtual void
    monitoringProgram ();

    virtual void
    administrationGuidelines ();

    virtual void
    medicineClassification ();

    virtual void
    packaging ();

    virtual void
    drugCharacteristic ();

    virtual void
    contraindication ();

    virtual void
    regulatory ();

    virtual void
    kinetics ();

    virtual void
    post_MedicationKnowledge ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::code_pskel& /* status */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::CodeableConcept_pskel& /* doseForm */,
             ::fhir::Quantity_pskel& /* amount */,
             ::fhir::string_pskel& /* synonym */,
             ::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel& /* relatedMedicationKnowledge */,
             ::fhir::Reference_pskel& /* associatedMedication */,
             ::fhir::CodeableConcept_pskel& /* productType */,
             ::fhir::MedicationKnowledge_Monograph_pskel& /* monograph */,
             ::fhir::MedicationKnowledge_Ingredient_pskel& /* ingredient */,
             ::fhir::markdown_pskel& /* preparationInstruction */,
             ::fhir::CodeableConcept_pskel& /* intendedRoute */,
             ::fhir::MedicationKnowledge_Cost_pskel& /* cost */,
             ::fhir::MedicationKnowledge_MonitoringProgram_pskel& /* monitoringProgram */,
             ::fhir::MedicationKnowledge_AdministrationGuidelines_pskel& /* administrationGuidelines */,
             ::fhir::MedicationKnowledge_MedicineClassification_pskel& /* medicineClassification */,
             ::fhir::MedicationKnowledge_Packaging_pskel& /* packaging */,
             ::fhir::MedicationKnowledge_DrugCharacteristic_pskel& /* drugCharacteristic */,
             ::fhir::Reference_pskel& /* contraindication */,
             ::fhir::MedicationKnowledge_Regulatory_pskel& /* regulatory */,
             ::fhir::MedicationKnowledge_Kinetics_pskel& /* kinetics */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::code_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    doseForm_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Quantity_pskel&);

    void
    synonym_parser (::fhir::string_pskel&);

    void
    relatedMedicationKnowledge_parser (::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel&);

    void
    associatedMedication_parser (::fhir::Reference_pskel&);

    void
    productType_parser (::fhir::CodeableConcept_pskel&);

    void
    monograph_parser (::fhir::MedicationKnowledge_Monograph_pskel&);

    void
    ingredient_parser (::fhir::MedicationKnowledge_Ingredient_pskel&);

    void
    preparationInstruction_parser (::fhir::markdown_pskel&);

    void
    intendedRoute_parser (::fhir::CodeableConcept_pskel&);

    void
    cost_parser (::fhir::MedicationKnowledge_Cost_pskel&);

    void
    monitoringProgram_parser (::fhir::MedicationKnowledge_MonitoringProgram_pskel&);

    void
    administrationGuidelines_parser (::fhir::MedicationKnowledge_AdministrationGuidelines_pskel&);

    void
    medicineClassification_parser (::fhir::MedicationKnowledge_MedicineClassification_pskel&);

    void
    packaging_parser (::fhir::MedicationKnowledge_Packaging_pskel&);

    void
    drugCharacteristic_parser (::fhir::MedicationKnowledge_DrugCharacteristic_pskel&);

    void
    contraindication_parser (::fhir::Reference_pskel&);

    void
    regulatory_parser (::fhir::MedicationKnowledge_Regulatory_pskel&);

    void
    kinetics_parser (::fhir::MedicationKnowledge_Kinetics_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_pskel* MedicationKnowledge_impl_;
    MedicationKnowledge_pskel (MedicationKnowledge_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::code_pskel* status_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::CodeableConcept_pskel* doseForm_parser_;
    ::fhir::Quantity_pskel* amount_parser_;
    ::fhir::string_pskel* synonym_parser_;
    ::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel* relatedMedicationKnowledge_parser_;
    ::fhir::Reference_pskel* associatedMedication_parser_;
    ::fhir::CodeableConcept_pskel* productType_parser_;
    ::fhir::MedicationKnowledge_Monograph_pskel* monograph_parser_;
    ::fhir::MedicationKnowledge_Ingredient_pskel* ingredient_parser_;
    ::fhir::markdown_pskel* preparationInstruction_parser_;
    ::fhir::CodeableConcept_pskel* intendedRoute_parser_;
    ::fhir::MedicationKnowledge_Cost_pskel* cost_parser_;
    ::fhir::MedicationKnowledge_MonitoringProgram_pskel* monitoringProgram_parser_;
    ::fhir::MedicationKnowledge_AdministrationGuidelines_pskel* administrationGuidelines_parser_;
    ::fhir::MedicationKnowledge_MedicineClassification_pskel* medicineClassification_parser_;
    ::fhir::MedicationKnowledge_Packaging_pskel* packaging_parser_;
    ::fhir::MedicationKnowledge_DrugCharacteristic_pskel* drugCharacteristic_parser_;
    ::fhir::Reference_pskel* contraindication_parser_;
    ::fhir::MedicationKnowledge_Regulatory_pskel* regulatory_parser_;
    ::fhir::MedicationKnowledge_Kinetics_pskel* kinetics_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_RelatedMedicationKnowledge_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    reference ();

    virtual void
    post_MedicationKnowledge_RelatedMedicationKnowledge ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    reference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_RelatedMedicationKnowledge_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_RelatedMedicationKnowledge_pskel* MedicationKnowledge_RelatedMedicationKnowledge_impl_;
    MedicationKnowledge_RelatedMedicationKnowledge_pskel (MedicationKnowledge_RelatedMedicationKnowledge_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Monograph_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    source ();

    virtual void
    post_MedicationKnowledge_Monograph ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Monograph_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Monograph_pskel* MedicationKnowledge_Monograph_impl_;
    MedicationKnowledge_Monograph_pskel (MedicationKnowledge_Monograph_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Monograph_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Ingredient_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemCodeableConcept ();

    virtual void
    itemReference ();

    virtual void
    isActive ();

    virtual void
    strength ();

    virtual void
    post_MedicationKnowledge_Ingredient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* itemCodeableConcept */,
             ::fhir::Reference_pskel& /* itemReference */,
             ::fhir::boolean_pskel& /* isActive */,
             ::fhir::Ratio_pskel& /* strength */);

    // Individual element parsers.
    //
    void
    itemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    itemReference_parser (::fhir::Reference_pskel&);

    void
    isActive_parser (::fhir::boolean_pskel&);

    void
    strength_parser (::fhir::Ratio_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Ingredient_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Ingredient_pskel* MedicationKnowledge_Ingredient_impl_;
    MedicationKnowledge_Ingredient_pskel (MedicationKnowledge_Ingredient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* itemCodeableConcept_parser_;
    ::fhir::Reference_pskel* itemReference_parser_;
    ::fhir::boolean_pskel* isActive_parser_;
    ::fhir::Ratio_pskel* strength_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Ingredient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Cost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    source ();

    virtual void
    cost ();

    virtual void
    post_MedicationKnowledge_Cost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* source */,
             ::fhir::Money_pskel& /* cost */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::string_pskel&);

    void
    cost_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Cost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Cost_pskel* MedicationKnowledge_Cost_impl_;
    MedicationKnowledge_Cost_pskel (MedicationKnowledge_Cost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* source_parser_;
    ::fhir::Money_pskel* cost_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Cost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_MonitoringProgram_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    name ();

    virtual void
    post_MedicationKnowledge_MonitoringProgram ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* name */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_MonitoringProgram_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_MonitoringProgram_pskel* MedicationKnowledge_MonitoringProgram_impl_;
    MedicationKnowledge_MonitoringProgram_pskel (MedicationKnowledge_MonitoringProgram_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_MonitoringProgram_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_AdministrationGuidelines_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    dosage ();

    virtual void
    indicationCodeableConcept ();

    virtual void
    indicationReference ();

    virtual void
    patientCharacteristics ();

    virtual void
    post_MedicationKnowledge_AdministrationGuidelines ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::MedicationKnowledge_Dosage_pskel& /* dosage */,
             ::fhir::CodeableConcept_pskel& /* indicationCodeableConcept */,
             ::fhir::Reference_pskel& /* indicationReference */,
             ::fhir::MedicationKnowledge_PatientCharacteristics_pskel& /* patientCharacteristics */);

    // Individual element parsers.
    //
    void
    dosage_parser (::fhir::MedicationKnowledge_Dosage_pskel&);

    void
    indicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    indicationReference_parser (::fhir::Reference_pskel&);

    void
    patientCharacteristics_parser (::fhir::MedicationKnowledge_PatientCharacteristics_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_AdministrationGuidelines_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_AdministrationGuidelines_pskel* MedicationKnowledge_AdministrationGuidelines_impl_;
    MedicationKnowledge_AdministrationGuidelines_pskel (MedicationKnowledge_AdministrationGuidelines_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::MedicationKnowledge_Dosage_pskel* dosage_parser_;
    ::fhir::CodeableConcept_pskel* indicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* indicationReference_parser_;
    ::fhir::MedicationKnowledge_PatientCharacteristics_pskel* patientCharacteristics_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_AdministrationGuidelines_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Dosage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    dosage ();

    virtual void
    post_MedicationKnowledge_Dosage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Dosage_pskel& /* dosage */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    dosage_parser (::fhir::Dosage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Dosage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Dosage_pskel* MedicationKnowledge_Dosage_impl_;
    MedicationKnowledge_Dosage_pskel (MedicationKnowledge_Dosage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Dosage_pskel* dosage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Dosage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_PatientCharacteristics_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    characteristicCodeableConcept ();

    virtual void
    characteristicQuantity ();

    virtual void
    value ();

    virtual void
    post_MedicationKnowledge_PatientCharacteristics ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* characteristicCodeableConcept */,
             ::fhir::Quantity_pskel& /* characteristicQuantity */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    characteristicCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    characteristicQuantity_parser (::fhir::Quantity_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_PatientCharacteristics_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_PatientCharacteristics_pskel* MedicationKnowledge_PatientCharacteristics_impl_;
    MedicationKnowledge_PatientCharacteristics_pskel (MedicationKnowledge_PatientCharacteristics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* characteristicCodeableConcept_parser_;
    ::fhir::Quantity_pskel* characteristicQuantity_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_PatientCharacteristics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_MedicineClassification_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    classification ();

    virtual void
    post_MedicationKnowledge_MedicineClassification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* classification */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    classification_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_MedicineClassification_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_MedicineClassification_pskel* MedicationKnowledge_MedicineClassification_impl_;
    MedicationKnowledge_MedicineClassification_pskel (MedicationKnowledge_MedicineClassification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* classification_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_MedicineClassification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Packaging_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    quantity ();

    virtual void
    post_MedicationKnowledge_Packaging ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* quantity */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Packaging_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Packaging_pskel* MedicationKnowledge_Packaging_impl_;
    MedicationKnowledge_Packaging_pskel (MedicationKnowledge_Packaging_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Packaging_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_DrugCharacteristic_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueString ();

    virtual void
    valueQuantity ();

    virtual void
    valueBase64Binary ();

    virtual void
    post_MedicationKnowledge_DrugCharacteristic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_DrugCharacteristic_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_DrugCharacteristic_pskel* MedicationKnowledge_DrugCharacteristic_impl_;
    MedicationKnowledge_DrugCharacteristic_pskel (MedicationKnowledge_DrugCharacteristic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_DrugCharacteristic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Regulatory_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    regulatoryAuthority ();

    virtual void
    substitution ();

    virtual void
    schedule ();

    virtual void
    maxDispense ();

    virtual void
    post_MedicationKnowledge_Regulatory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* regulatoryAuthority */,
             ::fhir::MedicationKnowledge_Substitution_pskel& /* substitution */,
             ::fhir::MedicationKnowledge_Schedule_pskel& /* schedule */,
             ::fhir::MedicationKnowledge_MaxDispense_pskel& /* maxDispense */);

    // Individual element parsers.
    //
    void
    regulatoryAuthority_parser (::fhir::Reference_pskel&);

    void
    substitution_parser (::fhir::MedicationKnowledge_Substitution_pskel&);

    void
    schedule_parser (::fhir::MedicationKnowledge_Schedule_pskel&);

    void
    maxDispense_parser (::fhir::MedicationKnowledge_MaxDispense_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Regulatory_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Regulatory_pskel* MedicationKnowledge_Regulatory_impl_;
    MedicationKnowledge_Regulatory_pskel (MedicationKnowledge_Regulatory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* regulatoryAuthority_parser_;
    ::fhir::MedicationKnowledge_Substitution_pskel* substitution_parser_;
    ::fhir::MedicationKnowledge_Schedule_pskel* schedule_parser_;
    ::fhir::MedicationKnowledge_MaxDispense_pskel* maxDispense_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Regulatory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Substitution_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    allowed ();

    virtual void
    post_MedicationKnowledge_Substitution ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::boolean_pskel& /* allowed */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    allowed_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Substitution_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Substitution_pskel* MedicationKnowledge_Substitution_impl_;
    MedicationKnowledge_Substitution_pskel (MedicationKnowledge_Substitution_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::boolean_pskel* allowed_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Substitution_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Schedule_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    schedule ();

    virtual void
    post_MedicationKnowledge_Schedule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* schedule */);

    // Individual element parsers.
    //
    void
    schedule_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Schedule_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Schedule_pskel* MedicationKnowledge_Schedule_impl_;
    MedicationKnowledge_Schedule_pskel (MedicationKnowledge_Schedule_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* schedule_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Schedule_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_MaxDispense_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    quantity ();

    virtual void
    period ();

    virtual void
    post_MedicationKnowledge_MaxDispense ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Duration_pskel& /* period */);

    // Individual element parsers.
    //
    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    period_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_MaxDispense_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_MaxDispense_pskel* MedicationKnowledge_MaxDispense_impl_;
    MedicationKnowledge_MaxDispense_pskel (MedicationKnowledge_MaxDispense_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Duration_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_MaxDispense_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Kinetics_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    areaUnderCurve ();

    virtual void
    lethalDose50 ();

    virtual void
    halfLifePeriod ();

    virtual void
    post_MedicationKnowledge_Kinetics ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* areaUnderCurve */,
             ::fhir::Quantity_pskel& /* lethalDose50 */,
             ::fhir::Duration_pskel& /* halfLifePeriod */);

    // Individual element parsers.
    //
    void
    areaUnderCurve_parser (::fhir::Quantity_pskel&);

    void
    lethalDose50_parser (::fhir::Quantity_pskel&);

    void
    halfLifePeriod_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Kinetics_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Kinetics_pskel* MedicationKnowledge_Kinetics_impl_;
    MedicationKnowledge_Kinetics_pskel (MedicationKnowledge_Kinetics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* areaUnderCurve_parser_;
    ::fhir::Quantity_pskel* lethalDose50_parser_;
    ::fhir::Duration_pskel* halfLifePeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Kinetics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MEDICATIONKNOWLEDGE_PSKEL_HXX
