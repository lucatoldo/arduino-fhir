// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "composition-pskel.hxx"

namespace fhir
{
  // Composition_pskel
  //

  void Composition_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Composition_pskel::
  status_parser (::fhir::CompositionStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Composition_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Composition_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void Composition_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Composition_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void Composition_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void Composition_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void Composition_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void Composition_pskel::
  confidentiality_parser (::fhir::vConfidentialityClassification_pskel& p)
  {
    this->confidentiality_parser_ = &p;
  }

  void Composition_pskel::
  attester_parser (::fhir::Composition_Attester_pskel& p)
  {
    this->attester_parser_ = &p;
  }

  void Composition_pskel::
  custodian_parser (::fhir::Reference_pskel& p)
  {
    this->custodian_parser_ = &p;
  }

  void Composition_pskel::
  relatesTo_parser (::fhir::Composition_RelatesTo_pskel& p)
  {
    this->relatesTo_parser_ = &p;
  }

  void Composition_pskel::
  event_parser (::fhir::Composition_Event_pskel& p)
  {
    this->event_parser_ = &p;
  }

  void Composition_pskel::
  section_parser (::fhir::Composition_Section_pskel& p)
  {
    this->section_parser_ = &p;
  }

  void Composition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CompositionStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& date,
           ::fhir::Reference_pskel& author,
           ::fhir::string_pskel& title,
           ::fhir::vConfidentialityClassification_pskel& confidentiality,
           ::fhir::Composition_Attester_pskel& attester,
           ::fhir::Reference_pskel& custodian,
           ::fhir::Composition_RelatesTo_pskel& relatesTo,
           ::fhir::Composition_Event_pskel& event,
           ::fhir::Composition_Section_pskel& section)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->category_parser_ = &category;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->date_parser_ = &date;
    this->author_parser_ = &author;
    this->title_parser_ = &title;
    this->confidentiality_parser_ = &confidentiality;
    this->attester_parser_ = &attester;
    this->custodian_parser_ = &custodian;
    this->relatesTo_parser_ = &relatesTo;
    this->event_parser_ = &event;
    this->section_parser_ = &section;
  }

  Composition_pskel::
  Composition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Composition_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    category_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    date_parser_ (0),
    author_parser_ (0),
    title_parser_ (0),
    confidentiality_parser_ (0),
    attester_parser_ (0),
    custodian_parser_ (0),
    relatesTo_parser_ (0),
    event_parser_ (0),
    section_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Composition_pskel::
  Composition_pskel (Composition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Composition_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    category_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    date_parser_ (0),
    author_parser_ (0),
    title_parser_ (0),
    confidentiality_parser_ (0),
    attester_parser_ (0),
    custodian_parser_ (0),
    relatesTo_parser_ (0),
    event_parser_ (0),
    section_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Composition_Attester_pskel
  //

  void Composition_Attester_pskel::
  mode_parser (::fhir::CompositionAttestationMode_pskel& p)
  {
    this->mode_parser_ = &p;
  }

  void Composition_Attester_pskel::
  time_parser (::fhir::dateTime_pskel& p)
  {
    this->time_parser_ = &p;
  }

  void Composition_Attester_pskel::
  party_parser (::fhir::Reference_pskel& p)
  {
    this->party_parser_ = &p;
  }

  void Composition_Attester_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CompositionAttestationMode_pskel& mode,
           ::fhir::dateTime_pskel& time,
           ::fhir::Reference_pskel& party)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->mode_parser_ = &mode;
    this->time_parser_ = &time;
    this->party_parser_ = &party;
  }

  Composition_Attester_pskel::
  Composition_Attester_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Composition_Attester_impl_ (0),
    mode_parser_ (0),
    time_parser_ (0),
    party_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Composition_Attester_pskel::
  Composition_Attester_pskel (Composition_Attester_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Composition_Attester_impl_ (impl),
    mode_parser_ (0),
    time_parser_ (0),
    party_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Composition_RelatesTo_pskel
  //

  void Composition_RelatesTo_pskel::
  code_parser (::fhir::DocumentRelationshipType_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Composition_RelatesTo_pskel::
  targetIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->targetIdentifier_parser_ = &p;
  }

  void Composition_RelatesTo_pskel::
  targetReference_parser (::fhir::Reference_pskel& p)
  {
    this->targetReference_parser_ = &p;
  }

  void Composition_RelatesTo_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::DocumentRelationshipType_pskel& code,
           ::fhir::Identifier_pskel& targetIdentifier,
           ::fhir::Reference_pskel& targetReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->targetIdentifier_parser_ = &targetIdentifier;
    this->targetReference_parser_ = &targetReference;
  }

  Composition_RelatesTo_pskel::
  Composition_RelatesTo_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Composition_RelatesTo_impl_ (0),
    code_parser_ (0),
    targetIdentifier_parser_ (0),
    targetReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Composition_RelatesTo_pskel::
  Composition_RelatesTo_pskel (Composition_RelatesTo_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Composition_RelatesTo_impl_ (impl),
    code_parser_ (0),
    targetIdentifier_parser_ (0),
    targetReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Composition_Event_pskel
  //

  void Composition_Event_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Composition_Event_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Composition_Event_pskel::
  detail_parser (::fhir::Reference_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void Composition_Event_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->period_parser_ = &period;
    this->detail_parser_ = &detail;
  }

  Composition_Event_pskel::
  Composition_Event_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Composition_Event_impl_ (0),
    code_parser_ (0),
    period_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Composition_Event_pskel::
  Composition_Event_pskel (Composition_Event_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Composition_Event_impl_ (impl),
    code_parser_ (0),
    period_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Composition_Section_pskel
  //

  void Composition_Section_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void Composition_Section_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Composition_Section_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void Composition_Section_pskel::
  focus_parser (::fhir::Reference_pskel& p)
  {
    this->focus_parser_ = &p;
  }

  void Composition_Section_pskel::
  text_parser (::fhir::Narrative_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void Composition_Section_pskel::
  mode_parser (::fhir::ListMode_pskel& p)
  {
    this->mode_parser_ = &p;
  }

  void Composition_Section_pskel::
  orderedBy_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->orderedBy_parser_ = &p;
  }

  void Composition_Section_pskel::
  entry_parser (::fhir::Reference_pskel& p)
  {
    this->entry_parser_ = &p;
  }

  void Composition_Section_pskel::
  emptyReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->emptyReason_parser_ = &p;
  }

  void Composition_Section_pskel::
  section_parser (::fhir::Composition_Section_pskel& p)
  {
    this->section_parser_ = &p;
  }

  void Composition_Section_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& title,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& author,
           ::fhir::Reference_pskel& focus,
           ::fhir::Narrative_pskel& text,
           ::fhir::ListMode_pskel& mode,
           ::fhir::CodeableConcept_pskel& orderedBy,
           ::fhir::Reference_pskel& entry,
           ::fhir::CodeableConcept_pskel& emptyReason,
           ::fhir::Composition_Section_pskel& section)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->title_parser_ = &title;
    this->code_parser_ = &code;
    this->author_parser_ = &author;
    this->focus_parser_ = &focus;
    this->text_parser_ = &text;
    this->mode_parser_ = &mode;
    this->orderedBy_parser_ = &orderedBy;
    this->entry_parser_ = &entry;
    this->emptyReason_parser_ = &emptyReason;
    this->section_parser_ = &section;
  }

  Composition_Section_pskel::
  Composition_Section_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Composition_Section_impl_ (0),
    title_parser_ (0),
    code_parser_ (0),
    author_parser_ (0),
    focus_parser_ (0),
    text_parser_ (0),
    mode_parser_ (0),
    orderedBy_parser_ (0),
    entry_parser_ (0),
    emptyReason_parser_ (0),
    section_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Composition_Section_pskel::
  Composition_Section_pskel (Composition_Section_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Composition_Section_impl_ (impl),
    title_parser_ (0),
    code_parser_ (0),
    author_parser_ (0),
    focus_parser_ (0),
    text_parser_ (0),
    mode_parser_ (0),
    orderedBy_parser_ (0),
    entry_parser_ (0),
    emptyReason_parser_ (0),
    section_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // vConfidentialityClassification_list_pskel
  //

  vConfidentialityClassification_list_pskel::
  vConfidentialityClassification_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    vConfidentialityClassification_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_vConfidentialityClassification_list_pskel_enums_, 6UL);
  }

  vConfidentialityClassification_list_pskel::
  vConfidentialityClassification_list_pskel (vConfidentialityClassification_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    vConfidentialityClassification_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_vConfidentialityClassification_list_pskel_enums_, 6UL);
  }

  // vConfidentialityClassification_pskel
  //

  void vConfidentialityClassification_pskel::
  value_parser (::fhir::vConfidentialityClassification_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void vConfidentialityClassification_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::vConfidentialityClassification_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  vConfidentialityClassification_pskel::
  vConfidentialityClassification_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    vConfidentialityClassification_impl_ (0),
    value_parser_ (0)
  {
  }

  vConfidentialityClassification_pskel::
  vConfidentialityClassification_pskel (vConfidentialityClassification_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    vConfidentialityClassification_impl_ (impl),
    value_parser_ (0)
  {
  }

  // CompositionStatus_list_pskel
  //

  CompositionStatus_list_pskel::
  CompositionStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CompositionStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CompositionStatus_list_pskel_enums_, 4UL);
  }

  CompositionStatus_list_pskel::
  CompositionStatus_list_pskel (CompositionStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CompositionStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CompositionStatus_list_pskel_enums_, 4UL);
  }

  // CompositionStatus_pskel
  //

  void CompositionStatus_pskel::
  value_parser (::fhir::CompositionStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CompositionStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CompositionStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CompositionStatus_pskel::
  CompositionStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CompositionStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  CompositionStatus_pskel::
  CompositionStatus_pskel (CompositionStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CompositionStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // DocumentRelationshipType_list_pskel
  //

  DocumentRelationshipType_list_pskel::
  DocumentRelationshipType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DocumentRelationshipType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DocumentRelationshipType_list_pskel_enums_, 4UL);
  }

  DocumentRelationshipType_list_pskel::
  DocumentRelationshipType_list_pskel (DocumentRelationshipType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DocumentRelationshipType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DocumentRelationshipType_list_pskel_enums_, 4UL);
  }

  // DocumentRelationshipType_pskel
  //

  void DocumentRelationshipType_pskel::
  value_parser (::fhir::DocumentRelationshipType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DocumentRelationshipType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DocumentRelationshipType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DocumentRelationshipType_pskel::
  DocumentRelationshipType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DocumentRelationshipType_impl_ (0),
    value_parser_ (0)
  {
  }

  DocumentRelationshipType_pskel::
  DocumentRelationshipType_pskel (DocumentRelationshipType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DocumentRelationshipType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // CompositionAttestationMode_list_pskel
  //

  CompositionAttestationMode_list_pskel::
  CompositionAttestationMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CompositionAttestationMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CompositionAttestationMode_list_pskel_enums_, 4UL);
  }

  CompositionAttestationMode_list_pskel::
  CompositionAttestationMode_list_pskel (CompositionAttestationMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CompositionAttestationMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CompositionAttestationMode_list_pskel_enums_, 4UL);
  }

  // CompositionAttestationMode_pskel
  //

  void CompositionAttestationMode_pskel::
  value_parser (::fhir::CompositionAttestationMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CompositionAttestationMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CompositionAttestationMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CompositionAttestationMode_pskel::
  CompositionAttestationMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CompositionAttestationMode_impl_ (0),
    value_parser_ (0)
  {
  }

  CompositionAttestationMode_pskel::
  CompositionAttestationMode_pskel (CompositionAttestationMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CompositionAttestationMode_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ListMode_list_pskel
  //

  ListMode_list_pskel::
  ListMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ListMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ListMode_list_pskel_enums_, 3UL);
  }

  ListMode_list_pskel::
  ListMode_list_pskel (ListMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ListMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ListMode_list_pskel_enums_, 3UL);
  }

  // ListMode_pskel
  //

  void ListMode_pskel::
  value_parser (::fhir::ListMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ListMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ListMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ListMode_pskel::
  ListMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ListMode_impl_ (0),
    value_parser_ (0)
  {
  }

  ListMode_pskel::
  ListMode_pskel (ListMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ListMode_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Composition_pskel
  //

  void Composition_pskel::
  identifier ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->identifier ();
  }

  void Composition_pskel::
  status ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->status ();
  }

  void Composition_pskel::
  type ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->type ();
  }

  void Composition_pskel::
  category ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->category ();
  }

  void Composition_pskel::
  subject ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->subject ();
  }

  void Composition_pskel::
  encounter ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->encounter ();
  }

  void Composition_pskel::
  date ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->date ();
  }

  void Composition_pskel::
  author ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->author ();
  }

  void Composition_pskel::
  title ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->title ();
  }

  void Composition_pskel::
  confidentiality ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->confidentiality ();
  }

  void Composition_pskel::
  attester ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->attester ();
  }

  void Composition_pskel::
  custodian ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->custodian ();
  }

  void Composition_pskel::
  relatesTo ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->relatesTo ();
  }

  void Composition_pskel::
  event ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->event ();
  }

  void Composition_pskel::
  section ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->section ();
  }

  void Composition_pskel::
  post_Composition ()
  {
    if (this->Composition_impl_)
      this->Composition_impl_->post_Composition ();
    else
      post_DomainResource ();
  }

  void Composition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->confidentiality_parser_)
      this->confidentiality_parser_->_reset ();

    if (this->attester_parser_)
      this->attester_parser_->_reset ();

    if (this->custodian_parser_)
      this->custodian_parser_->_reset ();

    if (this->relatesTo_parser_)
      this->relatesTo_parser_->_reset ();

    if (this->event_parser_)
      this->event_parser_->_reset ();

    if (this->section_parser_)
      this->section_parser_->_reset ();

    this->resetting_ = false;
  }

  // Composition_Attester_pskel
  //

  void Composition_Attester_pskel::
  mode ()
  {
    if (this->Composition_Attester_impl_)
      this->Composition_Attester_impl_->mode ();
  }

  void Composition_Attester_pskel::
  time ()
  {
    if (this->Composition_Attester_impl_)
      this->Composition_Attester_impl_->time ();
  }

  void Composition_Attester_pskel::
  party ()
  {
    if (this->Composition_Attester_impl_)
      this->Composition_Attester_impl_->party ();
  }

  void Composition_Attester_pskel::
  post_Composition_Attester ()
  {
    if (this->Composition_Attester_impl_)
      this->Composition_Attester_impl_->post_Composition_Attester ();
    else
      post_BackboneElement ();
  }

  void Composition_Attester_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->mode_parser_)
      this->mode_parser_->_reset ();

    if (this->time_parser_)
      this->time_parser_->_reset ();

    if (this->party_parser_)
      this->party_parser_->_reset ();

    this->resetting_ = false;
  }

  // Composition_RelatesTo_pskel
  //

  void Composition_RelatesTo_pskel::
  code ()
  {
    if (this->Composition_RelatesTo_impl_)
      this->Composition_RelatesTo_impl_->code ();
  }

  void Composition_RelatesTo_pskel::
  targetIdentifier ()
  {
    if (this->Composition_RelatesTo_impl_)
      this->Composition_RelatesTo_impl_->targetIdentifier ();
  }

  void Composition_RelatesTo_pskel::
  targetReference ()
  {
    if (this->Composition_RelatesTo_impl_)
      this->Composition_RelatesTo_impl_->targetReference ();
  }

  void Composition_RelatesTo_pskel::
  post_Composition_RelatesTo ()
  {
    if (this->Composition_RelatesTo_impl_)
      this->Composition_RelatesTo_impl_->post_Composition_RelatesTo ();
    else
      post_BackboneElement ();
  }

  void Composition_RelatesTo_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->targetIdentifier_parser_)
      this->targetIdentifier_parser_->_reset ();

    if (this->targetReference_parser_)
      this->targetReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Composition_Event_pskel
  //

  void Composition_Event_pskel::
  code ()
  {
    if (this->Composition_Event_impl_)
      this->Composition_Event_impl_->code ();
  }

  void Composition_Event_pskel::
  period ()
  {
    if (this->Composition_Event_impl_)
      this->Composition_Event_impl_->period ();
  }

  void Composition_Event_pskel::
  detail ()
  {
    if (this->Composition_Event_impl_)
      this->Composition_Event_impl_->detail ();
  }

  void Composition_Event_pskel::
  post_Composition_Event ()
  {
    if (this->Composition_Event_impl_)
      this->Composition_Event_impl_->post_Composition_Event ();
    else
      post_BackboneElement ();
  }

  void Composition_Event_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // Composition_Section_pskel
  //

  void Composition_Section_pskel::
  title ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->title ();
  }

  void Composition_Section_pskel::
  code ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->code ();
  }

  void Composition_Section_pskel::
  author ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->author ();
  }

  void Composition_Section_pskel::
  focus ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->focus ();
  }

  void Composition_Section_pskel::
  text ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->text ();
  }

  void Composition_Section_pskel::
  mode ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->mode ();
  }

  void Composition_Section_pskel::
  orderedBy ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->orderedBy ();
  }

  void Composition_Section_pskel::
  entry ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->entry ();
  }

  void Composition_Section_pskel::
  emptyReason ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->emptyReason ();
  }

  void Composition_Section_pskel::
  section ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->section ();
  }

  void Composition_Section_pskel::
  post_Composition_Section ()
  {
    if (this->Composition_Section_impl_)
      this->Composition_Section_impl_->post_Composition_Section ();
    else
      post_BackboneElement ();
  }

  void Composition_Section_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->focus_parser_)
      this->focus_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->mode_parser_)
      this->mode_parser_->_reset ();

    if (this->orderedBy_parser_)
      this->orderedBy_parser_->_reset ();

    if (this->entry_parser_)
      this->entry_parser_->_reset ();

    if (this->emptyReason_parser_)
      this->emptyReason_parser_->_reset ();

    if (this->section_parser_)
      this->section_parser_->_reset ();

    this->resetting_ = false;
  }

  // vConfidentialityClassification_list_pskel
  //

  void vConfidentialityClassification_list_pskel::
  post_vConfidentialityClassification_list ()
  {
    if (this->vConfidentialityClassification_list_impl_)
      this->vConfidentialityClassification_list_impl_->post_vConfidentialityClassification_list ();
    else
      post_code_primitive ();
  }

  const char* const vConfidentialityClassification_list_pskel::_xsde_vConfidentialityClassification_list_pskel_enums_[6UL] = 
  {
    "L",
    "M",
    "N",
    "R",
    "U",
    "V"
  };

  // vConfidentialityClassification_pskel
  //

  void vConfidentialityClassification_pskel::
  value ()
  {
    if (this->vConfidentialityClassification_impl_)
      this->vConfidentialityClassification_impl_->value ();
  }

  void vConfidentialityClassification_pskel::
  post_vConfidentialityClassification ()
  {
    if (this->vConfidentialityClassification_impl_)
      this->vConfidentialityClassification_impl_->post_vConfidentialityClassification ();
    else
      post_Element ();
  }

  void vConfidentialityClassification_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // CompositionStatus_list_pskel
  //

  void CompositionStatus_list_pskel::
  post_CompositionStatus_list ()
  {
    if (this->CompositionStatus_list_impl_)
      this->CompositionStatus_list_impl_->post_CompositionStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const CompositionStatus_list_pskel::_xsde_CompositionStatus_list_pskel_enums_[4UL] = 
  {
    "amended",
    "entered-in-error",
    "final",
    "preliminary"
  };

  // CompositionStatus_pskel
  //

  void CompositionStatus_pskel::
  value ()
  {
    if (this->CompositionStatus_impl_)
      this->CompositionStatus_impl_->value ();
  }

  void CompositionStatus_pskel::
  post_CompositionStatus ()
  {
    if (this->CompositionStatus_impl_)
      this->CompositionStatus_impl_->post_CompositionStatus ();
    else
      post_Element ();
  }

  void CompositionStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // DocumentRelationshipType_list_pskel
  //

  void DocumentRelationshipType_list_pskel::
  post_DocumentRelationshipType_list ()
  {
    if (this->DocumentRelationshipType_list_impl_)
      this->DocumentRelationshipType_list_impl_->post_DocumentRelationshipType_list ();
    else
      post_code_primitive ();
  }

  const char* const DocumentRelationshipType_list_pskel::_xsde_DocumentRelationshipType_list_pskel_enums_[4UL] = 
  {
    "appends",
    "replaces",
    "signs",
    "transforms"
  };

  // DocumentRelationshipType_pskel
  //

  void DocumentRelationshipType_pskel::
  value ()
  {
    if (this->DocumentRelationshipType_impl_)
      this->DocumentRelationshipType_impl_->value ();
  }

  void DocumentRelationshipType_pskel::
  post_DocumentRelationshipType ()
  {
    if (this->DocumentRelationshipType_impl_)
      this->DocumentRelationshipType_impl_->post_DocumentRelationshipType ();
    else
      post_Element ();
  }

  void DocumentRelationshipType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // CompositionAttestationMode_list_pskel
  //

  void CompositionAttestationMode_list_pskel::
  post_CompositionAttestationMode_list ()
  {
    if (this->CompositionAttestationMode_list_impl_)
      this->CompositionAttestationMode_list_impl_->post_CompositionAttestationMode_list ();
    else
      post_code_primitive ();
  }

  const char* const CompositionAttestationMode_list_pskel::_xsde_CompositionAttestationMode_list_pskel_enums_[4UL] = 
  {
    "legal",
    "official",
    "personal",
    "professional"
  };

  // CompositionAttestationMode_pskel
  //

  void CompositionAttestationMode_pskel::
  value ()
  {
    if (this->CompositionAttestationMode_impl_)
      this->CompositionAttestationMode_impl_->value ();
  }

  void CompositionAttestationMode_pskel::
  post_CompositionAttestationMode ()
  {
    if (this->CompositionAttestationMode_impl_)
      this->CompositionAttestationMode_impl_->post_CompositionAttestationMode ();
    else
      post_Element ();
  }

  void CompositionAttestationMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ListMode_list_pskel
  //

  void ListMode_list_pskel::
  post_ListMode_list ()
  {
    if (this->ListMode_list_impl_)
      this->ListMode_list_impl_->post_ListMode_list ();
    else
      post_code_primitive ();
  }

  const char* const ListMode_list_pskel::_xsde_ListMode_list_pskel_enums_[3UL] = 
  {
    "changes",
    "snapshot",
    "working"
  };

  // ListMode_pskel
  //

  void ListMode_pskel::
  value ()
  {
    if (this->ListMode_impl_)
      this->ListMode_impl_->value ();
  }

  void ListMode_pskel::
  post_ListMode ()
  {
    if (this->ListMode_impl_)
      this->ListMode_impl_->post_ListMode ();
    else
      post_Element ();
  }

  void ListMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Composition_pskel.
  //
  bool Composition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Composition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Composition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Composition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Composition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Composition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CompositionStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "confidentiality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->confidentiality_parser_)
            {
              this->confidentiality_parser_->pre ();
              ctx.nested_parser (this->confidentiality_parser_);
            }
          }
          else
          {
            if (this->confidentiality_parser_ != 0)
            {
              this->confidentiality_parser_->post_vConfidentialityClassification ();
              this->confidentiality ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "attester" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->attester_parser_)
            {
              this->attester_parser_->pre ();
              ctx.nested_parser (this->attester_parser_);
            }
          }
          else
          {
            if (this->attester_parser_ != 0)
            {
              this->attester_parser_->post_Composition_Attester ();
              this->attester ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "custodian" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->custodian_parser_)
            {
              this->custodian_parser_->pre ();
              ctx.nested_parser (this->custodian_parser_);
            }
          }
          else
          {
            if (this->custodian_parser_ != 0)
            {
              this->custodian_parser_->post_Reference ();
              this->custodian ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "relatesTo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatesTo_parser_)
            {
              this->relatesTo_parser_->pre ();
              ctx.nested_parser (this->relatesTo_parser_);
            }
          }
          else
          {
            if (this->relatesTo_parser_ != 0)
            {
              this->relatesTo_parser_->post_Composition_RelatesTo ();
              this->relatesTo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "event" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->event_parser_)
            {
              this->event_parser_->pre ();
              ctx.nested_parser (this->event_parser_);
            }
          }
          else
          {
            if (this->event_parser_ != 0)
            {
              this->event_parser_->post_Composition_Event ();
              this->event ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "section" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->section_parser_)
            {
              this->section_parser_->pre ();
              ctx.nested_parser (this->section_parser_);
            }
          }
          else
          {
            if (this->section_parser_ != 0)
            {
              this->section_parser_->post_Composition_Section ();
              this->section ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Composition_Attester_pskel.
  //
  bool Composition_Attester_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Composition_Attester_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Composition_Attester_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Composition_Attester_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Composition_Attester_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Composition_Attester_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mode_parser_)
            {
              this->mode_parser_->pre ();
              ctx.nested_parser (this->mode_parser_);
            }
          }
          else
          {
            if (this->mode_parser_ != 0)
            {
              this->mode_parser_->post_CompositionAttestationMode ();
              this->mode ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "time" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->time_parser_)
            {
              this->time_parser_->pre ();
              ctx.nested_parser (this->time_parser_);
            }
          }
          else
          {
            if (this->time_parser_ != 0)
            {
              this->time_parser_->post_dateTime ();
              this->time ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "party" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->party_parser_)
            {
              this->party_parser_->pre ();
              ctx.nested_parser (this->party_parser_);
            }
          }
          else
          {
            if (this->party_parser_ != 0)
            {
              this->party_parser_->post_Reference ();
              this->party ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Composition_RelatesTo_pskel.
  //
  bool Composition_RelatesTo_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Composition_RelatesTo_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Composition_RelatesTo_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Composition_RelatesTo_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Composition_RelatesTo_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Composition_RelatesTo_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_DocumentRelationshipType ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "targetIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetIdentifier_parser_)
            {
              this->targetIdentifier_parser_->pre ();
              ctx.nested_parser (this->targetIdentifier_parser_);
            }
          }
          else
          {
            if (this->targetIdentifier_parser_ != 0)
            {
              this->targetIdentifier_parser_->post_Identifier ();
              this->targetIdentifier ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "targetReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetReference_parser_)
            {
              this->targetReference_parser_->pre ();
              ctx.nested_parser (this->targetReference_parser_);
            }
          }
          else
          {
            if (this->targetReference_parser_ != 0)
            {
              this->targetReference_parser_->post_Reference ();
              this->targetReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Composition_Event_pskel.
  //
  bool Composition_Event_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "detail" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Composition_Event_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Composition_Event_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Composition_Event_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Composition_Event_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Composition_Event_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_Reference ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Composition_Section_pskel.
  //
  bool Composition_Section_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "title" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "author" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "focus" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "mode" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "orderedBy" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "entry" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "emptyReason" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "section" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Composition_Section_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Composition_Section_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Composition_Section_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Composition_Section_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Composition_Section_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "focus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focus_parser_)
            {
              this->focus_parser_->pre ();
              ctx.nested_parser (this->focus_parser_);
            }
          }
          else
          {
            if (this->focus_parser_ != 0)
            {
              this->focus_parser_->post_Reference ();
              this->focus ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_Narrative ();
              this->text ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mode_parser_)
            {
              this->mode_parser_->pre ();
              ctx.nested_parser (this->mode_parser_);
            }
          }
          else
          {
            if (this->mode_parser_ != 0)
            {
              this->mode_parser_->post_ListMode ();
              this->mode ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "orderedBy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->orderedBy_parser_)
            {
              this->orderedBy_parser_->pre ();
              ctx.nested_parser (this->orderedBy_parser_);
            }
          }
          else
          {
            if (this->orderedBy_parser_ != 0)
            {
              this->orderedBy_parser_->post_CodeableConcept ();
              this->orderedBy ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "entry" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entry_parser_)
            {
              this->entry_parser_->pre ();
              ctx.nested_parser (this->entry_parser_);
            }
          }
          else
          {
            if (this->entry_parser_ != 0)
            {
              this->entry_parser_->post_Reference ();
              this->entry ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "emptyReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->emptyReason_parser_)
            {
              this->emptyReason_parser_->pre ();
              ctx.nested_parser (this->emptyReason_parser_);
            }
          }
          else
          {
            if (this->emptyReason_parser_ != 0)
            {
              this->emptyReason_parser_->post_CodeableConcept ();
              this->emptyReason ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "section" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->section_parser_)
            {
              this->section_parser_->pre ();
              ctx.nested_parser (this->section_parser_);
            }
          }
          else
          {
            if (this->section_parser_ != 0)
            {
              this->section_parser_->post_Composition_Section ();
              this->section ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for vConfidentialityClassification_pskel.
  //
  bool vConfidentialityClassification_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_vConfidentialityClassification_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for CompositionStatus_pskel.
  //
  bool CompositionStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CompositionStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for DocumentRelationshipType_pskel.
  //
  bool DocumentRelationshipType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DocumentRelationshipType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for CompositionAttestationMode_pskel.
  //
  bool CompositionAttestationMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CompositionAttestationMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ListMode_pskel.
  //
  bool ListMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ListMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

