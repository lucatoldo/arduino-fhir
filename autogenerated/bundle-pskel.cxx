// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "bundle-pskel.hxx"

namespace fhir
{
  // Bundle_pskel
  //

  void Bundle_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Bundle_pskel::
  type_parser (::fhir::BundleType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Bundle_pskel::
  timestamp_parser (::fhir::instant_pskel& p)
  {
    this->timestamp_parser_ = &p;
  }

  void Bundle_pskel::
  total_parser (::fhir::unsignedInt_pskel& p)
  {
    this->total_parser_ = &p;
  }

  void Bundle_pskel::
  link_parser (::fhir::Bundle_Link_pskel& p)
  {
    this->link_parser_ = &p;
  }

  void Bundle_pskel::
  entry_parser (::fhir::Bundle_Entry_pskel& p)
  {
    this->entry_parser_ = &p;
  }

  void Bundle_pskel::
  signature_parser (::fhir::Signature_pskel& p)
  {
    this->signature_parser_ = &p;
  }

  void Bundle_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::BundleType_pskel& type,
           ::fhir::instant_pskel& timestamp,
           ::fhir::unsignedInt_pskel& total,
           ::fhir::Bundle_Link_pskel& link,
           ::fhir::Bundle_Entry_pskel& entry,
           ::fhir::Signature_pskel& signature)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->identifier_parser_ = &identifier;
    this->type_parser_ = &type;
    this->timestamp_parser_ = &timestamp;
    this->total_parser_ = &total;
    this->link_parser_ = &link;
    this->entry_parser_ = &entry;
    this->signature_parser_ = &signature;
  }

  Bundle_pskel::
  Bundle_pskel (::fhir::Resource_pskel* tiein)
  : ::fhir::Resource_pskel (tiein, 0),
    Bundle_impl_ (0),
    identifier_parser_ (0),
    type_parser_ (0),
    timestamp_parser_ (0),
    total_parser_ (0),
    link_parser_ (0),
    entry_parser_ (0),
    signature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Bundle_pskel::
  Bundle_pskel (Bundle_pskel* impl, void*)
  : ::fhir::Resource_pskel (impl, 0),
    Bundle_impl_ (impl),
    identifier_parser_ (0),
    type_parser_ (0),
    timestamp_parser_ (0),
    total_parser_ (0),
    link_parser_ (0),
    entry_parser_ (0),
    signature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Bundle_Link_pskel
  //

  void Bundle_Link_pskel::
  relation_parser (::fhir::string_pskel& p)
  {
    this->relation_parser_ = &p;
  }

  void Bundle_Link_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void Bundle_Link_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& relation,
           ::fhir::uri_pskel& url)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->relation_parser_ = &relation;
    this->url_parser_ = &url;
  }

  Bundle_Link_pskel::
  Bundle_Link_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Bundle_Link_impl_ (0),
    relation_parser_ (0),
    url_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Bundle_Link_pskel::
  Bundle_Link_pskel (Bundle_Link_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Bundle_Link_impl_ (impl),
    relation_parser_ (0),
    url_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Bundle_Entry_pskel
  //

  void Bundle_Entry_pskel::
  link_parser (::fhir::Bundle_Link_pskel& p)
  {
    this->link_parser_ = &p;
  }

  void Bundle_Entry_pskel::
  fullUrl_parser (::fhir::uri_pskel& p)
  {
    this->fullUrl_parser_ = &p;
  }

  void Bundle_Entry_pskel::
  resource_parser (::fhir::ResourceContainer_pskel& p)
  {
    this->resource_parser_ = &p;
  }

  void Bundle_Entry_pskel::
  search_parser (::fhir::Bundle_Search_pskel& p)
  {
    this->search_parser_ = &p;
  }

  void Bundle_Entry_pskel::
  request_parser (::fhir::Bundle_Request_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void Bundle_Entry_pskel::
  response_parser (::fhir::Bundle_Response_pskel& p)
  {
    this->response_parser_ = &p;
  }

  void Bundle_Entry_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Bundle_Link_pskel& link,
           ::fhir::uri_pskel& fullUrl,
           ::fhir::ResourceContainer_pskel& resource,
           ::fhir::Bundle_Search_pskel& search,
           ::fhir::Bundle_Request_pskel& request,
           ::fhir::Bundle_Response_pskel& response)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->link_parser_ = &link;
    this->fullUrl_parser_ = &fullUrl;
    this->resource_parser_ = &resource;
    this->search_parser_ = &search;
    this->request_parser_ = &request;
    this->response_parser_ = &response;
  }

  Bundle_Entry_pskel::
  Bundle_Entry_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Bundle_Entry_impl_ (0),
    link_parser_ (0),
    fullUrl_parser_ (0),
    resource_parser_ (0),
    search_parser_ (0),
    request_parser_ (0),
    response_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Bundle_Entry_pskel::
  Bundle_Entry_pskel (Bundle_Entry_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Bundle_Entry_impl_ (impl),
    link_parser_ (0),
    fullUrl_parser_ (0),
    resource_parser_ (0),
    search_parser_ (0),
    request_parser_ (0),
    response_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Bundle_Search_pskel
  //

  void Bundle_Search_pskel::
  mode_parser (::fhir::SearchEntryMode_pskel& p)
  {
    this->mode_parser_ = &p;
  }

  void Bundle_Search_pskel::
  score_parser (::fhir::decimal_pskel& p)
  {
    this->score_parser_ = &p;
  }

  void Bundle_Search_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::SearchEntryMode_pskel& mode,
           ::fhir::decimal_pskel& score)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->mode_parser_ = &mode;
    this->score_parser_ = &score;
  }

  Bundle_Search_pskel::
  Bundle_Search_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Bundle_Search_impl_ (0),
    mode_parser_ (0),
    score_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Bundle_Search_pskel::
  Bundle_Search_pskel (Bundle_Search_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Bundle_Search_impl_ (impl),
    mode_parser_ (0),
    score_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Bundle_Request_pskel
  //

  void Bundle_Request_pskel::
  method_parser (::fhir::HTTPVerb_pskel& p)
  {
    this->method_parser_ = &p;
  }

  void Bundle_Request_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void Bundle_Request_pskel::
  ifNoneMatch_parser (::fhir::string_pskel& p)
  {
    this->ifNoneMatch_parser_ = &p;
  }

  void Bundle_Request_pskel::
  ifModifiedSince_parser (::fhir::instant_pskel& p)
  {
    this->ifModifiedSince_parser_ = &p;
  }

  void Bundle_Request_pskel::
  ifMatch_parser (::fhir::string_pskel& p)
  {
    this->ifMatch_parser_ = &p;
  }

  void Bundle_Request_pskel::
  ifNoneExist_parser (::fhir::string_pskel& p)
  {
    this->ifNoneExist_parser_ = &p;
  }

  void Bundle_Request_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::HTTPVerb_pskel& method,
           ::fhir::uri_pskel& url,
           ::fhir::string_pskel& ifNoneMatch,
           ::fhir::instant_pskel& ifModifiedSince,
           ::fhir::string_pskel& ifMatch,
           ::fhir::string_pskel& ifNoneExist)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->method_parser_ = &method;
    this->url_parser_ = &url;
    this->ifNoneMatch_parser_ = &ifNoneMatch;
    this->ifModifiedSince_parser_ = &ifModifiedSince;
    this->ifMatch_parser_ = &ifMatch;
    this->ifNoneExist_parser_ = &ifNoneExist;
  }

  Bundle_Request_pskel::
  Bundle_Request_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Bundle_Request_impl_ (0),
    method_parser_ (0),
    url_parser_ (0),
    ifNoneMatch_parser_ (0),
    ifModifiedSince_parser_ (0),
    ifMatch_parser_ (0),
    ifNoneExist_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Bundle_Request_pskel::
  Bundle_Request_pskel (Bundle_Request_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Bundle_Request_impl_ (impl),
    method_parser_ (0),
    url_parser_ (0),
    ifNoneMatch_parser_ (0),
    ifModifiedSince_parser_ (0),
    ifMatch_parser_ (0),
    ifNoneExist_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Bundle_Response_pskel
  //

  void Bundle_Response_pskel::
  status_parser (::fhir::string_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Bundle_Response_pskel::
  location_parser (::fhir::uri_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Bundle_Response_pskel::
  etag_parser (::fhir::string_pskel& p)
  {
    this->etag_parser_ = &p;
  }

  void Bundle_Response_pskel::
  lastModified_parser (::fhir::instant_pskel& p)
  {
    this->lastModified_parser_ = &p;
  }

  void Bundle_Response_pskel::
  outcome_parser (::fhir::ResourceContainer_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void Bundle_Response_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& status,
           ::fhir::uri_pskel& location,
           ::fhir::string_pskel& etag,
           ::fhir::instant_pskel& lastModified,
           ::fhir::ResourceContainer_pskel& outcome)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->status_parser_ = &status;
    this->location_parser_ = &location;
    this->etag_parser_ = &etag;
    this->lastModified_parser_ = &lastModified;
    this->outcome_parser_ = &outcome;
  }

  Bundle_Response_pskel::
  Bundle_Response_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Bundle_Response_impl_ (0),
    status_parser_ (0),
    location_parser_ (0),
    etag_parser_ (0),
    lastModified_parser_ (0),
    outcome_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Bundle_Response_pskel::
  Bundle_Response_pskel (Bundle_Response_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Bundle_Response_impl_ (impl),
    status_parser_ (0),
    location_parser_ (0),
    etag_parser_ (0),
    lastModified_parser_ (0),
    outcome_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // HTTPVerb_list_pskel
  //

  HTTPVerb_list_pskel::
  HTTPVerb_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    HTTPVerb_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_HTTPVerb_list_pskel_enums_, 6UL);
  }

  HTTPVerb_list_pskel::
  HTTPVerb_list_pskel (HTTPVerb_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    HTTPVerb_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_HTTPVerb_list_pskel_enums_, 6UL);
  }

  // HTTPVerb_pskel
  //

  void HTTPVerb_pskel::
  value_parser (::fhir::HTTPVerb_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void HTTPVerb_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::HTTPVerb_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  HTTPVerb_pskel::
  HTTPVerb_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    HTTPVerb_impl_ (0),
    value_parser_ (0)
  {
  }

  HTTPVerb_pskel::
  HTTPVerb_pskel (HTTPVerb_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    HTTPVerb_impl_ (impl),
    value_parser_ (0)
  {
  }

  // BundleType_list_pskel
  //

  BundleType_list_pskel::
  BundleType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    BundleType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_BundleType_list_pskel_enums_, 9UL);
  }

  BundleType_list_pskel::
  BundleType_list_pskel (BundleType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    BundleType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_BundleType_list_pskel_enums_, 9UL);
  }

  // BundleType_pskel
  //

  void BundleType_pskel::
  value_parser (::fhir::BundleType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void BundleType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::BundleType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  BundleType_pskel::
  BundleType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    BundleType_impl_ (0),
    value_parser_ (0)
  {
  }

  BundleType_pskel::
  BundleType_pskel (BundleType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    BundleType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // SearchEntryMode_list_pskel
  //

  SearchEntryMode_list_pskel::
  SearchEntryMode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    SearchEntryMode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_SearchEntryMode_list_pskel_enums_, 3UL);
  }

  SearchEntryMode_list_pskel::
  SearchEntryMode_list_pskel (SearchEntryMode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    SearchEntryMode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_SearchEntryMode_list_pskel_enums_, 3UL);
  }

  // SearchEntryMode_pskel
  //

  void SearchEntryMode_pskel::
  value_parser (::fhir::SearchEntryMode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void SearchEntryMode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::SearchEntryMode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  SearchEntryMode_pskel::
  SearchEntryMode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    SearchEntryMode_impl_ (0),
    value_parser_ (0)
  {
  }

  SearchEntryMode_pskel::
  SearchEntryMode_pskel (SearchEntryMode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    SearchEntryMode_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Bundle_pskel
  //

  void Bundle_pskel::
  identifier ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->identifier ();
  }

  void Bundle_pskel::
  type ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->type ();
  }

  void Bundle_pskel::
  timestamp ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->timestamp ();
  }

  void Bundle_pskel::
  total ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->total ();
  }

  void Bundle_pskel::
  link ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->link ();
  }

  void Bundle_pskel::
  entry ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->entry ();
  }

  void Bundle_pskel::
  signature ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->signature ();
  }

  void Bundle_pskel::
  post_Bundle ()
  {
    if (this->Bundle_impl_)
      this->Bundle_impl_->post_Bundle ();
    else
      post_Resource ();
  }

  void Bundle_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::Resource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->timestamp_parser_)
      this->timestamp_parser_->_reset ();

    if (this->total_parser_)
      this->total_parser_->_reset ();

    if (this->link_parser_)
      this->link_parser_->_reset ();

    if (this->entry_parser_)
      this->entry_parser_->_reset ();

    if (this->signature_parser_)
      this->signature_parser_->_reset ();

    this->resetting_ = false;
  }

  // Bundle_Link_pskel
  //

  void Bundle_Link_pskel::
  relation ()
  {
    if (this->Bundle_Link_impl_)
      this->Bundle_Link_impl_->relation ();
  }

  void Bundle_Link_pskel::
  url ()
  {
    if (this->Bundle_Link_impl_)
      this->Bundle_Link_impl_->url ();
  }

  void Bundle_Link_pskel::
  post_Bundle_Link ()
  {
    if (this->Bundle_Link_impl_)
      this->Bundle_Link_impl_->post_Bundle_Link ();
    else
      post_BackboneElement ();
  }

  void Bundle_Link_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->relation_parser_)
      this->relation_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    this->resetting_ = false;
  }

  // Bundle_Entry_pskel
  //

  void Bundle_Entry_pskel::
  link ()
  {
    if (this->Bundle_Entry_impl_)
      this->Bundle_Entry_impl_->link ();
  }

  void Bundle_Entry_pskel::
  fullUrl ()
  {
    if (this->Bundle_Entry_impl_)
      this->Bundle_Entry_impl_->fullUrl ();
  }

  void Bundle_Entry_pskel::
  resource ()
  {
    if (this->Bundle_Entry_impl_)
      this->Bundle_Entry_impl_->resource ();
  }

  void Bundle_Entry_pskel::
  search ()
  {
    if (this->Bundle_Entry_impl_)
      this->Bundle_Entry_impl_->search ();
  }

  void Bundle_Entry_pskel::
  request ()
  {
    if (this->Bundle_Entry_impl_)
      this->Bundle_Entry_impl_->request ();
  }

  void Bundle_Entry_pskel::
  response ()
  {
    if (this->Bundle_Entry_impl_)
      this->Bundle_Entry_impl_->response ();
  }

  void Bundle_Entry_pskel::
  post_Bundle_Entry ()
  {
    if (this->Bundle_Entry_impl_)
      this->Bundle_Entry_impl_->post_Bundle_Entry ();
    else
      post_BackboneElement ();
  }

  void Bundle_Entry_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->link_parser_)
      this->link_parser_->_reset ();

    if (this->fullUrl_parser_)
      this->fullUrl_parser_->_reset ();

    if (this->resource_parser_)
      this->resource_parser_->_reset ();

    if (this->search_parser_)
      this->search_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->response_parser_)
      this->response_parser_->_reset ();

    this->resetting_ = false;
  }

  // Bundle_Search_pskel
  //

  void Bundle_Search_pskel::
  mode ()
  {
    if (this->Bundle_Search_impl_)
      this->Bundle_Search_impl_->mode ();
  }

  void Bundle_Search_pskel::
  score ()
  {
    if (this->Bundle_Search_impl_)
      this->Bundle_Search_impl_->score ();
  }

  void Bundle_Search_pskel::
  post_Bundle_Search ()
  {
    if (this->Bundle_Search_impl_)
      this->Bundle_Search_impl_->post_Bundle_Search ();
    else
      post_BackboneElement ();
  }

  void Bundle_Search_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->mode_parser_)
      this->mode_parser_->_reset ();

    if (this->score_parser_)
      this->score_parser_->_reset ();

    this->resetting_ = false;
  }

  // Bundle_Request_pskel
  //

  void Bundle_Request_pskel::
  method ()
  {
    if (this->Bundle_Request_impl_)
      this->Bundle_Request_impl_->method ();
  }

  void Bundle_Request_pskel::
  url ()
  {
    if (this->Bundle_Request_impl_)
      this->Bundle_Request_impl_->url ();
  }

  void Bundle_Request_pskel::
  ifNoneMatch ()
  {
    if (this->Bundle_Request_impl_)
      this->Bundle_Request_impl_->ifNoneMatch ();
  }

  void Bundle_Request_pskel::
  ifModifiedSince ()
  {
    if (this->Bundle_Request_impl_)
      this->Bundle_Request_impl_->ifModifiedSince ();
  }

  void Bundle_Request_pskel::
  ifMatch ()
  {
    if (this->Bundle_Request_impl_)
      this->Bundle_Request_impl_->ifMatch ();
  }

  void Bundle_Request_pskel::
  ifNoneExist ()
  {
    if (this->Bundle_Request_impl_)
      this->Bundle_Request_impl_->ifNoneExist ();
  }

  void Bundle_Request_pskel::
  post_Bundle_Request ()
  {
    if (this->Bundle_Request_impl_)
      this->Bundle_Request_impl_->post_Bundle_Request ();
    else
      post_BackboneElement ();
  }

  void Bundle_Request_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->method_parser_)
      this->method_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->ifNoneMatch_parser_)
      this->ifNoneMatch_parser_->_reset ();

    if (this->ifModifiedSince_parser_)
      this->ifModifiedSince_parser_->_reset ();

    if (this->ifMatch_parser_)
      this->ifMatch_parser_->_reset ();

    if (this->ifNoneExist_parser_)
      this->ifNoneExist_parser_->_reset ();

    this->resetting_ = false;
  }

  // Bundle_Response_pskel
  //

  void Bundle_Response_pskel::
  status ()
  {
    if (this->Bundle_Response_impl_)
      this->Bundle_Response_impl_->status ();
  }

  void Bundle_Response_pskel::
  location ()
  {
    if (this->Bundle_Response_impl_)
      this->Bundle_Response_impl_->location ();
  }

  void Bundle_Response_pskel::
  etag ()
  {
    if (this->Bundle_Response_impl_)
      this->Bundle_Response_impl_->etag ();
  }

  void Bundle_Response_pskel::
  lastModified ()
  {
    if (this->Bundle_Response_impl_)
      this->Bundle_Response_impl_->lastModified ();
  }

  void Bundle_Response_pskel::
  outcome ()
  {
    if (this->Bundle_Response_impl_)
      this->Bundle_Response_impl_->outcome ();
  }

  void Bundle_Response_pskel::
  post_Bundle_Response ()
  {
    if (this->Bundle_Response_impl_)
      this->Bundle_Response_impl_->post_Bundle_Response ();
    else
      post_BackboneElement ();
  }

  void Bundle_Response_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->etag_parser_)
      this->etag_parser_->_reset ();

    if (this->lastModified_parser_)
      this->lastModified_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    this->resetting_ = false;
  }

  // HTTPVerb_list_pskel
  //

  void HTTPVerb_list_pskel::
  post_HTTPVerb_list ()
  {
    if (this->HTTPVerb_list_impl_)
      this->HTTPVerb_list_impl_->post_HTTPVerb_list ();
    else
      post_code_primitive ();
  }

  const char* const HTTPVerb_list_pskel::_xsde_HTTPVerb_list_pskel_enums_[6UL] = 
  {
    "DELETE",
    "GET",
    "HEAD",
    "PATCH",
    "POST",
    "PUT"
  };

  // HTTPVerb_pskel
  //

  void HTTPVerb_pskel::
  value ()
  {
    if (this->HTTPVerb_impl_)
      this->HTTPVerb_impl_->value ();
  }

  void HTTPVerb_pskel::
  post_HTTPVerb ()
  {
    if (this->HTTPVerb_impl_)
      this->HTTPVerb_impl_->post_HTTPVerb ();
    else
      post_Element ();
  }

  void HTTPVerb_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // BundleType_list_pskel
  //

  void BundleType_list_pskel::
  post_BundleType_list ()
  {
    if (this->BundleType_list_impl_)
      this->BundleType_list_impl_->post_BundleType_list ();
    else
      post_code_primitive ();
  }

  const char* const BundleType_list_pskel::_xsde_BundleType_list_pskel_enums_[9UL] = 
  {
    "batch",
    "batch-response",
    "collection",
    "document",
    "history",
    "message",
    "searchset",
    "transaction",
    "transaction-response"
  };

  // BundleType_pskel
  //

  void BundleType_pskel::
  value ()
  {
    if (this->BundleType_impl_)
      this->BundleType_impl_->value ();
  }

  void BundleType_pskel::
  post_BundleType ()
  {
    if (this->BundleType_impl_)
      this->BundleType_impl_->post_BundleType ();
    else
      post_Element ();
  }

  void BundleType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // SearchEntryMode_list_pskel
  //

  void SearchEntryMode_list_pskel::
  post_SearchEntryMode_list ()
  {
    if (this->SearchEntryMode_list_impl_)
      this->SearchEntryMode_list_impl_->post_SearchEntryMode_list ();
    else
      post_code_primitive ();
  }

  const char* const SearchEntryMode_list_pskel::_xsde_SearchEntryMode_list_pskel_enums_[3UL] = 
  {
    "include",
    "match",
    "outcome"
  };

  // SearchEntryMode_pskel
  //

  void SearchEntryMode_pskel::
  value ()
  {
    if (this->SearchEntryMode_impl_)
      this->SearchEntryMode_impl_->value ();
  }

  void SearchEntryMode_pskel::
  post_SearchEntryMode ()
  {
    if (this->SearchEntryMode_impl_)
      this->SearchEntryMode_impl_->post_SearchEntryMode ();
    else
      post_Element ();
  }

  void SearchEntryMode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Bundle_pskel.
  //
  bool Bundle_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::Resource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Bundle_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Bundle_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::Resource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Bundle_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::Resource_pskel base;
    base::_pre_e_validate ();
  }

  void Bundle_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::Resource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Bundle_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_BundleType ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "timestamp" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timestamp_parser_)
            {
              this->timestamp_parser_->pre ();
              ctx.nested_parser (this->timestamp_parser_);
            }
          }
          else
          {
            if (this->timestamp_parser_ != 0)
            {
              this->timestamp_parser_->post_instant ();
              this->timestamp ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "total" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->total_parser_)
            {
              this->total_parser_->pre ();
              ctx.nested_parser (this->total_parser_);
            }
          }
          else
          {
            if (this->total_parser_ != 0)
            {
              this->total_parser_->post_unsignedInt ();
              this->total ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "link" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->link_parser_)
            {
              this->link_parser_->pre ();
              ctx.nested_parser (this->link_parser_);
            }
          }
          else
          {
            if (this->link_parser_ != 0)
            {
              this->link_parser_->post_Bundle_Link ();
              this->link ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "entry" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entry_parser_)
            {
              this->entry_parser_->pre ();
              ctx.nested_parser (this->entry_parser_);
            }
          }
          else
          {
            if (this->entry_parser_ != 0)
            {
              this->entry_parser_->post_Bundle_Entry ();
              this->entry ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "signature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->signature_parser_)
            {
              this->signature_parser_->pre ();
              ctx.nested_parser (this->signature_parser_);
            }
          }
          else
          {
            if (this->signature_parser_ != 0)
            {
              this->signature_parser_->post_Signature ();
              this->signature ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Bundle_Link_pskel.
  //
  bool Bundle_Link_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "relation" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Bundle_Link_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Bundle_Link_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Bundle_Link_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Bundle_Link_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Bundle_Link_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "relation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relation_parser_)
            {
              this->relation_parser_->pre ();
              ctx.nested_parser (this->relation_parser_);
            }
          }
          else
          {
            if (this->relation_parser_ != 0)
            {
              this->relation_parser_->post_string ();
              this->relation ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Bundle_Entry_pskel.
  //
  bool Bundle_Entry_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "link" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "fullUrl" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "resource" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "search" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "request" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "response" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Bundle_Entry_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Bundle_Entry_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Bundle_Entry_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Bundle_Entry_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Bundle_Entry_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "link" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->link_parser_)
            {
              this->link_parser_->pre ();
              ctx.nested_parser (this->link_parser_);
            }
          }
          else
          {
            if (this->link_parser_ != 0)
            {
              this->link_parser_->post_Bundle_Link ();
              this->link ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "fullUrl" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fullUrl_parser_)
            {
              this->fullUrl_parser_->pre ();
              ctx.nested_parser (this->fullUrl_parser_);
            }
          }
          else
          {
            if (this->fullUrl_parser_ != 0)
            {
              this->fullUrl_parser_->post_uri ();
              this->fullUrl ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "resource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resource_parser_)
            {
              this->resource_parser_->pre ();
              ctx.nested_parser (this->resource_parser_);
            }
          }
          else
          {
            if (this->resource_parser_ != 0)
            {
              this->resource_parser_->post_ResourceContainer ();
              this->resource ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "search" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->search_parser_)
            {
              this->search_parser_->pre ();
              ctx.nested_parser (this->search_parser_);
            }
          }
          else
          {
            if (this->search_parser_ != 0)
            {
              this->search_parser_->post_Bundle_Search ();
              this->search ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_Bundle_Request ();
              this->request ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "response" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->response_parser_)
            {
              this->response_parser_->pre ();
              ctx.nested_parser (this->response_parser_);
            }
          }
          else
          {
            if (this->response_parser_ != 0)
            {
              this->response_parser_->post_Bundle_Response ();
              this->response ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Bundle_Search_pskel.
  //
  bool Bundle_Search_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "score" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Bundle_Search_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Bundle_Search_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Bundle_Search_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Bundle_Search_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Bundle_Search_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "mode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mode_parser_)
            {
              this->mode_parser_->pre ();
              ctx.nested_parser (this->mode_parser_);
            }
          }
          else
          {
            if (this->mode_parser_ != 0)
            {
              this->mode_parser_->post_SearchEntryMode ();
              this->mode ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "score" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->score_parser_)
            {
              this->score_parser_->pre ();
              ctx.nested_parser (this->score_parser_);
            }
          }
          else
          {
            if (this->score_parser_ != 0)
            {
              this->score_parser_->post_decimal ();
              this->score ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Bundle_Request_pskel.
  //
  bool Bundle_Request_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "method" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Bundle_Request_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Bundle_Request_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Bundle_Request_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Bundle_Request_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Bundle_Request_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "method" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->method_parser_)
            {
              this->method_parser_->pre ();
              ctx.nested_parser (this->method_parser_);
            }
          }
          else
          {
            if (this->method_parser_ != 0)
            {
              this->method_parser_->post_HTTPVerb ();
              this->method ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "ifNoneMatch" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ifNoneMatch_parser_)
            {
              this->ifNoneMatch_parser_->pre ();
              ctx.nested_parser (this->ifNoneMatch_parser_);
            }
          }
          else
          {
            if (this->ifNoneMatch_parser_ != 0)
            {
              this->ifNoneMatch_parser_->post_string ();
              this->ifNoneMatch ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "ifModifiedSince" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ifModifiedSince_parser_)
            {
              this->ifModifiedSince_parser_->pre ();
              ctx.nested_parser (this->ifModifiedSince_parser_);
            }
          }
          else
          {
            if (this->ifModifiedSince_parser_ != 0)
            {
              this->ifModifiedSince_parser_->post_instant ();
              this->ifModifiedSince ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "ifMatch" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ifMatch_parser_)
            {
              this->ifMatch_parser_->pre ();
              ctx.nested_parser (this->ifMatch_parser_);
            }
          }
          else
          {
            if (this->ifMatch_parser_ != 0)
            {
              this->ifMatch_parser_->post_string ();
              this->ifMatch ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "ifNoneExist" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ifNoneExist_parser_)
            {
              this->ifNoneExist_parser_->pre ();
              ctx.nested_parser (this->ifNoneExist_parser_);
            }
          }
          else
          {
            if (this->ifNoneExist_parser_ != 0)
            {
              this->ifNoneExist_parser_->post_string ();
              this->ifNoneExist ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Bundle_Response_pskel.
  //
  bool Bundle_Response_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "status" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Bundle_Response_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Bundle_Response_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Bundle_Response_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Bundle_Response_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Bundle_Response_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_string ();
              this->status ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_uri ();
              this->location ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "etag" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->etag_parser_)
            {
              this->etag_parser_->pre ();
              ctx.nested_parser (this->etag_parser_);
            }
          }
          else
          {
            if (this->etag_parser_ != 0)
            {
              this->etag_parser_->post_string ();
              this->etag ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "lastModified" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastModified_parser_)
            {
              this->lastModified_parser_->pre ();
              ctx.nested_parser (this->lastModified_parser_);
            }
          }
          else
          {
            if (this->lastModified_parser_ != 0)
            {
              this->lastModified_parser_->post_instant ();
              this->lastModified ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_ResourceContainer ();
              this->outcome ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for HTTPVerb_pskel.
  //
  bool HTTPVerb_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_HTTPVerb_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for BundleType_pskel.
  //
  bool BundleType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_BundleType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for SearchEntryMode_pskel.
  //
  bool SearchEntryMode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_SearchEntryMode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

