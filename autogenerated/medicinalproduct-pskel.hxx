// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef MEDICINALPRODUCT_PSKEL_HXX
#define MEDICINALPRODUCT_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class MedicinalProduct_pskel;
  class MedicinalProduct_Name_pskel;
  class MedicinalProduct_NamePart_pskel;
  class MedicinalProduct_CountryLanguage_pskel;
  class MedicinalProduct_ManufacturingBusinessOperation_pskel;
  class MedicinalProduct_SpecialDesignation_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class MedicinalProduct_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    domain ();

    virtual void
    combinedPharmaceuticalDoseForm ();

    virtual void
    legalStatusOfSupply ();

    virtual void
    additionalMonitoringIndicator ();

    virtual void
    specialMeasures ();

    virtual void
    paediatricUseIndicator ();

    virtual void
    productClassification ();

    virtual void
    marketingStatus ();

    virtual void
    pharmaceuticalProduct ();

    virtual void
    packagedMedicinalProduct ();

    virtual void
    attachedDocument ();

    virtual void
    masterFile ();

    virtual void
    contact ();

    virtual void
    clinicalTrial ();

    virtual void
    name ();

    virtual void
    crossReference ();

    virtual void
    manufacturingBusinessOperation ();

    virtual void
    specialDesignation ();

    virtual void
    post_MedicinalProduct ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Coding_pskel& /* domain */,
             ::fhir::CodeableConcept_pskel& /* combinedPharmaceuticalDoseForm */,
             ::fhir::CodeableConcept_pskel& /* legalStatusOfSupply */,
             ::fhir::CodeableConcept_pskel& /* additionalMonitoringIndicator */,
             ::fhir::string_pskel& /* specialMeasures */,
             ::fhir::CodeableConcept_pskel& /* paediatricUseIndicator */,
             ::fhir::CodeableConcept_pskel& /* productClassification */,
             ::fhir::MarketingStatus_pskel& /* marketingStatus */,
             ::fhir::Reference_pskel& /* pharmaceuticalProduct */,
             ::fhir::Reference_pskel& /* packagedMedicinalProduct */,
             ::fhir::Reference_pskel& /* attachedDocument */,
             ::fhir::Reference_pskel& /* masterFile */,
             ::fhir::Reference_pskel& /* contact */,
             ::fhir::Reference_pskel& /* clinicalTrial */,
             ::fhir::MedicinalProduct_Name_pskel& /* name */,
             ::fhir::Identifier_pskel& /* crossReference */,
             ::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel& /* manufacturingBusinessOperation */,
             ::fhir::MedicinalProduct_SpecialDesignation_pskel& /* specialDesignation */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    domain_parser (::fhir::Coding_pskel&);

    void
    combinedPharmaceuticalDoseForm_parser (::fhir::CodeableConcept_pskel&);

    void
    legalStatusOfSupply_parser (::fhir::CodeableConcept_pskel&);

    void
    additionalMonitoringIndicator_parser (::fhir::CodeableConcept_pskel&);

    void
    specialMeasures_parser (::fhir::string_pskel&);

    void
    paediatricUseIndicator_parser (::fhir::CodeableConcept_pskel&);

    void
    productClassification_parser (::fhir::CodeableConcept_pskel&);

    void
    marketingStatus_parser (::fhir::MarketingStatus_pskel&);

    void
    pharmaceuticalProduct_parser (::fhir::Reference_pskel&);

    void
    packagedMedicinalProduct_parser (::fhir::Reference_pskel&);

    void
    attachedDocument_parser (::fhir::Reference_pskel&);

    void
    masterFile_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::Reference_pskel&);

    void
    clinicalTrial_parser (::fhir::Reference_pskel&);

    void
    name_parser (::fhir::MedicinalProduct_Name_pskel&);

    void
    crossReference_parser (::fhir::Identifier_pskel&);

    void
    manufacturingBusinessOperation_parser (::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel&);

    void
    specialDesignation_parser (::fhir::MedicinalProduct_SpecialDesignation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_pskel* MedicinalProduct_impl_;
    MedicinalProduct_pskel (MedicinalProduct_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Coding_pskel* domain_parser_;
    ::fhir::CodeableConcept_pskel* combinedPharmaceuticalDoseForm_parser_;
    ::fhir::CodeableConcept_pskel* legalStatusOfSupply_parser_;
    ::fhir::CodeableConcept_pskel* additionalMonitoringIndicator_parser_;
    ::fhir::string_pskel* specialMeasures_parser_;
    ::fhir::CodeableConcept_pskel* paediatricUseIndicator_parser_;
    ::fhir::CodeableConcept_pskel* productClassification_parser_;
    ::fhir::MarketingStatus_pskel* marketingStatus_parser_;
    ::fhir::Reference_pskel* pharmaceuticalProduct_parser_;
    ::fhir::Reference_pskel* packagedMedicinalProduct_parser_;
    ::fhir::Reference_pskel* attachedDocument_parser_;
    ::fhir::Reference_pskel* masterFile_parser_;
    ::fhir::Reference_pskel* contact_parser_;
    ::fhir::Reference_pskel* clinicalTrial_parser_;
    ::fhir::MedicinalProduct_Name_pskel* name_parser_;
    ::fhir::Identifier_pskel* crossReference_parser_;
    ::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel* manufacturingBusinessOperation_parser_;
    ::fhir::MedicinalProduct_SpecialDesignation_pskel* specialDesignation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_Name_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    productName ();

    virtual void
    namePart ();

    virtual void
    countryLanguage ();

    virtual void
    post_MedicinalProduct_Name ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* productName */,
             ::fhir::MedicinalProduct_NamePart_pskel& /* namePart */,
             ::fhir::MedicinalProduct_CountryLanguage_pskel& /* countryLanguage */);

    // Individual element parsers.
    //
    void
    productName_parser (::fhir::string_pskel&);

    void
    namePart_parser (::fhir::MedicinalProduct_NamePart_pskel&);

    void
    countryLanguage_parser (::fhir::MedicinalProduct_CountryLanguage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_Name_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_Name_pskel* MedicinalProduct_Name_impl_;
    MedicinalProduct_Name_pskel (MedicinalProduct_Name_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* productName_parser_;
    ::fhir::MedicinalProduct_NamePart_pskel* namePart_parser_;
    ::fhir::MedicinalProduct_CountryLanguage_pskel* countryLanguage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_Name_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_NamePart_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    part ();

    virtual void
    type ();

    virtual void
    post_MedicinalProduct_NamePart ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* part */,
             ::fhir::Coding_pskel& /* type */);

    // Individual element parsers.
    //
    void
    part_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_NamePart_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_NamePart_pskel* MedicinalProduct_NamePart_impl_;
    MedicinalProduct_NamePart_pskel (MedicinalProduct_NamePart_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* part_parser_;
    ::fhir::Coding_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_NamePart_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_CountryLanguage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    country ();

    virtual void
    jurisdiction ();

    virtual void
    language ();

    virtual void
    post_MedicinalProduct_CountryLanguage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* country */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::CodeableConcept_pskel& /* language */);

    // Individual element parsers.
    //
    void
    country_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    language_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_CountryLanguage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_CountryLanguage_pskel* MedicinalProduct_CountryLanguage_impl_;
    MedicinalProduct_CountryLanguage_pskel (MedicinalProduct_CountryLanguage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* country_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::CodeableConcept_pskel* language_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_CountryLanguage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_ManufacturingBusinessOperation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operationType ();

    virtual void
    authorisationReferenceNumber ();

    virtual void
    effectiveDate ();

    virtual void
    confidentialityIndicator ();

    virtual void
    manufacturer ();

    virtual void
    regulator ();

    virtual void
    post_MedicinalProduct_ManufacturingBusinessOperation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* operationType */,
             ::fhir::Identifier_pskel& /* authorisationReferenceNumber */,
             ::fhir::dateTime_pskel& /* effectiveDate */,
             ::fhir::CodeableConcept_pskel& /* confidentialityIndicator */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::Reference_pskel& /* regulator */);

    // Individual element parsers.
    //
    void
    operationType_parser (::fhir::CodeableConcept_pskel&);

    void
    authorisationReferenceNumber_parser (::fhir::Identifier_pskel&);

    void
    effectiveDate_parser (::fhir::dateTime_pskel&);

    void
    confidentialityIndicator_parser (::fhir::CodeableConcept_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    regulator_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_ManufacturingBusinessOperation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_ManufacturingBusinessOperation_pskel* MedicinalProduct_ManufacturingBusinessOperation_impl_;
    MedicinalProduct_ManufacturingBusinessOperation_pskel (MedicinalProduct_ManufacturingBusinessOperation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* operationType_parser_;
    ::fhir::Identifier_pskel* authorisationReferenceNumber_parser_;
    ::fhir::dateTime_pskel* effectiveDate_parser_;
    ::fhir::CodeableConcept_pskel* confidentialityIndicator_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::Reference_pskel* regulator_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_SpecialDesignation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    intendedUse ();

    virtual void
    indicationCodeableConcept ();

    virtual void
    indicationReference ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    species ();

    virtual void
    post_MedicinalProduct_SpecialDesignation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* intendedUse */,
             ::fhir::CodeableConcept_pskel& /* indicationCodeableConcept */,
             ::fhir::Reference_pskel& /* indicationReference */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* species */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    intendedUse_parser (::fhir::CodeableConcept_pskel&);

    void
    indicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    indicationReference_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    species_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_SpecialDesignation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_SpecialDesignation_pskel* MedicinalProduct_SpecialDesignation_impl_;
    MedicinalProduct_SpecialDesignation_pskel (MedicinalProduct_SpecialDesignation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* intendedUse_parser_;
    ::fhir::CodeableConcept_pskel* indicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* indicationReference_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* species_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_SpecialDesignation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MEDICINALPRODUCT_PSKEL_HXX
