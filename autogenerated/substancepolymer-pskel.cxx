// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "substancepolymer-pskel.hxx"

namespace fhir
{
  // SubstancePolymer_pskel
  //

  void SubstancePolymer_pskel::
  class__parser (::fhir::CodeableConcept_pskel& p)
  {
    this->class__parser_ = &p;
  }

  void SubstancePolymer_pskel::
  geometry_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->geometry_parser_ = &p;
  }

  void SubstancePolymer_pskel::
  copolymerConnectivity_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->copolymerConnectivity_parser_ = &p;
  }

  void SubstancePolymer_pskel::
  modification_parser (::fhir::string_pskel& p)
  {
    this->modification_parser_ = &p;
  }

  void SubstancePolymer_pskel::
  monomerSet_parser (::fhir::SubstancePolymer_MonomerSet_pskel& p)
  {
    this->monomerSet_parser_ = &p;
  }

  void SubstancePolymer_pskel::
  repeat_parser (::fhir::SubstancePolymer_Repeat_pskel& p)
  {
    this->repeat_parser_ = &p;
  }

  void SubstancePolymer_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& class_,
           ::fhir::CodeableConcept_pskel& geometry,
           ::fhir::CodeableConcept_pskel& copolymerConnectivity,
           ::fhir::string_pskel& modification,
           ::fhir::SubstancePolymer_MonomerSet_pskel& monomerSet,
           ::fhir::SubstancePolymer_Repeat_pskel& repeat)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->class__parser_ = &class_;
    this->geometry_parser_ = &geometry;
    this->copolymerConnectivity_parser_ = &copolymerConnectivity;
    this->modification_parser_ = &modification;
    this->monomerSet_parser_ = &monomerSet;
    this->repeat_parser_ = &repeat;
  }

  SubstancePolymer_pskel::
  SubstancePolymer_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    SubstancePolymer_impl_ (0),
    class__parser_ (0),
    geometry_parser_ (0),
    copolymerConnectivity_parser_ (0),
    modification_parser_ (0),
    monomerSet_parser_ (0),
    repeat_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstancePolymer_pskel::
  SubstancePolymer_pskel (SubstancePolymer_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    SubstancePolymer_impl_ (impl),
    class__parser_ (0),
    geometry_parser_ (0),
    copolymerConnectivity_parser_ (0),
    modification_parser_ (0),
    monomerSet_parser_ (0),
    repeat_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstancePolymer_MonomerSet_pskel
  //

  void SubstancePolymer_MonomerSet_pskel::
  ratioType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->ratioType_parser_ = &p;
  }

  void SubstancePolymer_MonomerSet_pskel::
  startingMaterial_parser (::fhir::SubstancePolymer_StartingMaterial_pskel& p)
  {
    this->startingMaterial_parser_ = &p;
  }

  void SubstancePolymer_MonomerSet_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& ratioType,
           ::fhir::SubstancePolymer_StartingMaterial_pskel& startingMaterial)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->ratioType_parser_ = &ratioType;
    this->startingMaterial_parser_ = &startingMaterial;
  }

  SubstancePolymer_MonomerSet_pskel::
  SubstancePolymer_MonomerSet_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstancePolymer_MonomerSet_impl_ (0),
    ratioType_parser_ (0),
    startingMaterial_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstancePolymer_MonomerSet_pskel::
  SubstancePolymer_MonomerSet_pskel (SubstancePolymer_MonomerSet_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstancePolymer_MonomerSet_impl_ (impl),
    ratioType_parser_ (0),
    startingMaterial_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstancePolymer_StartingMaterial_pskel
  //

  void SubstancePolymer_StartingMaterial_pskel::
  material_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->material_parser_ = &p;
  }

  void SubstancePolymer_StartingMaterial_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstancePolymer_StartingMaterial_pskel::
  isDefining_parser (::fhir::boolean_pskel& p)
  {
    this->isDefining_parser_ = &p;
  }

  void SubstancePolymer_StartingMaterial_pskel::
  amount_parser (::fhir::SubstanceAmount_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void SubstancePolymer_StartingMaterial_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& material,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::boolean_pskel& isDefining,
           ::fhir::SubstanceAmount_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->material_parser_ = &material;
    this->type_parser_ = &type;
    this->isDefining_parser_ = &isDefining;
    this->amount_parser_ = &amount;
  }

  SubstancePolymer_StartingMaterial_pskel::
  SubstancePolymer_StartingMaterial_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstancePolymer_StartingMaterial_impl_ (0),
    material_parser_ (0),
    type_parser_ (0),
    isDefining_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstancePolymer_StartingMaterial_pskel::
  SubstancePolymer_StartingMaterial_pskel (SubstancePolymer_StartingMaterial_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstancePolymer_StartingMaterial_impl_ (impl),
    material_parser_ (0),
    type_parser_ (0),
    isDefining_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstancePolymer_Repeat_pskel
  //

  void SubstancePolymer_Repeat_pskel::
  numberOfUnits_parser (::fhir::integer_pskel& p)
  {
    this->numberOfUnits_parser_ = &p;
  }

  void SubstancePolymer_Repeat_pskel::
  averageMolecularFormula_parser (::fhir::string_pskel& p)
  {
    this->averageMolecularFormula_parser_ = &p;
  }

  void SubstancePolymer_Repeat_pskel::
  repeatUnitAmountType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->repeatUnitAmountType_parser_ = &p;
  }

  void SubstancePolymer_Repeat_pskel::
  repeatUnit_parser (::fhir::SubstancePolymer_RepeatUnit_pskel& p)
  {
    this->repeatUnit_parser_ = &p;
  }

  void SubstancePolymer_Repeat_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::integer_pskel& numberOfUnits,
           ::fhir::string_pskel& averageMolecularFormula,
           ::fhir::CodeableConcept_pskel& repeatUnitAmountType,
           ::fhir::SubstancePolymer_RepeatUnit_pskel& repeatUnit)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->numberOfUnits_parser_ = &numberOfUnits;
    this->averageMolecularFormula_parser_ = &averageMolecularFormula;
    this->repeatUnitAmountType_parser_ = &repeatUnitAmountType;
    this->repeatUnit_parser_ = &repeatUnit;
  }

  SubstancePolymer_Repeat_pskel::
  SubstancePolymer_Repeat_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstancePolymer_Repeat_impl_ (0),
    numberOfUnits_parser_ (0),
    averageMolecularFormula_parser_ (0),
    repeatUnitAmountType_parser_ (0),
    repeatUnit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstancePolymer_Repeat_pskel::
  SubstancePolymer_Repeat_pskel (SubstancePolymer_Repeat_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstancePolymer_Repeat_impl_ (impl),
    numberOfUnits_parser_ (0),
    averageMolecularFormula_parser_ (0),
    repeatUnitAmountType_parser_ (0),
    repeatUnit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstancePolymer_RepeatUnit_pskel
  //

  void SubstancePolymer_RepeatUnit_pskel::
  orientationOfPolymerisation_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->orientationOfPolymerisation_parser_ = &p;
  }

  void SubstancePolymer_RepeatUnit_pskel::
  repeatUnit_parser (::fhir::string_pskel& p)
  {
    this->repeatUnit_parser_ = &p;
  }

  void SubstancePolymer_RepeatUnit_pskel::
  amount_parser (::fhir::SubstanceAmount_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void SubstancePolymer_RepeatUnit_pskel::
  degreeOfPolymerisation_parser (::fhir::SubstancePolymer_DegreeOfPolymerisation_pskel& p)
  {
    this->degreeOfPolymerisation_parser_ = &p;
  }

  void SubstancePolymer_RepeatUnit_pskel::
  structuralRepresentation_parser (::fhir::SubstancePolymer_StructuralRepresentation_pskel& p)
  {
    this->structuralRepresentation_parser_ = &p;
  }

  void SubstancePolymer_RepeatUnit_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& orientationOfPolymerisation,
           ::fhir::string_pskel& repeatUnit,
           ::fhir::SubstanceAmount_pskel& amount,
           ::fhir::SubstancePolymer_DegreeOfPolymerisation_pskel& degreeOfPolymerisation,
           ::fhir::SubstancePolymer_StructuralRepresentation_pskel& structuralRepresentation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->orientationOfPolymerisation_parser_ = &orientationOfPolymerisation;
    this->repeatUnit_parser_ = &repeatUnit;
    this->amount_parser_ = &amount;
    this->degreeOfPolymerisation_parser_ = &degreeOfPolymerisation;
    this->structuralRepresentation_parser_ = &structuralRepresentation;
  }

  SubstancePolymer_RepeatUnit_pskel::
  SubstancePolymer_RepeatUnit_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstancePolymer_RepeatUnit_impl_ (0),
    orientationOfPolymerisation_parser_ (0),
    repeatUnit_parser_ (0),
    amount_parser_ (0),
    degreeOfPolymerisation_parser_ (0),
    structuralRepresentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstancePolymer_RepeatUnit_pskel::
  SubstancePolymer_RepeatUnit_pskel (SubstancePolymer_RepeatUnit_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstancePolymer_RepeatUnit_impl_ (impl),
    orientationOfPolymerisation_parser_ (0),
    repeatUnit_parser_ (0),
    amount_parser_ (0),
    degreeOfPolymerisation_parser_ (0),
    structuralRepresentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstancePolymer_DegreeOfPolymerisation_pskel
  //

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  degree_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->degree_parser_ = &p;
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  amount_parser (::fhir::SubstanceAmount_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& degree,
           ::fhir::SubstanceAmount_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->degree_parser_ = &degree;
    this->amount_parser_ = &amount;
  }

  SubstancePolymer_DegreeOfPolymerisation_pskel::
  SubstancePolymer_DegreeOfPolymerisation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstancePolymer_DegreeOfPolymerisation_impl_ (0),
    degree_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstancePolymer_DegreeOfPolymerisation_pskel::
  SubstancePolymer_DegreeOfPolymerisation_pskel (SubstancePolymer_DegreeOfPolymerisation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstancePolymer_DegreeOfPolymerisation_impl_ (impl),
    degree_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstancePolymer_StructuralRepresentation_pskel
  //

  void SubstancePolymer_StructuralRepresentation_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  representation_parser (::fhir::string_pskel& p)
  {
    this->representation_parser_ = &p;
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  attachment_parser (::fhir::Attachment_pskel& p)
  {
    this->attachment_parser_ = &p;
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::string_pskel& representation,
           ::fhir::Attachment_pskel& attachment)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->representation_parser_ = &representation;
    this->attachment_parser_ = &attachment;
  }

  SubstancePolymer_StructuralRepresentation_pskel::
  SubstancePolymer_StructuralRepresentation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstancePolymer_StructuralRepresentation_impl_ (0),
    type_parser_ (0),
    representation_parser_ (0),
    attachment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstancePolymer_StructuralRepresentation_pskel::
  SubstancePolymer_StructuralRepresentation_pskel (SubstancePolymer_StructuralRepresentation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstancePolymer_StructuralRepresentation_impl_ (impl),
    type_parser_ (0),
    representation_parser_ (0),
    attachment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // SubstancePolymer_pskel
  //

  void SubstancePolymer_pskel::
  class_ ()
  {
    if (this->SubstancePolymer_impl_)
      this->SubstancePolymer_impl_->class_ ();
  }

  void SubstancePolymer_pskel::
  geometry ()
  {
    if (this->SubstancePolymer_impl_)
      this->SubstancePolymer_impl_->geometry ();
  }

  void SubstancePolymer_pskel::
  copolymerConnectivity ()
  {
    if (this->SubstancePolymer_impl_)
      this->SubstancePolymer_impl_->copolymerConnectivity ();
  }

  void SubstancePolymer_pskel::
  modification ()
  {
    if (this->SubstancePolymer_impl_)
      this->SubstancePolymer_impl_->modification ();
  }

  void SubstancePolymer_pskel::
  monomerSet ()
  {
    if (this->SubstancePolymer_impl_)
      this->SubstancePolymer_impl_->monomerSet ();
  }

  void SubstancePolymer_pskel::
  repeat ()
  {
    if (this->SubstancePolymer_impl_)
      this->SubstancePolymer_impl_->repeat ();
  }

  void SubstancePolymer_pskel::
  post_SubstancePolymer ()
  {
    if (this->SubstancePolymer_impl_)
      this->SubstancePolymer_impl_->post_SubstancePolymer ();
    else
      post_DomainResource ();
  }

  void SubstancePolymer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->class__parser_)
      this->class__parser_->_reset ();

    if (this->geometry_parser_)
      this->geometry_parser_->_reset ();

    if (this->copolymerConnectivity_parser_)
      this->copolymerConnectivity_parser_->_reset ();

    if (this->modification_parser_)
      this->modification_parser_->_reset ();

    if (this->monomerSet_parser_)
      this->monomerSet_parser_->_reset ();

    if (this->repeat_parser_)
      this->repeat_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstancePolymer_MonomerSet_pskel
  //

  void SubstancePolymer_MonomerSet_pskel::
  ratioType ()
  {
    if (this->SubstancePolymer_MonomerSet_impl_)
      this->SubstancePolymer_MonomerSet_impl_->ratioType ();
  }

  void SubstancePolymer_MonomerSet_pskel::
  startingMaterial ()
  {
    if (this->SubstancePolymer_MonomerSet_impl_)
      this->SubstancePolymer_MonomerSet_impl_->startingMaterial ();
  }

  void SubstancePolymer_MonomerSet_pskel::
  post_SubstancePolymer_MonomerSet ()
  {
    if (this->SubstancePolymer_MonomerSet_impl_)
      this->SubstancePolymer_MonomerSet_impl_->post_SubstancePolymer_MonomerSet ();
    else
      post_BackboneElement ();
  }

  void SubstancePolymer_MonomerSet_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->ratioType_parser_)
      this->ratioType_parser_->_reset ();

    if (this->startingMaterial_parser_)
      this->startingMaterial_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstancePolymer_StartingMaterial_pskel
  //

  void SubstancePolymer_StartingMaterial_pskel::
  material ()
  {
    if (this->SubstancePolymer_StartingMaterial_impl_)
      this->SubstancePolymer_StartingMaterial_impl_->material ();
  }

  void SubstancePolymer_StartingMaterial_pskel::
  type ()
  {
    if (this->SubstancePolymer_StartingMaterial_impl_)
      this->SubstancePolymer_StartingMaterial_impl_->type ();
  }

  void SubstancePolymer_StartingMaterial_pskel::
  isDefining ()
  {
    if (this->SubstancePolymer_StartingMaterial_impl_)
      this->SubstancePolymer_StartingMaterial_impl_->isDefining ();
  }

  void SubstancePolymer_StartingMaterial_pskel::
  amount ()
  {
    if (this->SubstancePolymer_StartingMaterial_impl_)
      this->SubstancePolymer_StartingMaterial_impl_->amount ();
  }

  void SubstancePolymer_StartingMaterial_pskel::
  post_SubstancePolymer_StartingMaterial ()
  {
    if (this->SubstancePolymer_StartingMaterial_impl_)
      this->SubstancePolymer_StartingMaterial_impl_->post_SubstancePolymer_StartingMaterial ();
    else
      post_BackboneElement ();
  }

  void SubstancePolymer_StartingMaterial_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->material_parser_)
      this->material_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->isDefining_parser_)
      this->isDefining_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstancePolymer_Repeat_pskel
  //

  void SubstancePolymer_Repeat_pskel::
  numberOfUnits ()
  {
    if (this->SubstancePolymer_Repeat_impl_)
      this->SubstancePolymer_Repeat_impl_->numberOfUnits ();
  }

  void SubstancePolymer_Repeat_pskel::
  averageMolecularFormula ()
  {
    if (this->SubstancePolymer_Repeat_impl_)
      this->SubstancePolymer_Repeat_impl_->averageMolecularFormula ();
  }

  void SubstancePolymer_Repeat_pskel::
  repeatUnitAmountType ()
  {
    if (this->SubstancePolymer_Repeat_impl_)
      this->SubstancePolymer_Repeat_impl_->repeatUnitAmountType ();
  }

  void SubstancePolymer_Repeat_pskel::
  repeatUnit ()
  {
    if (this->SubstancePolymer_Repeat_impl_)
      this->SubstancePolymer_Repeat_impl_->repeatUnit ();
  }

  void SubstancePolymer_Repeat_pskel::
  post_SubstancePolymer_Repeat ()
  {
    if (this->SubstancePolymer_Repeat_impl_)
      this->SubstancePolymer_Repeat_impl_->post_SubstancePolymer_Repeat ();
    else
      post_BackboneElement ();
  }

  void SubstancePolymer_Repeat_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->numberOfUnits_parser_)
      this->numberOfUnits_parser_->_reset ();

    if (this->averageMolecularFormula_parser_)
      this->averageMolecularFormula_parser_->_reset ();

    if (this->repeatUnitAmountType_parser_)
      this->repeatUnitAmountType_parser_->_reset ();

    if (this->repeatUnit_parser_)
      this->repeatUnit_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstancePolymer_RepeatUnit_pskel
  //

  void SubstancePolymer_RepeatUnit_pskel::
  orientationOfPolymerisation ()
  {
    if (this->SubstancePolymer_RepeatUnit_impl_)
      this->SubstancePolymer_RepeatUnit_impl_->orientationOfPolymerisation ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  repeatUnit ()
  {
    if (this->SubstancePolymer_RepeatUnit_impl_)
      this->SubstancePolymer_RepeatUnit_impl_->repeatUnit ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  amount ()
  {
    if (this->SubstancePolymer_RepeatUnit_impl_)
      this->SubstancePolymer_RepeatUnit_impl_->amount ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  degreeOfPolymerisation ()
  {
    if (this->SubstancePolymer_RepeatUnit_impl_)
      this->SubstancePolymer_RepeatUnit_impl_->degreeOfPolymerisation ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  structuralRepresentation ()
  {
    if (this->SubstancePolymer_RepeatUnit_impl_)
      this->SubstancePolymer_RepeatUnit_impl_->structuralRepresentation ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  post_SubstancePolymer_RepeatUnit ()
  {
    if (this->SubstancePolymer_RepeatUnit_impl_)
      this->SubstancePolymer_RepeatUnit_impl_->post_SubstancePolymer_RepeatUnit ();
    else
      post_BackboneElement ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->orientationOfPolymerisation_parser_)
      this->orientationOfPolymerisation_parser_->_reset ();

    if (this->repeatUnit_parser_)
      this->repeatUnit_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    if (this->degreeOfPolymerisation_parser_)
      this->degreeOfPolymerisation_parser_->_reset ();

    if (this->structuralRepresentation_parser_)
      this->structuralRepresentation_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstancePolymer_DegreeOfPolymerisation_pskel
  //

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  degree ()
  {
    if (this->SubstancePolymer_DegreeOfPolymerisation_impl_)
      this->SubstancePolymer_DegreeOfPolymerisation_impl_->degree ();
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  amount ()
  {
    if (this->SubstancePolymer_DegreeOfPolymerisation_impl_)
      this->SubstancePolymer_DegreeOfPolymerisation_impl_->amount ();
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  post_SubstancePolymer_DegreeOfPolymerisation ()
  {
    if (this->SubstancePolymer_DegreeOfPolymerisation_impl_)
      this->SubstancePolymer_DegreeOfPolymerisation_impl_->post_SubstancePolymer_DegreeOfPolymerisation ();
    else
      post_BackboneElement ();
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->degree_parser_)
      this->degree_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstancePolymer_StructuralRepresentation_pskel
  //

  void SubstancePolymer_StructuralRepresentation_pskel::
  type ()
  {
    if (this->SubstancePolymer_StructuralRepresentation_impl_)
      this->SubstancePolymer_StructuralRepresentation_impl_->type ();
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  representation ()
  {
    if (this->SubstancePolymer_StructuralRepresentation_impl_)
      this->SubstancePolymer_StructuralRepresentation_impl_->representation ();
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  attachment ()
  {
    if (this->SubstancePolymer_StructuralRepresentation_impl_)
      this->SubstancePolymer_StructuralRepresentation_impl_->attachment ();
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  post_SubstancePolymer_StructuralRepresentation ()
  {
    if (this->SubstancePolymer_StructuralRepresentation_impl_)
      this->SubstancePolymer_StructuralRepresentation_impl_->post_SubstancePolymer_StructuralRepresentation ();
    else
      post_BackboneElement ();
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->representation_parser_)
      this->representation_parser_->_reset ();

    if (this->attachment_parser_)
      this->attachment_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for SubstancePolymer_pskel.
  //
  bool SubstancePolymer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "class" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "geometry" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "copolymerConnectivity" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "modification" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "monomerSet" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "repeat" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstancePolymer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstancePolymer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstancePolymer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void SubstancePolymer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstancePolymer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "class" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->class__parser_)
            {
              this->class__parser_->pre ();
              ctx.nested_parser (this->class__parser_);
            }
          }
          else
          {
            if (this->class__parser_ != 0)
            {
              this->class__parser_->post_CodeableConcept ();
              this->class_ ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "geometry" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->geometry_parser_)
            {
              this->geometry_parser_->pre ();
              ctx.nested_parser (this->geometry_parser_);
            }
          }
          else
          {
            if (this->geometry_parser_ != 0)
            {
              this->geometry_parser_->post_CodeableConcept ();
              this->geometry ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "copolymerConnectivity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copolymerConnectivity_parser_)
            {
              this->copolymerConnectivity_parser_->pre ();
              ctx.nested_parser (this->copolymerConnectivity_parser_);
            }
          }
          else
          {
            if (this->copolymerConnectivity_parser_ != 0)
            {
              this->copolymerConnectivity_parser_->post_CodeableConcept ();
              this->copolymerConnectivity ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "modification" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modification_parser_)
            {
              this->modification_parser_->pre ();
              ctx.nested_parser (this->modification_parser_);
            }
          }
          else
          {
            if (this->modification_parser_ != 0)
            {
              this->modification_parser_->post_string ();
              this->modification ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "monomerSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->monomerSet_parser_)
            {
              this->monomerSet_parser_->pre ();
              ctx.nested_parser (this->monomerSet_parser_);
            }
          }
          else
          {
            if (this->monomerSet_parser_ != 0)
            {
              this->monomerSet_parser_->post_SubstancePolymer_MonomerSet ();
              this->monomerSet ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "repeat" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->repeat_parser_)
            {
              this->repeat_parser_->pre ();
              ctx.nested_parser (this->repeat_parser_);
            }
          }
          else
          {
            if (this->repeat_parser_ != 0)
            {
              this->repeat_parser_->post_SubstancePolymer_Repeat ();
              this->repeat ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstancePolymer_MonomerSet_pskel.
  //
  bool SubstancePolymer_MonomerSet_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "ratioType" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "startingMaterial" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstancePolymer_MonomerSet_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstancePolymer_MonomerSet_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstancePolymer_MonomerSet_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstancePolymer_MonomerSet_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstancePolymer_MonomerSet_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "ratioType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ratioType_parser_)
            {
              this->ratioType_parser_->pre ();
              ctx.nested_parser (this->ratioType_parser_);
            }
          }
          else
          {
            if (this->ratioType_parser_ != 0)
            {
              this->ratioType_parser_->post_CodeableConcept ();
              this->ratioType ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "startingMaterial" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->startingMaterial_parser_)
            {
              this->startingMaterial_parser_->pre ();
              ctx.nested_parser (this->startingMaterial_parser_);
            }
          }
          else
          {
            if (this->startingMaterial_parser_ != 0)
            {
              this->startingMaterial_parser_->post_SubstancePolymer_StartingMaterial ();
              this->startingMaterial ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstancePolymer_StartingMaterial_pskel.
  //
  bool SubstancePolymer_StartingMaterial_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "material" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "isDefining" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "amount" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstancePolymer_StartingMaterial_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstancePolymer_StartingMaterial_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstancePolymer_StartingMaterial_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstancePolymer_StartingMaterial_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstancePolymer_StartingMaterial_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "material" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->material_parser_)
            {
              this->material_parser_->pre ();
              ctx.nested_parser (this->material_parser_);
            }
          }
          else
          {
            if (this->material_parser_ != 0)
            {
              this->material_parser_->post_CodeableConcept ();
              this->material ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "isDefining" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->isDefining_parser_)
            {
              this->isDefining_parser_->pre ();
              ctx.nested_parser (this->isDefining_parser_);
            }
          }
          else
          {
            if (this->isDefining_parser_ != 0)
            {
              this->isDefining_parser_->post_boolean ();
              this->isDefining ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_SubstanceAmount ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstancePolymer_Repeat_pskel.
  //
  bool SubstancePolymer_Repeat_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "numberOfUnits" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "averageMolecularFormula" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "repeatUnitAmountType" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "repeatUnit" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstancePolymer_Repeat_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstancePolymer_Repeat_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstancePolymer_Repeat_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstancePolymer_Repeat_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstancePolymer_Repeat_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "numberOfUnits" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numberOfUnits_parser_)
            {
              this->numberOfUnits_parser_->pre ();
              ctx.nested_parser (this->numberOfUnits_parser_);
            }
          }
          else
          {
            if (this->numberOfUnits_parser_ != 0)
            {
              this->numberOfUnits_parser_->post_integer ();
              this->numberOfUnits ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "averageMolecularFormula" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->averageMolecularFormula_parser_)
            {
              this->averageMolecularFormula_parser_->pre ();
              ctx.nested_parser (this->averageMolecularFormula_parser_);
            }
          }
          else
          {
            if (this->averageMolecularFormula_parser_ != 0)
            {
              this->averageMolecularFormula_parser_->post_string ();
              this->averageMolecularFormula ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "repeatUnitAmountType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->repeatUnitAmountType_parser_)
            {
              this->repeatUnitAmountType_parser_->pre ();
              ctx.nested_parser (this->repeatUnitAmountType_parser_);
            }
          }
          else
          {
            if (this->repeatUnitAmountType_parser_ != 0)
            {
              this->repeatUnitAmountType_parser_->post_CodeableConcept ();
              this->repeatUnitAmountType ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "repeatUnit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->repeatUnit_parser_)
            {
              this->repeatUnit_parser_->pre ();
              ctx.nested_parser (this->repeatUnit_parser_);
            }
          }
          else
          {
            if (this->repeatUnit_parser_ != 0)
            {
              this->repeatUnit_parser_->post_SubstancePolymer_RepeatUnit ();
              this->repeatUnit ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstancePolymer_RepeatUnit_pskel.
  //
  bool SubstancePolymer_RepeatUnit_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "orientationOfPolymerisation" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "repeatUnit" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "amount" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "degreeOfPolymerisation" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "structuralRepresentation" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstancePolymer_RepeatUnit_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstancePolymer_RepeatUnit_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstancePolymer_RepeatUnit_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstancePolymer_RepeatUnit_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "orientationOfPolymerisation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->orientationOfPolymerisation_parser_)
            {
              this->orientationOfPolymerisation_parser_->pre ();
              ctx.nested_parser (this->orientationOfPolymerisation_parser_);
            }
          }
          else
          {
            if (this->orientationOfPolymerisation_parser_ != 0)
            {
              this->orientationOfPolymerisation_parser_->post_CodeableConcept ();
              this->orientationOfPolymerisation ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "repeatUnit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->repeatUnit_parser_)
            {
              this->repeatUnit_parser_->pre ();
              ctx.nested_parser (this->repeatUnit_parser_);
            }
          }
          else
          {
            if (this->repeatUnit_parser_ != 0)
            {
              this->repeatUnit_parser_->post_string ();
              this->repeatUnit ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_SubstanceAmount ();
              this->amount ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "degreeOfPolymerisation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->degreeOfPolymerisation_parser_)
            {
              this->degreeOfPolymerisation_parser_->pre ();
              ctx.nested_parser (this->degreeOfPolymerisation_parser_);
            }
          }
          else
          {
            if (this->degreeOfPolymerisation_parser_ != 0)
            {
              this->degreeOfPolymerisation_parser_->post_SubstancePolymer_DegreeOfPolymerisation ();
              this->degreeOfPolymerisation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "structuralRepresentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->structuralRepresentation_parser_)
            {
              this->structuralRepresentation_parser_->pre ();
              ctx.nested_parser (this->structuralRepresentation_parser_);
            }
          }
          else
          {
            if (this->structuralRepresentation_parser_ != 0)
            {
              this->structuralRepresentation_parser_->post_SubstancePolymer_StructuralRepresentation ();
              this->structuralRepresentation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstancePolymer_DegreeOfPolymerisation_pskel.
  //
  bool SubstancePolymer_DegreeOfPolymerisation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "degree" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "amount" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstancePolymer_DegreeOfPolymerisation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstancePolymer_DegreeOfPolymerisation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstancePolymer_DegreeOfPolymerisation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "degree" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->degree_parser_)
            {
              this->degree_parser_->pre ();
              ctx.nested_parser (this->degree_parser_);
            }
          }
          else
          {
            if (this->degree_parser_ != 0)
            {
              this->degree_parser_->post_CodeableConcept ();
              this->degree ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_SubstanceAmount ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstancePolymer_StructuralRepresentation_pskel.
  //
  bool SubstancePolymer_StructuralRepresentation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "representation" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "attachment" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstancePolymer_StructuralRepresentation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstancePolymer_StructuralRepresentation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstancePolymer_StructuralRepresentation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "representation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->representation_parser_)
            {
              this->representation_parser_->pre ();
              ctx.nested_parser (this->representation_parser_);
            }
          }
          else
          {
            if (this->representation_parser_ != 0)
            {
              this->representation_parser_->post_string ();
              this->representation ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "attachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->attachment_parser_)
            {
              this->attachment_parser_->pre ();
              ctx.nested_parser (this->attachment_parser_);
            }
          }
          else
          {
            if (this->attachment_parser_ != 0)
            {
              this->attachment_parser_->post_Attachment ();
              this->attachment ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

