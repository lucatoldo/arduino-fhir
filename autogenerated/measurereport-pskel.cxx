// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "measurereport-pskel.hxx"

namespace fhir
{
  // MeasureReport_pskel
  //

  void MeasureReport_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MeasureReport_pskel::
  status_parser (::fhir::MeasureReportStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void MeasureReport_pskel::
  type_parser (::fhir::MeasureReportType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void MeasureReport_pskel::
  measure_parser (::fhir::canonical_pskel& p)
  {
    this->measure_parser_ = &p;
  }

  void MeasureReport_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void MeasureReport_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void MeasureReport_pskel::
  reporter_parser (::fhir::Reference_pskel& p)
  {
    this->reporter_parser_ = &p;
  }

  void MeasureReport_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void MeasureReport_pskel::
  improvementNotation_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->improvementNotation_parser_ = &p;
  }

  void MeasureReport_pskel::
  group_parser (::fhir::MeasureReport_Group_pskel& p)
  {
    this->group_parser_ = &p;
  }

  void MeasureReport_pskel::
  evaluatedResource_parser (::fhir::Reference_pskel& p)
  {
    this->evaluatedResource_parser_ = &p;
  }

  void MeasureReport_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::MeasureReportStatus_pskel& status,
           ::fhir::MeasureReportType_pskel& type,
           ::fhir::canonical_pskel& measure,
           ::fhir::Reference_pskel& subject,
           ::fhir::dateTime_pskel& date,
           ::fhir::Reference_pskel& reporter,
           ::fhir::Period_pskel& period,
           ::fhir::CodeableConcept_pskel& improvementNotation,
           ::fhir::MeasureReport_Group_pskel& group,
           ::fhir::Reference_pskel& evaluatedResource)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->measure_parser_ = &measure;
    this->subject_parser_ = &subject;
    this->date_parser_ = &date;
    this->reporter_parser_ = &reporter;
    this->period_parser_ = &period;
    this->improvementNotation_parser_ = &improvementNotation;
    this->group_parser_ = &group;
    this->evaluatedResource_parser_ = &evaluatedResource;
  }

  MeasureReport_pskel::
  MeasureReport_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MeasureReport_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    measure_parser_ (0),
    subject_parser_ (0),
    date_parser_ (0),
    reporter_parser_ (0),
    period_parser_ (0),
    improvementNotation_parser_ (0),
    group_parser_ (0),
    evaluatedResource_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MeasureReport_pskel::
  MeasureReport_pskel (MeasureReport_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MeasureReport_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    measure_parser_ (0),
    subject_parser_ (0),
    date_parser_ (0),
    reporter_parser_ (0),
    period_parser_ (0),
    improvementNotation_parser_ (0),
    group_parser_ (0),
    evaluatedResource_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MeasureReport_Group_pskel
  //

  void MeasureReport_Group_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MeasureReport_Group_pskel::
  population_parser (::fhir::MeasureReport_Population_pskel& p)
  {
    this->population_parser_ = &p;
  }

  void MeasureReport_Group_pskel::
  measureScore_parser (::fhir::Quantity_pskel& p)
  {
    this->measureScore_parser_ = &p;
  }

  void MeasureReport_Group_pskel::
  stratifier_parser (::fhir::MeasureReport_Stratifier_pskel& p)
  {
    this->stratifier_parser_ = &p;
  }

  void MeasureReport_Group_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::MeasureReport_Population_pskel& population,
           ::fhir::Quantity_pskel& measureScore,
           ::fhir::MeasureReport_Stratifier_pskel& stratifier)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->population_parser_ = &population;
    this->measureScore_parser_ = &measureScore;
    this->stratifier_parser_ = &stratifier;
  }

  MeasureReport_Group_pskel::
  MeasureReport_Group_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MeasureReport_Group_impl_ (0),
    code_parser_ (0),
    population_parser_ (0),
    measureScore_parser_ (0),
    stratifier_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MeasureReport_Group_pskel::
  MeasureReport_Group_pskel (MeasureReport_Group_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MeasureReport_Group_impl_ (impl),
    code_parser_ (0),
    population_parser_ (0),
    measureScore_parser_ (0),
    stratifier_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MeasureReport_Population_pskel
  //

  void MeasureReport_Population_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MeasureReport_Population_pskel::
  count_parser (::fhir::integer_pskel& p)
  {
    this->count_parser_ = &p;
  }

  void MeasureReport_Population_pskel::
  subjectResults_parser (::fhir::Reference_pskel& p)
  {
    this->subjectResults_parser_ = &p;
  }

  void MeasureReport_Population_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::integer_pskel& count,
           ::fhir::Reference_pskel& subjectResults)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->count_parser_ = &count;
    this->subjectResults_parser_ = &subjectResults;
  }

  MeasureReport_Population_pskel::
  MeasureReport_Population_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MeasureReport_Population_impl_ (0),
    code_parser_ (0),
    count_parser_ (0),
    subjectResults_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MeasureReport_Population_pskel::
  MeasureReport_Population_pskel (MeasureReport_Population_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MeasureReport_Population_impl_ (impl),
    code_parser_ (0),
    count_parser_ (0),
    subjectResults_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MeasureReport_Stratifier_pskel
  //

  void MeasureReport_Stratifier_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MeasureReport_Stratifier_pskel::
  stratum_parser (::fhir::MeasureReport_Stratum_pskel& p)
  {
    this->stratum_parser_ = &p;
  }

  void MeasureReport_Stratifier_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::MeasureReport_Stratum_pskel& stratum)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->stratum_parser_ = &stratum;
  }

  MeasureReport_Stratifier_pskel::
  MeasureReport_Stratifier_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MeasureReport_Stratifier_impl_ (0),
    code_parser_ (0),
    stratum_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MeasureReport_Stratifier_pskel::
  MeasureReport_Stratifier_pskel (MeasureReport_Stratifier_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MeasureReport_Stratifier_impl_ (impl),
    code_parser_ (0),
    stratum_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MeasureReport_Stratum_pskel
  //

  void MeasureReport_Stratum_pskel::
  value_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void MeasureReport_Stratum_pskel::
  component_parser (::fhir::MeasureReport_Component_pskel& p)
  {
    this->component_parser_ = &p;
  }

  void MeasureReport_Stratum_pskel::
  population_parser (::fhir::MeasureReport_Population1_pskel& p)
  {
    this->population_parser_ = &p;
  }

  void MeasureReport_Stratum_pskel::
  measureScore_parser (::fhir::Quantity_pskel& p)
  {
    this->measureScore_parser_ = &p;
  }

  void MeasureReport_Stratum_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& value,
           ::fhir::MeasureReport_Component_pskel& component,
           ::fhir::MeasureReport_Population1_pskel& population,
           ::fhir::Quantity_pskel& measureScore)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->value_parser_ = &value;
    this->component_parser_ = &component;
    this->population_parser_ = &population;
    this->measureScore_parser_ = &measureScore;
  }

  MeasureReport_Stratum_pskel::
  MeasureReport_Stratum_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MeasureReport_Stratum_impl_ (0),
    value_parser_ (0),
    component_parser_ (0),
    population_parser_ (0),
    measureScore_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MeasureReport_Stratum_pskel::
  MeasureReport_Stratum_pskel (MeasureReport_Stratum_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MeasureReport_Stratum_impl_ (impl),
    value_parser_ (0),
    component_parser_ (0),
    population_parser_ (0),
    measureScore_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MeasureReport_Component_pskel
  //

  void MeasureReport_Component_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MeasureReport_Component_pskel::
  value_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void MeasureReport_Component_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->value_parser_ = &value;
  }

  MeasureReport_Component_pskel::
  MeasureReport_Component_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MeasureReport_Component_impl_ (0),
    code_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MeasureReport_Component_pskel::
  MeasureReport_Component_pskel (MeasureReport_Component_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MeasureReport_Component_impl_ (impl),
    code_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MeasureReport_Population1_pskel
  //

  void MeasureReport_Population1_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MeasureReport_Population1_pskel::
  count_parser (::fhir::integer_pskel& p)
  {
    this->count_parser_ = &p;
  }

  void MeasureReport_Population1_pskel::
  subjectResults_parser (::fhir::Reference_pskel& p)
  {
    this->subjectResults_parser_ = &p;
  }

  void MeasureReport_Population1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::integer_pskel& count,
           ::fhir::Reference_pskel& subjectResults)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->count_parser_ = &count;
    this->subjectResults_parser_ = &subjectResults;
  }

  MeasureReport_Population1_pskel::
  MeasureReport_Population1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MeasureReport_Population1_impl_ (0),
    code_parser_ (0),
    count_parser_ (0),
    subjectResults_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MeasureReport_Population1_pskel::
  MeasureReport_Population1_pskel (MeasureReport_Population1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MeasureReport_Population1_impl_ (impl),
    code_parser_ (0),
    count_parser_ (0),
    subjectResults_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MeasureReportStatus_list_pskel
  //

  MeasureReportStatus_list_pskel::
  MeasureReportStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    MeasureReportStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_MeasureReportStatus_list_pskel_enums_, 3UL);
  }

  MeasureReportStatus_list_pskel::
  MeasureReportStatus_list_pskel (MeasureReportStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    MeasureReportStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_MeasureReportStatus_list_pskel_enums_, 3UL);
  }

  // MeasureReportStatus_pskel
  //

  void MeasureReportStatus_pskel::
  value_parser (::fhir::MeasureReportStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void MeasureReportStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::MeasureReportStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  MeasureReportStatus_pskel::
  MeasureReportStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    MeasureReportStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  MeasureReportStatus_pskel::
  MeasureReportStatus_pskel (MeasureReportStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    MeasureReportStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // MeasureReportType_list_pskel
  //

  MeasureReportType_list_pskel::
  MeasureReportType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    MeasureReportType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_MeasureReportType_list_pskel_enums_, 4UL);
  }

  MeasureReportType_list_pskel::
  MeasureReportType_list_pskel (MeasureReportType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    MeasureReportType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_MeasureReportType_list_pskel_enums_, 4UL);
  }

  // MeasureReportType_pskel
  //

  void MeasureReportType_pskel::
  value_parser (::fhir::MeasureReportType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void MeasureReportType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::MeasureReportType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  MeasureReportType_pskel::
  MeasureReportType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    MeasureReportType_impl_ (0),
    value_parser_ (0)
  {
  }

  MeasureReportType_pskel::
  MeasureReportType_pskel (MeasureReportType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    MeasureReportType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MeasureReport_pskel
  //

  void MeasureReport_pskel::
  identifier ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->identifier ();
  }

  void MeasureReport_pskel::
  status ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->status ();
  }

  void MeasureReport_pskel::
  type ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->type ();
  }

  void MeasureReport_pskel::
  measure ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->measure ();
  }

  void MeasureReport_pskel::
  subject ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->subject ();
  }

  void MeasureReport_pskel::
  date ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->date ();
  }

  void MeasureReport_pskel::
  reporter ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->reporter ();
  }

  void MeasureReport_pskel::
  period ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->period ();
  }

  void MeasureReport_pskel::
  improvementNotation ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->improvementNotation ();
  }

  void MeasureReport_pskel::
  group ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->group ();
  }

  void MeasureReport_pskel::
  evaluatedResource ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->evaluatedResource ();
  }

  void MeasureReport_pskel::
  post_MeasureReport ()
  {
    if (this->MeasureReport_impl_)
      this->MeasureReport_impl_->post_MeasureReport ();
    else
      post_DomainResource ();
  }

  void MeasureReport_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->measure_parser_)
      this->measure_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->reporter_parser_)
      this->reporter_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->improvementNotation_parser_)
      this->improvementNotation_parser_->_reset ();

    if (this->group_parser_)
      this->group_parser_->_reset ();

    if (this->evaluatedResource_parser_)
      this->evaluatedResource_parser_->_reset ();

    this->resetting_ = false;
  }

  // MeasureReport_Group_pskel
  //

  void MeasureReport_Group_pskel::
  code ()
  {
    if (this->MeasureReport_Group_impl_)
      this->MeasureReport_Group_impl_->code ();
  }

  void MeasureReport_Group_pskel::
  population ()
  {
    if (this->MeasureReport_Group_impl_)
      this->MeasureReport_Group_impl_->population ();
  }

  void MeasureReport_Group_pskel::
  measureScore ()
  {
    if (this->MeasureReport_Group_impl_)
      this->MeasureReport_Group_impl_->measureScore ();
  }

  void MeasureReport_Group_pskel::
  stratifier ()
  {
    if (this->MeasureReport_Group_impl_)
      this->MeasureReport_Group_impl_->stratifier ();
  }

  void MeasureReport_Group_pskel::
  post_MeasureReport_Group ()
  {
    if (this->MeasureReport_Group_impl_)
      this->MeasureReport_Group_impl_->post_MeasureReport_Group ();
    else
      post_BackboneElement ();
  }

  void MeasureReport_Group_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->population_parser_)
      this->population_parser_->_reset ();

    if (this->measureScore_parser_)
      this->measureScore_parser_->_reset ();

    if (this->stratifier_parser_)
      this->stratifier_parser_->_reset ();

    this->resetting_ = false;
  }

  // MeasureReport_Population_pskel
  //

  void MeasureReport_Population_pskel::
  code ()
  {
    if (this->MeasureReport_Population_impl_)
      this->MeasureReport_Population_impl_->code ();
  }

  void MeasureReport_Population_pskel::
  count ()
  {
    if (this->MeasureReport_Population_impl_)
      this->MeasureReport_Population_impl_->count ();
  }

  void MeasureReport_Population_pskel::
  subjectResults ()
  {
    if (this->MeasureReport_Population_impl_)
      this->MeasureReport_Population_impl_->subjectResults ();
  }

  void MeasureReport_Population_pskel::
  post_MeasureReport_Population ()
  {
    if (this->MeasureReport_Population_impl_)
      this->MeasureReport_Population_impl_->post_MeasureReport_Population ();
    else
      post_BackboneElement ();
  }

  void MeasureReport_Population_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->count_parser_)
      this->count_parser_->_reset ();

    if (this->subjectResults_parser_)
      this->subjectResults_parser_->_reset ();

    this->resetting_ = false;
  }

  // MeasureReport_Stratifier_pskel
  //

  void MeasureReport_Stratifier_pskel::
  code ()
  {
    if (this->MeasureReport_Stratifier_impl_)
      this->MeasureReport_Stratifier_impl_->code ();
  }

  void MeasureReport_Stratifier_pskel::
  stratum ()
  {
    if (this->MeasureReport_Stratifier_impl_)
      this->MeasureReport_Stratifier_impl_->stratum ();
  }

  void MeasureReport_Stratifier_pskel::
  post_MeasureReport_Stratifier ()
  {
    if (this->MeasureReport_Stratifier_impl_)
      this->MeasureReport_Stratifier_impl_->post_MeasureReport_Stratifier ();
    else
      post_BackboneElement ();
  }

  void MeasureReport_Stratifier_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->stratum_parser_)
      this->stratum_parser_->_reset ();

    this->resetting_ = false;
  }

  // MeasureReport_Stratum_pskel
  //

  void MeasureReport_Stratum_pskel::
  value ()
  {
    if (this->MeasureReport_Stratum_impl_)
      this->MeasureReport_Stratum_impl_->value ();
  }

  void MeasureReport_Stratum_pskel::
  component ()
  {
    if (this->MeasureReport_Stratum_impl_)
      this->MeasureReport_Stratum_impl_->component ();
  }

  void MeasureReport_Stratum_pskel::
  population ()
  {
    if (this->MeasureReport_Stratum_impl_)
      this->MeasureReport_Stratum_impl_->population ();
  }

  void MeasureReport_Stratum_pskel::
  measureScore ()
  {
    if (this->MeasureReport_Stratum_impl_)
      this->MeasureReport_Stratum_impl_->measureScore ();
  }

  void MeasureReport_Stratum_pskel::
  post_MeasureReport_Stratum ()
  {
    if (this->MeasureReport_Stratum_impl_)
      this->MeasureReport_Stratum_impl_->post_MeasureReport_Stratum ();
    else
      post_BackboneElement ();
  }

  void MeasureReport_Stratum_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->component_parser_)
      this->component_parser_->_reset ();

    if (this->population_parser_)
      this->population_parser_->_reset ();

    if (this->measureScore_parser_)
      this->measureScore_parser_->_reset ();

    this->resetting_ = false;
  }

  // MeasureReport_Component_pskel
  //

  void MeasureReport_Component_pskel::
  code ()
  {
    if (this->MeasureReport_Component_impl_)
      this->MeasureReport_Component_impl_->code ();
  }

  void MeasureReport_Component_pskel::
  value ()
  {
    if (this->MeasureReport_Component_impl_)
      this->MeasureReport_Component_impl_->value ();
  }

  void MeasureReport_Component_pskel::
  post_MeasureReport_Component ()
  {
    if (this->MeasureReport_Component_impl_)
      this->MeasureReport_Component_impl_->post_MeasureReport_Component ();
    else
      post_BackboneElement ();
  }

  void MeasureReport_Component_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }

  // MeasureReport_Population1_pskel
  //

  void MeasureReport_Population1_pskel::
  code ()
  {
    if (this->MeasureReport_Population1_impl_)
      this->MeasureReport_Population1_impl_->code ();
  }

  void MeasureReport_Population1_pskel::
  count ()
  {
    if (this->MeasureReport_Population1_impl_)
      this->MeasureReport_Population1_impl_->count ();
  }

  void MeasureReport_Population1_pskel::
  subjectResults ()
  {
    if (this->MeasureReport_Population1_impl_)
      this->MeasureReport_Population1_impl_->subjectResults ();
  }

  void MeasureReport_Population1_pskel::
  post_MeasureReport_Population1 ()
  {
    if (this->MeasureReport_Population1_impl_)
      this->MeasureReport_Population1_impl_->post_MeasureReport_Population1 ();
    else
      post_BackboneElement ();
  }

  void MeasureReport_Population1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->count_parser_)
      this->count_parser_->_reset ();

    if (this->subjectResults_parser_)
      this->subjectResults_parser_->_reset ();

    this->resetting_ = false;
  }

  // MeasureReportStatus_list_pskel
  //

  void MeasureReportStatus_list_pskel::
  post_MeasureReportStatus_list ()
  {
    if (this->MeasureReportStatus_list_impl_)
      this->MeasureReportStatus_list_impl_->post_MeasureReportStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const MeasureReportStatus_list_pskel::_xsde_MeasureReportStatus_list_pskel_enums_[3UL] = 
  {
    "complete",
    "error",
    "pending"
  };

  // MeasureReportStatus_pskel
  //

  void MeasureReportStatus_pskel::
  value ()
  {
    if (this->MeasureReportStatus_impl_)
      this->MeasureReportStatus_impl_->value ();
  }

  void MeasureReportStatus_pskel::
  post_MeasureReportStatus ()
  {
    if (this->MeasureReportStatus_impl_)
      this->MeasureReportStatus_impl_->post_MeasureReportStatus ();
    else
      post_Element ();
  }

  void MeasureReportStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // MeasureReportType_list_pskel
  //

  void MeasureReportType_list_pskel::
  post_MeasureReportType_list ()
  {
    if (this->MeasureReportType_list_impl_)
      this->MeasureReportType_list_impl_->post_MeasureReportType_list ();
    else
      post_code_primitive ();
  }

  const char* const MeasureReportType_list_pskel::_xsde_MeasureReportType_list_pskel_enums_[4UL] = 
  {
    "data-collection",
    "individual",
    "subject-list",
    "summary"
  };

  // MeasureReportType_pskel
  //

  void MeasureReportType_pskel::
  value ()
  {
    if (this->MeasureReportType_impl_)
      this->MeasureReportType_impl_->value ();
  }

  void MeasureReportType_pskel::
  post_MeasureReportType ()
  {
    if (this->MeasureReportType_impl_)
      this->MeasureReportType_impl_->post_MeasureReportType ();
    else
      post_Element ();
  }

  void MeasureReportType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MeasureReport_pskel.
  //
  bool MeasureReport_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MeasureReport_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MeasureReport_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MeasureReport_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MeasureReport_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MeasureReport_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_MeasureReportStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_MeasureReportType ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "measure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measure_parser_)
            {
              this->measure_parser_->pre ();
              ctx.nested_parser (this->measure_parser_);
            }
          }
          else
          {
            if (this->measure_parser_ != 0)
            {
              this->measure_parser_->post_canonical ();
              this->measure ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "reporter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reporter_parser_)
            {
              this->reporter_parser_->pre ();
              ctx.nested_parser (this->reporter_parser_);
            }
          }
          else
          {
            if (this->reporter_parser_ != 0)
            {
              this->reporter_parser_->post_Reference ();
              this->reporter ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "improvementNotation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->improvementNotation_parser_)
            {
              this->improvementNotation_parser_->pre ();
              ctx.nested_parser (this->improvementNotation_parser_);
            }
          }
          else
          {
            if (this->improvementNotation_parser_ != 0)
            {
              this->improvementNotation_parser_->post_CodeableConcept ();
              this->improvementNotation ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "group" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->group_parser_)
            {
              this->group_parser_->pre ();
              ctx.nested_parser (this->group_parser_);
            }
          }
          else
          {
            if (this->group_parser_ != 0)
            {
              this->group_parser_->post_MeasureReport_Group ();
              this->group ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "evaluatedResource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->evaluatedResource_parser_)
            {
              this->evaluatedResource_parser_->pre ();
              ctx.nested_parser (this->evaluatedResource_parser_);
            }
          }
          else
          {
            if (this->evaluatedResource_parser_ != 0)
            {
              this->evaluatedResource_parser_->post_Reference ();
              this->evaluatedResource ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MeasureReport_Group_pskel.
  //
  bool MeasureReport_Group_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "population" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "measureScore" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "stratifier" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MeasureReport_Group_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MeasureReport_Group_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MeasureReport_Group_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MeasureReport_Group_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MeasureReport_Group_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "population" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->population_parser_)
            {
              this->population_parser_->pre ();
              ctx.nested_parser (this->population_parser_);
            }
          }
          else
          {
            if (this->population_parser_ != 0)
            {
              this->population_parser_->post_MeasureReport_Population ();
              this->population ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "measureScore" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measureScore_parser_)
            {
              this->measureScore_parser_->pre ();
              ctx.nested_parser (this->measureScore_parser_);
            }
          }
          else
          {
            if (this->measureScore_parser_ != 0)
            {
              this->measureScore_parser_->post_Quantity ();
              this->measureScore ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "stratifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->stratifier_parser_)
            {
              this->stratifier_parser_->pre ();
              ctx.nested_parser (this->stratifier_parser_);
            }
          }
          else
          {
            if (this->stratifier_parser_ != 0)
            {
              this->stratifier_parser_->post_MeasureReport_Stratifier ();
              this->stratifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MeasureReport_Population_pskel.
  //
  bool MeasureReport_Population_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "count" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "subjectResults" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MeasureReport_Population_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MeasureReport_Population_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MeasureReport_Population_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MeasureReport_Population_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MeasureReport_Population_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "count" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->count_parser_)
            {
              this->count_parser_->pre ();
              ctx.nested_parser (this->count_parser_);
            }
          }
          else
          {
            if (this->count_parser_ != 0)
            {
              this->count_parser_->post_integer ();
              this->count ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subjectResults" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectResults_parser_)
            {
              this->subjectResults_parser_->pre ();
              ctx.nested_parser (this->subjectResults_parser_);
            }
          }
          else
          {
            if (this->subjectResults_parser_ != 0)
            {
              this->subjectResults_parser_->post_Reference ();
              this->subjectResults ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MeasureReport_Stratifier_pskel.
  //
  bool MeasureReport_Stratifier_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "stratum" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MeasureReport_Stratifier_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MeasureReport_Stratifier_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MeasureReport_Stratifier_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MeasureReport_Stratifier_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MeasureReport_Stratifier_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "stratum" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->stratum_parser_)
            {
              this->stratum_parser_->pre ();
              ctx.nested_parser (this->stratum_parser_);
            }
          }
          else
          {
            if (this->stratum_parser_ != 0)
            {
              this->stratum_parser_->post_MeasureReport_Stratum ();
              this->stratum ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MeasureReport_Stratum_pskel.
  //
  bool MeasureReport_Stratum_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "value" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "component" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "population" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "measureScore" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MeasureReport_Stratum_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MeasureReport_Stratum_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MeasureReport_Stratum_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MeasureReport_Stratum_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MeasureReport_Stratum_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_CodeableConcept ();
              this->value ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "component" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->component_parser_)
            {
              this->component_parser_->pre ();
              ctx.nested_parser (this->component_parser_);
            }
          }
          else
          {
            if (this->component_parser_ != 0)
            {
              this->component_parser_->post_MeasureReport_Component ();
              this->component ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "population" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->population_parser_)
            {
              this->population_parser_->pre ();
              ctx.nested_parser (this->population_parser_);
            }
          }
          else
          {
            if (this->population_parser_ != 0)
            {
              this->population_parser_->post_MeasureReport_Population1 ();
              this->population ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "measureScore" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measureScore_parser_)
            {
              this->measureScore_parser_->pre ();
              ctx.nested_parser (this->measureScore_parser_);
            }
          }
          else
          {
            if (this->measureScore_parser_ != 0)
            {
              this->measureScore_parser_->post_Quantity ();
              this->measureScore ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MeasureReport_Component_pskel.
  //
  bool MeasureReport_Component_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MeasureReport_Component_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MeasureReport_Component_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MeasureReport_Component_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MeasureReport_Component_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MeasureReport_Component_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_CodeableConcept ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MeasureReport_Population1_pskel.
  //
  bool MeasureReport_Population1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "count" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "subjectResults" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MeasureReport_Population1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MeasureReport_Population1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MeasureReport_Population1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MeasureReport_Population1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MeasureReport_Population1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "count" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->count_parser_)
            {
              this->count_parser_->pre ();
              ctx.nested_parser (this->count_parser_);
            }
          }
          else
          {
            if (this->count_parser_ != 0)
            {
              this->count_parser_->post_integer ();
              this->count ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subjectResults" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectResults_parser_)
            {
              this->subjectResults_parser_->pre ();
              ctx.nested_parser (this->subjectResults_parser_);
            }
          }
          else
          {
            if (this->subjectResults_parser_ != 0)
            {
              this->subjectResults_parser_->post_Reference ();
              this->subjectResults ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for MeasureReportStatus_pskel.
  //
  bool MeasureReportStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_MeasureReportStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for MeasureReportType_pskel.
  //
  bool MeasureReportType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_MeasureReportType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

