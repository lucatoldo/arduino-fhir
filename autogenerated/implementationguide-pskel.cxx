// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "implementationguide-pskel.hxx"

namespace fhir
{
  // ImplementationGuide_pskel
  //

  void ImplementationGuide_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  packageId_parser (::fhir::id_pskel& p)
  {
    this->packageId_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  license_parser (::fhir::SPDXLicense_pskel& p)
  {
    this->license_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  fhirVersion_parser (::fhir::FHIRVersion_pskel& p)
  {
    this->fhirVersion_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  dependsOn_parser (::fhir::ImplementationGuide_DependsOn_pskel& p)
  {
    this->dependsOn_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  global_parser (::fhir::ImplementationGuide_Global_pskel& p)
  {
    this->global_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  definition_parser (::fhir::ImplementationGuide_Definition_pskel& p)
  {
    this->definition_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  manifest_parser (::fhir::ImplementationGuide_Manifest_pskel& p)
  {
    this->manifest_parser_ = &p;
  }

  void ImplementationGuide_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& copyright,
           ::fhir::id_pskel& packageId,
           ::fhir::SPDXLicense_pskel& license,
           ::fhir::FHIRVersion_pskel& fhirVersion,
           ::fhir::ImplementationGuide_DependsOn_pskel& dependsOn,
           ::fhir::ImplementationGuide_Global_pskel& global,
           ::fhir::ImplementationGuide_Definition_pskel& definition,
           ::fhir::ImplementationGuide_Manifest_pskel& manifest)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->copyright_parser_ = &copyright;
    this->packageId_parser_ = &packageId;
    this->license_parser_ = &license;
    this->fhirVersion_parser_ = &fhirVersion;
    this->dependsOn_parser_ = &dependsOn;
    this->global_parser_ = &global;
    this->definition_parser_ = &definition;
    this->manifest_parser_ = &manifest;
  }

  ImplementationGuide_pskel::
  ImplementationGuide_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ImplementationGuide_impl_ (0),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    packageId_parser_ (0),
    license_parser_ (0),
    fhirVersion_parser_ (0),
    dependsOn_parser_ (0),
    global_parser_ (0),
    definition_parser_ (0),
    manifest_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_pskel::
  ImplementationGuide_pskel (ImplementationGuide_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ImplementationGuide_impl_ (impl),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    packageId_parser_ (0),
    license_parser_ (0),
    fhirVersion_parser_ (0),
    dependsOn_parser_ (0),
    global_parser_ (0),
    definition_parser_ (0),
    manifest_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_DependsOn_pskel
  //

  void ImplementationGuide_DependsOn_pskel::
  uri_parser (::fhir::canonical_pskel& p)
  {
    this->uri_parser_ = &p;
  }

  void ImplementationGuide_DependsOn_pskel::
  packageId_parser (::fhir::id_pskel& p)
  {
    this->packageId_parser_ = &p;
  }

  void ImplementationGuide_DependsOn_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void ImplementationGuide_DependsOn_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::canonical_pskel& uri,
           ::fhir::id_pskel& packageId,
           ::fhir::string_pskel& version)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->uri_parser_ = &uri;
    this->packageId_parser_ = &packageId;
    this->version_parser_ = &version;
  }

  ImplementationGuide_DependsOn_pskel::
  ImplementationGuide_DependsOn_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_DependsOn_impl_ (0),
    uri_parser_ (0),
    packageId_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_DependsOn_pskel::
  ImplementationGuide_DependsOn_pskel (ImplementationGuide_DependsOn_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_DependsOn_impl_ (impl),
    uri_parser_ (0),
    packageId_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Global_pskel
  //

  void ImplementationGuide_Global_pskel::
  type_parser (::fhir::code_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ImplementationGuide_Global_pskel::
  profile_parser (::fhir::canonical_pskel& p)
  {
    this->profile_parser_ = &p;
  }

  void ImplementationGuide_Global_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& type,
           ::fhir::canonical_pskel& profile)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->profile_parser_ = &profile;
  }

  ImplementationGuide_Global_pskel::
  ImplementationGuide_Global_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Global_impl_ (0),
    type_parser_ (0),
    profile_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Global_pskel::
  ImplementationGuide_Global_pskel (ImplementationGuide_Global_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Global_impl_ (impl),
    type_parser_ (0),
    profile_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Definition_pskel
  //

  void ImplementationGuide_Definition_pskel::
  grouping_parser (::fhir::ImplementationGuide_Grouping_pskel& p)
  {
    this->grouping_parser_ = &p;
  }

  void ImplementationGuide_Definition_pskel::
  resource_parser (::fhir::ImplementationGuide_Resource_pskel& p)
  {
    this->resource_parser_ = &p;
  }

  void ImplementationGuide_Definition_pskel::
  page_parser (::fhir::ImplementationGuide_Page_pskel& p)
  {
    this->page_parser_ = &p;
  }

  void ImplementationGuide_Definition_pskel::
  parameter_parser (::fhir::ImplementationGuide_Parameter_pskel& p)
  {
    this->parameter_parser_ = &p;
  }

  void ImplementationGuide_Definition_pskel::
  template__parser (::fhir::ImplementationGuide_Template_pskel& p)
  {
    this->template__parser_ = &p;
  }

  void ImplementationGuide_Definition_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ImplementationGuide_Grouping_pskel& grouping,
           ::fhir::ImplementationGuide_Resource_pskel& resource,
           ::fhir::ImplementationGuide_Page_pskel& page,
           ::fhir::ImplementationGuide_Parameter_pskel& parameter,
           ::fhir::ImplementationGuide_Template_pskel& template_)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->grouping_parser_ = &grouping;
    this->resource_parser_ = &resource;
    this->page_parser_ = &page;
    this->parameter_parser_ = &parameter;
    this->template__parser_ = &template_;
  }

  ImplementationGuide_Definition_pskel::
  ImplementationGuide_Definition_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Definition_impl_ (0),
    grouping_parser_ (0),
    resource_parser_ (0),
    page_parser_ (0),
    parameter_parser_ (0),
    template__parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Definition_pskel::
  ImplementationGuide_Definition_pskel (ImplementationGuide_Definition_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Definition_impl_ (impl),
    grouping_parser_ (0),
    resource_parser_ (0),
    page_parser_ (0),
    parameter_parser_ (0),
    template__parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Grouping_pskel
  //

  void ImplementationGuide_Grouping_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ImplementationGuide_Grouping_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ImplementationGuide_Grouping_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& description)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
  }

  ImplementationGuide_Grouping_pskel::
  ImplementationGuide_Grouping_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Grouping_impl_ (0),
    name_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Grouping_pskel::
  ImplementationGuide_Grouping_pskel (ImplementationGuide_Grouping_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Grouping_impl_ (impl),
    name_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Resource_pskel
  //

  void ImplementationGuide_Resource_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void ImplementationGuide_Resource_pskel::
  fhirVersion_parser (::fhir::FHIRVersion_pskel& p)
  {
    this->fhirVersion_parser_ = &p;
  }

  void ImplementationGuide_Resource_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ImplementationGuide_Resource_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ImplementationGuide_Resource_pskel::
  exampleBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->exampleBoolean_parser_ = &p;
  }

  void ImplementationGuide_Resource_pskel::
  exampleCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->exampleCanonical_parser_ = &p;
  }

  void ImplementationGuide_Resource_pskel::
  groupingId_parser (::fhir::id_pskel& p)
  {
    this->groupingId_parser_ = &p;
  }

  void ImplementationGuide_Resource_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& reference,
           ::fhir::FHIRVersion_pskel& fhirVersion,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& description,
           ::fhir::boolean_pskel& exampleBoolean,
           ::fhir::canonical_pskel& exampleCanonical,
           ::fhir::id_pskel& groupingId)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->reference_parser_ = &reference;
    this->fhirVersion_parser_ = &fhirVersion;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
    this->exampleBoolean_parser_ = &exampleBoolean;
    this->exampleCanonical_parser_ = &exampleCanonical;
    this->groupingId_parser_ = &groupingId;
  }

  ImplementationGuide_Resource_pskel::
  ImplementationGuide_Resource_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Resource_impl_ (0),
    reference_parser_ (0),
    fhirVersion_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    exampleBoolean_parser_ (0),
    exampleCanonical_parser_ (0),
    groupingId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Resource_pskel::
  ImplementationGuide_Resource_pskel (ImplementationGuide_Resource_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Resource_impl_ (impl),
    reference_parser_ (0),
    fhirVersion_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    exampleBoolean_parser_ (0),
    exampleCanonical_parser_ (0),
    groupingId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Page_pskel
  //

  void ImplementationGuide_Page_pskel::
  nameUrl_parser (::fhir::url_pskel& p)
  {
    this->nameUrl_parser_ = &p;
  }

  void ImplementationGuide_Page_pskel::
  nameReference_parser (::fhir::Reference_pskel& p)
  {
    this->nameReference_parser_ = &p;
  }

  void ImplementationGuide_Page_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ImplementationGuide_Page_pskel::
  generation_parser (::fhir::GuidePageGeneration_pskel& p)
  {
    this->generation_parser_ = &p;
  }

  void ImplementationGuide_Page_pskel::
  page_parser (::fhir::ImplementationGuide_Page_pskel& p)
  {
    this->page_parser_ = &p;
  }

  void ImplementationGuide_Page_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::url_pskel& nameUrl,
           ::fhir::Reference_pskel& nameReference,
           ::fhir::string_pskel& title,
           ::fhir::GuidePageGeneration_pskel& generation,
           ::fhir::ImplementationGuide_Page_pskel& page)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->nameUrl_parser_ = &nameUrl;
    this->nameReference_parser_ = &nameReference;
    this->title_parser_ = &title;
    this->generation_parser_ = &generation;
    this->page_parser_ = &page;
  }

  ImplementationGuide_Page_pskel::
  ImplementationGuide_Page_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Page_impl_ (0),
    nameUrl_parser_ (0),
    nameReference_parser_ (0),
    title_parser_ (0),
    generation_parser_ (0),
    page_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Page_pskel::
  ImplementationGuide_Page_pskel (ImplementationGuide_Page_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Page_impl_ (impl),
    nameUrl_parser_ (0),
    nameReference_parser_ (0),
    title_parser_ (0),
    generation_parser_ (0),
    page_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Parameter_pskel
  //

  void ImplementationGuide_Parameter_pskel::
  code_parser (::fhir::GuideParameterCode_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ImplementationGuide_Parameter_pskel::
  value_parser (::fhir::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ImplementationGuide_Parameter_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::GuideParameterCode_pskel& code,
           ::fhir::string_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->value_parser_ = &value;
  }

  ImplementationGuide_Parameter_pskel::
  ImplementationGuide_Parameter_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Parameter_impl_ (0),
    code_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Parameter_pskel::
  ImplementationGuide_Parameter_pskel (ImplementationGuide_Parameter_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Parameter_impl_ (impl),
    code_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Template_pskel
  //

  void ImplementationGuide_Template_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ImplementationGuide_Template_pskel::
  source_parser (::fhir::string_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void ImplementationGuide_Template_pskel::
  scope_parser (::fhir::string_pskel& p)
  {
    this->scope_parser_ = &p;
  }

  void ImplementationGuide_Template_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::string_pskel& source,
           ::fhir::string_pskel& scope)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->source_parser_ = &source;
    this->scope_parser_ = &scope;
  }

  ImplementationGuide_Template_pskel::
  ImplementationGuide_Template_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Template_impl_ (0),
    code_parser_ (0),
    source_parser_ (0),
    scope_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Template_pskel::
  ImplementationGuide_Template_pskel (ImplementationGuide_Template_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Template_impl_ (impl),
    code_parser_ (0),
    source_parser_ (0),
    scope_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Manifest_pskel
  //

  void ImplementationGuide_Manifest_pskel::
  rendering_parser (::fhir::url_pskel& p)
  {
    this->rendering_parser_ = &p;
  }

  void ImplementationGuide_Manifest_pskel::
  resource_parser (::fhir::ImplementationGuide_Resource1_pskel& p)
  {
    this->resource_parser_ = &p;
  }

  void ImplementationGuide_Manifest_pskel::
  page_parser (::fhir::ImplementationGuide_Page1_pskel& p)
  {
    this->page_parser_ = &p;
  }

  void ImplementationGuide_Manifest_pskel::
  image_parser (::fhir::string_pskel& p)
  {
    this->image_parser_ = &p;
  }

  void ImplementationGuide_Manifest_pskel::
  other_parser (::fhir::string_pskel& p)
  {
    this->other_parser_ = &p;
  }

  void ImplementationGuide_Manifest_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::url_pskel& rendering,
           ::fhir::ImplementationGuide_Resource1_pskel& resource,
           ::fhir::ImplementationGuide_Page1_pskel& page,
           ::fhir::string_pskel& image,
           ::fhir::string_pskel& other)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->rendering_parser_ = &rendering;
    this->resource_parser_ = &resource;
    this->page_parser_ = &page;
    this->image_parser_ = &image;
    this->other_parser_ = &other;
  }

  ImplementationGuide_Manifest_pskel::
  ImplementationGuide_Manifest_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Manifest_impl_ (0),
    rendering_parser_ (0),
    resource_parser_ (0),
    page_parser_ (0),
    image_parser_ (0),
    other_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Manifest_pskel::
  ImplementationGuide_Manifest_pskel (ImplementationGuide_Manifest_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Manifest_impl_ (impl),
    rendering_parser_ (0),
    resource_parser_ (0),
    page_parser_ (0),
    image_parser_ (0),
    other_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Resource1_pskel
  //

  void ImplementationGuide_Resource1_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void ImplementationGuide_Resource1_pskel::
  exampleBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->exampleBoolean_parser_ = &p;
  }

  void ImplementationGuide_Resource1_pskel::
  exampleCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->exampleCanonical_parser_ = &p;
  }

  void ImplementationGuide_Resource1_pskel::
  relativePath_parser (::fhir::url_pskel& p)
  {
    this->relativePath_parser_ = &p;
  }

  void ImplementationGuide_Resource1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& reference,
           ::fhir::boolean_pskel& exampleBoolean,
           ::fhir::canonical_pskel& exampleCanonical,
           ::fhir::url_pskel& relativePath)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->reference_parser_ = &reference;
    this->exampleBoolean_parser_ = &exampleBoolean;
    this->exampleCanonical_parser_ = &exampleCanonical;
    this->relativePath_parser_ = &relativePath;
  }

  ImplementationGuide_Resource1_pskel::
  ImplementationGuide_Resource1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Resource1_impl_ (0),
    reference_parser_ (0),
    exampleBoolean_parser_ (0),
    exampleCanonical_parser_ (0),
    relativePath_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Resource1_pskel::
  ImplementationGuide_Resource1_pskel (ImplementationGuide_Resource1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Resource1_impl_ (impl),
    reference_parser_ (0),
    exampleBoolean_parser_ (0),
    exampleCanonical_parser_ (0),
    relativePath_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImplementationGuide_Page1_pskel
  //

  void ImplementationGuide_Page1_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ImplementationGuide_Page1_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ImplementationGuide_Page1_pskel::
  anchor_parser (::fhir::string_pskel& p)
  {
    this->anchor_parser_ = &p;
  }

  void ImplementationGuide_Page1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& anchor)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->anchor_parser_ = &anchor;
  }

  ImplementationGuide_Page1_pskel::
  ImplementationGuide_Page1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImplementationGuide_Page1_impl_ (0),
    name_parser_ (0),
    title_parser_ (0),
    anchor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImplementationGuide_Page1_pskel::
  ImplementationGuide_Page1_pskel (ImplementationGuide_Page1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImplementationGuide_Page1_impl_ (impl),
    name_parser_ (0),
    title_parser_ (0),
    anchor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GuideParameterCode_list_pskel
  //

  GuideParameterCode_list_pskel::
  GuideParameterCode_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    GuideParameterCode_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_GuideParameterCode_list_pskel_enums_, 10UL);
  }

  GuideParameterCode_list_pskel::
  GuideParameterCode_list_pskel (GuideParameterCode_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    GuideParameterCode_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_GuideParameterCode_list_pskel_enums_, 10UL);
  }

  // GuideParameterCode_pskel
  //

  void GuideParameterCode_pskel::
  value_parser (::fhir::GuideParameterCode_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void GuideParameterCode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::GuideParameterCode_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  GuideParameterCode_pskel::
  GuideParameterCode_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    GuideParameterCode_impl_ (0),
    value_parser_ (0)
  {
  }

  GuideParameterCode_pskel::
  GuideParameterCode_pskel (GuideParameterCode_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    GuideParameterCode_impl_ (impl),
    value_parser_ (0)
  {
  }

  // SPDXLicense_list_pskel
  //

  SPDXLicense_list_pskel::
  SPDXLicense_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    SPDXLicense_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_SPDXLicense_list_pskel_enums_, 346UL);
  }

  SPDXLicense_list_pskel::
  SPDXLicense_list_pskel (SPDXLicense_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    SPDXLicense_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_SPDXLicense_list_pskel_enums_, 346UL);
  }

  // SPDXLicense_pskel
  //

  void SPDXLicense_pskel::
  value_parser (::fhir::SPDXLicense_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void SPDXLicense_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::SPDXLicense_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  SPDXLicense_pskel::
  SPDXLicense_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    SPDXLicense_impl_ (0),
    value_parser_ (0)
  {
  }

  SPDXLicense_pskel::
  SPDXLicense_pskel (SPDXLicense_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    SPDXLicense_impl_ (impl),
    value_parser_ (0)
  {
  }

  // GuidePageGeneration_list_pskel
  //

  GuidePageGeneration_list_pskel::
  GuidePageGeneration_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    GuidePageGeneration_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_GuidePageGeneration_list_pskel_enums_, 4UL);
  }

  GuidePageGeneration_list_pskel::
  GuidePageGeneration_list_pskel (GuidePageGeneration_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    GuidePageGeneration_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_GuidePageGeneration_list_pskel_enums_, 4UL);
  }

  // GuidePageGeneration_pskel
  //

  void GuidePageGeneration_pskel::
  value_parser (::fhir::GuidePageGeneration_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void GuidePageGeneration_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::GuidePageGeneration_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  GuidePageGeneration_pskel::
  GuidePageGeneration_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    GuidePageGeneration_impl_ (0),
    value_parser_ (0)
  {
  }

  GuidePageGeneration_pskel::
  GuidePageGeneration_pskel (GuidePageGeneration_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    GuidePageGeneration_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ImplementationGuide_pskel
  //

  void ImplementationGuide_pskel::
  url ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->url ();
  }

  void ImplementationGuide_pskel::
  version ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->version ();
  }

  void ImplementationGuide_pskel::
  name ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->name ();
  }

  void ImplementationGuide_pskel::
  title ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->title ();
  }

  void ImplementationGuide_pskel::
  status ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->status ();
  }

  void ImplementationGuide_pskel::
  experimental ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->experimental ();
  }

  void ImplementationGuide_pskel::
  date ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->date ();
  }

  void ImplementationGuide_pskel::
  publisher ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->publisher ();
  }

  void ImplementationGuide_pskel::
  contact ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->contact ();
  }

  void ImplementationGuide_pskel::
  description ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->description ();
  }

  void ImplementationGuide_pskel::
  useContext ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->useContext ();
  }

  void ImplementationGuide_pskel::
  jurisdiction ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->jurisdiction ();
  }

  void ImplementationGuide_pskel::
  copyright ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->copyright ();
  }

  void ImplementationGuide_pskel::
  packageId ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->packageId ();
  }

  void ImplementationGuide_pskel::
  license ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->license ();
  }

  void ImplementationGuide_pskel::
  fhirVersion ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->fhirVersion ();
  }

  void ImplementationGuide_pskel::
  dependsOn ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->dependsOn ();
  }

  void ImplementationGuide_pskel::
  global ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->global ();
  }

  void ImplementationGuide_pskel::
  definition ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->definition ();
  }

  void ImplementationGuide_pskel::
  manifest ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->manifest ();
  }

  void ImplementationGuide_pskel::
  post_ImplementationGuide ()
  {
    if (this->ImplementationGuide_impl_)
      this->ImplementationGuide_impl_->post_ImplementationGuide ();
    else
      post_DomainResource ();
  }

  void ImplementationGuide_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->packageId_parser_)
      this->packageId_parser_->_reset ();

    if (this->license_parser_)
      this->license_parser_->_reset ();

    if (this->fhirVersion_parser_)
      this->fhirVersion_parser_->_reset ();

    if (this->dependsOn_parser_)
      this->dependsOn_parser_->_reset ();

    if (this->global_parser_)
      this->global_parser_->_reset ();

    if (this->definition_parser_)
      this->definition_parser_->_reset ();

    if (this->manifest_parser_)
      this->manifest_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_DependsOn_pskel
  //

  void ImplementationGuide_DependsOn_pskel::
  uri ()
  {
    if (this->ImplementationGuide_DependsOn_impl_)
      this->ImplementationGuide_DependsOn_impl_->uri ();
  }

  void ImplementationGuide_DependsOn_pskel::
  packageId ()
  {
    if (this->ImplementationGuide_DependsOn_impl_)
      this->ImplementationGuide_DependsOn_impl_->packageId ();
  }

  void ImplementationGuide_DependsOn_pskel::
  version ()
  {
    if (this->ImplementationGuide_DependsOn_impl_)
      this->ImplementationGuide_DependsOn_impl_->version ();
  }

  void ImplementationGuide_DependsOn_pskel::
  post_ImplementationGuide_DependsOn ()
  {
    if (this->ImplementationGuide_DependsOn_impl_)
      this->ImplementationGuide_DependsOn_impl_->post_ImplementationGuide_DependsOn ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_DependsOn_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->uri_parser_)
      this->uri_parser_->_reset ();

    if (this->packageId_parser_)
      this->packageId_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Global_pskel
  //

  void ImplementationGuide_Global_pskel::
  type ()
  {
    if (this->ImplementationGuide_Global_impl_)
      this->ImplementationGuide_Global_impl_->type ();
  }

  void ImplementationGuide_Global_pskel::
  profile ()
  {
    if (this->ImplementationGuide_Global_impl_)
      this->ImplementationGuide_Global_impl_->profile ();
  }

  void ImplementationGuide_Global_pskel::
  post_ImplementationGuide_Global ()
  {
    if (this->ImplementationGuide_Global_impl_)
      this->ImplementationGuide_Global_impl_->post_ImplementationGuide_Global ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Global_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->profile_parser_)
      this->profile_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Definition_pskel
  //

  void ImplementationGuide_Definition_pskel::
  grouping ()
  {
    if (this->ImplementationGuide_Definition_impl_)
      this->ImplementationGuide_Definition_impl_->grouping ();
  }

  void ImplementationGuide_Definition_pskel::
  resource ()
  {
    if (this->ImplementationGuide_Definition_impl_)
      this->ImplementationGuide_Definition_impl_->resource ();
  }

  void ImplementationGuide_Definition_pskel::
  page ()
  {
    if (this->ImplementationGuide_Definition_impl_)
      this->ImplementationGuide_Definition_impl_->page ();
  }

  void ImplementationGuide_Definition_pskel::
  parameter ()
  {
    if (this->ImplementationGuide_Definition_impl_)
      this->ImplementationGuide_Definition_impl_->parameter ();
  }

  void ImplementationGuide_Definition_pskel::
  template_ ()
  {
    if (this->ImplementationGuide_Definition_impl_)
      this->ImplementationGuide_Definition_impl_->template_ ();
  }

  void ImplementationGuide_Definition_pskel::
  post_ImplementationGuide_Definition ()
  {
    if (this->ImplementationGuide_Definition_impl_)
      this->ImplementationGuide_Definition_impl_->post_ImplementationGuide_Definition ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Definition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->grouping_parser_)
      this->grouping_parser_->_reset ();

    if (this->resource_parser_)
      this->resource_parser_->_reset ();

    if (this->page_parser_)
      this->page_parser_->_reset ();

    if (this->parameter_parser_)
      this->parameter_parser_->_reset ();

    if (this->template__parser_)
      this->template__parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Grouping_pskel
  //

  void ImplementationGuide_Grouping_pskel::
  name ()
  {
    if (this->ImplementationGuide_Grouping_impl_)
      this->ImplementationGuide_Grouping_impl_->name ();
  }

  void ImplementationGuide_Grouping_pskel::
  description ()
  {
    if (this->ImplementationGuide_Grouping_impl_)
      this->ImplementationGuide_Grouping_impl_->description ();
  }

  void ImplementationGuide_Grouping_pskel::
  post_ImplementationGuide_Grouping ()
  {
    if (this->ImplementationGuide_Grouping_impl_)
      this->ImplementationGuide_Grouping_impl_->post_ImplementationGuide_Grouping ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Grouping_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Resource_pskel
  //

  void ImplementationGuide_Resource_pskel::
  reference ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->reference ();
  }

  void ImplementationGuide_Resource_pskel::
  fhirVersion ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->fhirVersion ();
  }

  void ImplementationGuide_Resource_pskel::
  name ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->name ();
  }

  void ImplementationGuide_Resource_pskel::
  description ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->description ();
  }

  void ImplementationGuide_Resource_pskel::
  exampleBoolean ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->exampleBoolean ();
  }

  void ImplementationGuide_Resource_pskel::
  exampleCanonical ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->exampleCanonical ();
  }

  void ImplementationGuide_Resource_pskel::
  groupingId ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->groupingId ();
  }

  void ImplementationGuide_Resource_pskel::
  post_ImplementationGuide_Resource ()
  {
    if (this->ImplementationGuide_Resource_impl_)
      this->ImplementationGuide_Resource_impl_->post_ImplementationGuide_Resource ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Resource_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->fhirVersion_parser_)
      this->fhirVersion_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->exampleBoolean_parser_)
      this->exampleBoolean_parser_->_reset ();

    if (this->exampleCanonical_parser_)
      this->exampleCanonical_parser_->_reset ();

    if (this->groupingId_parser_)
      this->groupingId_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Page_pskel
  //

  void ImplementationGuide_Page_pskel::
  nameUrl ()
  {
    if (this->ImplementationGuide_Page_impl_)
      this->ImplementationGuide_Page_impl_->nameUrl ();
  }

  void ImplementationGuide_Page_pskel::
  nameReference ()
  {
    if (this->ImplementationGuide_Page_impl_)
      this->ImplementationGuide_Page_impl_->nameReference ();
  }

  void ImplementationGuide_Page_pskel::
  title ()
  {
    if (this->ImplementationGuide_Page_impl_)
      this->ImplementationGuide_Page_impl_->title ();
  }

  void ImplementationGuide_Page_pskel::
  generation ()
  {
    if (this->ImplementationGuide_Page_impl_)
      this->ImplementationGuide_Page_impl_->generation ();
  }

  void ImplementationGuide_Page_pskel::
  page ()
  {
    if (this->ImplementationGuide_Page_impl_)
      this->ImplementationGuide_Page_impl_->page ();
  }

  void ImplementationGuide_Page_pskel::
  post_ImplementationGuide_Page ()
  {
    if (this->ImplementationGuide_Page_impl_)
      this->ImplementationGuide_Page_impl_->post_ImplementationGuide_Page ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Page_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->nameUrl_parser_)
      this->nameUrl_parser_->_reset ();

    if (this->nameReference_parser_)
      this->nameReference_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->generation_parser_)
      this->generation_parser_->_reset ();

    if (this->page_parser_)
      this->page_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Parameter_pskel
  //

  void ImplementationGuide_Parameter_pskel::
  code ()
  {
    if (this->ImplementationGuide_Parameter_impl_)
      this->ImplementationGuide_Parameter_impl_->code ();
  }

  void ImplementationGuide_Parameter_pskel::
  value ()
  {
    if (this->ImplementationGuide_Parameter_impl_)
      this->ImplementationGuide_Parameter_impl_->value ();
  }

  void ImplementationGuide_Parameter_pskel::
  post_ImplementationGuide_Parameter ()
  {
    if (this->ImplementationGuide_Parameter_impl_)
      this->ImplementationGuide_Parameter_impl_->post_ImplementationGuide_Parameter ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Parameter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Template_pskel
  //

  void ImplementationGuide_Template_pskel::
  code ()
  {
    if (this->ImplementationGuide_Template_impl_)
      this->ImplementationGuide_Template_impl_->code ();
  }

  void ImplementationGuide_Template_pskel::
  source ()
  {
    if (this->ImplementationGuide_Template_impl_)
      this->ImplementationGuide_Template_impl_->source ();
  }

  void ImplementationGuide_Template_pskel::
  scope ()
  {
    if (this->ImplementationGuide_Template_impl_)
      this->ImplementationGuide_Template_impl_->scope ();
  }

  void ImplementationGuide_Template_pskel::
  post_ImplementationGuide_Template ()
  {
    if (this->ImplementationGuide_Template_impl_)
      this->ImplementationGuide_Template_impl_->post_ImplementationGuide_Template ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Template_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->scope_parser_)
      this->scope_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Manifest_pskel
  //

  void ImplementationGuide_Manifest_pskel::
  rendering ()
  {
    if (this->ImplementationGuide_Manifest_impl_)
      this->ImplementationGuide_Manifest_impl_->rendering ();
  }

  void ImplementationGuide_Manifest_pskel::
  resource ()
  {
    if (this->ImplementationGuide_Manifest_impl_)
      this->ImplementationGuide_Manifest_impl_->resource ();
  }

  void ImplementationGuide_Manifest_pskel::
  page ()
  {
    if (this->ImplementationGuide_Manifest_impl_)
      this->ImplementationGuide_Manifest_impl_->page ();
  }

  void ImplementationGuide_Manifest_pskel::
  image ()
  {
    if (this->ImplementationGuide_Manifest_impl_)
      this->ImplementationGuide_Manifest_impl_->image ();
  }

  void ImplementationGuide_Manifest_pskel::
  other ()
  {
    if (this->ImplementationGuide_Manifest_impl_)
      this->ImplementationGuide_Manifest_impl_->other ();
  }

  void ImplementationGuide_Manifest_pskel::
  post_ImplementationGuide_Manifest ()
  {
    if (this->ImplementationGuide_Manifest_impl_)
      this->ImplementationGuide_Manifest_impl_->post_ImplementationGuide_Manifest ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Manifest_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->rendering_parser_)
      this->rendering_parser_->_reset ();

    if (this->resource_parser_)
      this->resource_parser_->_reset ();

    if (this->page_parser_)
      this->page_parser_->_reset ();

    if (this->image_parser_)
      this->image_parser_->_reset ();

    if (this->other_parser_)
      this->other_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Resource1_pskel
  //

  void ImplementationGuide_Resource1_pskel::
  reference ()
  {
    if (this->ImplementationGuide_Resource1_impl_)
      this->ImplementationGuide_Resource1_impl_->reference ();
  }

  void ImplementationGuide_Resource1_pskel::
  exampleBoolean ()
  {
    if (this->ImplementationGuide_Resource1_impl_)
      this->ImplementationGuide_Resource1_impl_->exampleBoolean ();
  }

  void ImplementationGuide_Resource1_pskel::
  exampleCanonical ()
  {
    if (this->ImplementationGuide_Resource1_impl_)
      this->ImplementationGuide_Resource1_impl_->exampleCanonical ();
  }

  void ImplementationGuide_Resource1_pskel::
  relativePath ()
  {
    if (this->ImplementationGuide_Resource1_impl_)
      this->ImplementationGuide_Resource1_impl_->relativePath ();
  }

  void ImplementationGuide_Resource1_pskel::
  post_ImplementationGuide_Resource1 ()
  {
    if (this->ImplementationGuide_Resource1_impl_)
      this->ImplementationGuide_Resource1_impl_->post_ImplementationGuide_Resource1 ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Resource1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->exampleBoolean_parser_)
      this->exampleBoolean_parser_->_reset ();

    if (this->exampleCanonical_parser_)
      this->exampleCanonical_parser_->_reset ();

    if (this->relativePath_parser_)
      this->relativePath_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImplementationGuide_Page1_pskel
  //

  void ImplementationGuide_Page1_pskel::
  name ()
  {
    if (this->ImplementationGuide_Page1_impl_)
      this->ImplementationGuide_Page1_impl_->name ();
  }

  void ImplementationGuide_Page1_pskel::
  title ()
  {
    if (this->ImplementationGuide_Page1_impl_)
      this->ImplementationGuide_Page1_impl_->title ();
  }

  void ImplementationGuide_Page1_pskel::
  anchor ()
  {
    if (this->ImplementationGuide_Page1_impl_)
      this->ImplementationGuide_Page1_impl_->anchor ();
  }

  void ImplementationGuide_Page1_pskel::
  post_ImplementationGuide_Page1 ()
  {
    if (this->ImplementationGuide_Page1_impl_)
      this->ImplementationGuide_Page1_impl_->post_ImplementationGuide_Page1 ();
    else
      post_BackboneElement ();
  }

  void ImplementationGuide_Page1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->anchor_parser_)
      this->anchor_parser_->_reset ();

    this->resetting_ = false;
  }

  // GuideParameterCode_list_pskel
  //

  void GuideParameterCode_list_pskel::
  post_GuideParameterCode_list ()
  {
    if (this->GuideParameterCode_list_impl_)
      this->GuideParameterCode_list_impl_->post_GuideParameterCode_list ();
    else
      post_code_primitive ();
  }

  const char* const GuideParameterCode_list_pskel::_xsde_GuideParameterCode_list_pskel_enums_[10UL] = 
  {
    "apply",
    "expansion-parameter",
    "generate-json",
    "generate-turtle",
    "generate-xml",
    "html-template",
    "path-pages",
    "path-resource",
    "path-tx-cache",
    "rule-broken-links"
  };

  // GuideParameterCode_pskel
  //

  void GuideParameterCode_pskel::
  value ()
  {
    if (this->GuideParameterCode_impl_)
      this->GuideParameterCode_impl_->value ();
  }

  void GuideParameterCode_pskel::
  post_GuideParameterCode ()
  {
    if (this->GuideParameterCode_impl_)
      this->GuideParameterCode_impl_->post_GuideParameterCode ();
    else
      post_Element ();
  }

  void GuideParameterCode_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // SPDXLicense_list_pskel
  //

  void SPDXLicense_list_pskel::
  post_SPDXLicense_list ()
  {
    if (this->SPDXLicense_list_impl_)
      this->SPDXLicense_list_impl_->post_SPDXLicense_list ();
    else
      post_code_primitive ();
  }

  const char* const SPDXLicense_list_pskel::_xsde_SPDXLicense_list_pskel_enums_[346UL] = 
  {
    "0BSD",
    "AAL",
    "ADSL",
    "AFL-1.1",
    "AFL-1.2",
    "AFL-2.0",
    "AFL-2.1",
    "AFL-3.0",
    "AGPL-1.0-only",
    "AGPL-1.0-or-later",
    "AGPL-3.0-only",
    "AGPL-3.0-or-later",
    "AMDPLPA",
    "AML",
    "AMPAS",
    "ANTLR-PD",
    "APAFML",
    "APL-1.0",
    "APSL-1.0",
    "APSL-1.1",
    "APSL-1.2",
    "APSL-2.0",
    "Abstyles",
    "Adobe-2006",
    "Adobe-Glyph",
    "Afmparse",
    "Aladdin",
    "Apache-1.0",
    "Apache-1.1",
    "Apache-2.0",
    "Artistic-1.0",
    "Artistic-1.0-Perl",
    "Artistic-1.0-cl8",
    "Artistic-2.0",
    "BSD-1-Clause",
    "BSD-2-Clause",
    "BSD-2-Clause-FreeBSD",
    "BSD-2-Clause-NetBSD",
    "BSD-2-Clause-Patent",
    "BSD-3-Clause",
    "BSD-3-Clause-Attribution",
    "BSD-3-Clause-Clear",
    "BSD-3-Clause-LBNL",
    "BSD-3-Clause-No-Nuclear-License",
    "BSD-3-Clause-No-Nuclear-License-2014",
    "BSD-3-Clause-No-Nuclear-Warranty",
    "BSD-4-Clause",
    "BSD-4-Clause-UC",
    "BSD-Protection",
    "BSD-Source-Code",
    "BSL-1.0",
    "Bahyph",
    "Barr",
    "Beerware",
    "BitTorrent-1.0",
    "BitTorrent-1.1",
    "Borceux",
    "CATOSL-1.1",
    "CC-BY-1.0",
    "CC-BY-2.0",
    "CC-BY-2.5",
    "CC-BY-3.0",
    "CC-BY-4.0",
    "CC-BY-NC-1.0",
    "CC-BY-NC-2.0",
    "CC-BY-NC-2.5",
    "CC-BY-NC-3.0",
    "CC-BY-NC-4.0",
    "CC-BY-NC-ND-1.0",
    "CC-BY-NC-ND-2.0",
    "CC-BY-NC-ND-2.5",
    "CC-BY-NC-ND-3.0",
    "CC-BY-NC-ND-4.0",
    "CC-BY-NC-SA-1.0",
    "CC-BY-NC-SA-2.0",
    "CC-BY-NC-SA-2.5",
    "CC-BY-NC-SA-3.0",
    "CC-BY-NC-SA-4.0",
    "CC-BY-ND-1.0",
    "CC-BY-ND-2.0",
    "CC-BY-ND-2.5",
    "CC-BY-ND-3.0",
    "CC-BY-ND-4.0",
    "CC-BY-SA-1.0",
    "CC-BY-SA-2.0",
    "CC-BY-SA-2.5",
    "CC-BY-SA-3.0",
    "CC-BY-SA-4.0",
    "CC0-1.0",
    "CDDL-1.0",
    "CDDL-1.1",
    "CDLA-Permissive-1.0",
    "CDLA-Sharing-1.0",
    "CECILL-1.0",
    "CECILL-1.1",
    "CECILL-2.0",
    "CECILL-2.1",
    "CECILL-B",
    "CECILL-C",
    "CNRI-Jython",
    "CNRI-Python",
    "CNRI-Python-GPL-Compatible",
    "CPAL-1.0",
    "CPL-1.0",
    "CPOL-1.02",
    "CUA-OPL-1.0",
    "Caldera",
    "ClArtistic",
    "Condor-1.1",
    "Crossword",
    "CrystalStacker",
    "Cube",
    "D-FSL-1.0",
    "DOC",
    "DSDP",
    "Dotseqn",
    "ECL-1.0",
    "ECL-2.0",
    "EFL-1.0",
    "EFL-2.0",
    "EPL-1.0",
    "EPL-2.0",
    "EUDatagrid",
    "EUPL-1.0",
    "EUPL-1.1",
    "EUPL-1.2",
    "Entessa",
    "ErlPL-1.1",
    "Eurosym",
    "FSFAP",
    "FSFUL",
    "FSFULLR",
    "FTL",
    "Fair",
    "Frameworx-1.0",
    "FreeImage",
    "GFDL-1.1-only",
    "GFDL-1.1-or-later",
    "GFDL-1.2-only",
    "GFDL-1.2-or-later",
    "GFDL-1.3-only",
    "GFDL-1.3-or-later",
    "GL2PS",
    "GPL-1.0-only",
    "GPL-1.0-or-later",
    "GPL-2.0-only",
    "GPL-2.0-or-later",
    "GPL-3.0-only",
    "GPL-3.0-or-later",
    "Giftware",
    "Glide",
    "Glulxe",
    "HPND",
    "HaskellReport",
    "IBM-pibs",
    "ICU",
    "IJG",
    "IPA",
    "IPL-1.0",
    "ISC",
    "ImageMagick",
    "Imlib2",
    "Info-ZIP",
    "Intel",
    "Intel-ACPI",
    "Interbase-1.0",
    "JSON",
    "JasPer-2.0",
    "LAL-1.2",
    "LAL-1.3",
    "LGPL-2.0-only",
    "LGPL-2.0-or-later",
    "LGPL-2.1-only",
    "LGPL-2.1-or-later",
    "LGPL-3.0-only",
    "LGPL-3.0-or-later",
    "LGPLLR",
    "LPL-1.0",
    "LPL-1.02",
    "LPPL-1.0",
    "LPPL-1.1",
    "LPPL-1.2",
    "LPPL-1.3a",
    "LPPL-1.3c",
    "Latex2e",
    "Leptonica",
    "LiLiQ-P-1.1",
    "LiLiQ-R-1.1",
    "LiLiQ-Rplus-1.1",
    "Libpng",
    "Linux-OpenIB",
    "MIT",
    "MIT-0",
    "MIT-CMU",
    "MIT-advertising",
    "MIT-enna",
    "MIT-feh",
    "MITNFA",
    "MPL-1.0",
    "MPL-1.1",
    "MPL-2.0",
    "MPL-2.0-no-copyleft-exception",
    "MS-PL",
    "MS-RL",
    "MTLL",
    "MakeIndex",
    "MirOS",
    "Motosoto",
    "Multics",
    "Mup",
    "NASA-1.3",
    "NBPL-1.0",
    "NCSA",
    "NGPL",
    "NLOD-1.0",
    "NLPL",
    "NOSL",
    "NPL-1.0",
    "NPL-1.1",
    "NPOSL-3.0",
    "NRL",
    "NTP",
    "Naumen",
    "Net-SNMP",
    "NetCDF",
    "Newsletr",
    "Nokia",
    "Noweb",
    "OCCT-PL",
    "OCLC-2.0",
    "ODbL-1.0",
    "OFL-1.0",
    "OFL-1.1",
    "OGTSL",
    "OLDAP-1.1",
    "OLDAP-1.2",
    "OLDAP-1.3",
    "OLDAP-1.4",
    "OLDAP-2.0",
    "OLDAP-2.0.1",
    "OLDAP-2.1",
    "OLDAP-2.2",
    "OLDAP-2.2.1",
    "OLDAP-2.2.2",
    "OLDAP-2.3",
    "OLDAP-2.4",
    "OLDAP-2.5",
    "OLDAP-2.6",
    "OLDAP-2.7",
    "OLDAP-2.8",
    "OML",
    "OPL-1.0",
    "OSET-PL-2.1",
    "OSL-1.0",
    "OSL-1.1",
    "OSL-2.0",
    "OSL-2.1",
    "OSL-3.0",
    "OpenSSL",
    "PDDL-1.0",
    "PHP-3.0",
    "PHP-3.01",
    "Plexus",
    "PostgreSQL",
    "Python-2.0",
    "QPL-1.0",
    "Qhull",
    "RHeCos-1.1",
    "RPL-1.1",
    "RPL-1.5",
    "RPSL-1.0",
    "RSA-MD",
    "RSCPL",
    "Rdisc",
    "Ruby",
    "SAX-PD",
    "SCEA",
    "SGI-B-1.0",
    "SGI-B-1.1",
    "SGI-B-2.0",
    "SISSL",
    "SISSL-1.2",
    "SMLNJ",
    "SMPPL",
    "SNIA",
    "SPL-1.0",
    "SWL",
    "Saxpath",
    "Sendmail",
    "SimPL-2.0",
    "Sleepycat",
    "Spencer-86",
    "Spencer-94",
    "Spencer-99",
    "SugarCRM-1.1.3",
    "TCL",
    "TCP-wrappers",
    "TMate",
    "TORQUE-1.1",
    "TOSL",
    "UPL-1.0",
    "Unicode-DFS-2015",
    "Unicode-DFS-2016",
    "Unicode-TOU",
    "Unlicense",
    "VOSTROM",
    "VSL-1.0",
    "Vim",
    "W3C",
    "W3C-19980720",
    "W3C-20150513",
    "WTFPL",
    "Watcom-1.0",
    "Wsuipa",
    "X11",
    "XFree86-1.1",
    "XSkat",
    "Xerox",
    "Xnet",
    "YPL-1.0",
    "YPL-1.1",
    "ZPL-1.1",
    "ZPL-2.0",
    "ZPL-2.1",
    "Zed",
    "Zend-2.0",
    "Zimbra-1.3",
    "Zimbra-1.4",
    "Zlib",
    "bzip2-1.0.5",
    "bzip2-1.0.6",
    "curl",
    "diffmark",
    "dvipdfm",
    "eGenix",
    "gSOAP-1.3b",
    "gnuplot",
    "iMatix",
    "libtiff",
    "mpich2",
    "not-open-source",
    "psfrag",
    "psutils",
    "xinetd",
    "xpp",
    "zlib-acknowledgement"
  };

  // SPDXLicense_pskel
  //

  void SPDXLicense_pskel::
  value ()
  {
    if (this->SPDXLicense_impl_)
      this->SPDXLicense_impl_->value ();
  }

  void SPDXLicense_pskel::
  post_SPDXLicense ()
  {
    if (this->SPDXLicense_impl_)
      this->SPDXLicense_impl_->post_SPDXLicense ();
    else
      post_Element ();
  }

  void SPDXLicense_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // GuidePageGeneration_list_pskel
  //

  void GuidePageGeneration_list_pskel::
  post_GuidePageGeneration_list ()
  {
    if (this->GuidePageGeneration_list_impl_)
      this->GuidePageGeneration_list_impl_->post_GuidePageGeneration_list ();
    else
      post_code_primitive ();
  }

  const char* const GuidePageGeneration_list_pskel::_xsde_GuidePageGeneration_list_pskel_enums_[4UL] = 
  {
    "generated",
    "html",
    "markdown",
    "xml"
  };

  // GuidePageGeneration_pskel
  //

  void GuidePageGeneration_pskel::
  value ()
  {
    if (this->GuidePageGeneration_impl_)
      this->GuidePageGeneration_impl_->value ();
  }

  void GuidePageGeneration_pskel::
  post_GuidePageGeneration ()
  {
    if (this->GuidePageGeneration_impl_)
      this->GuidePageGeneration_impl_->post_GuidePageGeneration ();
    else
      post_Element ();
  }

  void GuidePageGeneration_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ImplementationGuide_pskel.
  //
  bool ImplementationGuide_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "packageId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->packageId_parser_)
            {
              this->packageId_parser_->pre ();
              ctx.nested_parser (this->packageId_parser_);
            }
          }
          else
          {
            if (this->packageId_parser_ != 0)
            {
              this->packageId_parser_->post_id ();
              this->packageId ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "license" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->license_parser_)
            {
              this->license_parser_->pre ();
              ctx.nested_parser (this->license_parser_);
            }
          }
          else
          {
            if (this->license_parser_ != 0)
            {
              this->license_parser_->post_SPDXLicense ();
              this->license ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "fhirVersion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fhirVersion_parser_)
            {
              this->fhirVersion_parser_->pre ();
              ctx.nested_parser (this->fhirVersion_parser_);
            }
          }
          else
          {
            if (this->fhirVersion_parser_ != 0)
            {
              this->fhirVersion_parser_->post_FHIRVersion ();
              this->fhirVersion ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "dependsOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dependsOn_parser_)
            {
              this->dependsOn_parser_->pre ();
              ctx.nested_parser (this->dependsOn_parser_);
            }
          }
          else
          {
            if (this->dependsOn_parser_ != 0)
            {
              this->dependsOn_parser_->post_ImplementationGuide_DependsOn ();
              this->dependsOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "global" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->global_parser_)
            {
              this->global_parser_->pre ();
              ctx.nested_parser (this->global_parser_);
            }
          }
          else
          {
            if (this->global_parser_ != 0)
            {
              this->global_parser_->post_ImplementationGuide_Global ();
              this->global ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "definition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definition_parser_)
            {
              this->definition_parser_->pre ();
              ctx.nested_parser (this->definition_parser_);
            }
          }
          else
          {
            if (this->definition_parser_ != 0)
            {
              this->definition_parser_->post_ImplementationGuide_Definition ();
              this->definition ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "manifest" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manifest_parser_)
            {
              this->manifest_parser_->pre ();
              ctx.nested_parser (this->manifest_parser_);
            }
          }
          else
          {
            if (this->manifest_parser_ != 0)
            {
              this->manifest_parser_->post_ImplementationGuide_Manifest ();
              this->manifest ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_DependsOn_pskel.
  //
  bool ImplementationGuide_DependsOn_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_DependsOn_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_DependsOn_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_DependsOn_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_DependsOn_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_DependsOn_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uri_parser_)
            {
              this->uri_parser_->pre ();
              ctx.nested_parser (this->uri_parser_);
            }
          }
          else
          {
            if (this->uri_parser_ != 0)
            {
              this->uri_parser_->post_canonical ();
              this->uri ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "packageId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->packageId_parser_)
            {
              this->packageId_parser_->pre ();
              ctx.nested_parser (this->packageId_parser_);
            }
          }
          else
          {
            if (this->packageId_parser_ != 0)
            {
              this->packageId_parser_->post_id ();
              this->packageId ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Global_pskel.
  //
  bool ImplementationGuide_Global_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Global_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Global_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Global_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Global_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Global_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_code ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "profile" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->profile_parser_)
            {
              this->profile_parser_->pre ();
              ctx.nested_parser (this->profile_parser_);
            }
          }
          else
          {
            if (this->profile_parser_ != 0)
            {
              this->profile_parser_->post_canonical ();
              this->profile ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Definition_pskel.
  //
  bool ImplementationGuide_Definition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "grouping" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "resource" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Definition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Definition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Definition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Definition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Definition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "grouping" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->grouping_parser_)
            {
              this->grouping_parser_->pre ();
              ctx.nested_parser (this->grouping_parser_);
            }
          }
          else
          {
            if (this->grouping_parser_ != 0)
            {
              this->grouping_parser_->post_ImplementationGuide_Grouping ();
              this->grouping ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "resource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resource_parser_)
            {
              this->resource_parser_->pre ();
              ctx.nested_parser (this->resource_parser_);
            }
          }
          else
          {
            if (this->resource_parser_ != 0)
            {
              this->resource_parser_->post_ImplementationGuide_Resource ();
              this->resource ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "page" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->page_parser_)
            {
              this->page_parser_->pre ();
              ctx.nested_parser (this->page_parser_);
            }
          }
          else
          {
            if (this->page_parser_ != 0)
            {
              this->page_parser_->post_ImplementationGuide_Page ();
              this->page ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "parameter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parameter_parser_)
            {
              this->parameter_parser_->pre ();
              ctx.nested_parser (this->parameter_parser_);
            }
          }
          else
          {
            if (this->parameter_parser_ != 0)
            {
              this->parameter_parser_->post_ImplementationGuide_Parameter ();
              this->parameter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "template" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->template__parser_)
            {
              this->template__parser_->pre ();
              ctx.nested_parser (this->template__parser_);
            }
          }
          else
          {
            if (this->template__parser_ != 0)
            {
              this->template__parser_->post_ImplementationGuide_Template ();
              this->template_ ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Grouping_pskel.
  //
  bool ImplementationGuide_Grouping_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Grouping_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Grouping_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Grouping_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Grouping_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Grouping_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Resource_pskel.
  //
  bool ImplementationGuide_Resource_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Resource_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Resource_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Resource_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Resource_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Resource_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "fhirVersion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fhirVersion_parser_)
            {
              this->fhirVersion_parser_->pre ();
              ctx.nested_parser (this->fhirVersion_parser_);
            }
          }
          else
          {
            if (this->fhirVersion_parser_ != 0)
            {
              this->fhirVersion_parser_->post_FHIRVersion ();
              this->fhirVersion ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "exampleBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exampleBoolean_parser_)
            {
              this->exampleBoolean_parser_->pre ();
              ctx.nested_parser (this->exampleBoolean_parser_);
            }
          }
          else
          {
            if (this->exampleBoolean_parser_ != 0)
            {
              this->exampleBoolean_parser_->post_boolean ();
              this->exampleBoolean ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "exampleCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exampleCanonical_parser_)
            {
              this->exampleCanonical_parser_->pre ();
              ctx.nested_parser (this->exampleCanonical_parser_);
            }
          }
          else
          {
            if (this->exampleCanonical_parser_ != 0)
            {
              this->exampleCanonical_parser_->post_canonical ();
              this->exampleCanonical ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "groupingId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupingId_parser_)
            {
              this->groupingId_parser_->pre ();
              ctx.nested_parser (this->groupingId_parser_);
            }
          }
          else
          {
            if (this->groupingId_parser_ != 0)
            {
              this->groupingId_parser_->post_id ();
              this->groupingId ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Page_pskel.
  //
  bool ImplementationGuide_Page_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "nameUrl" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "nameReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Page_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Page_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Page_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Page_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Page_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "nameUrl" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->nameUrl_parser_)
            {
              this->nameUrl_parser_->pre ();
              ctx.nested_parser (this->nameUrl_parser_);
            }
          }
          else
          {
            if (this->nameUrl_parser_ != 0)
            {
              this->nameUrl_parser_->post_url ();
              this->nameUrl ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "nameReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->nameReference_parser_)
            {
              this->nameReference_parser_->pre ();
              ctx.nested_parser (this->nameReference_parser_);
            }
          }
          else
          {
            if (this->nameReference_parser_ != 0)
            {
              this->nameReference_parser_->post_Reference ();
              this->nameReference ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "generation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->generation_parser_)
            {
              this->generation_parser_->pre ();
              ctx.nested_parser (this->generation_parser_);
            }
          }
          else
          {
            if (this->generation_parser_ != 0)
            {
              this->generation_parser_->post_GuidePageGeneration ();
              this->generation ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "page" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->page_parser_)
            {
              this->page_parser_->pre ();
              ctx.nested_parser (this->page_parser_);
            }
          }
          else
          {
            if (this->page_parser_ != 0)
            {
              this->page_parser_->post_ImplementationGuide_Page ();
              this->page ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Parameter_pskel.
  //
  bool ImplementationGuide_Parameter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Parameter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Parameter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Parameter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Parameter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Parameter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_GuideParameterCode ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_string ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Template_pskel.
  //
  bool ImplementationGuide_Template_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Template_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Template_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Template_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Template_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Template_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_string ();
              this->source ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "scope" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scope_parser_)
            {
              this->scope_parser_->pre ();
              ctx.nested_parser (this->scope_parser_);
            }
          }
          else
          {
            if (this->scope_parser_ != 0)
            {
              this->scope_parser_->post_string ();
              this->scope ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Manifest_pskel.
  //
  bool ImplementationGuide_Manifest_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "rendering" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "resource" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Manifest_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Manifest_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Manifest_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Manifest_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Manifest_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "rendering" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rendering_parser_)
            {
              this->rendering_parser_->pre ();
              ctx.nested_parser (this->rendering_parser_);
            }
          }
          else
          {
            if (this->rendering_parser_ != 0)
            {
              this->rendering_parser_->post_url ();
              this->rendering ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "resource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resource_parser_)
            {
              this->resource_parser_->pre ();
              ctx.nested_parser (this->resource_parser_);
            }
          }
          else
          {
            if (this->resource_parser_ != 0)
            {
              this->resource_parser_->post_ImplementationGuide_Resource1 ();
              this->resource ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "page" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->page_parser_)
            {
              this->page_parser_->pre ();
              ctx.nested_parser (this->page_parser_);
            }
          }
          else
          {
            if (this->page_parser_ != 0)
            {
              this->page_parser_->post_ImplementationGuide_Page1 ();
              this->page ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "image" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->image_parser_)
            {
              this->image_parser_->pre ();
              ctx.nested_parser (this->image_parser_);
            }
          }
          else
          {
            if (this->image_parser_ != 0)
            {
              this->image_parser_->post_string ();
              this->image ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "other" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->other_parser_)
            {
              this->other_parser_->pre ();
              ctx.nested_parser (this->other_parser_);
            }
          }
          else
          {
            if (this->other_parser_ != 0)
            {
              this->other_parser_->post_string ();
              this->other ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Resource1_pskel.
  //
  bool ImplementationGuide_Resource1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Resource1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Resource1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Resource1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Resource1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Resource1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "exampleBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exampleBoolean_parser_)
            {
              this->exampleBoolean_parser_->pre ();
              ctx.nested_parser (this->exampleBoolean_parser_);
            }
          }
          else
          {
            if (this->exampleBoolean_parser_ != 0)
            {
              this->exampleBoolean_parser_->post_boolean ();
              this->exampleBoolean ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "exampleCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exampleCanonical_parser_)
            {
              this->exampleCanonical_parser_->pre ();
              ctx.nested_parser (this->exampleCanonical_parser_);
            }
          }
          else
          {
            if (this->exampleCanonical_parser_ != 0)
            {
              this->exampleCanonical_parser_->post_canonical ();
              this->exampleCanonical ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "relativePath" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relativePath_parser_)
            {
              this->relativePath_parser_->pre ();
              ctx.nested_parser (this->relativePath_parser_);
            }
          }
          else
          {
            if (this->relativePath_parser_ != 0)
            {
              this->relativePath_parser_->post_url ();
              this->relativePath ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImplementationGuide_Page1_pskel.
  //
  bool ImplementationGuide_Page1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImplementationGuide_Page1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImplementationGuide_Page1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImplementationGuide_Page1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImplementationGuide_Page1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImplementationGuide_Page1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "anchor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->anchor_parser_)
            {
              this->anchor_parser_->pre ();
              ctx.nested_parser (this->anchor_parser_);
            }
          }
          else
          {
            if (this->anchor_parser_ != 0)
            {
              this->anchor_parser_->post_string ();
              this->anchor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for GuideParameterCode_pskel.
  //
  bool GuideParameterCode_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_GuideParameterCode_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for SPDXLicense_pskel.
  //
  bool SPDXLicense_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_SPDXLicense_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for GuidePageGeneration_pskel.
  //
  bool GuidePageGeneration_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_GuidePageGeneration_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

