// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef FHIR_BASE_PSKEL_HXX
#define FHIR_BASE_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class date_primitive_base_pskel;
  class date_primitive_pskel;
  class Element_pskel;
  class date_pskel;
  class dateTime_primitive_base_pskel;
  class dateTime_primitive_pskel;
  class dateTime_pskel;
  class code_primitive_pskel;
  class code_pskel;
  class string_primitive_pskel;
  class string_pskel;
  class integer_primitive_pskel;
  class integer_pskel;
  class oid_primitive_pskel;
  class oid_pskel;
  class canonical_primitive_pskel;
  class canonical_pskel;
  class uri_primitive_pskel;
  class uri_pskel;
  class uuid_primitive_pskel;
  class uuid_pskel;
  class url_primitive_pskel;
  class url_pskel;
  class instant_primitive_pskel;
  class instant_pskel;
  class boolean_primitive_pskel;
  class boolean_pskel;
  class base64Binary_primitive_pskel;
  class base64Binary_pskel;
  class unsignedInt_primitive_pskel;
  class unsignedInt_pskel;
  class markdown_primitive_pskel;
  class markdown_pskel;
  class time_primitive_pskel;
  class time_pskel;
  class id_primitive_pskel;
  class id_pskel;
  class positiveInt_primitive_pskel;
  class positiveInt_pskel;
  class decimal_primitive_pskel;
  class decimal_pskel;
  class ResourceContainer_pskel;
  class Extension_pskel;
  class BackboneElement_pskel;
  class Narrative_pskel;
  class NarrativeStatus_list_pskel;
  class NarrativeStatus_pskel;
  class Meta_pskel;
  class Address_pskel;
  class AddressUse_list_pskel;
  class AddressUse_pskel;
  class AddressType_list_pskel;
  class AddressType_pskel;
  class Contributor_pskel;
  class ContributorType_list_pskel;
  class ContributorType_pskel;
  class Attachment_pskel;
  class Quantity_pskel;
  class Count_pskel;
  class DataRequirement_pskel;
  class DataRequirement_CodeFilter_pskel;
  class DataRequirement_DateFilter_pskel;
  class DataRequirement_Sort_pskel;
  class SortDirection_list_pskel;
  class SortDirection_pskel;
  class Dosage_pskel;
  class Dosage_DoseAndRate_pskel;
  class Money_pskel;
  class HumanName_pskel;
  class NameUse_list_pskel;
  class NameUse_pskel;
  class ContactPoint_pskel;
  class ContactPointSystem_list_pskel;
  class ContactPointSystem_pskel;
  class ContactPointUse_list_pskel;
  class ContactPointUse_pskel;
  class MarketingStatus_pskel;
  class Identifier_pskel;
  class IdentifierUse_list_pskel;
  class IdentifierUse_pskel;
  class SubstanceAmount_pskel;
  class SubstanceAmount_ReferenceRange_pskel;
  class Coding_pskel;
  class SampledData_pskel;
  class SampledDataDataType_primitive_pskel;
  class SampledDataDataType_pskel;
  class Population_pskel;
  class Ratio_pskel;
  class Distance_pskel;
  class Age_pskel;
  class Reference_pskel;
  class TriggerDefinition_pskel;
  class TriggerType_list_pskel;
  class TriggerType_pskel;
  class QuantityComparator_list_pskel;
  class QuantityComparator_pskel;
  class Period_pskel;
  class Duration_pskel;
  class Range_pskel;
  class RelatedArtifact_pskel;
  class RelatedArtifactType_list_pskel;
  class RelatedArtifactType_pskel;
  class Annotation_pskel;
  class ProductShelfLife_pskel;
  class ContactDetail_pskel;
  class UsageContext_pskel;
  class Expression_pskel;
  class ExpressionLanguage_list_pskel;
  class ExpressionLanguage_pskel;
  class Signature_pskel;
  class Timing_pskel;
  class Timing_Repeat_pskel;
  class UnitsOfTime_list_pskel;
  class UnitsOfTime_pskel;
  class EventTiming_list_pskel;
  class EventTiming_pskel;
  class ProdCharacteristic_pskel;
  class CodeableConcept_pskel;
  class ParameterDefinition_pskel;
  class ElementDefinition_pskel;
  class ElementDefinition_Constraint_pskel;
  class ElementDefinition_Mapping_pskel;
  class ElementDefinition_Base_pskel;
  class ElementDefinition_Type_pskel;
  class ElementDefinition_Example_pskel;
  class ElementDefinition_Slicing_pskel;
  class ElementDefinition_Binding_pskel;
  class ElementDefinition_Discriminator_pskel;
  class PropertyRepresentation_list_pskel;
  class PropertyRepresentation_pskel;
  class ConstraintSeverity_list_pskel;
  class ConstraintSeverity_pskel;
  class AggregationMode_list_pskel;
  class AggregationMode_pskel;
  class ReferenceVersionRules_list_pskel;
  class ReferenceVersionRules_pskel;
  class SlicingRules_list_pskel;
  class SlicingRules_pskel;
  class BindingStrength_list_pskel;
  class BindingStrength_pskel;
  class DiscriminatorType_list_pskel;
  class DiscriminatorType_pskel;
  class Resource_pskel;
  class DomainResource_pskel;
  class PublicationStatus_list_pskel;
  class PublicationStatus_pskel;
  class SearchParamType_list_pskel;
  class SearchParamType_pskel;
  class AdministrativeGender_list_pskel;
  class AdministrativeGender_pskel;
  class FHIRVersion_list_pskel;
  class FHIRVersion_pskel;
  class NoteType_list_pskel;
  class NoteType_pskel;
  class RemittanceOutcome_list_pskel;
  class RemittanceOutcome_pskel;
  class ConceptMapEquivalence_list_pskel;
  class ConceptMapEquivalence_pskel;
  class DocumentReferenceStatus_list_pskel;
  class DocumentReferenceStatus_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "xml-pskel.hxx"

#include "fhir-xhtml-pskel.hxx"

#include "fhir-all-pskel.hxx"

namespace fhir
{
  class date_primitive_base_pskel: public ::xsde::cxx::parser::validating::simple_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();
    //
    // virtual void
    // _characters (const ::xsde::cxx::ro_string&);

    virtual void
    post_date_primitive_base ();

    // Constructor.
    //
    date_primitive_base_pskel ();

    // Implementation details.
    //
    protected:
    date_primitive_base_pskel* date_primitive_base_impl_;
    date_primitive_base_pskel (date_primitive_base_pskel*, void*);
  };

  class date_primitive_pskel: public ::fhir::date_primitive_base_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_date_primitive ();

    // Constructor.
    //
    date_primitive_pskel (::fhir::date_primitive_base_pskel* tiein);

    // Implementation details.
    //
    protected:
    date_primitive_pskel* date_primitive_impl_;
    date_primitive_pskel (date_primitive_pskel*, void*);
  };

  class Element_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id ();

    // Elements.
    //
    virtual void
    extension ();

    virtual void
    post_Element ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */);

    // Individual attribute parsers.
    //
    void
    id_parser (::fhir::string_primitive_pskel&);

    // Individual element parsers.
    //
    void
    extension_parser (::fhir::Extension_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Element_pskel ();

    // Implementation details.
    //
    protected:
    Element_pskel* Element_impl_;
    Element_pskel (Element_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::string_primitive_pskel* id_parser_;
    ::fhir::Extension_pskel* extension_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Element_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class date_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_date ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::date_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::date_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    date_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    date_pskel* date_impl_;
    date_pskel (date_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::date_primitive_pskel* value_parser_;
  };

  class dateTime_primitive_base_pskel: public ::xsde::cxx::parser::validating::simple_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();
    //
    // virtual void
    // _characters (const ::xsde::cxx::ro_string&);

    virtual void
    post_dateTime_primitive_base ();

    // Constructor.
    //
    dateTime_primitive_base_pskel ();

    // Implementation details.
    //
    protected:
    dateTime_primitive_base_pskel* dateTime_primitive_base_impl_;
    dateTime_primitive_base_pskel (dateTime_primitive_base_pskel*, void*);
  };

  class dateTime_primitive_pskel: public ::fhir::dateTime_primitive_base_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_dateTime_primitive ();

    // Constructor.
    //
    dateTime_primitive_pskel (::fhir::dateTime_primitive_base_pskel* tiein);

    // Implementation details.
    //
    protected:
    dateTime_primitive_pskel* dateTime_primitive_impl_;
    dateTime_primitive_pskel (dateTime_primitive_pskel*, void*);
  };

  class dateTime_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_dateTime ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::dateTime_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::dateTime_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dateTime_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    dateTime_pskel* dateTime_impl_;
    dateTime_pskel (dateTime_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::dateTime_primitive_pskel* value_parser_;
  };

  class code_primitive_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_code_primitive ();

    // Constructor.
    //
    code_primitive_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    code_primitive_pskel* code_primitive_impl_;
    code_primitive_pskel (code_primitive_pskel*, void*);
  };

  class code_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_code ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::code_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    code_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    code_pskel* code_impl_;
    code_pskel (code_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::code_primitive_pskel* value_parser_;
  };

  class string_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_string_primitive ();

    // Constructor.
    //
    string_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    string_primitive_pskel* string_primitive_impl_;
    string_primitive_pskel (string_primitive_pskel*, void*);
  };

  class string_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_string ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::string_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    string_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    string_pskel* string_impl_;
    string_pskel (string_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::string_primitive_pskel* value_parser_;
  };

  class integer_primitive_pskel: public ::xml_schema::int_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_integer_primitive ();

    // Constructor.
    //
    integer_primitive_pskel (::xml_schema::int_pskel* tiein);

    // Implementation details.
    //
    virtual int
    post_int ();

    protected:
    integer_primitive_pskel* integer_primitive_impl_;
    integer_primitive_pskel (integer_primitive_pskel*, void*);
  };

  class integer_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_integer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::integer_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::integer_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    integer_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    integer_pskel* integer_impl_;
    integer_pskel (integer_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::integer_primitive_pskel* value_parser_;
  };

  class oid_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_oid_primitive ();

    // Constructor.
    //
    oid_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    oid_primitive_pskel* oid_primitive_impl_;
    oid_primitive_pskel (oid_primitive_pskel*, void*);
  };

  class oid_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_oid ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::oid_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::oid_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    oid_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    oid_pskel* oid_impl_;
    oid_pskel (oid_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::oid_primitive_pskel* value_parser_;
  };

  class canonical_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_canonical_primitive ();

    // Constructor.
    //
    canonical_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    canonical_primitive_pskel* canonical_primitive_impl_;
    canonical_primitive_pskel (canonical_primitive_pskel*, void*);
  };

  class canonical_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_canonical ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::canonical_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::canonical_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    canonical_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    canonical_pskel* canonical_impl_;
    canonical_pskel (canonical_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::canonical_primitive_pskel* value_parser_;
  };

  class uri_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_uri_primitive ();

    // Constructor.
    //
    uri_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    uri_primitive_pskel* uri_primitive_impl_;
    uri_primitive_pskel (uri_primitive_pskel*, void*);
  };

  class uri_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_uri ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uri_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::uri_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    uri_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    uri_pskel* uri_impl_;
    uri_pskel (uri_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::uri_primitive_pskel* value_parser_;
  };

  class uuid_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_uuid_primitive ();

    // Constructor.
    //
    uuid_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    uuid_primitive_pskel* uuid_primitive_impl_;
    uuid_primitive_pskel (uuid_primitive_pskel*, void*);
  };

  class uuid_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_uuid ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uuid_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::uuid_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    uuid_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    uuid_pskel* uuid_impl_;
    uuid_pskel (uuid_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::uuid_primitive_pskel* value_parser_;
  };

  class url_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_url_primitive ();

    // Constructor.
    //
    url_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    url_primitive_pskel* url_primitive_impl_;
    url_primitive_pskel (url_primitive_pskel*, void*);
  };

  class url_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_url ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::url_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::url_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    url_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    url_pskel* url_impl_;
    url_pskel (url_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::url_primitive_pskel* value_parser_;
  };

  class instant_primitive_pskel: public ::xml_schema::date_time_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_instant_primitive ();

    // Constructor.
    //
    instant_primitive_pskel (::xml_schema::date_time_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::date_time
    post_date_time ();

    protected:
    instant_primitive_pskel* instant_primitive_impl_;
    instant_primitive_pskel (instant_primitive_pskel*, void*);
  };

  class instant_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_instant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::instant_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::instant_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    instant_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    instant_pskel* instant_impl_;
    instant_pskel (instant_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::instant_primitive_pskel* value_parser_;
  };

  class boolean_primitive_pskel: public ::xml_schema::boolean_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_boolean_primitive ();

    // Constructor.
    //
    boolean_primitive_pskel (::xml_schema::boolean_pskel* tiein);

    // Implementation details.
    //
    virtual bool
    post_boolean ();

    protected:
    boolean_primitive_pskel* boolean_primitive_impl_;
    boolean_primitive_pskel (boolean_primitive_pskel*, void*);
  };

  class boolean_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_boolean ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::boolean_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::boolean_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    boolean_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    boolean_pskel* boolean_impl_;
    boolean_pskel (boolean_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::boolean_primitive_pskel* value_parser_;
  };

  class base64Binary_primitive_pskel: public ::xml_schema::base64_binary_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_base64Binary_primitive ();

    // Constructor.
    //
    base64Binary_primitive_pskel (::xml_schema::base64_binary_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::buffer*
    post_base64_binary ();

    protected:
    base64Binary_primitive_pskel* base64Binary_primitive_impl_;
    base64Binary_primitive_pskel (base64Binary_primitive_pskel*, void*);
  };

  class base64Binary_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_base64Binary ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::base64Binary_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::base64Binary_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    base64Binary_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    base64Binary_pskel* base64Binary_impl_;
    base64Binary_pskel (base64Binary_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::base64Binary_primitive_pskel* value_parser_;
  };

  class unsignedInt_primitive_pskel: public ::xml_schema::non_negative_integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_unsignedInt_primitive ();

    // Constructor.
    //
    unsignedInt_primitive_pskel (::xml_schema::non_negative_integer_pskel* tiein);

    // Implementation details.
    //
    virtual unsigned long
    post_non_negative_integer ();

    protected:
    unsignedInt_primitive_pskel* unsignedInt_primitive_impl_;
    unsignedInt_primitive_pskel (unsignedInt_primitive_pskel*, void*);
  };

  class unsignedInt_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_unsignedInt ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::unsignedInt_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::unsignedInt_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    unsignedInt_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    unsignedInt_pskel* unsignedInt_impl_;
    unsignedInt_pskel (unsignedInt_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::unsignedInt_primitive_pskel* value_parser_;
  };

  class markdown_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_markdown_primitive ();

    // Constructor.
    //
    markdown_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    markdown_primitive_pskel* markdown_primitive_impl_;
    markdown_primitive_pskel (markdown_primitive_pskel*, void*);
  };

  class markdown_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_markdown ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::markdown_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::markdown_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    markdown_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    markdown_pskel* markdown_impl_;
    markdown_pskel (markdown_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::markdown_primitive_pskel* value_parser_;
  };

  class time_primitive_pskel: public ::xml_schema::time_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_time_primitive ();

    // Constructor.
    //
    time_primitive_pskel (::xml_schema::time_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::time
    post_time ();

    protected:
    time_primitive_pskel* time_primitive_impl_;
    time_primitive_pskel (time_primitive_pskel*, void*);
  };

  class time_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_time ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::time_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::time_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    time_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    time_pskel* time_impl_;
    time_pskel (time_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::time_primitive_pskel* value_parser_;
  };

  class id_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_id_primitive ();

    // Constructor.
    //
    id_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    id_primitive_pskel* id_primitive_impl_;
    id_primitive_pskel (id_primitive_pskel*, void*);
  };

  class id_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_id ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::id_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::id_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    id_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    id_pskel* id_impl_;
    id_pskel (id_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::id_primitive_pskel* value_parser_;
  };

  class positiveInt_primitive_pskel: public ::xml_schema::positive_integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_positiveInt_primitive ();

    // Constructor.
    //
    positiveInt_primitive_pskel (::xml_schema::positive_integer_pskel* tiein);

    // Implementation details.
    //
    virtual unsigned long
    post_positive_integer ();

    protected:
    positiveInt_primitive_pskel* positiveInt_primitive_impl_;
    positiveInt_primitive_pskel (positiveInt_primitive_pskel*, void*);
  };

  class positiveInt_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_positiveInt ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::positiveInt_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::positiveInt_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    positiveInt_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    positiveInt_pskel* positiveInt_impl_;
    positiveInt_pskel (positiveInt_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::positiveInt_primitive_pskel* value_parser_;
  };

  class decimal_primitive_pskel: public ::xsde::cxx::parser::validating::simple_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();
    //
    // virtual void
    // _characters (const ::xsde::cxx::ro_string&);

    virtual void
    post_decimal_primitive ();

    // Constructor.
    //
    decimal_primitive_pskel ();

    // Implementation details.
    //
    protected:
    decimal_primitive_pskel* decimal_primitive_impl_;
    decimal_primitive_pskel (decimal_primitive_pskel*, void*);
  };

  class decimal_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_decimal ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::decimal_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::decimal_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    decimal_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    decimal_pskel* decimal_impl_;
    decimal_pskel (decimal_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::decimal_primitive_pskel* value_parser_;
  };

  class ResourceContainer_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    Account ();

    virtual void
    ActivityDefinition ();

    virtual void
    AdverseEvent ();

    virtual void
    AllergyIntolerance ();

    virtual void
    Appointment ();

    virtual void
    AppointmentResponse ();

    virtual void
    AuditEvent ();

    virtual void
    Basic ();

    virtual void
    Binary ();

    virtual void
    BiologicallyDerivedProduct ();

    virtual void
    BodyStructure ();

    virtual void
    Bundle ();

    virtual void
    CapabilityStatement ();

    virtual void
    CarePlan ();

    virtual void
    CareTeam ();

    virtual void
    CatalogEntry ();

    virtual void
    ChargeItem ();

    virtual void
    ChargeItemDefinition ();

    virtual void
    Claim ();

    virtual void
    ClaimResponse ();

    virtual void
    ClinicalImpression ();

    virtual void
    CodeSystem ();

    virtual void
    Communication ();

    virtual void
    CommunicationRequest ();

    virtual void
    CompartmentDefinition ();

    virtual void
    Composition ();

    virtual void
    ConceptMap ();

    virtual void
    Condition ();

    virtual void
    Consent ();

    virtual void
    Contract ();

    virtual void
    Coverage ();

    virtual void
    CoverageEligibilityRequest ();

    virtual void
    CoverageEligibilityResponse ();

    virtual void
    DetectedIssue ();

    virtual void
    Device ();

    virtual void
    DeviceDefinition ();

    virtual void
    DeviceMetric ();

    virtual void
    DeviceRequest ();

    virtual void
    DeviceUseStatement ();

    virtual void
    DiagnosticReport ();

    virtual void
    DocumentManifest ();

    virtual void
    DocumentReference ();

    virtual void
    EffectEvidenceSynthesis ();

    virtual void
    Encounter ();

    virtual void
    Endpoint ();

    virtual void
    EnrollmentRequest ();

    virtual void
    EnrollmentResponse ();

    virtual void
    EpisodeOfCare ();

    virtual void
    EventDefinition ();

    virtual void
    Evidence ();

    virtual void
    EvidenceVariable ();

    virtual void
    ExampleScenario ();

    virtual void
    ExplanationOfBenefit ();

    virtual void
    FamilyMemberHistory ();

    virtual void
    Flag ();

    virtual void
    Goal ();

    virtual void
    GraphDefinition ();

    virtual void
    Group ();

    virtual void
    GuidanceResponse ();

    virtual void
    HealthcareService ();

    virtual void
    ImagingStudy ();

    virtual void
    Immunization ();

    virtual void
    ImmunizationEvaluation ();

    virtual void
    ImmunizationRecommendation ();

    virtual void
    ImplementationGuide ();

    virtual void
    InsurancePlan ();

    virtual void
    Invoice ();

    virtual void
    Library ();

    virtual void
    Linkage ();

    virtual void
    List ();

    virtual void
    Location ();

    virtual void
    Measure ();

    virtual void
    MeasureReport ();

    virtual void
    Media ();

    virtual void
    Medication ();

    virtual void
    MedicationAdministration ();

    virtual void
    MedicationDispense ();

    virtual void
    MedicationKnowledge ();

    virtual void
    MedicationRequest ();

    virtual void
    MedicationStatement ();

    virtual void
    MedicinalProduct ();

    virtual void
    MedicinalProductAuthorization ();

    virtual void
    MedicinalProductContraindication ();

    virtual void
    MedicinalProductIndication ();

    virtual void
    MedicinalProductIngredient ();

    virtual void
    MedicinalProductInteraction ();

    virtual void
    MedicinalProductManufactured ();

    virtual void
    MedicinalProductPackaged ();

    virtual void
    MedicinalProductPharmaceutical ();

    virtual void
    MedicinalProductUndesirableEffect ();

    virtual void
    MessageDefinition ();

    virtual void
    MessageHeader ();

    virtual void
    MolecularSequence ();

    virtual void
    NamingSystem ();

    virtual void
    NutritionOrder ();

    virtual void
    Observation ();

    virtual void
    ObservationDefinition ();

    virtual void
    OperationDefinition ();

    virtual void
    OperationOutcome ();

    virtual void
    Organization ();

    virtual void
    OrganizationAffiliation ();

    virtual void
    Patient ();

    virtual void
    PaymentNotice ();

    virtual void
    PaymentReconciliation ();

    virtual void
    Person ();

    virtual void
    PlanDefinition ();

    virtual void
    Practitioner ();

    virtual void
    PractitionerRole ();

    virtual void
    Procedure ();

    virtual void
    Provenance ();

    virtual void
    Questionnaire ();

    virtual void
    QuestionnaireResponse ();

    virtual void
    RelatedPerson ();

    virtual void
    RequestGroup ();

    virtual void
    ResearchDefinition ();

    virtual void
    ResearchElementDefinition ();

    virtual void
    ResearchStudy ();

    virtual void
    ResearchSubject ();

    virtual void
    RiskAssessment ();

    virtual void
    RiskEvidenceSynthesis ();

    virtual void
    Schedule ();

    virtual void
    SearchParameter ();

    virtual void
    ServiceRequest ();

    virtual void
    Slot ();

    virtual void
    Specimen ();

    virtual void
    SpecimenDefinition ();

    virtual void
    StructureDefinition ();

    virtual void
    StructureMap ();

    virtual void
    Subscription ();

    virtual void
    Substance ();

    virtual void
    SubstanceNucleicAcid ();

    virtual void
    SubstancePolymer ();

    virtual void
    SubstanceProtein ();

    virtual void
    SubstanceReferenceInformation ();

    virtual void
    SubstanceSourceMaterial ();

    virtual void
    SubstanceSpecification ();

    virtual void
    SupplyDelivery ();

    virtual void
    SupplyRequest ();

    virtual void
    Task ();

    virtual void
    TerminologyCapabilities ();

    virtual void
    TestReport ();

    virtual void
    TestScript ();

    virtual void
    ValueSet ();

    virtual void
    VerificationResult ();

    virtual void
    VisionPrescription ();

    virtual void
    Parameters ();

    virtual void
    post_ResourceContainer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::Account_pskel& /* Account */,
             ::fhir::ActivityDefinition_pskel& /* ActivityDefinition */,
             ::fhir::AdverseEvent_pskel& /* AdverseEvent */,
             ::fhir::AllergyIntolerance_pskel& /* AllergyIntolerance */,
             ::fhir::Appointment_pskel& /* Appointment */,
             ::fhir::AppointmentResponse_pskel& /* AppointmentResponse */,
             ::fhir::AuditEvent_pskel& /* AuditEvent */,
             ::fhir::Basic_pskel& /* Basic */,
             ::fhir::Binary_pskel& /* Binary */,
             ::fhir::BiologicallyDerivedProduct_pskel& /* BiologicallyDerivedProduct */,
             ::fhir::BodyStructure_pskel& /* BodyStructure */,
             ::fhir::Bundle_pskel& /* Bundle */,
             ::fhir::CapabilityStatement_pskel& /* CapabilityStatement */,
             ::fhir::CarePlan_pskel& /* CarePlan */,
             ::fhir::CareTeam_pskel& /* CareTeam */,
             ::fhir::CatalogEntry_pskel& /* CatalogEntry */,
             ::fhir::ChargeItem_pskel& /* ChargeItem */,
             ::fhir::ChargeItemDefinition_pskel& /* ChargeItemDefinition */,
             ::fhir::Claim_pskel& /* Claim */,
             ::fhir::ClaimResponse_pskel& /* ClaimResponse */,
             ::fhir::ClinicalImpression_pskel& /* ClinicalImpression */,
             ::fhir::CodeSystem_pskel& /* CodeSystem */,
             ::fhir::Communication_pskel& /* Communication */,
             ::fhir::CommunicationRequest_pskel& /* CommunicationRequest */,
             ::fhir::CompartmentDefinition_pskel& /* CompartmentDefinition */,
             ::fhir::Composition_pskel& /* Composition */,
             ::fhir::ConceptMap_pskel& /* ConceptMap */,
             ::fhir::Condition_pskel& /* Condition */,
             ::fhir::Consent_pskel& /* Consent */,
             ::fhir::Contract_pskel& /* Contract */,
             ::fhir::Coverage_pskel& /* Coverage */,
             ::fhir::CoverageEligibilityRequest_pskel& /* CoverageEligibilityRequest */,
             ::fhir::CoverageEligibilityResponse_pskel& /* CoverageEligibilityResponse */,
             ::fhir::DetectedIssue_pskel& /* DetectedIssue */,
             ::fhir::Device_pskel& /* Device */,
             ::fhir::DeviceDefinition_pskel& /* DeviceDefinition */,
             ::fhir::DeviceMetric_pskel& /* DeviceMetric */,
             ::fhir::DeviceRequest_pskel& /* DeviceRequest */,
             ::fhir::DeviceUseStatement_pskel& /* DeviceUseStatement */,
             ::fhir::DiagnosticReport_pskel& /* DiagnosticReport */,
             ::fhir::DocumentManifest_pskel& /* DocumentManifest */,
             ::fhir::DocumentReference_pskel& /* DocumentReference */,
             ::fhir::EffectEvidenceSynthesis_pskel& /* EffectEvidenceSynthesis */,
             ::fhir::Encounter_pskel& /* Encounter */,
             ::fhir::Endpoint_pskel& /* Endpoint */,
             ::fhir::EnrollmentRequest_pskel& /* EnrollmentRequest */,
             ::fhir::EnrollmentResponse_pskel& /* EnrollmentResponse */,
             ::fhir::EpisodeOfCare_pskel& /* EpisodeOfCare */,
             ::fhir::EventDefinition_pskel& /* EventDefinition */,
             ::fhir::Evidence_pskel& /* Evidence */,
             ::fhir::EvidenceVariable_pskel& /* EvidenceVariable */,
             ::fhir::ExampleScenario_pskel& /* ExampleScenario */,
             ::fhir::ExplanationOfBenefit_pskel& /* ExplanationOfBenefit */,
             ::fhir::FamilyMemberHistory_pskel& /* FamilyMemberHistory */,
             ::fhir::Flag_pskel& /* Flag */,
             ::fhir::Goal_pskel& /* Goal */,
             ::fhir::GraphDefinition_pskel& /* GraphDefinition */,
             ::fhir::Group_pskel& /* Group */,
             ::fhir::GuidanceResponse_pskel& /* GuidanceResponse */,
             ::fhir::HealthcareService_pskel& /* HealthcareService */,
             ::fhir::ImagingStudy_pskel& /* ImagingStudy */,
             ::fhir::Immunization_pskel& /* Immunization */,
             ::fhir::ImmunizationEvaluation_pskel& /* ImmunizationEvaluation */,
             ::fhir::ImmunizationRecommendation_pskel& /* ImmunizationRecommendation */,
             ::fhir::ImplementationGuide_pskel& /* ImplementationGuide */,
             ::fhir::InsurancePlan_pskel& /* InsurancePlan */,
             ::fhir::Invoice_pskel& /* Invoice */,
             ::fhir::Library_pskel& /* Library */,
             ::fhir::Linkage_pskel& /* Linkage */,
             ::fhir::List_pskel& /* List */,
             ::fhir::Location_pskel& /* Location */,
             ::fhir::Measure_pskel& /* Measure */,
             ::fhir::MeasureReport_pskel& /* MeasureReport */,
             ::fhir::Media_pskel& /* Media */,
             ::fhir::Medication_pskel& /* Medication */,
             ::fhir::MedicationAdministration_pskel& /* MedicationAdministration */,
             ::fhir::MedicationDispense_pskel& /* MedicationDispense */,
             ::fhir::MedicationKnowledge_pskel& /* MedicationKnowledge */,
             ::fhir::MedicationRequest_pskel& /* MedicationRequest */,
             ::fhir::MedicationStatement_pskel& /* MedicationStatement */,
             ::fhir::MedicinalProduct_pskel& /* MedicinalProduct */,
             ::fhir::MedicinalProductAuthorization_pskel& /* MedicinalProductAuthorization */,
             ::fhir::MedicinalProductContraindication_pskel& /* MedicinalProductContraindication */,
             ::fhir::MedicinalProductIndication_pskel& /* MedicinalProductIndication */,
             ::fhir::MedicinalProductIngredient_pskel& /* MedicinalProductIngredient */,
             ::fhir::MedicinalProductInteraction_pskel& /* MedicinalProductInteraction */,
             ::fhir::MedicinalProductManufactured_pskel& /* MedicinalProductManufactured */,
             ::fhir::MedicinalProductPackaged_pskel& /* MedicinalProductPackaged */,
             ::fhir::MedicinalProductPharmaceutical_pskel& /* MedicinalProductPharmaceutical */,
             ::fhir::MedicinalProductUndesirableEffect_pskel& /* MedicinalProductUndesirableEffect */,
             ::fhir::MessageDefinition_pskel& /* MessageDefinition */,
             ::fhir::MessageHeader_pskel& /* MessageHeader */,
             ::fhir::MolecularSequence_pskel& /* MolecularSequence */,
             ::fhir::NamingSystem_pskel& /* NamingSystem */,
             ::fhir::NutritionOrder_pskel& /* NutritionOrder */,
             ::fhir::Observation_pskel& /* Observation */,
             ::fhir::ObservationDefinition_pskel& /* ObservationDefinition */,
             ::fhir::OperationDefinition_pskel& /* OperationDefinition */,
             ::fhir::OperationOutcome_pskel& /* OperationOutcome */,
             ::fhir::Organization_pskel& /* Organization */,
             ::fhir::OrganizationAffiliation_pskel& /* OrganizationAffiliation */,
             ::fhir::Patient_pskel& /* Patient */,
             ::fhir::PaymentNotice_pskel& /* PaymentNotice */,
             ::fhir::PaymentReconciliation_pskel& /* PaymentReconciliation */,
             ::fhir::Person_pskel& /* Person */,
             ::fhir::PlanDefinition_pskel& /* PlanDefinition */,
             ::fhir::Practitioner_pskel& /* Practitioner */,
             ::fhir::PractitionerRole_pskel& /* PractitionerRole */,
             ::fhir::Procedure_pskel& /* Procedure */,
             ::fhir::Provenance_pskel& /* Provenance */,
             ::fhir::Questionnaire_pskel& /* Questionnaire */,
             ::fhir::QuestionnaireResponse_pskel& /* QuestionnaireResponse */,
             ::fhir::RelatedPerson_pskel& /* RelatedPerson */,
             ::fhir::RequestGroup_pskel& /* RequestGroup */,
             ::fhir::ResearchDefinition_pskel& /* ResearchDefinition */,
             ::fhir::ResearchElementDefinition_pskel& /* ResearchElementDefinition */,
             ::fhir::ResearchStudy_pskel& /* ResearchStudy */,
             ::fhir::ResearchSubject_pskel& /* ResearchSubject */,
             ::fhir::RiskAssessment_pskel& /* RiskAssessment */,
             ::fhir::RiskEvidenceSynthesis_pskel& /* RiskEvidenceSynthesis */,
             ::fhir::Schedule_pskel& /* Schedule */,
             ::fhir::SearchParameter_pskel& /* SearchParameter */,
             ::fhir::ServiceRequest_pskel& /* ServiceRequest */,
             ::fhir::Slot_pskel& /* Slot */,
             ::fhir::Specimen_pskel& /* Specimen */,
             ::fhir::SpecimenDefinition_pskel& /* SpecimenDefinition */,
             ::fhir::StructureDefinition_pskel& /* StructureDefinition */,
             ::fhir::StructureMap_pskel& /* StructureMap */,
             ::fhir::Subscription_pskel& /* Subscription */,
             ::fhir::Substance_pskel& /* Substance */,
             ::fhir::SubstanceNucleicAcid_pskel& /* SubstanceNucleicAcid */,
             ::fhir::SubstancePolymer_pskel& /* SubstancePolymer */,
             ::fhir::SubstanceProtein_pskel& /* SubstanceProtein */,
             ::fhir::SubstanceReferenceInformation_pskel& /* SubstanceReferenceInformation */,
             ::fhir::SubstanceSourceMaterial_pskel& /* SubstanceSourceMaterial */,
             ::fhir::SubstanceSpecification_pskel& /* SubstanceSpecification */,
             ::fhir::SupplyDelivery_pskel& /* SupplyDelivery */,
             ::fhir::SupplyRequest_pskel& /* SupplyRequest */,
             ::fhir::Task_pskel& /* Task */,
             ::fhir::TerminologyCapabilities_pskel& /* TerminologyCapabilities */,
             ::fhir::TestReport_pskel& /* TestReport */,
             ::fhir::TestScript_pskel& /* TestScript */,
             ::fhir::ValueSet_pskel& /* ValueSet */,
             ::fhir::VerificationResult_pskel& /* VerificationResult */,
             ::fhir::VisionPrescription_pskel& /* VisionPrescription */,
             ::fhir::Parameters_pskel& /* Parameters */);

    // Individual element parsers.
    //
    void
    Account_parser (::fhir::Account_pskel&);

    void
    ActivityDefinition_parser (::fhir::ActivityDefinition_pskel&);

    void
    AdverseEvent_parser (::fhir::AdverseEvent_pskel&);

    void
    AllergyIntolerance_parser (::fhir::AllergyIntolerance_pskel&);

    void
    Appointment_parser (::fhir::Appointment_pskel&);

    void
    AppointmentResponse_parser (::fhir::AppointmentResponse_pskel&);

    void
    AuditEvent_parser (::fhir::AuditEvent_pskel&);

    void
    Basic_parser (::fhir::Basic_pskel&);

    void
    Binary_parser (::fhir::Binary_pskel&);

    void
    BiologicallyDerivedProduct_parser (::fhir::BiologicallyDerivedProduct_pskel&);

    void
    BodyStructure_parser (::fhir::BodyStructure_pskel&);

    void
    Bundle_parser (::fhir::Bundle_pskel&);

    void
    CapabilityStatement_parser (::fhir::CapabilityStatement_pskel&);

    void
    CarePlan_parser (::fhir::CarePlan_pskel&);

    void
    CareTeam_parser (::fhir::CareTeam_pskel&);

    void
    CatalogEntry_parser (::fhir::CatalogEntry_pskel&);

    void
    ChargeItem_parser (::fhir::ChargeItem_pskel&);

    void
    ChargeItemDefinition_parser (::fhir::ChargeItemDefinition_pskel&);

    void
    Claim_parser (::fhir::Claim_pskel&);

    void
    ClaimResponse_parser (::fhir::ClaimResponse_pskel&);

    void
    ClinicalImpression_parser (::fhir::ClinicalImpression_pskel&);

    void
    CodeSystem_parser (::fhir::CodeSystem_pskel&);

    void
    Communication_parser (::fhir::Communication_pskel&);

    void
    CommunicationRequest_parser (::fhir::CommunicationRequest_pskel&);

    void
    CompartmentDefinition_parser (::fhir::CompartmentDefinition_pskel&);

    void
    Composition_parser (::fhir::Composition_pskel&);

    void
    ConceptMap_parser (::fhir::ConceptMap_pskel&);

    void
    Condition_parser (::fhir::Condition_pskel&);

    void
    Consent_parser (::fhir::Consent_pskel&);

    void
    Contract_parser (::fhir::Contract_pskel&);

    void
    Coverage_parser (::fhir::Coverage_pskel&);

    void
    CoverageEligibilityRequest_parser (::fhir::CoverageEligibilityRequest_pskel&);

    void
    CoverageEligibilityResponse_parser (::fhir::CoverageEligibilityResponse_pskel&);

    void
    DetectedIssue_parser (::fhir::DetectedIssue_pskel&);

    void
    Device_parser (::fhir::Device_pskel&);

    void
    DeviceDefinition_parser (::fhir::DeviceDefinition_pskel&);

    void
    DeviceMetric_parser (::fhir::DeviceMetric_pskel&);

    void
    DeviceRequest_parser (::fhir::DeviceRequest_pskel&);

    void
    DeviceUseStatement_parser (::fhir::DeviceUseStatement_pskel&);

    void
    DiagnosticReport_parser (::fhir::DiagnosticReport_pskel&);

    void
    DocumentManifest_parser (::fhir::DocumentManifest_pskel&);

    void
    DocumentReference_parser (::fhir::DocumentReference_pskel&);

    void
    EffectEvidenceSynthesis_parser (::fhir::EffectEvidenceSynthesis_pskel&);

    void
    Encounter_parser (::fhir::Encounter_pskel&);

    void
    Endpoint_parser (::fhir::Endpoint_pskel&);

    void
    EnrollmentRequest_parser (::fhir::EnrollmentRequest_pskel&);

    void
    EnrollmentResponse_parser (::fhir::EnrollmentResponse_pskel&);

    void
    EpisodeOfCare_parser (::fhir::EpisodeOfCare_pskel&);

    void
    EventDefinition_parser (::fhir::EventDefinition_pskel&);

    void
    Evidence_parser (::fhir::Evidence_pskel&);

    void
    EvidenceVariable_parser (::fhir::EvidenceVariable_pskel&);

    void
    ExampleScenario_parser (::fhir::ExampleScenario_pskel&);

    void
    ExplanationOfBenefit_parser (::fhir::ExplanationOfBenefit_pskel&);

    void
    FamilyMemberHistory_parser (::fhir::FamilyMemberHistory_pskel&);

    void
    Flag_parser (::fhir::Flag_pskel&);

    void
    Goal_parser (::fhir::Goal_pskel&);

    void
    GraphDefinition_parser (::fhir::GraphDefinition_pskel&);

    void
    Group_parser (::fhir::Group_pskel&);

    void
    GuidanceResponse_parser (::fhir::GuidanceResponse_pskel&);

    void
    HealthcareService_parser (::fhir::HealthcareService_pskel&);

    void
    ImagingStudy_parser (::fhir::ImagingStudy_pskel&);

    void
    Immunization_parser (::fhir::Immunization_pskel&);

    void
    ImmunizationEvaluation_parser (::fhir::ImmunizationEvaluation_pskel&);

    void
    ImmunizationRecommendation_parser (::fhir::ImmunizationRecommendation_pskel&);

    void
    ImplementationGuide_parser (::fhir::ImplementationGuide_pskel&);

    void
    InsurancePlan_parser (::fhir::InsurancePlan_pskel&);

    void
    Invoice_parser (::fhir::Invoice_pskel&);

    void
    Library_parser (::fhir::Library_pskel&);

    void
    Linkage_parser (::fhir::Linkage_pskel&);

    void
    List_parser (::fhir::List_pskel&);

    void
    Location_parser (::fhir::Location_pskel&);

    void
    Measure_parser (::fhir::Measure_pskel&);

    void
    MeasureReport_parser (::fhir::MeasureReport_pskel&);

    void
    Media_parser (::fhir::Media_pskel&);

    void
    Medication_parser (::fhir::Medication_pskel&);

    void
    MedicationAdministration_parser (::fhir::MedicationAdministration_pskel&);

    void
    MedicationDispense_parser (::fhir::MedicationDispense_pskel&);

    void
    MedicationKnowledge_parser (::fhir::MedicationKnowledge_pskel&);

    void
    MedicationRequest_parser (::fhir::MedicationRequest_pskel&);

    void
    MedicationStatement_parser (::fhir::MedicationStatement_pskel&);

    void
    MedicinalProduct_parser (::fhir::MedicinalProduct_pskel&);

    void
    MedicinalProductAuthorization_parser (::fhir::MedicinalProductAuthorization_pskel&);

    void
    MedicinalProductContraindication_parser (::fhir::MedicinalProductContraindication_pskel&);

    void
    MedicinalProductIndication_parser (::fhir::MedicinalProductIndication_pskel&);

    void
    MedicinalProductIngredient_parser (::fhir::MedicinalProductIngredient_pskel&);

    void
    MedicinalProductInteraction_parser (::fhir::MedicinalProductInteraction_pskel&);

    void
    MedicinalProductManufactured_parser (::fhir::MedicinalProductManufactured_pskel&);

    void
    MedicinalProductPackaged_parser (::fhir::MedicinalProductPackaged_pskel&);

    void
    MedicinalProductPharmaceutical_parser (::fhir::MedicinalProductPharmaceutical_pskel&);

    void
    MedicinalProductUndesirableEffect_parser (::fhir::MedicinalProductUndesirableEffect_pskel&);

    void
    MessageDefinition_parser (::fhir::MessageDefinition_pskel&);

    void
    MessageHeader_parser (::fhir::MessageHeader_pskel&);

    void
    MolecularSequence_parser (::fhir::MolecularSequence_pskel&);

    void
    NamingSystem_parser (::fhir::NamingSystem_pskel&);

    void
    NutritionOrder_parser (::fhir::NutritionOrder_pskel&);

    void
    Observation_parser (::fhir::Observation_pskel&);

    void
    ObservationDefinition_parser (::fhir::ObservationDefinition_pskel&);

    void
    OperationDefinition_parser (::fhir::OperationDefinition_pskel&);

    void
    OperationOutcome_parser (::fhir::OperationOutcome_pskel&);

    void
    Organization_parser (::fhir::Organization_pskel&);

    void
    OrganizationAffiliation_parser (::fhir::OrganizationAffiliation_pskel&);

    void
    Patient_parser (::fhir::Patient_pskel&);

    void
    PaymentNotice_parser (::fhir::PaymentNotice_pskel&);

    void
    PaymentReconciliation_parser (::fhir::PaymentReconciliation_pskel&);

    void
    Person_parser (::fhir::Person_pskel&);

    void
    PlanDefinition_parser (::fhir::PlanDefinition_pskel&);

    void
    Practitioner_parser (::fhir::Practitioner_pskel&);

    void
    PractitionerRole_parser (::fhir::PractitionerRole_pskel&);

    void
    Procedure_parser (::fhir::Procedure_pskel&);

    void
    Provenance_parser (::fhir::Provenance_pskel&);

    void
    Questionnaire_parser (::fhir::Questionnaire_pskel&);

    void
    QuestionnaireResponse_parser (::fhir::QuestionnaireResponse_pskel&);

    void
    RelatedPerson_parser (::fhir::RelatedPerson_pskel&);

    void
    RequestGroup_parser (::fhir::RequestGroup_pskel&);

    void
    ResearchDefinition_parser (::fhir::ResearchDefinition_pskel&);

    void
    ResearchElementDefinition_parser (::fhir::ResearchElementDefinition_pskel&);

    void
    ResearchStudy_parser (::fhir::ResearchStudy_pskel&);

    void
    ResearchSubject_parser (::fhir::ResearchSubject_pskel&);

    void
    RiskAssessment_parser (::fhir::RiskAssessment_pskel&);

    void
    RiskEvidenceSynthesis_parser (::fhir::RiskEvidenceSynthesis_pskel&);

    void
    Schedule_parser (::fhir::Schedule_pskel&);

    void
    SearchParameter_parser (::fhir::SearchParameter_pskel&);

    void
    ServiceRequest_parser (::fhir::ServiceRequest_pskel&);

    void
    Slot_parser (::fhir::Slot_pskel&);

    void
    Specimen_parser (::fhir::Specimen_pskel&);

    void
    SpecimenDefinition_parser (::fhir::SpecimenDefinition_pskel&);

    void
    StructureDefinition_parser (::fhir::StructureDefinition_pskel&);

    void
    StructureMap_parser (::fhir::StructureMap_pskel&);

    void
    Subscription_parser (::fhir::Subscription_pskel&);

    void
    Substance_parser (::fhir::Substance_pskel&);

    void
    SubstanceNucleicAcid_parser (::fhir::SubstanceNucleicAcid_pskel&);

    void
    SubstancePolymer_parser (::fhir::SubstancePolymer_pskel&);

    void
    SubstanceProtein_parser (::fhir::SubstanceProtein_pskel&);

    void
    SubstanceReferenceInformation_parser (::fhir::SubstanceReferenceInformation_pskel&);

    void
    SubstanceSourceMaterial_parser (::fhir::SubstanceSourceMaterial_pskel&);

    void
    SubstanceSpecification_parser (::fhir::SubstanceSpecification_pskel&);

    void
    SupplyDelivery_parser (::fhir::SupplyDelivery_pskel&);

    void
    SupplyRequest_parser (::fhir::SupplyRequest_pskel&);

    void
    Task_parser (::fhir::Task_pskel&);

    void
    TerminologyCapabilities_parser (::fhir::TerminologyCapabilities_pskel&);

    void
    TestReport_parser (::fhir::TestReport_pskel&);

    void
    TestScript_parser (::fhir::TestScript_pskel&);

    void
    ValueSet_parser (::fhir::ValueSet_pskel&);

    void
    VerificationResult_parser (::fhir::VerificationResult_pskel&);

    void
    VisionPrescription_parser (::fhir::VisionPrescription_pskel&);

    void
    Parameters_parser (::fhir::Parameters_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResourceContainer_pskel ();

    // Implementation details.
    //
    protected:
    ResourceContainer_pskel* ResourceContainer_impl_;
    ResourceContainer_pskel (ResourceContainer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Account_pskel* Account_parser_;
    ::fhir::ActivityDefinition_pskel* ActivityDefinition_parser_;
    ::fhir::AdverseEvent_pskel* AdverseEvent_parser_;
    ::fhir::AllergyIntolerance_pskel* AllergyIntolerance_parser_;
    ::fhir::Appointment_pskel* Appointment_parser_;
    ::fhir::AppointmentResponse_pskel* AppointmentResponse_parser_;
    ::fhir::AuditEvent_pskel* AuditEvent_parser_;
    ::fhir::Basic_pskel* Basic_parser_;
    ::fhir::Binary_pskel* Binary_parser_;
    ::fhir::BiologicallyDerivedProduct_pskel* BiologicallyDerivedProduct_parser_;
    ::fhir::BodyStructure_pskel* BodyStructure_parser_;
    ::fhir::Bundle_pskel* Bundle_parser_;
    ::fhir::CapabilityStatement_pskel* CapabilityStatement_parser_;
    ::fhir::CarePlan_pskel* CarePlan_parser_;
    ::fhir::CareTeam_pskel* CareTeam_parser_;
    ::fhir::CatalogEntry_pskel* CatalogEntry_parser_;
    ::fhir::ChargeItem_pskel* ChargeItem_parser_;
    ::fhir::ChargeItemDefinition_pskel* ChargeItemDefinition_parser_;
    ::fhir::Claim_pskel* Claim_parser_;
    ::fhir::ClaimResponse_pskel* ClaimResponse_parser_;
    ::fhir::ClinicalImpression_pskel* ClinicalImpression_parser_;
    ::fhir::CodeSystem_pskel* CodeSystem_parser_;
    ::fhir::Communication_pskel* Communication_parser_;
    ::fhir::CommunicationRequest_pskel* CommunicationRequest_parser_;
    ::fhir::CompartmentDefinition_pskel* CompartmentDefinition_parser_;
    ::fhir::Composition_pskel* Composition_parser_;
    ::fhir::ConceptMap_pskel* ConceptMap_parser_;
    ::fhir::Condition_pskel* Condition_parser_;
    ::fhir::Consent_pskel* Consent_parser_;
    ::fhir::Contract_pskel* Contract_parser_;
    ::fhir::Coverage_pskel* Coverage_parser_;
    ::fhir::CoverageEligibilityRequest_pskel* CoverageEligibilityRequest_parser_;
    ::fhir::CoverageEligibilityResponse_pskel* CoverageEligibilityResponse_parser_;
    ::fhir::DetectedIssue_pskel* DetectedIssue_parser_;
    ::fhir::Device_pskel* Device_parser_;
    ::fhir::DeviceDefinition_pskel* DeviceDefinition_parser_;
    ::fhir::DeviceMetric_pskel* DeviceMetric_parser_;
    ::fhir::DeviceRequest_pskel* DeviceRequest_parser_;
    ::fhir::DeviceUseStatement_pskel* DeviceUseStatement_parser_;
    ::fhir::DiagnosticReport_pskel* DiagnosticReport_parser_;
    ::fhir::DocumentManifest_pskel* DocumentManifest_parser_;
    ::fhir::DocumentReference_pskel* DocumentReference_parser_;
    ::fhir::EffectEvidenceSynthesis_pskel* EffectEvidenceSynthesis_parser_;
    ::fhir::Encounter_pskel* Encounter_parser_;
    ::fhir::Endpoint_pskel* Endpoint_parser_;
    ::fhir::EnrollmentRequest_pskel* EnrollmentRequest_parser_;
    ::fhir::EnrollmentResponse_pskel* EnrollmentResponse_parser_;
    ::fhir::EpisodeOfCare_pskel* EpisodeOfCare_parser_;
    ::fhir::EventDefinition_pskel* EventDefinition_parser_;
    ::fhir::Evidence_pskel* Evidence_parser_;
    ::fhir::EvidenceVariable_pskel* EvidenceVariable_parser_;
    ::fhir::ExampleScenario_pskel* ExampleScenario_parser_;
    ::fhir::ExplanationOfBenefit_pskel* ExplanationOfBenefit_parser_;
    ::fhir::FamilyMemberHistory_pskel* FamilyMemberHistory_parser_;
    ::fhir::Flag_pskel* Flag_parser_;
    ::fhir::Goal_pskel* Goal_parser_;
    ::fhir::GraphDefinition_pskel* GraphDefinition_parser_;
    ::fhir::Group_pskel* Group_parser_;
    ::fhir::GuidanceResponse_pskel* GuidanceResponse_parser_;
    ::fhir::HealthcareService_pskel* HealthcareService_parser_;
    ::fhir::ImagingStudy_pskel* ImagingStudy_parser_;
    ::fhir::Immunization_pskel* Immunization_parser_;
    ::fhir::ImmunizationEvaluation_pskel* ImmunizationEvaluation_parser_;
    ::fhir::ImmunizationRecommendation_pskel* ImmunizationRecommendation_parser_;
    ::fhir::ImplementationGuide_pskel* ImplementationGuide_parser_;
    ::fhir::InsurancePlan_pskel* InsurancePlan_parser_;
    ::fhir::Invoice_pskel* Invoice_parser_;
    ::fhir::Library_pskel* Library_parser_;
    ::fhir::Linkage_pskel* Linkage_parser_;
    ::fhir::List_pskel* List_parser_;
    ::fhir::Location_pskel* Location_parser_;
    ::fhir::Measure_pskel* Measure_parser_;
    ::fhir::MeasureReport_pskel* MeasureReport_parser_;
    ::fhir::Media_pskel* Media_parser_;
    ::fhir::Medication_pskel* Medication_parser_;
    ::fhir::MedicationAdministration_pskel* MedicationAdministration_parser_;
    ::fhir::MedicationDispense_pskel* MedicationDispense_parser_;
    ::fhir::MedicationKnowledge_pskel* MedicationKnowledge_parser_;
    ::fhir::MedicationRequest_pskel* MedicationRequest_parser_;
    ::fhir::MedicationStatement_pskel* MedicationStatement_parser_;
    ::fhir::MedicinalProduct_pskel* MedicinalProduct_parser_;
    ::fhir::MedicinalProductAuthorization_pskel* MedicinalProductAuthorization_parser_;
    ::fhir::MedicinalProductContraindication_pskel* MedicinalProductContraindication_parser_;
    ::fhir::MedicinalProductIndication_pskel* MedicinalProductIndication_parser_;
    ::fhir::MedicinalProductIngredient_pskel* MedicinalProductIngredient_parser_;
    ::fhir::MedicinalProductInteraction_pskel* MedicinalProductInteraction_parser_;
    ::fhir::MedicinalProductManufactured_pskel* MedicinalProductManufactured_parser_;
    ::fhir::MedicinalProductPackaged_pskel* MedicinalProductPackaged_parser_;
    ::fhir::MedicinalProductPharmaceutical_pskel* MedicinalProductPharmaceutical_parser_;
    ::fhir::MedicinalProductUndesirableEffect_pskel* MedicinalProductUndesirableEffect_parser_;
    ::fhir::MessageDefinition_pskel* MessageDefinition_parser_;
    ::fhir::MessageHeader_pskel* MessageHeader_parser_;
    ::fhir::MolecularSequence_pskel* MolecularSequence_parser_;
    ::fhir::NamingSystem_pskel* NamingSystem_parser_;
    ::fhir::NutritionOrder_pskel* NutritionOrder_parser_;
    ::fhir::Observation_pskel* Observation_parser_;
    ::fhir::ObservationDefinition_pskel* ObservationDefinition_parser_;
    ::fhir::OperationDefinition_pskel* OperationDefinition_parser_;
    ::fhir::OperationOutcome_pskel* OperationOutcome_parser_;
    ::fhir::Organization_pskel* Organization_parser_;
    ::fhir::OrganizationAffiliation_pskel* OrganizationAffiliation_parser_;
    ::fhir::Patient_pskel* Patient_parser_;
    ::fhir::PaymentNotice_pskel* PaymentNotice_parser_;
    ::fhir::PaymentReconciliation_pskel* PaymentReconciliation_parser_;
    ::fhir::Person_pskel* Person_parser_;
    ::fhir::PlanDefinition_pskel* PlanDefinition_parser_;
    ::fhir::Practitioner_pskel* Practitioner_parser_;
    ::fhir::PractitionerRole_pskel* PractitionerRole_parser_;
    ::fhir::Procedure_pskel* Procedure_parser_;
    ::fhir::Provenance_pskel* Provenance_parser_;
    ::fhir::Questionnaire_pskel* Questionnaire_parser_;
    ::fhir::QuestionnaireResponse_pskel* QuestionnaireResponse_parser_;
    ::fhir::RelatedPerson_pskel* RelatedPerson_parser_;
    ::fhir::RequestGroup_pskel* RequestGroup_parser_;
    ::fhir::ResearchDefinition_pskel* ResearchDefinition_parser_;
    ::fhir::ResearchElementDefinition_pskel* ResearchElementDefinition_parser_;
    ::fhir::ResearchStudy_pskel* ResearchStudy_parser_;
    ::fhir::ResearchSubject_pskel* ResearchSubject_parser_;
    ::fhir::RiskAssessment_pskel* RiskAssessment_parser_;
    ::fhir::RiskEvidenceSynthesis_pskel* RiskEvidenceSynthesis_parser_;
    ::fhir::Schedule_pskel* Schedule_parser_;
    ::fhir::SearchParameter_pskel* SearchParameter_parser_;
    ::fhir::ServiceRequest_pskel* ServiceRequest_parser_;
    ::fhir::Slot_pskel* Slot_parser_;
    ::fhir::Specimen_pskel* Specimen_parser_;
    ::fhir::SpecimenDefinition_pskel* SpecimenDefinition_parser_;
    ::fhir::StructureDefinition_pskel* StructureDefinition_parser_;
    ::fhir::StructureMap_pskel* StructureMap_parser_;
    ::fhir::Subscription_pskel* Subscription_parser_;
    ::fhir::Substance_pskel* Substance_parser_;
    ::fhir::SubstanceNucleicAcid_pskel* SubstanceNucleicAcid_parser_;
    ::fhir::SubstancePolymer_pskel* SubstancePolymer_parser_;
    ::fhir::SubstanceProtein_pskel* SubstanceProtein_parser_;
    ::fhir::SubstanceReferenceInformation_pskel* SubstanceReferenceInformation_parser_;
    ::fhir::SubstanceSourceMaterial_pskel* SubstanceSourceMaterial_parser_;
    ::fhir::SubstanceSpecification_pskel* SubstanceSpecification_parser_;
    ::fhir::SupplyDelivery_pskel* SupplyDelivery_parser_;
    ::fhir::SupplyRequest_pskel* SupplyRequest_parser_;
    ::fhir::Task_pskel* Task_parser_;
    ::fhir::TerminologyCapabilities_pskel* TerminologyCapabilities_parser_;
    ::fhir::TestReport_pskel* TestReport_parser_;
    ::fhir::TestScript_pskel* TestScript_parser_;
    ::fhir::ValueSet_pskel* ValueSet_parser_;
    ::fhir::VerificationResult_pskel* VerificationResult_parser_;
    ::fhir::VisionPrescription_pskel* VisionPrescription_parser_;
    ::fhir::Parameters_pskel* Parameters_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResourceContainer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Extension_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    url ();

    // Elements.
    //
    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    post_Extension ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uri_primitive_pskel& /* url */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */);

    // Individual attribute parsers.
    //
    void
    url_parser (::fhir::uri_primitive_pskel&);

    // Individual element parsers.
    //
    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Extension_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Extension_pskel* Extension_impl_;
    Extension_pskel (Extension_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::uri_primitive_pskel* url_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Extension_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

    protected:
    struct v_state_attr_
    {
      bool url;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class BackboneElement_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    modifierExtension ();

    virtual void
    post_BackboneElement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */);

    // Individual element parsers.
    //
    void
    modifierExtension_parser (::fhir::Extension_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BackboneElement_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BackboneElement_pskel* BackboneElement_impl_;
    BackboneElement_pskel (BackboneElement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Extension_pskel* modifierExtension_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BackboneElement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Narrative_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    status ();

    virtual void
    div ();

    virtual void
    post_Narrative ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NarrativeStatus_pskel& /* status */,
             ::xhtml::div_pskel& /* div */);

    // Individual element parsers.
    //
    void
    status_parser (::fhir::NarrativeStatus_pskel&);

    void
    div_parser (::xhtml::div_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Narrative_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Narrative_pskel* Narrative_impl_;
    Narrative_pskel (Narrative_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::NarrativeStatus_pskel* status_parser_;
    ::xhtml::div_pskel* div_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Narrative_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NarrativeStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NarrativeStatus_list ();

    // Constructor.
    //
    NarrativeStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NarrativeStatus_list_pskel* NarrativeStatus_list_impl_;
    NarrativeStatus_list_pskel (NarrativeStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_NarrativeStatus_list_pskel_enums_[4UL];
  };

  class NarrativeStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NarrativeStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NarrativeStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NarrativeStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NarrativeStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NarrativeStatus_pskel* NarrativeStatus_impl_;
    NarrativeStatus_pskel (NarrativeStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NarrativeStatus_list_pskel* value_parser_;
  };

  class Meta_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    versionId ();

    virtual void
    lastUpdated ();

    virtual void
    source ();

    virtual void
    profile ();

    virtual void
    security ();

    virtual void
    tag ();

    virtual void
    post_Meta ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::id_pskel& /* versionId */,
             ::fhir::instant_pskel& /* lastUpdated */,
             ::fhir::uri_pskel& /* source */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::Coding_pskel& /* security */,
             ::fhir::Coding_pskel& /* tag */);

    // Individual element parsers.
    //
    void
    versionId_parser (::fhir::id_pskel&);

    void
    lastUpdated_parser (::fhir::instant_pskel&);

    void
    source_parser (::fhir::uri_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    security_parser (::fhir::Coding_pskel&);

    void
    tag_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Meta_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Meta_pskel* Meta_impl_;
    Meta_pskel (Meta_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* versionId_parser_;
    ::fhir::instant_pskel* lastUpdated_parser_;
    ::fhir::uri_pskel* source_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::Coding_pskel* security_parser_;
    ::fhir::Coding_pskel* tag_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Meta_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Address_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    use ();

    virtual void
    type ();

    virtual void
    text ();

    virtual void
    line ();

    virtual void
    city ();

    virtual void
    district ();

    virtual void
    state ();

    virtual void
    postalCode ();

    virtual void
    country ();

    virtual void
    period ();

    virtual void
    post_Address ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AddressUse_pskel& /* use */,
             ::fhir::AddressType_pskel& /* type */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* line */,
             ::fhir::string_pskel& /* city */,
             ::fhir::string_pskel& /* district */,
             ::fhir::string_pskel& /* state */,
             ::fhir::string_pskel& /* postalCode */,
             ::fhir::string_pskel& /* country */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    use_parser (::fhir::AddressUse_pskel&);

    void
    type_parser (::fhir::AddressType_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    line_parser (::fhir::string_pskel&);

    void
    city_parser (::fhir::string_pskel&);

    void
    district_parser (::fhir::string_pskel&);

    void
    state_parser (::fhir::string_pskel&);

    void
    postalCode_parser (::fhir::string_pskel&);

    void
    country_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Address_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Address_pskel* Address_impl_;
    Address_pskel (Address_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::AddressUse_pskel* use_parser_;
    ::fhir::AddressType_pskel* type_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* line_parser_;
    ::fhir::string_pskel* city_parser_;
    ::fhir::string_pskel* district_parser_;
    ::fhir::string_pskel* state_parser_;
    ::fhir::string_pskel* postalCode_parser_;
    ::fhir::string_pskel* country_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Address_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AddressUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AddressUse_list ();

    // Constructor.
    //
    AddressUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressUse_list_pskel* AddressUse_list_impl_;
    AddressUse_list_pskel (AddressUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_AddressUse_list_pskel_enums_[5UL];
  };

  class AddressUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AddressUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AddressUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AddressUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AddressUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressUse_pskel* AddressUse_impl_;
    AddressUse_pskel (AddressUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AddressUse_list_pskel* value_parser_;
  };

  class AddressType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AddressType_list ();

    // Constructor.
    //
    AddressType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressType_list_pskel* AddressType_list_impl_;
    AddressType_list_pskel (AddressType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AddressType_list_pskel_enums_[3UL];
  };

  class AddressType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AddressType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AddressType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AddressType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AddressType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressType_pskel* AddressType_impl_;
    AddressType_pskel (AddressType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AddressType_list_pskel* value_parser_;
  };

  class Contributor_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    name ();

    virtual void
    contact ();

    virtual void
    post_Contributor ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContributorType_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::ContactDetail_pskel& /* contact */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ContributorType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contributor_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contributor_pskel* Contributor_impl_;
    Contributor_pskel (Contributor_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ContributorType_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contributor_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContributorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContributorType_list ();

    // Constructor.
    //
    ContributorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContributorType_list_pskel* ContributorType_list_impl_;
    ContributorType_list_pskel (ContributorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContributorType_list_pskel_enums_[4UL];
  };

  class ContributorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContributorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContributorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContributorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContributorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContributorType_pskel* ContributorType_impl_;
    ContributorType_pskel (ContributorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContributorType_list_pskel* value_parser_;
  };

  class Attachment_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentType ();

    virtual void
    language ();

    virtual void
    data ();

    virtual void
    url ();

    virtual void
    size ();

    virtual void
    hash ();

    virtual void
    title ();

    virtual void
    creation ();

    virtual void
    post_Attachment ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_pskel& /* contentType */,
             ::fhir::code_pskel& /* language */,
             ::fhir::base64Binary_pskel& /* data */,
             ::fhir::url_pskel& /* url */,
             ::fhir::unsignedInt_pskel& /* size */,
             ::fhir::base64Binary_pskel& /* hash */,
             ::fhir::string_pskel& /* title */,
             ::fhir::dateTime_pskel& /* creation */);

    // Individual element parsers.
    //
    void
    contentType_parser (::fhir::code_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    void
    data_parser (::fhir::base64Binary_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    void
    size_parser (::fhir::unsignedInt_pskel&);

    void
    hash_parser (::fhir::base64Binary_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    creation_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Attachment_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Attachment_pskel* Attachment_impl_;
    Attachment_pskel (Attachment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* contentType_parser_;
    ::fhir::code_pskel* language_parser_;
    ::fhir::base64Binary_pskel* data_parser_;
    ::fhir::url_pskel* url_parser_;
    ::fhir::unsignedInt_pskel* size_parser_;
    ::fhir::base64Binary_pskel* hash_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::dateTime_pskel* creation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Attachment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Quantity_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    comparator ();

    virtual void
    unit ();

    virtual void
    system ();

    virtual void
    code ();

    virtual void
    post_Quantity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::decimal_pskel& /* value */,
             ::fhir::QuantityComparator_pskel& /* comparator */,
             ::fhir::string_pskel& /* unit */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::code_pskel& /* code */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::decimal_pskel&);

    void
    comparator_parser (::fhir::QuantityComparator_pskel&);

    void
    unit_parser (::fhir::string_pskel&);

    void
    system_parser (::fhir::uri_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Quantity_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Quantity_pskel* Quantity_impl_;
    Quantity_pskel (Quantity_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::decimal_pskel* value_parser_;
    ::fhir::QuantityComparator_pskel* comparator_parser_;
    ::fhir::string_pskel* unit_parser_;
    ::fhir::uri_pskel* system_parser_;
    ::fhir::code_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Quantity_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Count_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Count ();

    // Constructor.
    //
    Count_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Count_pskel* Count_impl_;
    Count_pskel (Count_pskel*, void*);
  };

  class DataRequirement_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    mustSupport ();

    virtual void
    codeFilter ();

    virtual void
    dateFilter ();

    virtual void
    limit ();

    virtual void
    sort ();

    virtual void
    post_DataRequirement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::string_pskel& /* mustSupport */,
             ::fhir::DataRequirement_CodeFilter_pskel& /* codeFilter */,
             ::fhir::DataRequirement_DateFilter_pskel& /* dateFilter */,
             ::fhir::positiveInt_pskel& /* limit */,
             ::fhir::DataRequirement_Sort_pskel& /* sort */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    mustSupport_parser (::fhir::string_pskel&);

    void
    codeFilter_parser (::fhir::DataRequirement_CodeFilter_pskel&);

    void
    dateFilter_parser (::fhir::DataRequirement_DateFilter_pskel&);

    void
    limit_parser (::fhir::positiveInt_pskel&);

    void
    sort_parser (::fhir::DataRequirement_Sort_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_pskel* DataRequirement_impl_;
    DataRequirement_pskel (DataRequirement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::string_pskel* mustSupport_parser_;
    ::fhir::DataRequirement_CodeFilter_pskel* codeFilter_parser_;
    ::fhir::DataRequirement_DateFilter_pskel* dateFilter_parser_;
    ::fhir::positiveInt_pskel* limit_parser_;
    ::fhir::DataRequirement_Sort_pskel* sort_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DataRequirement_CodeFilter_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    searchParam ();

    virtual void
    valueSet ();

    virtual void
    code ();

    virtual void
    post_DataRequirement_CodeFilter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::string_pskel& /* searchParam */,
             ::fhir::canonical_pskel& /* valueSet */,
             ::fhir::Coding_pskel& /* code */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    searchParam_parser (::fhir::string_pskel&);

    void
    valueSet_parser (::fhir::canonical_pskel&);

    void
    code_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_CodeFilter_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_CodeFilter_pskel* DataRequirement_CodeFilter_impl_;
    DataRequirement_CodeFilter_pskel (DataRequirement_CodeFilter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::string_pskel* searchParam_parser_;
    ::fhir::canonical_pskel* valueSet_parser_;
    ::fhir::Coding_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_CodeFilter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DataRequirement_DateFilter_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    searchParam ();

    virtual void
    valueDateTime ();

    virtual void
    valuePeriod ();

    virtual void
    valueDuration ();

    virtual void
    post_DataRequirement_DateFilter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::string_pskel& /* searchParam */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Duration_pskel& /* valueDuration */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    searchParam_parser (::fhir::string_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_DateFilter_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_DateFilter_pskel* DataRequirement_DateFilter_impl_;
    DataRequirement_DateFilter_pskel (DataRequirement_DateFilter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::string_pskel* searchParam_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_DateFilter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DataRequirement_Sort_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    direction ();

    virtual void
    post_DataRequirement_Sort ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::SortDirection_pskel& /* direction */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    direction_parser (::fhir::SortDirection_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_Sort_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_Sort_pskel* DataRequirement_Sort_impl_;
    DataRequirement_Sort_pskel (DataRequirement_Sort_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::SortDirection_pskel* direction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_Sort_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SortDirection_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SortDirection_list ();

    // Constructor.
    //
    SortDirection_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SortDirection_list_pskel* SortDirection_list_impl_;
    SortDirection_list_pskel (SortDirection_list_pskel*, void*);

    protected:
    static const char* const _xsde_SortDirection_list_pskel_enums_[2UL];
  };

  class SortDirection_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SortDirection ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SortDirection_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SortDirection_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SortDirection_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SortDirection_pskel* SortDirection_impl_;
    SortDirection_pskel (SortDirection_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SortDirection_list_pskel* value_parser_;
  };

  class Dosage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    text ();

    virtual void
    additionalInstruction ();

    virtual void
    patientInstruction ();

    virtual void
    timing ();

    virtual void
    asNeededBoolean ();

    virtual void
    asNeededCodeableConcept ();

    virtual void
    site ();

    virtual void
    route ();

    virtual void
    method ();

    virtual void
    doseAndRate ();

    virtual void
    maxDosePerPeriod ();

    virtual void
    maxDosePerAdministration ();

    virtual void
    maxDosePerLifetime ();

    virtual void
    post_Dosage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* sequence */,
             ::fhir::string_pskel& /* text */,
             ::fhir::CodeableConcept_pskel& /* additionalInstruction */,
             ::fhir::string_pskel& /* patientInstruction */,
             ::fhir::Timing_pskel& /* timing */,
             ::fhir::boolean_pskel& /* asNeededBoolean */,
             ::fhir::CodeableConcept_pskel& /* asNeededCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* site */,
             ::fhir::CodeableConcept_pskel& /* route */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::Dosage_DoseAndRate_pskel& /* doseAndRate */,
             ::fhir::Ratio_pskel& /* maxDosePerPeriod */,
             ::fhir::Quantity_pskel& /* maxDosePerAdministration */,
             ::fhir::Quantity_pskel& /* maxDosePerLifetime */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::integer_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    additionalInstruction_parser (::fhir::CodeableConcept_pskel&);

    void
    patientInstruction_parser (::fhir::string_pskel&);

    void
    timing_parser (::fhir::Timing_pskel&);

    void
    asNeededBoolean_parser (::fhir::boolean_pskel&);

    void
    asNeededCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    site_parser (::fhir::CodeableConcept_pskel&);

    void
    route_parser (::fhir::CodeableConcept_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    doseAndRate_parser (::fhir::Dosage_DoseAndRate_pskel&);

    void
    maxDosePerPeriod_parser (::fhir::Ratio_pskel&);

    void
    maxDosePerAdministration_parser (::fhir::Quantity_pskel&);

    void
    maxDosePerLifetime_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Dosage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Dosage_pskel* Dosage_impl_;
    Dosage_pskel (Dosage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* sequence_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::CodeableConcept_pskel* additionalInstruction_parser_;
    ::fhir::string_pskel* patientInstruction_parser_;
    ::fhir::Timing_pskel* timing_parser_;
    ::fhir::boolean_pskel* asNeededBoolean_parser_;
    ::fhir::CodeableConcept_pskel* asNeededCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* site_parser_;
    ::fhir::CodeableConcept_pskel* route_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::Dosage_DoseAndRate_pskel* doseAndRate_parser_;
    ::fhir::Ratio_pskel* maxDosePerPeriod_parser_;
    ::fhir::Quantity_pskel* maxDosePerAdministration_parser_;
    ::fhir::Quantity_pskel* maxDosePerLifetime_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Dosage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Dosage_DoseAndRate_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    doseRange ();

    virtual void
    doseQuantity ();

    virtual void
    rateRatio ();

    virtual void
    rateRange ();

    virtual void
    rateQuantity ();

    virtual void
    post_Dosage_DoseAndRate ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Range_pskel& /* doseRange */,
             ::fhir::Quantity_pskel& /* doseQuantity */,
             ::fhir::Ratio_pskel& /* rateRatio */,
             ::fhir::Range_pskel& /* rateRange */,
             ::fhir::Quantity_pskel& /* rateQuantity */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    doseRange_parser (::fhir::Range_pskel&);

    void
    doseQuantity_parser (::fhir::Quantity_pskel&);

    void
    rateRatio_parser (::fhir::Ratio_pskel&);

    void
    rateRange_parser (::fhir::Range_pskel&);

    void
    rateQuantity_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Dosage_DoseAndRate_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Dosage_DoseAndRate_pskel* Dosage_DoseAndRate_impl_;
    Dosage_DoseAndRate_pskel (Dosage_DoseAndRate_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Range_pskel* doseRange_parser_;
    ::fhir::Quantity_pskel* doseQuantity_parser_;
    ::fhir::Ratio_pskel* rateRatio_parser_;
    ::fhir::Range_pskel* rateRange_parser_;
    ::fhir::Quantity_pskel* rateQuantity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Dosage_DoseAndRate_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Money_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    currency ();

    virtual void
    post_Money ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::decimal_pskel& /* value */,
             ::fhir::code_pskel& /* currency */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::decimal_pskel&);

    void
    currency_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Money_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Money_pskel* Money_impl_;
    Money_pskel (Money_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::decimal_pskel* value_parser_;
    ::fhir::code_pskel* currency_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Money_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class HumanName_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    use ();

    virtual void
    text ();

    virtual void
    family ();

    virtual void
    given ();

    virtual void
    prefix ();

    virtual void
    suffix ();

    virtual void
    period ();

    virtual void
    post_HumanName ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NameUse_pskel& /* use */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* family */,
             ::fhir::string_pskel& /* given */,
             ::fhir::string_pskel& /* prefix */,
             ::fhir::string_pskel& /* suffix */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    use_parser (::fhir::NameUse_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    family_parser (::fhir::string_pskel&);

    void
    given_parser (::fhir::string_pskel&);

    void
    prefix_parser (::fhir::string_pskel&);

    void
    suffix_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    HumanName_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    HumanName_pskel* HumanName_impl_;
    HumanName_pskel (HumanName_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::NameUse_pskel* use_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* family_parser_;
    ::fhir::string_pskel* given_parser_;
    ::fhir::string_pskel* prefix_parser_;
    ::fhir::string_pskel* suffix_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::HumanName_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NameUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NameUse_list ();

    // Constructor.
    //
    NameUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NameUse_list_pskel* NameUse_list_impl_;
    NameUse_list_pskel (NameUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_NameUse_list_pskel_enums_[7UL];
  };

  class NameUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NameUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NameUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NameUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NameUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NameUse_pskel* NameUse_impl_;
    NameUse_pskel (NameUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NameUse_list_pskel* value_parser_;
  };

  class ContactPoint_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    system ();

    virtual void
    value ();

    virtual void
    use ();

    virtual void
    rank ();

    virtual void
    period ();

    virtual void
    post_ContactPoint ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContactPointSystem_pskel& /* system */,
             ::fhir::string_pskel& /* value */,
             ::fhir::ContactPointUse_pskel& /* use */,
             ::fhir::positiveInt_pskel& /* rank */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    system_parser (::fhir::ContactPointSystem_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    use_parser (::fhir::ContactPointUse_pskel&);

    void
    rank_parser (::fhir::positiveInt_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactPoint_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPoint_pskel* ContactPoint_impl_;
    ContactPoint_pskel (ContactPoint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ContactPointSystem_pskel* system_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::ContactPointUse_pskel* use_parser_;
    ::fhir::positiveInt_pskel* rank_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ContactPoint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContactPointSystem_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContactPointSystem_list ();

    // Constructor.
    //
    ContactPointSystem_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointSystem_list_pskel* ContactPointSystem_list_impl_;
    ContactPointSystem_list_pskel (ContactPointSystem_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContactPointSystem_list_pskel_enums_[7UL];
  };

  class ContactPointSystem_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContactPointSystem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContactPointSystem_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContactPointSystem_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactPointSystem_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointSystem_pskel* ContactPointSystem_impl_;
    ContactPointSystem_pskel (ContactPointSystem_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContactPointSystem_list_pskel* value_parser_;
  };

  class ContactPointUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContactPointUse_list ();

    // Constructor.
    //
    ContactPointUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointUse_list_pskel* ContactPointUse_list_impl_;
    ContactPointUse_list_pskel (ContactPointUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContactPointUse_list_pskel_enums_[5UL];
  };

  class ContactPointUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContactPointUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContactPointUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContactPointUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactPointUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointUse_pskel* ContactPointUse_impl_;
    ContactPointUse_pskel (ContactPointUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContactPointUse_list_pskel* value_parser_;
  };

  class MarketingStatus_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    country ();

    virtual void
    jurisdiction ();

    virtual void
    status ();

    virtual void
    dateRange ();

    virtual void
    restoreDate ();

    virtual void
    post_MarketingStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* country */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::Period_pskel& /* dateRange */,
             ::fhir::dateTime_pskel& /* restoreDate */);

    // Individual element parsers.
    //
    void
    country_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    dateRange_parser (::fhir::Period_pskel&);

    void
    restoreDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MarketingStatus_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MarketingStatus_pskel* MarketingStatus_impl_;
    MarketingStatus_pskel (MarketingStatus_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* country_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::Period_pskel* dateRange_parser_;
    ::fhir::dateTime_pskel* restoreDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MarketingStatus_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Identifier_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    use ();

    virtual void
    type ();

    virtual void
    system ();

    virtual void
    value ();

    virtual void
    period ();

    virtual void
    assigner ();

    virtual void
    post_Identifier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::IdentifierUse_pskel& /* use */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::string_pskel& /* value */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* assigner */);

    // Individual element parsers.
    //
    void
    use_parser (::fhir::IdentifierUse_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    system_parser (::fhir::uri_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    assigner_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Identifier_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Identifier_pskel* Identifier_impl_;
    Identifier_pskel (Identifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::IdentifierUse_pskel* use_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::uri_pskel* system_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* assigner_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Identifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class IdentifierUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_IdentifierUse_list ();

    // Constructor.
    //
    IdentifierUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    IdentifierUse_list_pskel* IdentifierUse_list_impl_;
    IdentifierUse_list_pskel (IdentifierUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_IdentifierUse_list_pskel_enums_[5UL];
  };

  class IdentifierUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_IdentifierUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::IdentifierUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::IdentifierUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    IdentifierUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    IdentifierUse_pskel* IdentifierUse_impl_;
    IdentifierUse_pskel (IdentifierUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::IdentifierUse_list_pskel* value_parser_;
  };

  class SubstanceAmount_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    amountQuantity ();

    virtual void
    amountRange ();

    virtual void
    amountString ();

    virtual void
    amountType ();

    virtual void
    amountText ();

    virtual void
    referenceRange ();

    virtual void
    post_SubstanceAmount ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::Range_pskel& /* amountRange */,
             ::fhir::string_pskel& /* amountString */,
             ::fhir::CodeableConcept_pskel& /* amountType */,
             ::fhir::string_pskel& /* amountText */,
             ::fhir::SubstanceAmount_ReferenceRange_pskel& /* referenceRange */);

    // Individual element parsers.
    //
    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountRange_parser (::fhir::Range_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    void
    amountType_parser (::fhir::CodeableConcept_pskel&);

    void
    amountText_parser (::fhir::string_pskel&);

    void
    referenceRange_parser (::fhir::SubstanceAmount_ReferenceRange_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceAmount_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceAmount_pskel* SubstanceAmount_impl_;
    SubstanceAmount_pskel (SubstanceAmount_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::Range_pskel* amountRange_parser_;
    ::fhir::string_pskel* amountString_parser_;
    ::fhir::CodeableConcept_pskel* amountType_parser_;
    ::fhir::string_pskel* amountText_parser_;
    ::fhir::SubstanceAmount_ReferenceRange_pskel* referenceRange_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceAmount_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceAmount_ReferenceRange_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    lowLimit ();

    virtual void
    highLimit ();

    virtual void
    post_SubstanceAmount_ReferenceRange ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* lowLimit */,
             ::fhir::Quantity_pskel& /* highLimit */);

    // Individual element parsers.
    //
    void
    lowLimit_parser (::fhir::Quantity_pskel&);

    void
    highLimit_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceAmount_ReferenceRange_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceAmount_ReferenceRange_pskel* SubstanceAmount_ReferenceRange_impl_;
    SubstanceAmount_ReferenceRange_pskel (SubstanceAmount_ReferenceRange_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* lowLimit_parser_;
    ::fhir::Quantity_pskel* highLimit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceAmount_ReferenceRange_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Coding_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    system ();

    virtual void
    version ();

    virtual void
    code ();

    virtual void
    display ();

    virtual void
    userSelected ();

    virtual void
    post_Coding ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::string_pskel& /* version */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::boolean_pskel& /* userSelected */);

    // Individual element parsers.
    //
    void
    system_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    userSelected_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Coding_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Coding_pskel* Coding_impl_;
    Coding_pskel (Coding_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* system_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::boolean_pskel* userSelected_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Coding_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SampledData_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    origin ();

    virtual void
    period ();

    virtual void
    factor ();

    virtual void
    lowerLimit ();

    virtual void
    upperLimit ();

    virtual void
    dimensions ();

    virtual void
    data ();

    virtual void
    post_SampledData ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Quantity_pskel& /* origin */,
             ::fhir::decimal_pskel& /* period */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::decimal_pskel& /* lowerLimit */,
             ::fhir::decimal_pskel& /* upperLimit */,
             ::fhir::positiveInt_pskel& /* dimensions */,
             ::fhir::SampledDataDataType_pskel& /* data */);

    // Individual element parsers.
    //
    void
    origin_parser (::fhir::Quantity_pskel&);

    void
    period_parser (::fhir::decimal_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    lowerLimit_parser (::fhir::decimal_pskel&);

    void
    upperLimit_parser (::fhir::decimal_pskel&);

    void
    dimensions_parser (::fhir::positiveInt_pskel&);

    void
    data_parser (::fhir::SampledDataDataType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SampledData_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SampledData_pskel* SampledData_impl_;
    SampledData_pskel (SampledData_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* origin_parser_;
    ::fhir::decimal_pskel* period_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::decimal_pskel* lowerLimit_parser_;
    ::fhir::decimal_pskel* upperLimit_parser_;
    ::fhir::positiveInt_pskel* dimensions_parser_;
    ::fhir::SampledDataDataType_pskel* data_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SampledData_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SampledDataDataType_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SampledDataDataType_primitive ();

    // Constructor.
    //
    SampledDataDataType_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    SampledDataDataType_primitive_pskel* SampledDataDataType_primitive_impl_;
    SampledDataDataType_primitive_pskel (SampledDataDataType_primitive_pskel*, void*);
  };

  class SampledDataDataType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SampledDataDataType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SampledDataDataType_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SampledDataDataType_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SampledDataDataType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SampledDataDataType_pskel* SampledDataDataType_impl_;
    SampledDataDataType_pskel (SampledDataDataType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SampledDataDataType_primitive_pskel* value_parser_;
  };

  class Population_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    ageRange ();

    virtual void
    ageCodeableConcept ();

    virtual void
    gender ();

    virtual void
    race ();

    virtual void
    physiologicalCondition ();

    virtual void
    post_Population ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Range_pskel& /* ageRange */,
             ::fhir::CodeableConcept_pskel& /* ageCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* gender */,
             ::fhir::CodeableConcept_pskel& /* race */,
             ::fhir::CodeableConcept_pskel& /* physiologicalCondition */);

    // Individual element parsers.
    //
    void
    ageRange_parser (::fhir::Range_pskel&);

    void
    ageCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    gender_parser (::fhir::CodeableConcept_pskel&);

    void
    race_parser (::fhir::CodeableConcept_pskel&);

    void
    physiologicalCondition_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Population_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Population_pskel* Population_impl_;
    Population_pskel (Population_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Range_pskel* ageRange_parser_;
    ::fhir::CodeableConcept_pskel* ageCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* gender_parser_;
    ::fhir::CodeableConcept_pskel* race_parser_;
    ::fhir::CodeableConcept_pskel* physiologicalCondition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Population_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Ratio_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    numerator ();

    virtual void
    denominator ();

    virtual void
    post_Ratio ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Quantity_pskel& /* numerator */,
             ::fhir::Quantity_pskel& /* denominator */);

    // Individual element parsers.
    //
    void
    numerator_parser (::fhir::Quantity_pskel&);

    void
    denominator_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Ratio_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Ratio_pskel* Ratio_impl_;
    Ratio_pskel (Ratio_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* numerator_parser_;
    ::fhir::Quantity_pskel* denominator_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Ratio_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Distance_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Distance ();

    // Constructor.
    //
    Distance_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Distance_pskel* Distance_impl_;
    Distance_pskel (Distance_pskel*, void*);
  };

  class Age_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Age ();

    // Constructor.
    //
    Age_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Age_pskel* Age_impl_;
    Age_pskel (Age_pskel*, void*);
  };

  class Reference_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    type ();

    virtual void
    identifier ();

    virtual void
    display ();

    virtual void
    post_Reference ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* reference */,
             ::fhir::uri_pskel& /* type */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* display */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Reference_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Reference_pskel* Reference_impl_;
    Reference_pskel (Reference_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* reference_parser_;
    ::fhir::uri_pskel* type_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* display_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Reference_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TriggerDefinition_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    name ();

    virtual void
    timingTiming ();

    virtual void
    timingReference ();

    virtual void
    timingDate ();

    virtual void
    timingDateTime ();

    virtual void
    data ();

    virtual void
    condition ();

    virtual void
    post_TriggerDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TriggerType_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::Reference_pskel& /* timingReference */,
             ::fhir::date_pskel& /* timingDate */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::DataRequirement_pskel& /* data */,
             ::fhir::Expression_pskel& /* condition */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::TriggerType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    timingReference_parser (::fhir::Reference_pskel&);

    void
    timingDate_parser (::fhir::date_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    data_parser (::fhir::DataRequirement_pskel&);

    void
    condition_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TriggerDefinition_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TriggerDefinition_pskel* TriggerDefinition_impl_;
    TriggerDefinition_pskel (TriggerDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TriggerType_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::Reference_pskel* timingReference_parser_;
    ::fhir::date_pskel* timingDate_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::DataRequirement_pskel* data_parser_;
    ::fhir::Expression_pskel* condition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TriggerDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TriggerType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TriggerType_list ();

    // Constructor.
    //
    TriggerType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TriggerType_list_pskel* TriggerType_list_impl_;
    TriggerType_list_pskel (TriggerType_list_pskel*, void*);

    protected:
    static const char* const _xsde_TriggerType_list_pskel_enums_[8UL];
  };

  class TriggerType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TriggerType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TriggerType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TriggerType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TriggerType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TriggerType_pskel* TriggerType_impl_;
    TriggerType_pskel (TriggerType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TriggerType_list_pskel* value_parser_;
  };

  class QuantityComparator_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_QuantityComparator_list ();

    // Constructor.
    //
    QuantityComparator_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuantityComparator_list_pskel* QuantityComparator_list_impl_;
    QuantityComparator_list_pskel (QuantityComparator_list_pskel*, void*);

    protected:
    static const char* const _xsde_QuantityComparator_list_pskel_enums_[4UL];
  };

  class QuantityComparator_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_QuantityComparator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::QuantityComparator_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::QuantityComparator_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuantityComparator_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuantityComparator_pskel* QuantityComparator_impl_;
    QuantityComparator_pskel (QuantityComparator_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::QuantityComparator_list_pskel* value_parser_;
  };

  class Period_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    post_Period ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::dateTime_pskel& /* start */,
             ::fhir::dateTime_pskel& /* end */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::dateTime_pskel&);

    void
    end_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Period_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Period_pskel* Period_impl_;
    Period_pskel (Period_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::dateTime_pskel* start_parser_;
    ::fhir::dateTime_pskel* end_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Period_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Duration_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Duration ();

    // Constructor.
    //
    Duration_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Duration_pskel* Duration_impl_;
    Duration_pskel (Duration_pskel*, void*);
  };

  class Range_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    low ();

    virtual void
    high ();

    virtual void
    post_Range ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Quantity_pskel& /* low */,
             ::fhir::Quantity_pskel& /* high */);

    // Individual element parsers.
    //
    void
    low_parser (::fhir::Quantity_pskel&);

    void
    high_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Range_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Range_pskel* Range_impl_;
    Range_pskel (Range_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* low_parser_;
    ::fhir::Quantity_pskel* high_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Range_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RelatedArtifact_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    label ();

    virtual void
    display ();

    virtual void
    citation ();

    virtual void
    url ();

    virtual void
    document ();

    virtual void
    resource ();

    virtual void
    post_RelatedArtifact ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RelatedArtifactType_pskel& /* type */,
             ::fhir::string_pskel& /* label */,
             ::fhir::string_pskel& /* display */,
             ::fhir::markdown_pskel& /* citation */,
             ::fhir::url_pskel& /* url */,
             ::fhir::Attachment_pskel& /* document */,
             ::fhir::canonical_pskel& /* resource */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::RelatedArtifactType_pskel&);

    void
    label_parser (::fhir::string_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    citation_parser (::fhir::markdown_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    void
    document_parser (::fhir::Attachment_pskel&);

    void
    resource_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RelatedArtifact_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedArtifact_pskel* RelatedArtifact_impl_;
    RelatedArtifact_pskel (RelatedArtifact_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::RelatedArtifactType_pskel* type_parser_;
    ::fhir::string_pskel* label_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::markdown_pskel* citation_parser_;
    ::fhir::url_pskel* url_parser_;
    ::fhir::Attachment_pskel* document_parser_;
    ::fhir::canonical_pskel* resource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RelatedArtifact_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RelatedArtifactType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RelatedArtifactType_list ();

    // Constructor.
    //
    RelatedArtifactType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedArtifactType_list_pskel* RelatedArtifactType_list_impl_;
    RelatedArtifactType_list_pskel (RelatedArtifactType_list_pskel*, void*);

    protected:
    static const char* const _xsde_RelatedArtifactType_list_pskel_enums_[8UL];
  };

  class RelatedArtifactType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RelatedArtifactType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RelatedArtifactType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RelatedArtifactType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RelatedArtifactType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedArtifactType_pskel* RelatedArtifactType_impl_;
    RelatedArtifactType_pskel (RelatedArtifactType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RelatedArtifactType_list_pskel* value_parser_;
  };

  class Annotation_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    authorReference ();

    virtual void
    authorString ();

    virtual void
    time ();

    virtual void
    text ();

    virtual void
    post_Annotation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Reference_pskel& /* authorReference */,
             ::fhir::string_pskel& /* authorString */,
             ::fhir::dateTime_pskel& /* time */,
             ::fhir::markdown_pskel& /* text */);

    // Individual element parsers.
    //
    void
    authorReference_parser (::fhir::Reference_pskel&);

    void
    authorString_parser (::fhir::string_pskel&);

    void
    time_parser (::fhir::dateTime_pskel&);

    void
    text_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Annotation_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Annotation_pskel* Annotation_impl_;
    Annotation_pskel (Annotation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* authorReference_parser_;
    ::fhir::string_pskel* authorString_parser_;
    ::fhir::dateTime_pskel* time_parser_;
    ::fhir::markdown_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Annotation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ProductShelfLife_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    period ();

    virtual void
    specialPrecautionsForStorage ();

    virtual void
    post_ProductShelfLife ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* period */,
             ::fhir::CodeableConcept_pskel& /* specialPrecautionsForStorage */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Quantity_pskel&);

    void
    specialPrecautionsForStorage_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ProductShelfLife_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ProductShelfLife_pskel* ProductShelfLife_impl_;
    ProductShelfLife_pskel (ProductShelfLife_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* period_parser_;
    ::fhir::CodeableConcept_pskel* specialPrecautionsForStorage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ProductShelfLife_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContactDetail_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    post_ContactDetail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactDetail_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactDetail_pskel* ContactDetail_impl_;
    ContactDetail_pskel (ContactDetail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ContactDetail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class UsageContext_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueReference ();

    virtual void
    post_UsageContext ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Coding_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Reference_pskel& /* valueReference */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::Coding_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    UsageContext_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    UsageContext_pskel* UsageContext_impl_;
    UsageContext_pskel (UsageContext_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::UsageContext_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Expression_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    name ();

    virtual void
    language ();

    virtual void
    expression ();

    virtual void
    reference ();

    virtual void
    post_Expression ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::id_pskel& /* name */,
             ::fhir::ExpressionLanguage_pskel& /* language */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::uri_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::id_pskel&);

    void
    language_parser (::fhir::ExpressionLanguage_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    reference_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Expression_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Expression_pskel* Expression_impl_;
    Expression_pskel (Expression_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::id_pskel* name_parser_;
    ::fhir::ExpressionLanguage_pskel* language_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::uri_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Expression_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExpressionLanguage_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExpressionLanguage_list ();

    // Constructor.
    //
    ExpressionLanguage_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExpressionLanguage_list_pskel* ExpressionLanguage_list_impl_;
    ExpressionLanguage_list_pskel (ExpressionLanguage_list_pskel*, void*);

    protected:
    static const char* const _xsde_ExpressionLanguage_list_pskel_enums_[3UL];
  };

  class ExpressionLanguage_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ExpressionLanguage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ExpressionLanguage_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ExpressionLanguage_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExpressionLanguage_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExpressionLanguage_pskel* ExpressionLanguage_impl_;
    ExpressionLanguage_pskel (ExpressionLanguage_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ExpressionLanguage_list_pskel* value_parser_;
  };

  class Signature_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    when ();

    virtual void
    who ();

    virtual void
    onBehalfOf ();

    virtual void
    targetFormat ();

    virtual void
    sigFormat ();

    virtual void
    data ();

    virtual void
    post_Signature ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::instant_pskel& /* when */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::Reference_pskel& /* onBehalfOf */,
             ::fhir::code_pskel& /* targetFormat */,
             ::fhir::code_pskel& /* sigFormat */,
             ::fhir::base64Binary_pskel& /* data */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    when_parser (::fhir::instant_pskel&);

    void
    who_parser (::fhir::Reference_pskel&);

    void
    onBehalfOf_parser (::fhir::Reference_pskel&);

    void
    targetFormat_parser (::fhir::code_pskel&);

    void
    sigFormat_parser (::fhir::code_pskel&);

    void
    data_parser (::fhir::base64Binary_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Signature_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Signature_pskel* Signature_impl_;
    Signature_pskel (Signature_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::instant_pskel* when_parser_;
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::Reference_pskel* onBehalfOf_parser_;
    ::fhir::code_pskel* targetFormat_parser_;
    ::fhir::code_pskel* sigFormat_parser_;
    ::fhir::base64Binary_pskel* data_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Signature_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Timing_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    event ();

    virtual void
    repeat ();

    virtual void
    code ();

    virtual void
    post_Timing ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::dateTime_pskel& /* event */,
             ::fhir::Timing_Repeat_pskel& /* repeat */,
             ::fhir::CodeableConcept_pskel& /* code */);

    // Individual element parsers.
    //
    void
    event_parser (::fhir::dateTime_pskel&);

    void
    repeat_parser (::fhir::Timing_Repeat_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Timing_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Timing_pskel* Timing_impl_;
    Timing_pskel (Timing_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::dateTime_pskel* event_parser_;
    ::fhir::Timing_Repeat_pskel* repeat_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Timing_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Timing_Repeat_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    boundsDuration ();

    virtual void
    boundsRange ();

    virtual void
    boundsPeriod ();

    virtual void
    count ();

    virtual void
    countMax ();

    virtual void
    duration ();

    virtual void
    durationMax ();

    virtual void
    durationUnit ();

    virtual void
    frequency ();

    virtual void
    frequencyMax ();

    virtual void
    period ();

    virtual void
    periodMax ();

    virtual void
    periodUnit ();

    virtual void
    dayOfWeek ();

    virtual void
    timeOfDay ();

    virtual void
    when ();

    virtual void
    offset ();

    virtual void
    post_Timing_Repeat ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Duration_pskel& /* boundsDuration */,
             ::fhir::Range_pskel& /* boundsRange */,
             ::fhir::Period_pskel& /* boundsPeriod */,
             ::fhir::positiveInt_pskel& /* count */,
             ::fhir::positiveInt_pskel& /* countMax */,
             ::fhir::decimal_pskel& /* duration */,
             ::fhir::decimal_pskel& /* durationMax */,
             ::fhir::UnitsOfTime_pskel& /* durationUnit */,
             ::fhir::positiveInt_pskel& /* frequency */,
             ::fhir::positiveInt_pskel& /* frequencyMax */,
             ::fhir::decimal_pskel& /* period */,
             ::fhir::decimal_pskel& /* periodMax */,
             ::fhir::UnitsOfTime_pskel& /* periodUnit */,
             ::fhir::code_pskel& /* dayOfWeek */,
             ::fhir::time_pskel& /* timeOfDay */,
             ::fhir::EventTiming_pskel& /* when */,
             ::fhir::unsignedInt_pskel& /* offset */);

    // Individual element parsers.
    //
    void
    boundsDuration_parser (::fhir::Duration_pskel&);

    void
    boundsRange_parser (::fhir::Range_pskel&);

    void
    boundsPeriod_parser (::fhir::Period_pskel&);

    void
    count_parser (::fhir::positiveInt_pskel&);

    void
    countMax_parser (::fhir::positiveInt_pskel&);

    void
    duration_parser (::fhir::decimal_pskel&);

    void
    durationMax_parser (::fhir::decimal_pskel&);

    void
    durationUnit_parser (::fhir::UnitsOfTime_pskel&);

    void
    frequency_parser (::fhir::positiveInt_pskel&);

    void
    frequencyMax_parser (::fhir::positiveInt_pskel&);

    void
    period_parser (::fhir::decimal_pskel&);

    void
    periodMax_parser (::fhir::decimal_pskel&);

    void
    periodUnit_parser (::fhir::UnitsOfTime_pskel&);

    void
    dayOfWeek_parser (::fhir::code_pskel&);

    void
    timeOfDay_parser (::fhir::time_pskel&);

    void
    when_parser (::fhir::EventTiming_pskel&);

    void
    offset_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Timing_Repeat_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Timing_Repeat_pskel* Timing_Repeat_impl_;
    Timing_Repeat_pskel (Timing_Repeat_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Duration_pskel* boundsDuration_parser_;
    ::fhir::Range_pskel* boundsRange_parser_;
    ::fhir::Period_pskel* boundsPeriod_parser_;
    ::fhir::positiveInt_pskel* count_parser_;
    ::fhir::positiveInt_pskel* countMax_parser_;
    ::fhir::decimal_pskel* duration_parser_;
    ::fhir::decimal_pskel* durationMax_parser_;
    ::fhir::UnitsOfTime_pskel* durationUnit_parser_;
    ::fhir::positiveInt_pskel* frequency_parser_;
    ::fhir::positiveInt_pskel* frequencyMax_parser_;
    ::fhir::decimal_pskel* period_parser_;
    ::fhir::decimal_pskel* periodMax_parser_;
    ::fhir::UnitsOfTime_pskel* periodUnit_parser_;
    ::fhir::code_pskel* dayOfWeek_parser_;
    ::fhir::time_pskel* timeOfDay_parser_;
    ::fhir::EventTiming_pskel* when_parser_;
    ::fhir::unsignedInt_pskel* offset_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Timing_Repeat_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class UnitsOfTime_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_UnitsOfTime_list ();

    // Constructor.
    //
    UnitsOfTime_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    UnitsOfTime_list_pskel* UnitsOfTime_list_impl_;
    UnitsOfTime_list_pskel (UnitsOfTime_list_pskel*, void*);

    protected:
    static const char* const _xsde_UnitsOfTime_list_pskel_enums_[7UL];
  };

  class UnitsOfTime_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_UnitsOfTime ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::UnitsOfTime_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::UnitsOfTime_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    UnitsOfTime_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    UnitsOfTime_pskel* UnitsOfTime_impl_;
    UnitsOfTime_pskel (UnitsOfTime_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::UnitsOfTime_list_pskel* value_parser_;
  };

  class EventTiming_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EventTiming_list ();

    // Constructor.
    //
    EventTiming_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventTiming_list_pskel* EventTiming_list_impl_;
    EventTiming_list_pskel (EventTiming_list_pskel*, void*);

    protected:
    static const char* const _xsde_EventTiming_list_pskel_enums_[26UL];
  };

  class EventTiming_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EventTiming ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EventTiming_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EventTiming_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EventTiming_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventTiming_pskel* EventTiming_impl_;
    EventTiming_pskel (EventTiming_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EventTiming_list_pskel* value_parser_;
  };

  class ProdCharacteristic_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    height ();

    virtual void
    width ();

    virtual void
    depth ();

    virtual void
    weight ();

    virtual void
    nominalVolume ();

    virtual void
    externalDiameter ();

    virtual void
    shape ();

    virtual void
    color ();

    virtual void
    imprint ();

    virtual void
    image ();

    virtual void
    scoring ();

    virtual void
    post_ProdCharacteristic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* height */,
             ::fhir::Quantity_pskel& /* width */,
             ::fhir::Quantity_pskel& /* depth */,
             ::fhir::Quantity_pskel& /* weight */,
             ::fhir::Quantity_pskel& /* nominalVolume */,
             ::fhir::Quantity_pskel& /* externalDiameter */,
             ::fhir::string_pskel& /* shape */,
             ::fhir::string_pskel& /* color */,
             ::fhir::string_pskel& /* imprint */,
             ::fhir::Attachment_pskel& /* image */,
             ::fhir::CodeableConcept_pskel& /* scoring */);

    // Individual element parsers.
    //
    void
    height_parser (::fhir::Quantity_pskel&);

    void
    width_parser (::fhir::Quantity_pskel&);

    void
    depth_parser (::fhir::Quantity_pskel&);

    void
    weight_parser (::fhir::Quantity_pskel&);

    void
    nominalVolume_parser (::fhir::Quantity_pskel&);

    void
    externalDiameter_parser (::fhir::Quantity_pskel&);

    void
    shape_parser (::fhir::string_pskel&);

    void
    color_parser (::fhir::string_pskel&);

    void
    imprint_parser (::fhir::string_pskel&);

    void
    image_parser (::fhir::Attachment_pskel&);

    void
    scoring_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ProdCharacteristic_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ProdCharacteristic_pskel* ProdCharacteristic_impl_;
    ProdCharacteristic_pskel (ProdCharacteristic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* height_parser_;
    ::fhir::Quantity_pskel* width_parser_;
    ::fhir::Quantity_pskel* depth_parser_;
    ::fhir::Quantity_pskel* weight_parser_;
    ::fhir::Quantity_pskel* nominalVolume_parser_;
    ::fhir::Quantity_pskel* externalDiameter_parser_;
    ::fhir::string_pskel* shape_parser_;
    ::fhir::string_pskel* color_parser_;
    ::fhir::string_pskel* imprint_parser_;
    ::fhir::Attachment_pskel* image_parser_;
    ::fhir::CodeableConcept_pskel* scoring_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ProdCharacteristic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeableConcept_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    coding ();

    virtual void
    text ();

    virtual void
    post_CodeableConcept ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Coding_pskel& /* coding */,
             ::fhir::string_pskel& /* text */);

    // Individual element parsers.
    //
    void
    coding_parser (::fhir::Coding_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeableConcept_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeableConcept_pskel* CodeableConcept_impl_;
    CodeableConcept_pskel (CodeableConcept_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* coding_parser_;
    ::fhir::string_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeableConcept_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ParameterDefinition_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    use ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    documentation ();

    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    post_ParameterDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_pskel& /* name */,
             ::fhir::code_pskel& /* use */,
             ::fhir::integer_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::string_pskel& /* documentation */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::code_pskel&);

    void
    use_parser (::fhir::code_pskel&);

    void
    min_parser (::fhir::integer_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ParameterDefinition_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ParameterDefinition_pskel* ParameterDefinition_impl_;
    ParameterDefinition_pskel (ParameterDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* name_parser_;
    ::fhir::code_pskel* use_parser_;
    ::fhir::integer_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::string_pskel* documentation_parser_;
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ParameterDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    representation ();

    virtual void
    sliceName ();

    virtual void
    sliceIsConstraining ();

    virtual void
    label ();

    virtual void
    code ();

    virtual void
    slicing ();

    virtual void
    short_ ();

    virtual void
    definition ();

    virtual void
    comment ();

    virtual void
    requirements ();

    virtual void
    alias ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    base ();

    virtual void
    contentReference ();

    virtual void
    type ();

    virtual void
    defaultValueBase64Binary ();

    virtual void
    defaultValueBoolean ();

    virtual void
    defaultValueCanonical ();

    virtual void
    defaultValueCode ();

    virtual void
    defaultValueDate ();

    virtual void
    defaultValueDateTime ();

    virtual void
    defaultValueDecimal ();

    virtual void
    defaultValueId ();

    virtual void
    defaultValueInstant ();

    virtual void
    defaultValueInteger ();

    virtual void
    defaultValueMarkdown ();

    virtual void
    defaultValueOid ();

    virtual void
    defaultValuePositiveInt ();

    virtual void
    defaultValueString ();

    virtual void
    defaultValueTime ();

    virtual void
    defaultValueUnsignedInt ();

    virtual void
    defaultValueUri ();

    virtual void
    defaultValueUrl ();

    virtual void
    defaultValueUuid ();

    virtual void
    defaultValueAddress ();

    virtual void
    defaultValueAge ();

    virtual void
    defaultValueAnnotation ();

    virtual void
    defaultValueAttachment ();

    virtual void
    defaultValueCodeableConcept ();

    virtual void
    defaultValueCoding ();

    virtual void
    defaultValueContactPoint ();

    virtual void
    defaultValueCount ();

    virtual void
    defaultValueDistance ();

    virtual void
    defaultValueDuration ();

    virtual void
    defaultValueHumanName ();

    virtual void
    defaultValueIdentifier ();

    virtual void
    defaultValueMoney ();

    virtual void
    defaultValuePeriod ();

    virtual void
    defaultValueQuantity ();

    virtual void
    defaultValueRange ();

    virtual void
    defaultValueRatio ();

    virtual void
    defaultValueReference ();

    virtual void
    defaultValueSampledData ();

    virtual void
    defaultValueSignature ();

    virtual void
    defaultValueTiming ();

    virtual void
    defaultValueContactDetail ();

    virtual void
    defaultValueContributor ();

    virtual void
    defaultValueDataRequirement ();

    virtual void
    defaultValueExpression ();

    virtual void
    defaultValueParameterDefinition ();

    virtual void
    defaultValueRelatedArtifact ();

    virtual void
    defaultValueTriggerDefinition ();

    virtual void
    defaultValueUsageContext ();

    virtual void
    defaultValueDosage ();

    virtual void
    defaultValueMeta ();

    virtual void
    meaningWhenMissing ();

    virtual void
    orderMeaning ();

    virtual void
    fixedBase64Binary ();

    virtual void
    fixedBoolean ();

    virtual void
    fixedCanonical ();

    virtual void
    fixedCode ();

    virtual void
    fixedDate ();

    virtual void
    fixedDateTime ();

    virtual void
    fixedDecimal ();

    virtual void
    fixedId ();

    virtual void
    fixedInstant ();

    virtual void
    fixedInteger ();

    virtual void
    fixedMarkdown ();

    virtual void
    fixedOid ();

    virtual void
    fixedPositiveInt ();

    virtual void
    fixedString ();

    virtual void
    fixedTime ();

    virtual void
    fixedUnsignedInt ();

    virtual void
    fixedUri ();

    virtual void
    fixedUrl ();

    virtual void
    fixedUuid ();

    virtual void
    fixedAddress ();

    virtual void
    fixedAge ();

    virtual void
    fixedAnnotation ();

    virtual void
    fixedAttachment ();

    virtual void
    fixedCodeableConcept ();

    virtual void
    fixedCoding ();

    virtual void
    fixedContactPoint ();

    virtual void
    fixedCount ();

    virtual void
    fixedDistance ();

    virtual void
    fixedDuration ();

    virtual void
    fixedHumanName ();

    virtual void
    fixedIdentifier ();

    virtual void
    fixedMoney ();

    virtual void
    fixedPeriod ();

    virtual void
    fixedQuantity ();

    virtual void
    fixedRange ();

    virtual void
    fixedRatio ();

    virtual void
    fixedReference ();

    virtual void
    fixedSampledData ();

    virtual void
    fixedSignature ();

    virtual void
    fixedTiming ();

    virtual void
    fixedContactDetail ();

    virtual void
    fixedContributor ();

    virtual void
    fixedDataRequirement ();

    virtual void
    fixedExpression ();

    virtual void
    fixedParameterDefinition ();

    virtual void
    fixedRelatedArtifact ();

    virtual void
    fixedTriggerDefinition ();

    virtual void
    fixedUsageContext ();

    virtual void
    fixedDosage ();

    virtual void
    fixedMeta ();

    virtual void
    patternBase64Binary ();

    virtual void
    patternBoolean ();

    virtual void
    patternCanonical ();

    virtual void
    patternCode ();

    virtual void
    patternDate ();

    virtual void
    patternDateTime ();

    virtual void
    patternDecimal ();

    virtual void
    patternId ();

    virtual void
    patternInstant ();

    virtual void
    patternInteger ();

    virtual void
    patternMarkdown ();

    virtual void
    patternOid ();

    virtual void
    patternPositiveInt ();

    virtual void
    patternString ();

    virtual void
    patternTime ();

    virtual void
    patternUnsignedInt ();

    virtual void
    patternUri ();

    virtual void
    patternUrl ();

    virtual void
    patternUuid ();

    virtual void
    patternAddress ();

    virtual void
    patternAge ();

    virtual void
    patternAnnotation ();

    virtual void
    patternAttachment ();

    virtual void
    patternCodeableConcept ();

    virtual void
    patternCoding ();

    virtual void
    patternContactPoint ();

    virtual void
    patternCount ();

    virtual void
    patternDistance ();

    virtual void
    patternDuration ();

    virtual void
    patternHumanName ();

    virtual void
    patternIdentifier ();

    virtual void
    patternMoney ();

    virtual void
    patternPeriod ();

    virtual void
    patternQuantity ();

    virtual void
    patternRange ();

    virtual void
    patternRatio ();

    virtual void
    patternReference ();

    virtual void
    patternSampledData ();

    virtual void
    patternSignature ();

    virtual void
    patternTiming ();

    virtual void
    patternContactDetail ();

    virtual void
    patternContributor ();

    virtual void
    patternDataRequirement ();

    virtual void
    patternExpression ();

    virtual void
    patternParameterDefinition ();

    virtual void
    patternRelatedArtifact ();

    virtual void
    patternTriggerDefinition ();

    virtual void
    patternUsageContext ();

    virtual void
    patternDosage ();

    virtual void
    patternMeta ();

    virtual void
    example ();

    virtual void
    minValueDate ();

    virtual void
    minValueDateTime ();

    virtual void
    minValueInstant ();

    virtual void
    minValueTime ();

    virtual void
    minValueDecimal ();

    virtual void
    minValueInteger ();

    virtual void
    minValuePositiveInt ();

    virtual void
    minValueUnsignedInt ();

    virtual void
    minValueQuantity ();

    virtual void
    maxValueDate ();

    virtual void
    maxValueDateTime ();

    virtual void
    maxValueInstant ();

    virtual void
    maxValueTime ();

    virtual void
    maxValueDecimal ();

    virtual void
    maxValueInteger ();

    virtual void
    maxValuePositiveInt ();

    virtual void
    maxValueUnsignedInt ();

    virtual void
    maxValueQuantity ();

    virtual void
    maxLength ();

    virtual void
    condition ();

    virtual void
    constraint ();

    virtual void
    mustSupport ();

    virtual void
    isModifier ();

    virtual void
    isModifierReason ();

    virtual void
    isSummary ();

    virtual void
    binding ();

    virtual void
    mapping ();

    virtual void
    post_ElementDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::PropertyRepresentation_pskel& /* representation */,
             ::fhir::string_pskel& /* sliceName */,
             ::fhir::boolean_pskel& /* sliceIsConstraining */,
             ::fhir::string_pskel& /* label */,
             ::fhir::Coding_pskel& /* code */,
             ::fhir::ElementDefinition_Slicing_pskel& /* slicing */,
             ::fhir::string_pskel& /* short */,
             ::fhir::markdown_pskel& /* definition */,
             ::fhir::markdown_pskel& /* comment */,
             ::fhir::markdown_pskel& /* requirements */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::unsignedInt_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::ElementDefinition_Base_pskel& /* base */,
             ::fhir::uri_pskel& /* contentReference */,
             ::fhir::ElementDefinition_Type_pskel& /* type */,
             ::fhir::base64Binary_pskel& /* defaultValueBase64Binary */,
             ::fhir::boolean_pskel& /* defaultValueBoolean */,
             ::fhir::canonical_pskel& /* defaultValueCanonical */,
             ::fhir::code_pskel& /* defaultValueCode */,
             ::fhir::date_pskel& /* defaultValueDate */,
             ::fhir::dateTime_pskel& /* defaultValueDateTime */,
             ::fhir::decimal_pskel& /* defaultValueDecimal */,
             ::fhir::id_pskel& /* defaultValueId */,
             ::fhir::instant_pskel& /* defaultValueInstant */,
             ::fhir::integer_pskel& /* defaultValueInteger */,
             ::fhir::markdown_pskel& /* defaultValueMarkdown */,
             ::fhir::oid_pskel& /* defaultValueOid */,
             ::fhir::positiveInt_pskel& /* defaultValuePositiveInt */,
             ::fhir::string_pskel& /* defaultValueString */,
             ::fhir::time_pskel& /* defaultValueTime */,
             ::fhir::unsignedInt_pskel& /* defaultValueUnsignedInt */,
             ::fhir::uri_pskel& /* defaultValueUri */,
             ::fhir::url_pskel& /* defaultValueUrl */,
             ::fhir::uuid_pskel& /* defaultValueUuid */,
             ::fhir::Address_pskel& /* defaultValueAddress */,
             ::fhir::Age_pskel& /* defaultValueAge */,
             ::fhir::Annotation_pskel& /* defaultValueAnnotation */,
             ::fhir::Attachment_pskel& /* defaultValueAttachment */,
             ::fhir::CodeableConcept_pskel& /* defaultValueCodeableConcept */,
             ::fhir::Coding_pskel& /* defaultValueCoding */,
             ::fhir::ContactPoint_pskel& /* defaultValueContactPoint */,
             ::fhir::Count_pskel& /* defaultValueCount */,
             ::fhir::Distance_pskel& /* defaultValueDistance */,
             ::fhir::Duration_pskel& /* defaultValueDuration */,
             ::fhir::HumanName_pskel& /* defaultValueHumanName */,
             ::fhir::Identifier_pskel& /* defaultValueIdentifier */,
             ::fhir::Money_pskel& /* defaultValueMoney */,
             ::fhir::Period_pskel& /* defaultValuePeriod */,
             ::fhir::Quantity_pskel& /* defaultValueQuantity */,
             ::fhir::Range_pskel& /* defaultValueRange */,
             ::fhir::Ratio_pskel& /* defaultValueRatio */,
             ::fhir::Reference_pskel& /* defaultValueReference */,
             ::fhir::SampledData_pskel& /* defaultValueSampledData */,
             ::fhir::Signature_pskel& /* defaultValueSignature */,
             ::fhir::Timing_pskel& /* defaultValueTiming */,
             ::fhir::ContactDetail_pskel& /* defaultValueContactDetail */,
             ::fhir::Contributor_pskel& /* defaultValueContributor */,
             ::fhir::DataRequirement_pskel& /* defaultValueDataRequirement */,
             ::fhir::Expression_pskel& /* defaultValueExpression */,
             ::fhir::ParameterDefinition_pskel& /* defaultValueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* defaultValueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* defaultValueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* defaultValueUsageContext */,
             ::fhir::Dosage_pskel& /* defaultValueDosage */,
             ::fhir::Meta_pskel& /* defaultValueMeta */,
             ::fhir::markdown_pskel& /* meaningWhenMissing */,
             ::fhir::string_pskel& /* orderMeaning */,
             ::fhir::base64Binary_pskel& /* fixedBase64Binary */,
             ::fhir::boolean_pskel& /* fixedBoolean */,
             ::fhir::canonical_pskel& /* fixedCanonical */,
             ::fhir::code_pskel& /* fixedCode */,
             ::fhir::date_pskel& /* fixedDate */,
             ::fhir::dateTime_pskel& /* fixedDateTime */,
             ::fhir::decimal_pskel& /* fixedDecimal */,
             ::fhir::id_pskel& /* fixedId */,
             ::fhir::instant_pskel& /* fixedInstant */,
             ::fhir::integer_pskel& /* fixedInteger */,
             ::fhir::markdown_pskel& /* fixedMarkdown */,
             ::fhir::oid_pskel& /* fixedOid */,
             ::fhir::positiveInt_pskel& /* fixedPositiveInt */,
             ::fhir::string_pskel& /* fixedString */,
             ::fhir::time_pskel& /* fixedTime */,
             ::fhir::unsignedInt_pskel& /* fixedUnsignedInt */,
             ::fhir::uri_pskel& /* fixedUri */,
             ::fhir::url_pskel& /* fixedUrl */,
             ::fhir::uuid_pskel& /* fixedUuid */,
             ::fhir::Address_pskel& /* fixedAddress */,
             ::fhir::Age_pskel& /* fixedAge */,
             ::fhir::Annotation_pskel& /* fixedAnnotation */,
             ::fhir::Attachment_pskel& /* fixedAttachment */,
             ::fhir::CodeableConcept_pskel& /* fixedCodeableConcept */,
             ::fhir::Coding_pskel& /* fixedCoding */,
             ::fhir::ContactPoint_pskel& /* fixedContactPoint */,
             ::fhir::Count_pskel& /* fixedCount */,
             ::fhir::Distance_pskel& /* fixedDistance */,
             ::fhir::Duration_pskel& /* fixedDuration */,
             ::fhir::HumanName_pskel& /* fixedHumanName */,
             ::fhir::Identifier_pskel& /* fixedIdentifier */,
             ::fhir::Money_pskel& /* fixedMoney */,
             ::fhir::Period_pskel& /* fixedPeriod */,
             ::fhir::Quantity_pskel& /* fixedQuantity */,
             ::fhir::Range_pskel& /* fixedRange */,
             ::fhir::Ratio_pskel& /* fixedRatio */,
             ::fhir::Reference_pskel& /* fixedReference */,
             ::fhir::SampledData_pskel& /* fixedSampledData */,
             ::fhir::Signature_pskel& /* fixedSignature */,
             ::fhir::Timing_pskel& /* fixedTiming */,
             ::fhir::ContactDetail_pskel& /* fixedContactDetail */,
             ::fhir::Contributor_pskel& /* fixedContributor */,
             ::fhir::DataRequirement_pskel& /* fixedDataRequirement */,
             ::fhir::Expression_pskel& /* fixedExpression */,
             ::fhir::ParameterDefinition_pskel& /* fixedParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* fixedRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* fixedTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* fixedUsageContext */,
             ::fhir::Dosage_pskel& /* fixedDosage */,
             ::fhir::Meta_pskel& /* fixedMeta */,
             ::fhir::base64Binary_pskel& /* patternBase64Binary */,
             ::fhir::boolean_pskel& /* patternBoolean */,
             ::fhir::canonical_pskel& /* patternCanonical */,
             ::fhir::code_pskel& /* patternCode */,
             ::fhir::date_pskel& /* patternDate */,
             ::fhir::dateTime_pskel& /* patternDateTime */,
             ::fhir::decimal_pskel& /* patternDecimal */,
             ::fhir::id_pskel& /* patternId */,
             ::fhir::instant_pskel& /* patternInstant */,
             ::fhir::integer_pskel& /* patternInteger */,
             ::fhir::markdown_pskel& /* patternMarkdown */,
             ::fhir::oid_pskel& /* patternOid */,
             ::fhir::positiveInt_pskel& /* patternPositiveInt */,
             ::fhir::string_pskel& /* patternString */,
             ::fhir::time_pskel& /* patternTime */,
             ::fhir::unsignedInt_pskel& /* patternUnsignedInt */,
             ::fhir::uri_pskel& /* patternUri */,
             ::fhir::url_pskel& /* patternUrl */,
             ::fhir::uuid_pskel& /* patternUuid */,
             ::fhir::Address_pskel& /* patternAddress */,
             ::fhir::Age_pskel& /* patternAge */,
             ::fhir::Annotation_pskel& /* patternAnnotation */,
             ::fhir::Attachment_pskel& /* patternAttachment */,
             ::fhir::CodeableConcept_pskel& /* patternCodeableConcept */,
             ::fhir::Coding_pskel& /* patternCoding */,
             ::fhir::ContactPoint_pskel& /* patternContactPoint */,
             ::fhir::Count_pskel& /* patternCount */,
             ::fhir::Distance_pskel& /* patternDistance */,
             ::fhir::Duration_pskel& /* patternDuration */,
             ::fhir::HumanName_pskel& /* patternHumanName */,
             ::fhir::Identifier_pskel& /* patternIdentifier */,
             ::fhir::Money_pskel& /* patternMoney */,
             ::fhir::Period_pskel& /* patternPeriod */,
             ::fhir::Quantity_pskel& /* patternQuantity */,
             ::fhir::Range_pskel& /* patternRange */,
             ::fhir::Ratio_pskel& /* patternRatio */,
             ::fhir::Reference_pskel& /* patternReference */,
             ::fhir::SampledData_pskel& /* patternSampledData */,
             ::fhir::Signature_pskel& /* patternSignature */,
             ::fhir::Timing_pskel& /* patternTiming */,
             ::fhir::ContactDetail_pskel& /* patternContactDetail */,
             ::fhir::Contributor_pskel& /* patternContributor */,
             ::fhir::DataRequirement_pskel& /* patternDataRequirement */,
             ::fhir::Expression_pskel& /* patternExpression */,
             ::fhir::ParameterDefinition_pskel& /* patternParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* patternRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* patternTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* patternUsageContext */,
             ::fhir::Dosage_pskel& /* patternDosage */,
             ::fhir::Meta_pskel& /* patternMeta */,
             ::fhir::ElementDefinition_Example_pskel& /* example */,
             ::fhir::date_pskel& /* minValueDate */,
             ::fhir::dateTime_pskel& /* minValueDateTime */,
             ::fhir::instant_pskel& /* minValueInstant */,
             ::fhir::time_pskel& /* minValueTime */,
             ::fhir::decimal_pskel& /* minValueDecimal */,
             ::fhir::integer_pskel& /* minValueInteger */,
             ::fhir::positiveInt_pskel& /* minValuePositiveInt */,
             ::fhir::unsignedInt_pskel& /* minValueUnsignedInt */,
             ::fhir::Quantity_pskel& /* minValueQuantity */,
             ::fhir::date_pskel& /* maxValueDate */,
             ::fhir::dateTime_pskel& /* maxValueDateTime */,
             ::fhir::instant_pskel& /* maxValueInstant */,
             ::fhir::time_pskel& /* maxValueTime */,
             ::fhir::decimal_pskel& /* maxValueDecimal */,
             ::fhir::integer_pskel& /* maxValueInteger */,
             ::fhir::positiveInt_pskel& /* maxValuePositiveInt */,
             ::fhir::unsignedInt_pskel& /* maxValueUnsignedInt */,
             ::fhir::Quantity_pskel& /* maxValueQuantity */,
             ::fhir::integer_pskel& /* maxLength */,
             ::fhir::id_pskel& /* condition */,
             ::fhir::ElementDefinition_Constraint_pskel& /* constraint */,
             ::fhir::boolean_pskel& /* mustSupport */,
             ::fhir::boolean_pskel& /* isModifier */,
             ::fhir::string_pskel& /* isModifierReason */,
             ::fhir::boolean_pskel& /* isSummary */,
             ::fhir::ElementDefinition_Binding_pskel& /* binding */,
             ::fhir::ElementDefinition_Mapping_pskel& /* mapping */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    representation_parser (::fhir::PropertyRepresentation_pskel&);

    void
    sliceName_parser (::fhir::string_pskel&);

    void
    sliceIsConstraining_parser (::fhir::boolean_pskel&);

    void
    label_parser (::fhir::string_pskel&);

    void
    code_parser (::fhir::Coding_pskel&);

    void
    slicing_parser (::fhir::ElementDefinition_Slicing_pskel&);

    void
    short__parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::markdown_pskel&);

    void
    comment_parser (::fhir::markdown_pskel&);

    void
    requirements_parser (::fhir::markdown_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    min_parser (::fhir::unsignedInt_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    base_parser (::fhir::ElementDefinition_Base_pskel&);

    void
    contentReference_parser (::fhir::uri_pskel&);

    void
    type_parser (::fhir::ElementDefinition_Type_pskel&);

    void
    defaultValueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    defaultValueBoolean_parser (::fhir::boolean_pskel&);

    void
    defaultValueCanonical_parser (::fhir::canonical_pskel&);

    void
    defaultValueCode_parser (::fhir::code_pskel&);

    void
    defaultValueDate_parser (::fhir::date_pskel&);

    void
    defaultValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    defaultValueDecimal_parser (::fhir::decimal_pskel&);

    void
    defaultValueId_parser (::fhir::id_pskel&);

    void
    defaultValueInstant_parser (::fhir::instant_pskel&);

    void
    defaultValueInteger_parser (::fhir::integer_pskel&);

    void
    defaultValueMarkdown_parser (::fhir::markdown_pskel&);

    void
    defaultValueOid_parser (::fhir::oid_pskel&);

    void
    defaultValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    defaultValueString_parser (::fhir::string_pskel&);

    void
    defaultValueTime_parser (::fhir::time_pskel&);

    void
    defaultValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    defaultValueUri_parser (::fhir::uri_pskel&);

    void
    defaultValueUrl_parser (::fhir::url_pskel&);

    void
    defaultValueUuid_parser (::fhir::uuid_pskel&);

    void
    defaultValueAddress_parser (::fhir::Address_pskel&);

    void
    defaultValueAge_parser (::fhir::Age_pskel&);

    void
    defaultValueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    defaultValueAttachment_parser (::fhir::Attachment_pskel&);

    void
    defaultValueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    defaultValueCoding_parser (::fhir::Coding_pskel&);

    void
    defaultValueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    defaultValueCount_parser (::fhir::Count_pskel&);

    void
    defaultValueDistance_parser (::fhir::Distance_pskel&);

    void
    defaultValueDuration_parser (::fhir::Duration_pskel&);

    void
    defaultValueHumanName_parser (::fhir::HumanName_pskel&);

    void
    defaultValueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    defaultValueMoney_parser (::fhir::Money_pskel&);

    void
    defaultValuePeriod_parser (::fhir::Period_pskel&);

    void
    defaultValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    defaultValueRange_parser (::fhir::Range_pskel&);

    void
    defaultValueRatio_parser (::fhir::Ratio_pskel&);

    void
    defaultValueReference_parser (::fhir::Reference_pskel&);

    void
    defaultValueSampledData_parser (::fhir::SampledData_pskel&);

    void
    defaultValueSignature_parser (::fhir::Signature_pskel&);

    void
    defaultValueTiming_parser (::fhir::Timing_pskel&);

    void
    defaultValueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    defaultValueContributor_parser (::fhir::Contributor_pskel&);

    void
    defaultValueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    defaultValueExpression_parser (::fhir::Expression_pskel&);

    void
    defaultValueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    defaultValueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    defaultValueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    defaultValueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    defaultValueDosage_parser (::fhir::Dosage_pskel&);

    void
    defaultValueMeta_parser (::fhir::Meta_pskel&);

    void
    meaningWhenMissing_parser (::fhir::markdown_pskel&);

    void
    orderMeaning_parser (::fhir::string_pskel&);

    void
    fixedBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    fixedBoolean_parser (::fhir::boolean_pskel&);

    void
    fixedCanonical_parser (::fhir::canonical_pskel&);

    void
    fixedCode_parser (::fhir::code_pskel&);

    void
    fixedDate_parser (::fhir::date_pskel&);

    void
    fixedDateTime_parser (::fhir::dateTime_pskel&);

    void
    fixedDecimal_parser (::fhir::decimal_pskel&);

    void
    fixedId_parser (::fhir::id_pskel&);

    void
    fixedInstant_parser (::fhir::instant_pskel&);

    void
    fixedInteger_parser (::fhir::integer_pskel&);

    void
    fixedMarkdown_parser (::fhir::markdown_pskel&);

    void
    fixedOid_parser (::fhir::oid_pskel&);

    void
    fixedPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    fixedString_parser (::fhir::string_pskel&);

    void
    fixedTime_parser (::fhir::time_pskel&);

    void
    fixedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    fixedUri_parser (::fhir::uri_pskel&);

    void
    fixedUrl_parser (::fhir::url_pskel&);

    void
    fixedUuid_parser (::fhir::uuid_pskel&);

    void
    fixedAddress_parser (::fhir::Address_pskel&);

    void
    fixedAge_parser (::fhir::Age_pskel&);

    void
    fixedAnnotation_parser (::fhir::Annotation_pskel&);

    void
    fixedAttachment_parser (::fhir::Attachment_pskel&);

    void
    fixedCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    fixedCoding_parser (::fhir::Coding_pskel&);

    void
    fixedContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    fixedCount_parser (::fhir::Count_pskel&);

    void
    fixedDistance_parser (::fhir::Distance_pskel&);

    void
    fixedDuration_parser (::fhir::Duration_pskel&);

    void
    fixedHumanName_parser (::fhir::HumanName_pskel&);

    void
    fixedIdentifier_parser (::fhir::Identifier_pskel&);

    void
    fixedMoney_parser (::fhir::Money_pskel&);

    void
    fixedPeriod_parser (::fhir::Period_pskel&);

    void
    fixedQuantity_parser (::fhir::Quantity_pskel&);

    void
    fixedRange_parser (::fhir::Range_pskel&);

    void
    fixedRatio_parser (::fhir::Ratio_pskel&);

    void
    fixedReference_parser (::fhir::Reference_pskel&);

    void
    fixedSampledData_parser (::fhir::SampledData_pskel&);

    void
    fixedSignature_parser (::fhir::Signature_pskel&);

    void
    fixedTiming_parser (::fhir::Timing_pskel&);

    void
    fixedContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    fixedContributor_parser (::fhir::Contributor_pskel&);

    void
    fixedDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    fixedExpression_parser (::fhir::Expression_pskel&);

    void
    fixedParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    fixedRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    fixedTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    fixedUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    fixedDosage_parser (::fhir::Dosage_pskel&);

    void
    fixedMeta_parser (::fhir::Meta_pskel&);

    void
    patternBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    patternBoolean_parser (::fhir::boolean_pskel&);

    void
    patternCanonical_parser (::fhir::canonical_pskel&);

    void
    patternCode_parser (::fhir::code_pskel&);

    void
    patternDate_parser (::fhir::date_pskel&);

    void
    patternDateTime_parser (::fhir::dateTime_pskel&);

    void
    patternDecimal_parser (::fhir::decimal_pskel&);

    void
    patternId_parser (::fhir::id_pskel&);

    void
    patternInstant_parser (::fhir::instant_pskel&);

    void
    patternInteger_parser (::fhir::integer_pskel&);

    void
    patternMarkdown_parser (::fhir::markdown_pskel&);

    void
    patternOid_parser (::fhir::oid_pskel&);

    void
    patternPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    patternString_parser (::fhir::string_pskel&);

    void
    patternTime_parser (::fhir::time_pskel&);

    void
    patternUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    patternUri_parser (::fhir::uri_pskel&);

    void
    patternUrl_parser (::fhir::url_pskel&);

    void
    patternUuid_parser (::fhir::uuid_pskel&);

    void
    patternAddress_parser (::fhir::Address_pskel&);

    void
    patternAge_parser (::fhir::Age_pskel&);

    void
    patternAnnotation_parser (::fhir::Annotation_pskel&);

    void
    patternAttachment_parser (::fhir::Attachment_pskel&);

    void
    patternCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    patternCoding_parser (::fhir::Coding_pskel&);

    void
    patternContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    patternCount_parser (::fhir::Count_pskel&);

    void
    patternDistance_parser (::fhir::Distance_pskel&);

    void
    patternDuration_parser (::fhir::Duration_pskel&);

    void
    patternHumanName_parser (::fhir::HumanName_pskel&);

    void
    patternIdentifier_parser (::fhir::Identifier_pskel&);

    void
    patternMoney_parser (::fhir::Money_pskel&);

    void
    patternPeriod_parser (::fhir::Period_pskel&);

    void
    patternQuantity_parser (::fhir::Quantity_pskel&);

    void
    patternRange_parser (::fhir::Range_pskel&);

    void
    patternRatio_parser (::fhir::Ratio_pskel&);

    void
    patternReference_parser (::fhir::Reference_pskel&);

    void
    patternSampledData_parser (::fhir::SampledData_pskel&);

    void
    patternSignature_parser (::fhir::Signature_pskel&);

    void
    patternTiming_parser (::fhir::Timing_pskel&);

    void
    patternContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    patternContributor_parser (::fhir::Contributor_pskel&);

    void
    patternDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    patternExpression_parser (::fhir::Expression_pskel&);

    void
    patternParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    patternRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    patternTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    patternUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    patternDosage_parser (::fhir::Dosage_pskel&);

    void
    patternMeta_parser (::fhir::Meta_pskel&);

    void
    example_parser (::fhir::ElementDefinition_Example_pskel&);

    void
    minValueDate_parser (::fhir::date_pskel&);

    void
    minValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    minValueInstant_parser (::fhir::instant_pskel&);

    void
    minValueTime_parser (::fhir::time_pskel&);

    void
    minValueDecimal_parser (::fhir::decimal_pskel&);

    void
    minValueInteger_parser (::fhir::integer_pskel&);

    void
    minValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    minValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    minValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    maxValueDate_parser (::fhir::date_pskel&);

    void
    maxValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    maxValueInstant_parser (::fhir::instant_pskel&);

    void
    maxValueTime_parser (::fhir::time_pskel&);

    void
    maxValueDecimal_parser (::fhir::decimal_pskel&);

    void
    maxValueInteger_parser (::fhir::integer_pskel&);

    void
    maxValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    maxValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    maxValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    maxLength_parser (::fhir::integer_pskel&);

    void
    condition_parser (::fhir::id_pskel&);

    void
    constraint_parser (::fhir::ElementDefinition_Constraint_pskel&);

    void
    mustSupport_parser (::fhir::boolean_pskel&);

    void
    isModifier_parser (::fhir::boolean_pskel&);

    void
    isModifierReason_parser (::fhir::string_pskel&);

    void
    isSummary_parser (::fhir::boolean_pskel&);

    void
    binding_parser (::fhir::ElementDefinition_Binding_pskel&);

    void
    mapping_parser (::fhir::ElementDefinition_Mapping_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_pskel* ElementDefinition_impl_;
    ElementDefinition_pskel (ElementDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::PropertyRepresentation_pskel* representation_parser_;
    ::fhir::string_pskel* sliceName_parser_;
    ::fhir::boolean_pskel* sliceIsConstraining_parser_;
    ::fhir::string_pskel* label_parser_;
    ::fhir::Coding_pskel* code_parser_;
    ::fhir::ElementDefinition_Slicing_pskel* slicing_parser_;
    ::fhir::string_pskel* short__parser_;
    ::fhir::markdown_pskel* definition_parser_;
    ::fhir::markdown_pskel* comment_parser_;
    ::fhir::markdown_pskel* requirements_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::unsignedInt_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::ElementDefinition_Base_pskel* base_parser_;
    ::fhir::uri_pskel* contentReference_parser_;
    ::fhir::ElementDefinition_Type_pskel* type_parser_;
    ::fhir::base64Binary_pskel* defaultValueBase64Binary_parser_;
    ::fhir::boolean_pskel* defaultValueBoolean_parser_;
    ::fhir::canonical_pskel* defaultValueCanonical_parser_;
    ::fhir::code_pskel* defaultValueCode_parser_;
    ::fhir::date_pskel* defaultValueDate_parser_;
    ::fhir::dateTime_pskel* defaultValueDateTime_parser_;
    ::fhir::decimal_pskel* defaultValueDecimal_parser_;
    ::fhir::id_pskel* defaultValueId_parser_;
    ::fhir::instant_pskel* defaultValueInstant_parser_;
    ::fhir::integer_pskel* defaultValueInteger_parser_;
    ::fhir::markdown_pskel* defaultValueMarkdown_parser_;
    ::fhir::oid_pskel* defaultValueOid_parser_;
    ::fhir::positiveInt_pskel* defaultValuePositiveInt_parser_;
    ::fhir::string_pskel* defaultValueString_parser_;
    ::fhir::time_pskel* defaultValueTime_parser_;
    ::fhir::unsignedInt_pskel* defaultValueUnsignedInt_parser_;
    ::fhir::uri_pskel* defaultValueUri_parser_;
    ::fhir::url_pskel* defaultValueUrl_parser_;
    ::fhir::uuid_pskel* defaultValueUuid_parser_;
    ::fhir::Address_pskel* defaultValueAddress_parser_;
    ::fhir::Age_pskel* defaultValueAge_parser_;
    ::fhir::Annotation_pskel* defaultValueAnnotation_parser_;
    ::fhir::Attachment_pskel* defaultValueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* defaultValueCodeableConcept_parser_;
    ::fhir::Coding_pskel* defaultValueCoding_parser_;
    ::fhir::ContactPoint_pskel* defaultValueContactPoint_parser_;
    ::fhir::Count_pskel* defaultValueCount_parser_;
    ::fhir::Distance_pskel* defaultValueDistance_parser_;
    ::fhir::Duration_pskel* defaultValueDuration_parser_;
    ::fhir::HumanName_pskel* defaultValueHumanName_parser_;
    ::fhir::Identifier_pskel* defaultValueIdentifier_parser_;
    ::fhir::Money_pskel* defaultValueMoney_parser_;
    ::fhir::Period_pskel* defaultValuePeriod_parser_;
    ::fhir::Quantity_pskel* defaultValueQuantity_parser_;
    ::fhir::Range_pskel* defaultValueRange_parser_;
    ::fhir::Ratio_pskel* defaultValueRatio_parser_;
    ::fhir::Reference_pskel* defaultValueReference_parser_;
    ::fhir::SampledData_pskel* defaultValueSampledData_parser_;
    ::fhir::Signature_pskel* defaultValueSignature_parser_;
    ::fhir::Timing_pskel* defaultValueTiming_parser_;
    ::fhir::ContactDetail_pskel* defaultValueContactDetail_parser_;
    ::fhir::Contributor_pskel* defaultValueContributor_parser_;
    ::fhir::DataRequirement_pskel* defaultValueDataRequirement_parser_;
    ::fhir::Expression_pskel* defaultValueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* defaultValueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* defaultValueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* defaultValueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* defaultValueUsageContext_parser_;
    ::fhir::Dosage_pskel* defaultValueDosage_parser_;
    ::fhir::Meta_pskel* defaultValueMeta_parser_;
    ::fhir::markdown_pskel* meaningWhenMissing_parser_;
    ::fhir::string_pskel* orderMeaning_parser_;
    ::fhir::base64Binary_pskel* fixedBase64Binary_parser_;
    ::fhir::boolean_pskel* fixedBoolean_parser_;
    ::fhir::canonical_pskel* fixedCanonical_parser_;
    ::fhir::code_pskel* fixedCode_parser_;
    ::fhir::date_pskel* fixedDate_parser_;
    ::fhir::dateTime_pskel* fixedDateTime_parser_;
    ::fhir::decimal_pskel* fixedDecimal_parser_;
    ::fhir::id_pskel* fixedId_parser_;
    ::fhir::instant_pskel* fixedInstant_parser_;
    ::fhir::integer_pskel* fixedInteger_parser_;
    ::fhir::markdown_pskel* fixedMarkdown_parser_;
    ::fhir::oid_pskel* fixedOid_parser_;
    ::fhir::positiveInt_pskel* fixedPositiveInt_parser_;
    ::fhir::string_pskel* fixedString_parser_;
    ::fhir::time_pskel* fixedTime_parser_;
    ::fhir::unsignedInt_pskel* fixedUnsignedInt_parser_;
    ::fhir::uri_pskel* fixedUri_parser_;
    ::fhir::url_pskel* fixedUrl_parser_;
    ::fhir::uuid_pskel* fixedUuid_parser_;
    ::fhir::Address_pskel* fixedAddress_parser_;
    ::fhir::Age_pskel* fixedAge_parser_;
    ::fhir::Annotation_pskel* fixedAnnotation_parser_;
    ::fhir::Attachment_pskel* fixedAttachment_parser_;
    ::fhir::CodeableConcept_pskel* fixedCodeableConcept_parser_;
    ::fhir::Coding_pskel* fixedCoding_parser_;
    ::fhir::ContactPoint_pskel* fixedContactPoint_parser_;
    ::fhir::Count_pskel* fixedCount_parser_;
    ::fhir::Distance_pskel* fixedDistance_parser_;
    ::fhir::Duration_pskel* fixedDuration_parser_;
    ::fhir::HumanName_pskel* fixedHumanName_parser_;
    ::fhir::Identifier_pskel* fixedIdentifier_parser_;
    ::fhir::Money_pskel* fixedMoney_parser_;
    ::fhir::Period_pskel* fixedPeriod_parser_;
    ::fhir::Quantity_pskel* fixedQuantity_parser_;
    ::fhir::Range_pskel* fixedRange_parser_;
    ::fhir::Ratio_pskel* fixedRatio_parser_;
    ::fhir::Reference_pskel* fixedReference_parser_;
    ::fhir::SampledData_pskel* fixedSampledData_parser_;
    ::fhir::Signature_pskel* fixedSignature_parser_;
    ::fhir::Timing_pskel* fixedTiming_parser_;
    ::fhir::ContactDetail_pskel* fixedContactDetail_parser_;
    ::fhir::Contributor_pskel* fixedContributor_parser_;
    ::fhir::DataRequirement_pskel* fixedDataRequirement_parser_;
    ::fhir::Expression_pskel* fixedExpression_parser_;
    ::fhir::ParameterDefinition_pskel* fixedParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* fixedRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* fixedTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* fixedUsageContext_parser_;
    ::fhir::Dosage_pskel* fixedDosage_parser_;
    ::fhir::Meta_pskel* fixedMeta_parser_;
    ::fhir::base64Binary_pskel* patternBase64Binary_parser_;
    ::fhir::boolean_pskel* patternBoolean_parser_;
    ::fhir::canonical_pskel* patternCanonical_parser_;
    ::fhir::code_pskel* patternCode_parser_;
    ::fhir::date_pskel* patternDate_parser_;
    ::fhir::dateTime_pskel* patternDateTime_parser_;
    ::fhir::decimal_pskel* patternDecimal_parser_;
    ::fhir::id_pskel* patternId_parser_;
    ::fhir::instant_pskel* patternInstant_parser_;
    ::fhir::integer_pskel* patternInteger_parser_;
    ::fhir::markdown_pskel* patternMarkdown_parser_;
    ::fhir::oid_pskel* patternOid_parser_;
    ::fhir::positiveInt_pskel* patternPositiveInt_parser_;
    ::fhir::string_pskel* patternString_parser_;
    ::fhir::time_pskel* patternTime_parser_;
    ::fhir::unsignedInt_pskel* patternUnsignedInt_parser_;
    ::fhir::uri_pskel* patternUri_parser_;
    ::fhir::url_pskel* patternUrl_parser_;
    ::fhir::uuid_pskel* patternUuid_parser_;
    ::fhir::Address_pskel* patternAddress_parser_;
    ::fhir::Age_pskel* patternAge_parser_;
    ::fhir::Annotation_pskel* patternAnnotation_parser_;
    ::fhir::Attachment_pskel* patternAttachment_parser_;
    ::fhir::CodeableConcept_pskel* patternCodeableConcept_parser_;
    ::fhir::Coding_pskel* patternCoding_parser_;
    ::fhir::ContactPoint_pskel* patternContactPoint_parser_;
    ::fhir::Count_pskel* patternCount_parser_;
    ::fhir::Distance_pskel* patternDistance_parser_;
    ::fhir::Duration_pskel* patternDuration_parser_;
    ::fhir::HumanName_pskel* patternHumanName_parser_;
    ::fhir::Identifier_pskel* patternIdentifier_parser_;
    ::fhir::Money_pskel* patternMoney_parser_;
    ::fhir::Period_pskel* patternPeriod_parser_;
    ::fhir::Quantity_pskel* patternQuantity_parser_;
    ::fhir::Range_pskel* patternRange_parser_;
    ::fhir::Ratio_pskel* patternRatio_parser_;
    ::fhir::Reference_pskel* patternReference_parser_;
    ::fhir::SampledData_pskel* patternSampledData_parser_;
    ::fhir::Signature_pskel* patternSignature_parser_;
    ::fhir::Timing_pskel* patternTiming_parser_;
    ::fhir::ContactDetail_pskel* patternContactDetail_parser_;
    ::fhir::Contributor_pskel* patternContributor_parser_;
    ::fhir::DataRequirement_pskel* patternDataRequirement_parser_;
    ::fhir::Expression_pskel* patternExpression_parser_;
    ::fhir::ParameterDefinition_pskel* patternParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* patternRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* patternTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* patternUsageContext_parser_;
    ::fhir::Dosage_pskel* patternDosage_parser_;
    ::fhir::Meta_pskel* patternMeta_parser_;
    ::fhir::ElementDefinition_Example_pskel* example_parser_;
    ::fhir::date_pskel* minValueDate_parser_;
    ::fhir::dateTime_pskel* minValueDateTime_parser_;
    ::fhir::instant_pskel* minValueInstant_parser_;
    ::fhir::time_pskel* minValueTime_parser_;
    ::fhir::decimal_pskel* minValueDecimal_parser_;
    ::fhir::integer_pskel* minValueInteger_parser_;
    ::fhir::positiveInt_pskel* minValuePositiveInt_parser_;
    ::fhir::unsignedInt_pskel* minValueUnsignedInt_parser_;
    ::fhir::Quantity_pskel* minValueQuantity_parser_;
    ::fhir::date_pskel* maxValueDate_parser_;
    ::fhir::dateTime_pskel* maxValueDateTime_parser_;
    ::fhir::instant_pskel* maxValueInstant_parser_;
    ::fhir::time_pskel* maxValueTime_parser_;
    ::fhir::decimal_pskel* maxValueDecimal_parser_;
    ::fhir::integer_pskel* maxValueInteger_parser_;
    ::fhir::positiveInt_pskel* maxValuePositiveInt_parser_;
    ::fhir::unsignedInt_pskel* maxValueUnsignedInt_parser_;
    ::fhir::Quantity_pskel* maxValueQuantity_parser_;
    ::fhir::integer_pskel* maxLength_parser_;
    ::fhir::id_pskel* condition_parser_;
    ::fhir::ElementDefinition_Constraint_pskel* constraint_parser_;
    ::fhir::boolean_pskel* mustSupport_parser_;
    ::fhir::boolean_pskel* isModifier_parser_;
    ::fhir::string_pskel* isModifierReason_parser_;
    ::fhir::boolean_pskel* isSummary_parser_;
    ::fhir::ElementDefinition_Binding_pskel* binding_parser_;
    ::fhir::ElementDefinition_Mapping_pskel* mapping_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Constraint_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    key ();

    virtual void
    requirements ();

    virtual void
    severity ();

    virtual void
    human ();

    virtual void
    expression ();

    virtual void
    xpath ();

    virtual void
    source ();

    virtual void
    post_ElementDefinition_Constraint ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* key */,
             ::fhir::string_pskel& /* requirements */,
             ::fhir::ConstraintSeverity_pskel& /* severity */,
             ::fhir::string_pskel& /* human */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* xpath */,
             ::fhir::canonical_pskel& /* source */);

    // Individual element parsers.
    //
    void
    key_parser (::fhir::id_pskel&);

    void
    requirements_parser (::fhir::string_pskel&);

    void
    severity_parser (::fhir::ConstraintSeverity_pskel&);

    void
    human_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    xpath_parser (::fhir::string_pskel&);

    void
    source_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Constraint_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Constraint_pskel* ElementDefinition_Constraint_impl_;
    ElementDefinition_Constraint_pskel (ElementDefinition_Constraint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* key_parser_;
    ::fhir::string_pskel* requirements_parser_;
    ::fhir::ConstraintSeverity_pskel* severity_parser_;
    ::fhir::string_pskel* human_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* xpath_parser_;
    ::fhir::canonical_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Constraint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Mapping_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identity ();

    virtual void
    language ();

    virtual void
    map ();

    virtual void
    comment ();

    virtual void
    post_ElementDefinition_Mapping ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* identity */,
             ::fhir::code_pskel& /* language */,
             ::fhir::string_pskel& /* map */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    identity_parser (::fhir::id_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    void
    map_parser (::fhir::string_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Mapping_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Mapping_pskel* ElementDefinition_Mapping_impl_;
    ElementDefinition_Mapping_pskel (ElementDefinition_Mapping_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* identity_parser_;
    ::fhir::code_pskel* language_parser_;
    ::fhir::string_pskel* map_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Mapping_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Base_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    post_ElementDefinition_Base ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::unsignedInt_pskel& /* min */,
             ::fhir::string_pskel& /* max */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    min_parser (::fhir::unsignedInt_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Base_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Base_pskel* ElementDefinition_Base_impl_;
    ElementDefinition_Base_pskel (ElementDefinition_Base_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::unsignedInt_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Base_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Type_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    profile ();

    virtual void
    targetProfile ();

    virtual void
    aggregation ();

    virtual void
    versioning ();

    virtual void
    post_ElementDefinition_Type ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* code */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::canonical_pskel& /* targetProfile */,
             ::fhir::AggregationMode_pskel& /* aggregation */,
             ::fhir::ReferenceVersionRules_pskel& /* versioning */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::uri_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    targetProfile_parser (::fhir::canonical_pskel&);

    void
    aggregation_parser (::fhir::AggregationMode_pskel&);

    void
    versioning_parser (::fhir::ReferenceVersionRules_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Type_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Type_pskel* ElementDefinition_Type_impl_;
    ElementDefinition_Type_pskel (ElementDefinition_Type_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* code_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::canonical_pskel* targetProfile_parser_;
    ::fhir::AggregationMode_pskel* aggregation_parser_;
    ::fhir::ReferenceVersionRules_pskel* versioning_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Type_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Example_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    label ();

    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    post_ElementDefinition_Example ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* label */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */);

    // Individual element parsers.
    //
    void
    label_parser (::fhir::string_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Example_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Example_pskel* ElementDefinition_Example_impl_;
    ElementDefinition_Example_pskel (ElementDefinition_Example_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* label_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Example_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Slicing_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    discriminator ();

    virtual void
    description ();

    virtual void
    ordered ();

    virtual void
    rules ();

    virtual void
    post_ElementDefinition_Slicing ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ElementDefinition_Discriminator_pskel& /* discriminator */,
             ::fhir::string_pskel& /* description */,
             ::fhir::boolean_pskel& /* ordered */,
             ::fhir::SlicingRules_pskel& /* rules */);

    // Individual element parsers.
    //
    void
    discriminator_parser (::fhir::ElementDefinition_Discriminator_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    ordered_parser (::fhir::boolean_pskel&);

    void
    rules_parser (::fhir::SlicingRules_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Slicing_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Slicing_pskel* ElementDefinition_Slicing_impl_;
    ElementDefinition_Slicing_pskel (ElementDefinition_Slicing_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ElementDefinition_Discriminator_pskel* discriminator_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::boolean_pskel* ordered_parser_;
    ::fhir::SlicingRules_pskel* rules_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Slicing_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Binding_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    strength ();

    virtual void
    description ();

    virtual void
    valueSet ();

    virtual void
    post_ElementDefinition_Binding ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::BindingStrength_pskel& /* strength */,
             ::fhir::string_pskel& /* description */,
             ::fhir::canonical_pskel& /* valueSet */);

    // Individual element parsers.
    //
    void
    strength_parser (::fhir::BindingStrength_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    valueSet_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Binding_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Binding_pskel* ElementDefinition_Binding_impl_;
    ElementDefinition_Binding_pskel (ElementDefinition_Binding_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::BindingStrength_pskel* strength_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::canonical_pskel* valueSet_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Binding_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Discriminator_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    path ();

    virtual void
    post_ElementDefinition_Discriminator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DiscriminatorType_pskel& /* type */,
             ::fhir::string_pskel& /* path */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::DiscriminatorType_pskel&);

    void
    path_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Discriminator_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Discriminator_pskel* ElementDefinition_Discriminator_impl_;
    ElementDefinition_Discriminator_pskel (ElementDefinition_Discriminator_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DiscriminatorType_pskel* type_parser_;
    ::fhir::string_pskel* path_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Discriminator_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PropertyRepresentation_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PropertyRepresentation_list ();

    // Constructor.
    //
    PropertyRepresentation_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    PropertyRepresentation_list_pskel* PropertyRepresentation_list_impl_;
    PropertyRepresentation_list_pskel (PropertyRepresentation_list_pskel*, void*);

    protected:
    static const char* const _xsde_PropertyRepresentation_list_pskel_enums_[5UL];
  };

  class PropertyRepresentation_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_PropertyRepresentation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::PropertyRepresentation_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::PropertyRepresentation_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PropertyRepresentation_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    PropertyRepresentation_pskel* PropertyRepresentation_impl_;
    PropertyRepresentation_pskel (PropertyRepresentation_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::PropertyRepresentation_list_pskel* value_parser_;
  };

  class ConstraintSeverity_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConstraintSeverity_list ();

    // Constructor.
    //
    ConstraintSeverity_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConstraintSeverity_list_pskel* ConstraintSeverity_list_impl_;
    ConstraintSeverity_list_pskel (ConstraintSeverity_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConstraintSeverity_list_pskel_enums_[2UL];
  };

  class ConstraintSeverity_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConstraintSeverity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConstraintSeverity_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConstraintSeverity_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConstraintSeverity_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConstraintSeverity_pskel* ConstraintSeverity_impl_;
    ConstraintSeverity_pskel (ConstraintSeverity_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConstraintSeverity_list_pskel* value_parser_;
  };

  class AggregationMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AggregationMode_list ();

    // Constructor.
    //
    AggregationMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AggregationMode_list_pskel* AggregationMode_list_impl_;
    AggregationMode_list_pskel (AggregationMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_AggregationMode_list_pskel_enums_[3UL];
  };

  class AggregationMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AggregationMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AggregationMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AggregationMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AggregationMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AggregationMode_pskel* AggregationMode_impl_;
    AggregationMode_pskel (AggregationMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AggregationMode_list_pskel* value_parser_;
  };

  class ReferenceVersionRules_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ReferenceVersionRules_list ();

    // Constructor.
    //
    ReferenceVersionRules_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceVersionRules_list_pskel* ReferenceVersionRules_list_impl_;
    ReferenceVersionRules_list_pskel (ReferenceVersionRules_list_pskel*, void*);

    protected:
    static const char* const _xsde_ReferenceVersionRules_list_pskel_enums_[3UL];
  };

  class ReferenceVersionRules_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ReferenceVersionRules ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ReferenceVersionRules_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ReferenceVersionRules_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ReferenceVersionRules_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceVersionRules_pskel* ReferenceVersionRules_impl_;
    ReferenceVersionRules_pskel (ReferenceVersionRules_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ReferenceVersionRules_list_pskel* value_parser_;
  };

  class SlicingRules_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SlicingRules_list ();

    // Constructor.
    //
    SlicingRules_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SlicingRules_list_pskel* SlicingRules_list_impl_;
    SlicingRules_list_pskel (SlicingRules_list_pskel*, void*);

    protected:
    static const char* const _xsde_SlicingRules_list_pskel_enums_[3UL];
  };

  class SlicingRules_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SlicingRules ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SlicingRules_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SlicingRules_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SlicingRules_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SlicingRules_pskel* SlicingRules_impl_;
    SlicingRules_pskel (SlicingRules_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SlicingRules_list_pskel* value_parser_;
  };

  class BindingStrength_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BindingStrength_list ();

    // Constructor.
    //
    BindingStrength_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    BindingStrength_list_pskel* BindingStrength_list_impl_;
    BindingStrength_list_pskel (BindingStrength_list_pskel*, void*);

    protected:
    static const char* const _xsde_BindingStrength_list_pskel_enums_[4UL];
  };

  class BindingStrength_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_BindingStrength ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::BindingStrength_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::BindingStrength_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BindingStrength_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BindingStrength_pskel* BindingStrength_impl_;
    BindingStrength_pskel (BindingStrength_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::BindingStrength_list_pskel* value_parser_;
  };

  class DiscriminatorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DiscriminatorType_list ();

    // Constructor.
    //
    DiscriminatorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiscriminatorType_list_pskel* DiscriminatorType_list_impl_;
    DiscriminatorType_list_pskel (DiscriminatorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_DiscriminatorType_list_pskel_enums_[5UL];
  };

  class DiscriminatorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DiscriminatorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DiscriminatorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DiscriminatorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DiscriminatorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiscriminatorType_pskel* DiscriminatorType_impl_;
    DiscriminatorType_pskel (DiscriminatorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DiscriminatorType_list_pskel* value_parser_;
  };

  class Resource_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    id ();

    virtual void
    meta ();

    virtual void
    implicitRules ();

    virtual void
    language ();

    virtual void
    post_Resource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */);

    // Individual element parsers.
    //
    void
    id_parser (::fhir::id_pskel&);

    void
    meta_parser (::fhir::Meta_pskel&);

    void
    implicitRules_parser (::fhir::uri_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Resource_pskel ();

    // Implementation details.
    //
    protected:
    Resource_pskel* Resource_impl_;
    Resource_pskel (Resource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* id_parser_;
    ::fhir::Meta_pskel* meta_parser_;
    ::fhir::uri_pskel* implicitRules_parser_;
    ::fhir::code_pskel* language_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Resource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DomainResource_pskel: public ::fhir::Resource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    text ();

    virtual void
    contained ();

    virtual void
    extension ();

    virtual void
    modifierExtension ();

    virtual void
    post_DomainResource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */);

    // Individual element parsers.
    //
    void
    text_parser (::fhir::Narrative_pskel&);

    void
    contained_parser (::fhir::ResourceContainer_pskel&);

    void
    extension_parser (::fhir::Extension_pskel&);

    void
    modifierExtension_parser (::fhir::Extension_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DomainResource_pskel (::fhir::Resource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DomainResource_pskel* DomainResource_impl_;
    DomainResource_pskel (DomainResource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Narrative_pskel* text_parser_;
    ::fhir::ResourceContainer_pskel* contained_parser_;
    ::fhir::Extension_pskel* extension_parser_;
    ::fhir::Extension_pskel* modifierExtension_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DomainResource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PublicationStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PublicationStatus_list ();

    // Constructor.
    //
    PublicationStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    PublicationStatus_list_pskel* PublicationStatus_list_impl_;
    PublicationStatus_list_pskel (PublicationStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_PublicationStatus_list_pskel_enums_[4UL];
  };

  class PublicationStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_PublicationStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::PublicationStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::PublicationStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PublicationStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    PublicationStatus_pskel* PublicationStatus_impl_;
    PublicationStatus_pskel (PublicationStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::PublicationStatus_list_pskel* value_parser_;
  };

  class SearchParamType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SearchParamType_list ();

    // Constructor.
    //
    SearchParamType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchParamType_list_pskel* SearchParamType_list_impl_;
    SearchParamType_list_pskel (SearchParamType_list_pskel*, void*);

    protected:
    static const char* const _xsde_SearchParamType_list_pskel_enums_[9UL];
  };

  class SearchParamType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SearchParamType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SearchParamType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SearchParamType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SearchParamType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchParamType_pskel* SearchParamType_impl_;
    SearchParamType_pskel (SearchParamType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SearchParamType_list_pskel* value_parser_;
  };

  class AdministrativeGender_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AdministrativeGender_list ();

    // Constructor.
    //
    AdministrativeGender_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdministrativeGender_list_pskel* AdministrativeGender_list_impl_;
    AdministrativeGender_list_pskel (AdministrativeGender_list_pskel*, void*);

    protected:
    static const char* const _xsde_AdministrativeGender_list_pskel_enums_[4UL];
  };

  class AdministrativeGender_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AdministrativeGender ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AdministrativeGender_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AdministrativeGender_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AdministrativeGender_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdministrativeGender_pskel* AdministrativeGender_impl_;
    AdministrativeGender_pskel (AdministrativeGender_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AdministrativeGender_list_pskel* value_parser_;
  };

  class FHIRVersion_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FHIRVersion_list ();

    // Constructor.
    //
    FHIRVersion_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRVersion_list_pskel* FHIRVersion_list_impl_;
    FHIRVersion_list_pskel (FHIRVersion_list_pskel*, void*);

    protected:
    static const char* const _xsde_FHIRVersion_list_pskel_enums_[22UL];
  };

  class FHIRVersion_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FHIRVersion ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FHIRVersion_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FHIRVersion_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FHIRVersion_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRVersion_pskel* FHIRVersion_impl_;
    FHIRVersion_pskel (FHIRVersion_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FHIRVersion_list_pskel* value_parser_;
  };

  class NoteType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NoteType_list ();

    // Constructor.
    //
    NoteType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NoteType_list_pskel* NoteType_list_impl_;
    NoteType_list_pskel (NoteType_list_pskel*, void*);

    protected:
    static const char* const _xsde_NoteType_list_pskel_enums_[3UL];
  };

  class NoteType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NoteType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NoteType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NoteType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NoteType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NoteType_pskel* NoteType_impl_;
    NoteType_pskel (NoteType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NoteType_list_pskel* value_parser_;
  };

  class RemittanceOutcome_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RemittanceOutcome_list ();

    // Constructor.
    //
    RemittanceOutcome_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RemittanceOutcome_list_pskel* RemittanceOutcome_list_impl_;
    RemittanceOutcome_list_pskel (RemittanceOutcome_list_pskel*, void*);

    protected:
    static const char* const _xsde_RemittanceOutcome_list_pskel_enums_[4UL];
  };

  class RemittanceOutcome_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RemittanceOutcome ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RemittanceOutcome_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RemittanceOutcome_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RemittanceOutcome_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RemittanceOutcome_pskel* RemittanceOutcome_impl_;
    RemittanceOutcome_pskel (RemittanceOutcome_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RemittanceOutcome_list_pskel* value_parser_;
  };

  class ConceptMapEquivalence_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConceptMapEquivalence_list ();

    // Constructor.
    //
    ConceptMapEquivalence_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMapEquivalence_list_pskel* ConceptMapEquivalence_list_impl_;
    ConceptMapEquivalence_list_pskel (ConceptMapEquivalence_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConceptMapEquivalence_list_pskel_enums_[10UL];
  };

  class ConceptMapEquivalence_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConceptMapEquivalence ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConceptMapEquivalence_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConceptMapEquivalence_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMapEquivalence_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMapEquivalence_pskel* ConceptMapEquivalence_impl_;
    ConceptMapEquivalence_pskel (ConceptMapEquivalence_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConceptMapEquivalence_list_pskel* value_parser_;
  };

  class DocumentReferenceStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DocumentReferenceStatus_list ();

    // Constructor.
    //
    DocumentReferenceStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReferenceStatus_list_pskel* DocumentReferenceStatus_list_impl_;
    DocumentReferenceStatus_list_pskel (DocumentReferenceStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_DocumentReferenceStatus_list_pskel_enums_[3UL];
  };

  class DocumentReferenceStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DocumentReferenceStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DocumentReferenceStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DocumentReferenceStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentReferenceStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReferenceStatus_pskel* DocumentReferenceStatus_impl_;
    DocumentReferenceStatus_pskel (DocumentReferenceStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DocumentReferenceStatus_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // FHIR_BASE_PSKEL_HXX
