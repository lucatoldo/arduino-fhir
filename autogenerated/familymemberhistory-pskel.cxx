// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "familymemberhistory-pskel.hxx"

namespace fhir
{
  // FamilyMemberHistory_pskel
  //

  void FamilyMemberHistory_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  status_parser (::fhir::FamilyHistoryStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  dataAbsentReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->dataAbsentReason_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  relationship_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  sex_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->sex_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  bornPeriod_parser (::fhir::Period_pskel& p)
  {
    this->bornPeriod_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  bornDate_parser (::fhir::date_pskel& p)
  {
    this->bornDate_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  bornString_parser (::fhir::string_pskel& p)
  {
    this->bornString_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  ageAge_parser (::fhir::Age_pskel& p)
  {
    this->ageAge_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  ageRange_parser (::fhir::Range_pskel& p)
  {
    this->ageRange_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  ageString_parser (::fhir::string_pskel& p)
  {
    this->ageString_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  estimatedAge_parser (::fhir::boolean_pskel& p)
  {
    this->estimatedAge_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  deceasedBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->deceasedBoolean_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  deceasedAge_parser (::fhir::Age_pskel& p)
  {
    this->deceasedAge_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  deceasedRange_parser (::fhir::Range_pskel& p)
  {
    this->deceasedRange_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  deceasedDate_parser (::fhir::date_pskel& p)
  {
    this->deceasedDate_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  deceasedString_parser (::fhir::string_pskel& p)
  {
    this->deceasedString_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  condition_parser (::fhir::FamilyMemberHistory_Condition_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void FamilyMemberHistory_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::FamilyHistoryStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& dataAbsentReason,
           ::fhir::Reference_pskel& patient,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& name,
           ::fhir::CodeableConcept_pskel& relationship,
           ::fhir::CodeableConcept_pskel& sex,
           ::fhir::Period_pskel& bornPeriod,
           ::fhir::date_pskel& bornDate,
           ::fhir::string_pskel& bornString,
           ::fhir::Age_pskel& ageAge,
           ::fhir::Range_pskel& ageRange,
           ::fhir::string_pskel& ageString,
           ::fhir::boolean_pskel& estimatedAge,
           ::fhir::boolean_pskel& deceasedBoolean,
           ::fhir::Age_pskel& deceasedAge,
           ::fhir::Range_pskel& deceasedRange,
           ::fhir::date_pskel& deceasedDate,
           ::fhir::string_pskel& deceasedString,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Annotation_pskel& note,
           ::fhir::FamilyMemberHistory_Condition_pskel& condition)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->status_parser_ = &status;
    this->dataAbsentReason_parser_ = &dataAbsentReason;
    this->patient_parser_ = &patient;
    this->date_parser_ = &date;
    this->name_parser_ = &name;
    this->relationship_parser_ = &relationship;
    this->sex_parser_ = &sex;
    this->bornPeriod_parser_ = &bornPeriod;
    this->bornDate_parser_ = &bornDate;
    this->bornString_parser_ = &bornString;
    this->ageAge_parser_ = &ageAge;
    this->ageRange_parser_ = &ageRange;
    this->ageString_parser_ = &ageString;
    this->estimatedAge_parser_ = &estimatedAge;
    this->deceasedBoolean_parser_ = &deceasedBoolean;
    this->deceasedAge_parser_ = &deceasedAge;
    this->deceasedRange_parser_ = &deceasedRange;
    this->deceasedDate_parser_ = &deceasedDate;
    this->deceasedString_parser_ = &deceasedString;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->note_parser_ = &note;
    this->condition_parser_ = &condition;
  }

  FamilyMemberHistory_pskel::
  FamilyMemberHistory_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    FamilyMemberHistory_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    status_parser_ (0),
    dataAbsentReason_parser_ (0),
    patient_parser_ (0),
    date_parser_ (0),
    name_parser_ (0),
    relationship_parser_ (0),
    sex_parser_ (0),
    bornPeriod_parser_ (0),
    bornDate_parser_ (0),
    bornString_parser_ (0),
    ageAge_parser_ (0),
    ageRange_parser_ (0),
    ageString_parser_ (0),
    estimatedAge_parser_ (0),
    deceasedBoolean_parser_ (0),
    deceasedAge_parser_ (0),
    deceasedRange_parser_ (0),
    deceasedDate_parser_ (0),
    deceasedString_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    condition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  FamilyMemberHistory_pskel::
  FamilyMemberHistory_pskel (FamilyMemberHistory_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    FamilyMemberHistory_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    status_parser_ (0),
    dataAbsentReason_parser_ (0),
    patient_parser_ (0),
    date_parser_ (0),
    name_parser_ (0),
    relationship_parser_ (0),
    sex_parser_ (0),
    bornPeriod_parser_ (0),
    bornDate_parser_ (0),
    bornString_parser_ (0),
    ageAge_parser_ (0),
    ageRange_parser_ (0),
    ageString_parser_ (0),
    estimatedAge_parser_ (0),
    deceasedBoolean_parser_ (0),
    deceasedAge_parser_ (0),
    deceasedRange_parser_ (0),
    deceasedDate_parser_ (0),
    deceasedString_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    condition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // FamilyMemberHistory_Condition_pskel
  //

  void FamilyMemberHistory_Condition_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  outcome_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  contributedToDeath_parser (::fhir::boolean_pskel& p)
  {
    this->contributedToDeath_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetAge_parser (::fhir::Age_pskel& p)
  {
    this->onsetAge_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetRange_parser (::fhir::Range_pskel& p)
  {
    this->onsetRange_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetPeriod_parser (::fhir::Period_pskel& p)
  {
    this->onsetPeriod_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetString_parser (::fhir::string_pskel& p)
  {
    this->onsetString_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void FamilyMemberHistory_Condition_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& outcome,
           ::fhir::boolean_pskel& contributedToDeath,
           ::fhir::Age_pskel& onsetAge,
           ::fhir::Range_pskel& onsetRange,
           ::fhir::Period_pskel& onsetPeriod,
           ::fhir::string_pskel& onsetString,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->outcome_parser_ = &outcome;
    this->contributedToDeath_parser_ = &contributedToDeath;
    this->onsetAge_parser_ = &onsetAge;
    this->onsetRange_parser_ = &onsetRange;
    this->onsetPeriod_parser_ = &onsetPeriod;
    this->onsetString_parser_ = &onsetString;
    this->note_parser_ = &note;
  }

  FamilyMemberHistory_Condition_pskel::
  FamilyMemberHistory_Condition_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    FamilyMemberHistory_Condition_impl_ (0),
    code_parser_ (0),
    outcome_parser_ (0),
    contributedToDeath_parser_ (0),
    onsetAge_parser_ (0),
    onsetRange_parser_ (0),
    onsetPeriod_parser_ (0),
    onsetString_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  FamilyMemberHistory_Condition_pskel::
  FamilyMemberHistory_Condition_pskel (FamilyMemberHistory_Condition_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    FamilyMemberHistory_Condition_impl_ (impl),
    code_parser_ (0),
    outcome_parser_ (0),
    contributedToDeath_parser_ (0),
    onsetAge_parser_ (0),
    onsetRange_parser_ (0),
    onsetPeriod_parser_ (0),
    onsetString_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // FamilyHistoryStatus_list_pskel
  //

  FamilyHistoryStatus_list_pskel::
  FamilyHistoryStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    FamilyHistoryStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_FamilyHistoryStatus_list_pskel_enums_, 4UL);
  }

  FamilyHistoryStatus_list_pskel::
  FamilyHistoryStatus_list_pskel (FamilyHistoryStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    FamilyHistoryStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_FamilyHistoryStatus_list_pskel_enums_, 4UL);
  }

  // FamilyHistoryStatus_pskel
  //

  void FamilyHistoryStatus_pskel::
  value_parser (::fhir::FamilyHistoryStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void FamilyHistoryStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::FamilyHistoryStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  FamilyHistoryStatus_pskel::
  FamilyHistoryStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    FamilyHistoryStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  FamilyHistoryStatus_pskel::
  FamilyHistoryStatus_pskel (FamilyHistoryStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    FamilyHistoryStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // FamilyMemberHistory_pskel
  //

  void FamilyMemberHistory_pskel::
  identifier ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->identifier ();
  }

  void FamilyMemberHistory_pskel::
  instantiatesCanonical ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->instantiatesCanonical ();
  }

  void FamilyMemberHistory_pskel::
  instantiatesUri ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->instantiatesUri ();
  }

  void FamilyMemberHistory_pskel::
  status ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->status ();
  }

  void FamilyMemberHistory_pskel::
  dataAbsentReason ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->dataAbsentReason ();
  }

  void FamilyMemberHistory_pskel::
  patient ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->patient ();
  }

  void FamilyMemberHistory_pskel::
  date ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->date ();
  }

  void FamilyMemberHistory_pskel::
  name ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->name ();
  }

  void FamilyMemberHistory_pskel::
  relationship ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->relationship ();
  }

  void FamilyMemberHistory_pskel::
  sex ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->sex ();
  }

  void FamilyMemberHistory_pskel::
  bornPeriod ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->bornPeriod ();
  }

  void FamilyMemberHistory_pskel::
  bornDate ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->bornDate ();
  }

  void FamilyMemberHistory_pskel::
  bornString ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->bornString ();
  }

  void FamilyMemberHistory_pskel::
  ageAge ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->ageAge ();
  }

  void FamilyMemberHistory_pskel::
  ageRange ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->ageRange ();
  }

  void FamilyMemberHistory_pskel::
  ageString ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->ageString ();
  }

  void FamilyMemberHistory_pskel::
  estimatedAge ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->estimatedAge ();
  }

  void FamilyMemberHistory_pskel::
  deceasedBoolean ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->deceasedBoolean ();
  }

  void FamilyMemberHistory_pskel::
  deceasedAge ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->deceasedAge ();
  }

  void FamilyMemberHistory_pskel::
  deceasedRange ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->deceasedRange ();
  }

  void FamilyMemberHistory_pskel::
  deceasedDate ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->deceasedDate ();
  }

  void FamilyMemberHistory_pskel::
  deceasedString ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->deceasedString ();
  }

  void FamilyMemberHistory_pskel::
  reasonCode ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->reasonCode ();
  }

  void FamilyMemberHistory_pskel::
  reasonReference ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->reasonReference ();
  }

  void FamilyMemberHistory_pskel::
  note ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->note ();
  }

  void FamilyMemberHistory_pskel::
  condition ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->condition ();
  }

  void FamilyMemberHistory_pskel::
  post_FamilyMemberHistory ()
  {
    if (this->FamilyMemberHistory_impl_)
      this->FamilyMemberHistory_impl_->post_FamilyMemberHistory ();
    else
      post_DomainResource ();
  }

  void FamilyMemberHistory_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->dataAbsentReason_parser_)
      this->dataAbsentReason_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->sex_parser_)
      this->sex_parser_->_reset ();

    if (this->bornPeriod_parser_)
      this->bornPeriod_parser_->_reset ();

    if (this->bornDate_parser_)
      this->bornDate_parser_->_reset ();

    if (this->bornString_parser_)
      this->bornString_parser_->_reset ();

    if (this->ageAge_parser_)
      this->ageAge_parser_->_reset ();

    if (this->ageRange_parser_)
      this->ageRange_parser_->_reset ();

    if (this->ageString_parser_)
      this->ageString_parser_->_reset ();

    if (this->estimatedAge_parser_)
      this->estimatedAge_parser_->_reset ();

    if (this->deceasedBoolean_parser_)
      this->deceasedBoolean_parser_->_reset ();

    if (this->deceasedAge_parser_)
      this->deceasedAge_parser_->_reset ();

    if (this->deceasedRange_parser_)
      this->deceasedRange_parser_->_reset ();

    if (this->deceasedDate_parser_)
      this->deceasedDate_parser_->_reset ();

    if (this->deceasedString_parser_)
      this->deceasedString_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    this->resetting_ = false;
  }

  // FamilyMemberHistory_Condition_pskel
  //

  void FamilyMemberHistory_Condition_pskel::
  code ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->code ();
  }

  void FamilyMemberHistory_Condition_pskel::
  outcome ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->outcome ();
  }

  void FamilyMemberHistory_Condition_pskel::
  contributedToDeath ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->contributedToDeath ();
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetAge ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->onsetAge ();
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetRange ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->onsetRange ();
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetPeriod ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->onsetPeriod ();
  }

  void FamilyMemberHistory_Condition_pskel::
  onsetString ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->onsetString ();
  }

  void FamilyMemberHistory_Condition_pskel::
  note ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->note ();
  }

  void FamilyMemberHistory_Condition_pskel::
  post_FamilyMemberHistory_Condition ()
  {
    if (this->FamilyMemberHistory_Condition_impl_)
      this->FamilyMemberHistory_Condition_impl_->post_FamilyMemberHistory_Condition ();
    else
      post_BackboneElement ();
  }

  void FamilyMemberHistory_Condition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->contributedToDeath_parser_)
      this->contributedToDeath_parser_->_reset ();

    if (this->onsetAge_parser_)
      this->onsetAge_parser_->_reset ();

    if (this->onsetRange_parser_)
      this->onsetRange_parser_->_reset ();

    if (this->onsetPeriod_parser_)
      this->onsetPeriod_parser_->_reset ();

    if (this->onsetString_parser_)
      this->onsetString_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // FamilyHistoryStatus_list_pskel
  //

  void FamilyHistoryStatus_list_pskel::
  post_FamilyHistoryStatus_list ()
  {
    if (this->FamilyHistoryStatus_list_impl_)
      this->FamilyHistoryStatus_list_impl_->post_FamilyHistoryStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const FamilyHistoryStatus_list_pskel::_xsde_FamilyHistoryStatus_list_pskel_enums_[4UL] = 
  {
    "completed",
    "entered-in-error",
    "health-unknown",
    "partial"
  };

  // FamilyHistoryStatus_pskel
  //

  void FamilyHistoryStatus_pskel::
  value ()
  {
    if (this->FamilyHistoryStatus_impl_)
      this->FamilyHistoryStatus_impl_->value ();
  }

  void FamilyHistoryStatus_pskel::
  post_FamilyHistoryStatus ()
  {
    if (this->FamilyHistoryStatus_impl_)
      this->FamilyHistoryStatus_impl_->post_FamilyHistoryStatus ();
    else
      post_Element ();
  }

  void FamilyHistoryStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for FamilyMemberHistory_pskel.
  //
  bool FamilyMemberHistory_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &FamilyMemberHistory_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool FamilyMemberHistory_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void FamilyMemberHistory_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void FamilyMemberHistory_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void FamilyMemberHistory_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FamilyHistoryStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "dataAbsentReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dataAbsentReason_parser_)
            {
              this->dataAbsentReason_parser_->pre ();
              ctx.nested_parser (this->dataAbsentReason_parser_);
            }
          }
          else
          {
            if (this->dataAbsentReason_parser_ != 0)
            {
              this->dataAbsentReason_parser_->post_CodeableConcept ();
              this->dataAbsentReason ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_CodeableConcept ();
              this->relationship ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "sex" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sex_parser_)
            {
              this->sex_parser_->pre ();
              ctx.nested_parser (this->sex_parser_);
            }
          }
          else
          {
            if (this->sex_parser_ != 0)
            {
              this->sex_parser_->post_CodeableConcept ();
              this->sex ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "bornPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bornPeriod_parser_)
            {
              this->bornPeriod_parser_->pre ();
              ctx.nested_parser (this->bornPeriod_parser_);
            }
          }
          else
          {
            if (this->bornPeriod_parser_ != 0)
            {
              this->bornPeriod_parser_->post_Period ();
              this->bornPeriod ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "bornDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bornDate_parser_)
            {
              this->bornDate_parser_->pre ();
              ctx.nested_parser (this->bornDate_parser_);
            }
          }
          else
          {
            if (this->bornDate_parser_ != 0)
            {
              this->bornDate_parser_->post_date ();
              this->bornDate ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "bornString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bornString_parser_)
            {
              this->bornString_parser_->pre ();
              ctx.nested_parser (this->bornString_parser_);
            }
          }
          else
          {
            if (this->bornString_parser_ != 0)
            {
              this->bornString_parser_->post_string ();
              this->bornString ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "ageAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ageAge_parser_)
            {
              this->ageAge_parser_->pre ();
              ctx.nested_parser (this->ageAge_parser_);
            }
          }
          else
          {
            if (this->ageAge_parser_ != 0)
            {
              this->ageAge_parser_->post_Age ();
              this->ageAge ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "ageRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ageRange_parser_)
            {
              this->ageRange_parser_->pre ();
              ctx.nested_parser (this->ageRange_parser_);
            }
          }
          else
          {
            if (this->ageRange_parser_ != 0)
            {
              this->ageRange_parser_->post_Range ();
              this->ageRange ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "ageString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ageString_parser_)
            {
              this->ageString_parser_->pre ();
              ctx.nested_parser (this->ageString_parser_);
            }
          }
          else
          {
            if (this->ageString_parser_ != 0)
            {
              this->ageString_parser_->post_string ();
              this->ageString ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "estimatedAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->estimatedAge_parser_)
            {
              this->estimatedAge_parser_->pre ();
              ctx.nested_parser (this->estimatedAge_parser_);
            }
          }
          else
          {
            if (this->estimatedAge_parser_ != 0)
            {
              this->estimatedAge_parser_->post_boolean ();
              this->estimatedAge ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "deceasedBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deceasedBoolean_parser_)
            {
              this->deceasedBoolean_parser_->pre ();
              ctx.nested_parser (this->deceasedBoolean_parser_);
            }
          }
          else
          {
            if (this->deceasedBoolean_parser_ != 0)
            {
              this->deceasedBoolean_parser_->post_boolean ();
              this->deceasedBoolean ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "deceasedAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deceasedAge_parser_)
            {
              this->deceasedAge_parser_->pre ();
              ctx.nested_parser (this->deceasedAge_parser_);
            }
          }
          else
          {
            if (this->deceasedAge_parser_ != 0)
            {
              this->deceasedAge_parser_->post_Age ();
              this->deceasedAge ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "deceasedRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deceasedRange_parser_)
            {
              this->deceasedRange_parser_->pre ();
              ctx.nested_parser (this->deceasedRange_parser_);
            }
          }
          else
          {
            if (this->deceasedRange_parser_ != 0)
            {
              this->deceasedRange_parser_->post_Range ();
              this->deceasedRange ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "deceasedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deceasedDate_parser_)
            {
              this->deceasedDate_parser_->pre ();
              ctx.nested_parser (this->deceasedDate_parser_);
            }
          }
          else
          {
            if (this->deceasedDate_parser_ != 0)
            {
              this->deceasedDate_parser_->post_date ();
              this->deceasedDate ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "deceasedString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deceasedString_parser_)
            {
              this->deceasedString_parser_->pre ();
              ctx.nested_parser (this->deceasedString_parser_);
            }
          }
          else
          {
            if (this->deceasedString_parser_ != 0)
            {
              this->deceasedString_parser_->post_string ();
              this->deceasedString ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_FamilyMemberHistory_Condition ();
              this->condition ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for FamilyMemberHistory_Condition_pskel.
  //
  bool FamilyMemberHistory_Condition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &FamilyMemberHistory_Condition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool FamilyMemberHistory_Condition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void FamilyMemberHistory_Condition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void FamilyMemberHistory_Condition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void FamilyMemberHistory_Condition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_CodeableConcept ();
              this->outcome ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "contributedToDeath" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contributedToDeath_parser_)
            {
              this->contributedToDeath_parser_->pre ();
              ctx.nested_parser (this->contributedToDeath_parser_);
            }
          }
          else
          {
            if (this->contributedToDeath_parser_ != 0)
            {
              this->contributedToDeath_parser_->post_boolean ();
              this->contributedToDeath ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "onsetAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetAge_parser_)
            {
              this->onsetAge_parser_->pre ();
              ctx.nested_parser (this->onsetAge_parser_);
            }
          }
          else
          {
            if (this->onsetAge_parser_ != 0)
            {
              this->onsetAge_parser_->post_Age ();
              this->onsetAge ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "onsetRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetRange_parser_)
            {
              this->onsetRange_parser_->pre ();
              ctx.nested_parser (this->onsetRange_parser_);
            }
          }
          else
          {
            if (this->onsetRange_parser_ != 0)
            {
              this->onsetRange_parser_->post_Range ();
              this->onsetRange ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "onsetPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetPeriod_parser_)
            {
              this->onsetPeriod_parser_->pre ();
              ctx.nested_parser (this->onsetPeriod_parser_);
            }
          }
          else
          {
            if (this->onsetPeriod_parser_ != 0)
            {
              this->onsetPeriod_parser_->post_Period ();
              this->onsetPeriod ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "onsetString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetString_parser_)
            {
              this->onsetString_parser_->pre ();
              ctx.nested_parser (this->onsetString_parser_);
            }
          }
          else
          {
            if (this->onsetString_parser_ != 0)
            {
              this->onsetString_parser_->post_string ();
              this->onsetString ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for FamilyHistoryStatus_pskel.
  //
  bool FamilyHistoryStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_FamilyHistoryStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

