// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "observationdefinition-pskel.hxx"

namespace fhir
{
  // ObservationDefinition_pskel
  //

  void ObservationDefinition_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  permittedDataType_parser (::fhir::ObservationDataType_pskel& p)
  {
    this->permittedDataType_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  multipleResultsAllowed_parser (::fhir::boolean_pskel& p)
  {
    this->multipleResultsAllowed_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  method_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->method_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  preferredReportName_parser (::fhir::string_pskel& p)
  {
    this->preferredReportName_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  quantitativeDetails_parser (::fhir::ObservationDefinition_QuantitativeDetails_pskel& p)
  {
    this->quantitativeDetails_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  qualifiedInterval_parser (::fhir::ObservationDefinition_QualifiedInterval_pskel& p)
  {
    this->qualifiedInterval_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  validCodedValueSet_parser (::fhir::Reference_pskel& p)
  {
    this->validCodedValueSet_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  normalCodedValueSet_parser (::fhir::Reference_pskel& p)
  {
    this->normalCodedValueSet_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  abnormalCodedValueSet_parser (::fhir::Reference_pskel& p)
  {
    this->abnormalCodedValueSet_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  criticalCodedValueSet_parser (::fhir::Reference_pskel& p)
  {
    this->criticalCodedValueSet_parser_ = &p;
  }

  void ObservationDefinition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::ObservationDataType_pskel& permittedDataType,
           ::fhir::boolean_pskel& multipleResultsAllowed,
           ::fhir::CodeableConcept_pskel& method,
           ::fhir::string_pskel& preferredReportName,
           ::fhir::ObservationDefinition_QuantitativeDetails_pskel& quantitativeDetails,
           ::fhir::ObservationDefinition_QualifiedInterval_pskel& qualifiedInterval,
           ::fhir::Reference_pskel& validCodedValueSet,
           ::fhir::Reference_pskel& normalCodedValueSet,
           ::fhir::Reference_pskel& abnormalCodedValueSet,
           ::fhir::Reference_pskel& criticalCodedValueSet)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->code_parser_ = &code;
    this->identifier_parser_ = &identifier;
    this->permittedDataType_parser_ = &permittedDataType;
    this->multipleResultsAllowed_parser_ = &multipleResultsAllowed;
    this->method_parser_ = &method;
    this->preferredReportName_parser_ = &preferredReportName;
    this->quantitativeDetails_parser_ = &quantitativeDetails;
    this->qualifiedInterval_parser_ = &qualifiedInterval;
    this->validCodedValueSet_parser_ = &validCodedValueSet;
    this->normalCodedValueSet_parser_ = &normalCodedValueSet;
    this->abnormalCodedValueSet_parser_ = &abnormalCodedValueSet;
    this->criticalCodedValueSet_parser_ = &criticalCodedValueSet;
  }

  ObservationDefinition_pskel::
  ObservationDefinition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ObservationDefinition_impl_ (0),
    category_parser_ (0),
    code_parser_ (0),
    identifier_parser_ (0),
    permittedDataType_parser_ (0),
    multipleResultsAllowed_parser_ (0),
    method_parser_ (0),
    preferredReportName_parser_ (0),
    quantitativeDetails_parser_ (0),
    qualifiedInterval_parser_ (0),
    validCodedValueSet_parser_ (0),
    normalCodedValueSet_parser_ (0),
    abnormalCodedValueSet_parser_ (0),
    criticalCodedValueSet_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ObservationDefinition_pskel::
  ObservationDefinition_pskel (ObservationDefinition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ObservationDefinition_impl_ (impl),
    category_parser_ (0),
    code_parser_ (0),
    identifier_parser_ (0),
    permittedDataType_parser_ (0),
    multipleResultsAllowed_parser_ (0),
    method_parser_ (0),
    preferredReportName_parser_ (0),
    quantitativeDetails_parser_ (0),
    qualifiedInterval_parser_ (0),
    validCodedValueSet_parser_ (0),
    normalCodedValueSet_parser_ (0),
    abnormalCodedValueSet_parser_ (0),
    criticalCodedValueSet_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ObservationDefinition_QuantitativeDetails_pskel
  //

  void ObservationDefinition_QuantitativeDetails_pskel::
  customaryUnit_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->customaryUnit_parser_ = &p;
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  unit_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->unit_parser_ = &p;
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  conversionFactor_parser (::fhir::decimal_pskel& p)
  {
    this->conversionFactor_parser_ = &p;
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  decimalPrecision_parser (::fhir::integer_pskel& p)
  {
    this->decimalPrecision_parser_ = &p;
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& customaryUnit,
           ::fhir::CodeableConcept_pskel& unit,
           ::fhir::decimal_pskel& conversionFactor,
           ::fhir::integer_pskel& decimalPrecision)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->customaryUnit_parser_ = &customaryUnit;
    this->unit_parser_ = &unit;
    this->conversionFactor_parser_ = &conversionFactor;
    this->decimalPrecision_parser_ = &decimalPrecision;
  }

  ObservationDefinition_QuantitativeDetails_pskel::
  ObservationDefinition_QuantitativeDetails_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ObservationDefinition_QuantitativeDetails_impl_ (0),
    customaryUnit_parser_ (0),
    unit_parser_ (0),
    conversionFactor_parser_ (0),
    decimalPrecision_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ObservationDefinition_QuantitativeDetails_pskel::
  ObservationDefinition_QuantitativeDetails_pskel (ObservationDefinition_QuantitativeDetails_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ObservationDefinition_QuantitativeDetails_impl_ (impl),
    customaryUnit_parser_ (0),
    unit_parser_ (0),
    conversionFactor_parser_ (0),
    decimalPrecision_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ObservationDefinition_QualifiedInterval_pskel
  //

  void ObservationDefinition_QualifiedInterval_pskel::
  category_parser (::fhir::ObservationRangeCategory_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  range_parser (::fhir::Range_pskel& p)
  {
    this->range_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  context_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  appliesTo_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->appliesTo_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  gender_parser (::fhir::AdministrativeGender_pskel& p)
  {
    this->gender_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  age_parser (::fhir::Range_pskel& p)
  {
    this->age_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  gestationalAge_parser (::fhir::Range_pskel& p)
  {
    this->gestationalAge_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  condition_parser (::fhir::string_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ObservationRangeCategory_pskel& category,
           ::fhir::Range_pskel& range,
           ::fhir::CodeableConcept_pskel& context,
           ::fhir::CodeableConcept_pskel& appliesTo,
           ::fhir::AdministrativeGender_pskel& gender,
           ::fhir::Range_pskel& age,
           ::fhir::Range_pskel& gestationalAge,
           ::fhir::string_pskel& condition)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->range_parser_ = &range;
    this->context_parser_ = &context;
    this->appliesTo_parser_ = &appliesTo;
    this->gender_parser_ = &gender;
    this->age_parser_ = &age;
    this->gestationalAge_parser_ = &gestationalAge;
    this->condition_parser_ = &condition;
  }

  ObservationDefinition_QualifiedInterval_pskel::
  ObservationDefinition_QualifiedInterval_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ObservationDefinition_QualifiedInterval_impl_ (0),
    category_parser_ (0),
    range_parser_ (0),
    context_parser_ (0),
    appliesTo_parser_ (0),
    gender_parser_ (0),
    age_parser_ (0),
    gestationalAge_parser_ (0),
    condition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ObservationDefinition_QualifiedInterval_pskel::
  ObservationDefinition_QualifiedInterval_pskel (ObservationDefinition_QualifiedInterval_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ObservationDefinition_QualifiedInterval_impl_ (impl),
    category_parser_ (0),
    range_parser_ (0),
    context_parser_ (0),
    appliesTo_parser_ (0),
    gender_parser_ (0),
    age_parser_ (0),
    gestationalAge_parser_ (0),
    condition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ObservationDataType_list_pskel
  //

  ObservationDataType_list_pskel::
  ObservationDataType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ObservationDataType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ObservationDataType_list_pskel_enums_, 11UL);
  }

  ObservationDataType_list_pskel::
  ObservationDataType_list_pskel (ObservationDataType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ObservationDataType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ObservationDataType_list_pskel_enums_, 11UL);
  }

  // ObservationDataType_pskel
  //

  void ObservationDataType_pskel::
  value_parser (::fhir::ObservationDataType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ObservationDataType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ObservationDataType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ObservationDataType_pskel::
  ObservationDataType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ObservationDataType_impl_ (0),
    value_parser_ (0)
  {
  }

  ObservationDataType_pskel::
  ObservationDataType_pskel (ObservationDataType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ObservationDataType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ObservationRangeCategory_list_pskel
  //

  ObservationRangeCategory_list_pskel::
  ObservationRangeCategory_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ObservationRangeCategory_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ObservationRangeCategory_list_pskel_enums_, 3UL);
  }

  ObservationRangeCategory_list_pskel::
  ObservationRangeCategory_list_pskel (ObservationRangeCategory_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ObservationRangeCategory_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ObservationRangeCategory_list_pskel_enums_, 3UL);
  }

  // ObservationRangeCategory_pskel
  //

  void ObservationRangeCategory_pskel::
  value_parser (::fhir::ObservationRangeCategory_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ObservationRangeCategory_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ObservationRangeCategory_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ObservationRangeCategory_pskel::
  ObservationRangeCategory_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ObservationRangeCategory_impl_ (0),
    value_parser_ (0)
  {
  }

  ObservationRangeCategory_pskel::
  ObservationRangeCategory_pskel (ObservationRangeCategory_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ObservationRangeCategory_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ObservationDefinition_pskel
  //

  void ObservationDefinition_pskel::
  category ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->category ();
  }

  void ObservationDefinition_pskel::
  code ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->code ();
  }

  void ObservationDefinition_pskel::
  identifier ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->identifier ();
  }

  void ObservationDefinition_pskel::
  permittedDataType ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->permittedDataType ();
  }

  void ObservationDefinition_pskel::
  multipleResultsAllowed ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->multipleResultsAllowed ();
  }

  void ObservationDefinition_pskel::
  method ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->method ();
  }

  void ObservationDefinition_pskel::
  preferredReportName ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->preferredReportName ();
  }

  void ObservationDefinition_pskel::
  quantitativeDetails ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->quantitativeDetails ();
  }

  void ObservationDefinition_pskel::
  qualifiedInterval ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->qualifiedInterval ();
  }

  void ObservationDefinition_pskel::
  validCodedValueSet ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->validCodedValueSet ();
  }

  void ObservationDefinition_pskel::
  normalCodedValueSet ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->normalCodedValueSet ();
  }

  void ObservationDefinition_pskel::
  abnormalCodedValueSet ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->abnormalCodedValueSet ();
  }

  void ObservationDefinition_pskel::
  criticalCodedValueSet ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->criticalCodedValueSet ();
  }

  void ObservationDefinition_pskel::
  post_ObservationDefinition ()
  {
    if (this->ObservationDefinition_impl_)
      this->ObservationDefinition_impl_->post_ObservationDefinition ();
    else
      post_DomainResource ();
  }

  void ObservationDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->permittedDataType_parser_)
      this->permittedDataType_parser_->_reset ();

    if (this->multipleResultsAllowed_parser_)
      this->multipleResultsAllowed_parser_->_reset ();

    if (this->method_parser_)
      this->method_parser_->_reset ();

    if (this->preferredReportName_parser_)
      this->preferredReportName_parser_->_reset ();

    if (this->quantitativeDetails_parser_)
      this->quantitativeDetails_parser_->_reset ();

    if (this->qualifiedInterval_parser_)
      this->qualifiedInterval_parser_->_reset ();

    if (this->validCodedValueSet_parser_)
      this->validCodedValueSet_parser_->_reset ();

    if (this->normalCodedValueSet_parser_)
      this->normalCodedValueSet_parser_->_reset ();

    if (this->abnormalCodedValueSet_parser_)
      this->abnormalCodedValueSet_parser_->_reset ();

    if (this->criticalCodedValueSet_parser_)
      this->criticalCodedValueSet_parser_->_reset ();

    this->resetting_ = false;
  }

  // ObservationDefinition_QuantitativeDetails_pskel
  //

  void ObservationDefinition_QuantitativeDetails_pskel::
  customaryUnit ()
  {
    if (this->ObservationDefinition_QuantitativeDetails_impl_)
      this->ObservationDefinition_QuantitativeDetails_impl_->customaryUnit ();
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  unit ()
  {
    if (this->ObservationDefinition_QuantitativeDetails_impl_)
      this->ObservationDefinition_QuantitativeDetails_impl_->unit ();
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  conversionFactor ()
  {
    if (this->ObservationDefinition_QuantitativeDetails_impl_)
      this->ObservationDefinition_QuantitativeDetails_impl_->conversionFactor ();
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  decimalPrecision ()
  {
    if (this->ObservationDefinition_QuantitativeDetails_impl_)
      this->ObservationDefinition_QuantitativeDetails_impl_->decimalPrecision ();
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  post_ObservationDefinition_QuantitativeDetails ()
  {
    if (this->ObservationDefinition_QuantitativeDetails_impl_)
      this->ObservationDefinition_QuantitativeDetails_impl_->post_ObservationDefinition_QuantitativeDetails ();
    else
      post_BackboneElement ();
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->customaryUnit_parser_)
      this->customaryUnit_parser_->_reset ();

    if (this->unit_parser_)
      this->unit_parser_->_reset ();

    if (this->conversionFactor_parser_)
      this->conversionFactor_parser_->_reset ();

    if (this->decimalPrecision_parser_)
      this->decimalPrecision_parser_->_reset ();

    this->resetting_ = false;
  }

  // ObservationDefinition_QualifiedInterval_pskel
  //

  void ObservationDefinition_QualifiedInterval_pskel::
  category ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->category ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  range ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->range ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  context ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->context ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  appliesTo ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->appliesTo ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  gender ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->gender ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  age ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->age ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  gestationalAge ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->gestationalAge ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  condition ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->condition ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  post_ObservationDefinition_QualifiedInterval ()
  {
    if (this->ObservationDefinition_QualifiedInterval_impl_)
      this->ObservationDefinition_QualifiedInterval_impl_->post_ObservationDefinition_QualifiedInterval ();
    else
      post_BackboneElement ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->range_parser_)
      this->range_parser_->_reset ();

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->appliesTo_parser_)
      this->appliesTo_parser_->_reset ();

    if (this->gender_parser_)
      this->gender_parser_->_reset ();

    if (this->age_parser_)
      this->age_parser_->_reset ();

    if (this->gestationalAge_parser_)
      this->gestationalAge_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    this->resetting_ = false;
  }

  // ObservationDataType_list_pskel
  //

  void ObservationDataType_list_pskel::
  post_ObservationDataType_list ()
  {
    if (this->ObservationDataType_list_impl_)
      this->ObservationDataType_list_impl_->post_ObservationDataType_list ();
    else
      post_code_primitive ();
  }

  const char* const ObservationDataType_list_pskel::_xsde_ObservationDataType_list_pskel_enums_[11UL] = 
  {
    "CodeableConcept",
    "Period",
    "Quantity",
    "Range",
    "Ratio",
    "SampledData",
    "boolean",
    "dateTime",
    "integer",
    "string",
    "time"
  };

  // ObservationDataType_pskel
  //

  void ObservationDataType_pskel::
  value ()
  {
    if (this->ObservationDataType_impl_)
      this->ObservationDataType_impl_->value ();
  }

  void ObservationDataType_pskel::
  post_ObservationDataType ()
  {
    if (this->ObservationDataType_impl_)
      this->ObservationDataType_impl_->post_ObservationDataType ();
    else
      post_Element ();
  }

  void ObservationDataType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ObservationRangeCategory_list_pskel
  //

  void ObservationRangeCategory_list_pskel::
  post_ObservationRangeCategory_list ()
  {
    if (this->ObservationRangeCategory_list_impl_)
      this->ObservationRangeCategory_list_impl_->post_ObservationRangeCategory_list ();
    else
      post_code_primitive ();
  }

  const char* const ObservationRangeCategory_list_pskel::_xsde_ObservationRangeCategory_list_pskel_enums_[3UL] = 
  {
    "absolute",
    "critical",
    "reference"
  };

  // ObservationRangeCategory_pskel
  //

  void ObservationRangeCategory_pskel::
  value ()
  {
    if (this->ObservationRangeCategory_impl_)
      this->ObservationRangeCategory_impl_->value ();
  }

  void ObservationRangeCategory_pskel::
  post_ObservationRangeCategory ()
  {
    if (this->ObservationRangeCategory_impl_)
      this->ObservationRangeCategory_impl_->post_ObservationRangeCategory ();
    else
      post_Element ();
  }

  void ObservationRangeCategory_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ObservationDefinition_pskel.
  //
  bool ObservationDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ObservationDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ObservationDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ObservationDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ObservationDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ObservationDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "permittedDataType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->permittedDataType_parser_)
            {
              this->permittedDataType_parser_->pre ();
              ctx.nested_parser (this->permittedDataType_parser_);
            }
          }
          else
          {
            if (this->permittedDataType_parser_ != 0)
            {
              this->permittedDataType_parser_->post_ObservationDataType ();
              this->permittedDataType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "multipleResultsAllowed" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->multipleResultsAllowed_parser_)
            {
              this->multipleResultsAllowed_parser_->pre ();
              ctx.nested_parser (this->multipleResultsAllowed_parser_);
            }
          }
          else
          {
            if (this->multipleResultsAllowed_parser_ != 0)
            {
              this->multipleResultsAllowed_parser_->post_boolean ();
              this->multipleResultsAllowed ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "method" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->method_parser_)
            {
              this->method_parser_->pre ();
              ctx.nested_parser (this->method_parser_);
            }
          }
          else
          {
            if (this->method_parser_ != 0)
            {
              this->method_parser_->post_CodeableConcept ();
              this->method ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "preferredReportName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preferredReportName_parser_)
            {
              this->preferredReportName_parser_->pre ();
              ctx.nested_parser (this->preferredReportName_parser_);
            }
          }
          else
          {
            if (this->preferredReportName_parser_ != 0)
            {
              this->preferredReportName_parser_->post_string ();
              this->preferredReportName ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "quantitativeDetails" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantitativeDetails_parser_)
            {
              this->quantitativeDetails_parser_->pre ();
              ctx.nested_parser (this->quantitativeDetails_parser_);
            }
          }
          else
          {
            if (this->quantitativeDetails_parser_ != 0)
            {
              this->quantitativeDetails_parser_->post_ObservationDefinition_QuantitativeDetails ();
              this->quantitativeDetails ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "qualifiedInterval" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->qualifiedInterval_parser_)
            {
              this->qualifiedInterval_parser_->pre ();
              ctx.nested_parser (this->qualifiedInterval_parser_);
            }
          }
          else
          {
            if (this->qualifiedInterval_parser_ != 0)
            {
              this->qualifiedInterval_parser_->post_ObservationDefinition_QualifiedInterval ();
              this->qualifiedInterval ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "validCodedValueSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validCodedValueSet_parser_)
            {
              this->validCodedValueSet_parser_->pre ();
              ctx.nested_parser (this->validCodedValueSet_parser_);
            }
          }
          else
          {
            if (this->validCodedValueSet_parser_ != 0)
            {
              this->validCodedValueSet_parser_->post_Reference ();
              this->validCodedValueSet ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "normalCodedValueSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->normalCodedValueSet_parser_)
            {
              this->normalCodedValueSet_parser_->pre ();
              ctx.nested_parser (this->normalCodedValueSet_parser_);
            }
          }
          else
          {
            if (this->normalCodedValueSet_parser_ != 0)
            {
              this->normalCodedValueSet_parser_->post_Reference ();
              this->normalCodedValueSet ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "abnormalCodedValueSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->abnormalCodedValueSet_parser_)
            {
              this->abnormalCodedValueSet_parser_->pre ();
              ctx.nested_parser (this->abnormalCodedValueSet_parser_);
            }
          }
          else
          {
            if (this->abnormalCodedValueSet_parser_ != 0)
            {
              this->abnormalCodedValueSet_parser_->post_Reference ();
              this->abnormalCodedValueSet ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "criticalCodedValueSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->criticalCodedValueSet_parser_)
            {
              this->criticalCodedValueSet_parser_->pre ();
              ctx.nested_parser (this->criticalCodedValueSet_parser_);
            }
          }
          else
          {
            if (this->criticalCodedValueSet_parser_ != 0)
            {
              this->criticalCodedValueSet_parser_->post_Reference ();
              this->criticalCodedValueSet ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ObservationDefinition_QuantitativeDetails_pskel.
  //
  bool ObservationDefinition_QuantitativeDetails_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "customaryUnit" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "unit" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "conversionFactor" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "decimalPrecision" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ObservationDefinition_QuantitativeDetails_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ObservationDefinition_QuantitativeDetails_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ObservationDefinition_QuantitativeDetails_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "customaryUnit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->customaryUnit_parser_)
            {
              this->customaryUnit_parser_->pre ();
              ctx.nested_parser (this->customaryUnit_parser_);
            }
          }
          else
          {
            if (this->customaryUnit_parser_ != 0)
            {
              this->customaryUnit_parser_->post_CodeableConcept ();
              this->customaryUnit ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "unit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unit_parser_)
            {
              this->unit_parser_->pre ();
              ctx.nested_parser (this->unit_parser_);
            }
          }
          else
          {
            if (this->unit_parser_ != 0)
            {
              this->unit_parser_->post_CodeableConcept ();
              this->unit ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "conversionFactor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->conversionFactor_parser_)
            {
              this->conversionFactor_parser_->pre ();
              ctx.nested_parser (this->conversionFactor_parser_);
            }
          }
          else
          {
            if (this->conversionFactor_parser_ != 0)
            {
              this->conversionFactor_parser_->post_decimal ();
              this->conversionFactor ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "decimalPrecision" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->decimalPrecision_parser_)
            {
              this->decimalPrecision_parser_->pre ();
              ctx.nested_parser (this->decimalPrecision_parser_);
            }
          }
          else
          {
            if (this->decimalPrecision_parser_ != 0)
            {
              this->decimalPrecision_parser_->post_integer ();
              this->decimalPrecision ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ObservationDefinition_QualifiedInterval_pskel.
  //
  bool ObservationDefinition_QualifiedInterval_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "range" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "context" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "appliesTo" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "gender" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "age" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "gestationalAge" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "condition" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ObservationDefinition_QualifiedInterval_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ObservationDefinition_QualifiedInterval_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ObservationDefinition_QualifiedInterval_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_ObservationRangeCategory ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "range" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->range_parser_)
            {
              this->range_parser_->pre ();
              ctx.nested_parser (this->range_parser_);
            }
          }
          else
          {
            if (this->range_parser_ != 0)
            {
              this->range_parser_->post_Range ();
              this->range ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_CodeableConcept ();
              this->context ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "appliesTo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->appliesTo_parser_)
            {
              this->appliesTo_parser_->pre ();
              ctx.nested_parser (this->appliesTo_parser_);
            }
          }
          else
          {
            if (this->appliesTo_parser_ != 0)
            {
              this->appliesTo_parser_->post_CodeableConcept ();
              this->appliesTo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "gender" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->gender_parser_)
            {
              this->gender_parser_->pre ();
              ctx.nested_parser (this->gender_parser_);
            }
          }
          else
          {
            if (this->gender_parser_ != 0)
            {
              this->gender_parser_->post_AdministrativeGender ();
              this->gender ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "age" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->age_parser_)
            {
              this->age_parser_->pre ();
              ctx.nested_parser (this->age_parser_);
            }
          }
          else
          {
            if (this->age_parser_ != 0)
            {
              this->age_parser_->post_Range ();
              this->age ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "gestationalAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->gestationalAge_parser_)
            {
              this->gestationalAge_parser_->pre ();
              ctx.nested_parser (this->gestationalAge_parser_);
            }
          }
          else
          {
            if (this->gestationalAge_parser_ != 0)
            {
              this->gestationalAge_parser_->post_Range ();
              this->gestationalAge ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_string ();
              this->condition ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ObservationDataType_pskel.
  //
  bool ObservationDataType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ObservationDataType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ObservationRangeCategory_pskel.
  //
  bool ObservationRangeCategory_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ObservationRangeCategory_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

