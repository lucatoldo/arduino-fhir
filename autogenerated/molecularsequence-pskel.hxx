// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef MOLECULARSEQUENCE_PSKEL_HXX
#define MOLECULARSEQUENCE_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class MolecularSequence_pskel;
  class MolecularSequence_ReferenceSeq_pskel;
  class MolecularSequence_Variant_pskel;
  class MolecularSequence_Quality_pskel;
  class MolecularSequence_Roc_pskel;
  class MolecularSequence_Repository_pskel;
  class MolecularSequence_StructureVariant_pskel;
  class MolecularSequence_Outer_pskel;
  class MolecularSequence_Inner_pskel;
  class strandType_list_pskel;
  class strandType_pskel;
  class orientationType_list_pskel;
  class orientationType_pskel;
  class repositoryType_list_pskel;
  class repositoryType_pskel;
  class qualityType_list_pskel;
  class qualityType_pskel;
  class sequenceType_list_pskel;
  class sequenceType_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class MolecularSequence_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    coordinateSystem ();

    virtual void
    patient ();

    virtual void
    specimen ();

    virtual void
    device ();

    virtual void
    performer ();

    virtual void
    quantity ();

    virtual void
    referenceSeq ();

    virtual void
    variant ();

    virtual void
    observedSeq ();

    virtual void
    quality ();

    virtual void
    readCoverage ();

    virtual void
    repository ();

    virtual void
    pointer ();

    virtual void
    structureVariant ();

    virtual void
    post_MolecularSequence ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::sequenceType_pskel& /* type */,
             ::fhir::integer_pskel& /* coordinateSystem */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* specimen */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::MolecularSequence_ReferenceSeq_pskel& /* referenceSeq */,
             ::fhir::MolecularSequence_Variant_pskel& /* variant */,
             ::fhir::string_pskel& /* observedSeq */,
             ::fhir::MolecularSequence_Quality_pskel& /* quality */,
             ::fhir::integer_pskel& /* readCoverage */,
             ::fhir::MolecularSequence_Repository_pskel& /* repository */,
             ::fhir::Reference_pskel& /* pointer */,
             ::fhir::MolecularSequence_StructureVariant_pskel& /* structureVariant */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::sequenceType_pskel&);

    void
    coordinateSystem_parser (::fhir::integer_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    specimen_parser (::fhir::Reference_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    referenceSeq_parser (::fhir::MolecularSequence_ReferenceSeq_pskel&);

    void
    variant_parser (::fhir::MolecularSequence_Variant_pskel&);

    void
    observedSeq_parser (::fhir::string_pskel&);

    void
    quality_parser (::fhir::MolecularSequence_Quality_pskel&);

    void
    readCoverage_parser (::fhir::integer_pskel&);

    void
    repository_parser (::fhir::MolecularSequence_Repository_pskel&);

    void
    pointer_parser (::fhir::Reference_pskel&);

    void
    structureVariant_parser (::fhir::MolecularSequence_StructureVariant_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_pskel* MolecularSequence_impl_;
    MolecularSequence_pskel (MolecularSequence_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::sequenceType_pskel* type_parser_;
    ::fhir::integer_pskel* coordinateSystem_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* specimen_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::MolecularSequence_ReferenceSeq_pskel* referenceSeq_parser_;
    ::fhir::MolecularSequence_Variant_pskel* variant_parser_;
    ::fhir::string_pskel* observedSeq_parser_;
    ::fhir::MolecularSequence_Quality_pskel* quality_parser_;
    ::fhir::integer_pskel* readCoverage_parser_;
    ::fhir::MolecularSequence_Repository_pskel* repository_parser_;
    ::fhir::Reference_pskel* pointer_parser_;
    ::fhir::MolecularSequence_StructureVariant_pskel* structureVariant_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_ReferenceSeq_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    chromosome ();

    virtual void
    genomeBuild ();

    virtual void
    orientation ();

    virtual void
    referenceSeqId ();

    virtual void
    referenceSeqPointer ();

    virtual void
    referenceSeqString ();

    virtual void
    strand ();

    virtual void
    windowStart ();

    virtual void
    windowEnd ();

    virtual void
    post_MolecularSequence_ReferenceSeq ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* chromosome */,
             ::fhir::string_pskel& /* genomeBuild */,
             ::fhir::orientationType_pskel& /* orientation */,
             ::fhir::CodeableConcept_pskel& /* referenceSeqId */,
             ::fhir::Reference_pskel& /* referenceSeqPointer */,
             ::fhir::string_pskel& /* referenceSeqString */,
             ::fhir::strandType_pskel& /* strand */,
             ::fhir::integer_pskel& /* windowStart */,
             ::fhir::integer_pskel& /* windowEnd */);

    // Individual element parsers.
    //
    void
    chromosome_parser (::fhir::CodeableConcept_pskel&);

    void
    genomeBuild_parser (::fhir::string_pskel&);

    void
    orientation_parser (::fhir::orientationType_pskel&);

    void
    referenceSeqId_parser (::fhir::CodeableConcept_pskel&);

    void
    referenceSeqPointer_parser (::fhir::Reference_pskel&);

    void
    referenceSeqString_parser (::fhir::string_pskel&);

    void
    strand_parser (::fhir::strandType_pskel&);

    void
    windowStart_parser (::fhir::integer_pskel&);

    void
    windowEnd_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_ReferenceSeq_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_ReferenceSeq_pskel* MolecularSequence_ReferenceSeq_impl_;
    MolecularSequence_ReferenceSeq_pskel (MolecularSequence_ReferenceSeq_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* chromosome_parser_;
    ::fhir::string_pskel* genomeBuild_parser_;
    ::fhir::orientationType_pskel* orientation_parser_;
    ::fhir::CodeableConcept_pskel* referenceSeqId_parser_;
    ::fhir::Reference_pskel* referenceSeqPointer_parser_;
    ::fhir::string_pskel* referenceSeqString_parser_;
    ::fhir::strandType_pskel* strand_parser_;
    ::fhir::integer_pskel* windowStart_parser_;
    ::fhir::integer_pskel* windowEnd_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_ReferenceSeq_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Variant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    observedAllele ();

    virtual void
    referenceAllele ();

    virtual void
    cigar ();

    virtual void
    variantPointer ();

    virtual void
    post_MolecularSequence_Variant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */,
             ::fhir::string_pskel& /* observedAllele */,
             ::fhir::string_pskel& /* referenceAllele */,
             ::fhir::string_pskel& /* cigar */,
             ::fhir::Reference_pskel& /* variantPointer */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    void
    observedAllele_parser (::fhir::string_pskel&);

    void
    referenceAllele_parser (::fhir::string_pskel&);

    void
    cigar_parser (::fhir::string_pskel&);

    void
    variantPointer_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Variant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Variant_pskel* MolecularSequence_Variant_impl_;
    MolecularSequence_Variant_pskel (MolecularSequence_Variant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;
    ::fhir::string_pskel* observedAllele_parser_;
    ::fhir::string_pskel* referenceAllele_parser_;
    ::fhir::string_pskel* cigar_parser_;
    ::fhir::Reference_pskel* variantPointer_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Variant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Quality_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    standardSequence ();

    virtual void
    start ();

    virtual void
    end ();

    virtual void
    score ();

    virtual void
    method ();

    virtual void
    truthTP ();

    virtual void
    queryTP ();

    virtual void
    truthFN ();

    virtual void
    queryFP ();

    virtual void
    gtFP ();

    virtual void
    precision ();

    virtual void
    recall ();

    virtual void
    fScore ();

    virtual void
    roc ();

    virtual void
    post_MolecularSequence_Quality ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::qualityType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* standardSequence */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */,
             ::fhir::Quantity_pskel& /* score */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::decimal_pskel& /* truthTP */,
             ::fhir::decimal_pskel& /* queryTP */,
             ::fhir::decimal_pskel& /* truthFN */,
             ::fhir::decimal_pskel& /* queryFP */,
             ::fhir::decimal_pskel& /* gtFP */,
             ::fhir::decimal_pskel& /* precision */,
             ::fhir::decimal_pskel& /* recall */,
             ::fhir::decimal_pskel& /* fScore */,
             ::fhir::MolecularSequence_Roc_pskel& /* roc */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::qualityType_pskel&);

    void
    standardSequence_parser (::fhir::CodeableConcept_pskel&);

    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    void
    score_parser (::fhir::Quantity_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    truthTP_parser (::fhir::decimal_pskel&);

    void
    queryTP_parser (::fhir::decimal_pskel&);

    void
    truthFN_parser (::fhir::decimal_pskel&);

    void
    queryFP_parser (::fhir::decimal_pskel&);

    void
    gtFP_parser (::fhir::decimal_pskel&);

    void
    precision_parser (::fhir::decimal_pskel&);

    void
    recall_parser (::fhir::decimal_pskel&);

    void
    fScore_parser (::fhir::decimal_pskel&);

    void
    roc_parser (::fhir::MolecularSequence_Roc_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Quality_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Quality_pskel* MolecularSequence_Quality_impl_;
    MolecularSequence_Quality_pskel (MolecularSequence_Quality_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::qualityType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* standardSequence_parser_;
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;
    ::fhir::Quantity_pskel* score_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::decimal_pskel* truthTP_parser_;
    ::fhir::decimal_pskel* queryTP_parser_;
    ::fhir::decimal_pskel* truthFN_parser_;
    ::fhir::decimal_pskel* queryFP_parser_;
    ::fhir::decimal_pskel* gtFP_parser_;
    ::fhir::decimal_pskel* precision_parser_;
    ::fhir::decimal_pskel* recall_parser_;
    ::fhir::decimal_pskel* fScore_parser_;
    ::fhir::MolecularSequence_Roc_pskel* roc_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Quality_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Roc_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    score ();

    virtual void
    numTP ();

    virtual void
    numFP ();

    virtual void
    numFN ();

    virtual void
    precision ();

    virtual void
    sensitivity ();

    virtual void
    fMeasure ();

    virtual void
    post_MolecularSequence_Roc ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* score */,
             ::fhir::integer_pskel& /* numTP */,
             ::fhir::integer_pskel& /* numFP */,
             ::fhir::integer_pskel& /* numFN */,
             ::fhir::decimal_pskel& /* precision */,
             ::fhir::decimal_pskel& /* sensitivity */,
             ::fhir::decimal_pskel& /* fMeasure */);

    // Individual element parsers.
    //
    void
    score_parser (::fhir::integer_pskel&);

    void
    numTP_parser (::fhir::integer_pskel&);

    void
    numFP_parser (::fhir::integer_pskel&);

    void
    numFN_parser (::fhir::integer_pskel&);

    void
    precision_parser (::fhir::decimal_pskel&);

    void
    sensitivity_parser (::fhir::decimal_pskel&);

    void
    fMeasure_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Roc_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Roc_pskel* MolecularSequence_Roc_impl_;
    MolecularSequence_Roc_pskel (MolecularSequence_Roc_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* score_parser_;
    ::fhir::integer_pskel* numTP_parser_;
    ::fhir::integer_pskel* numFP_parser_;
    ::fhir::integer_pskel* numFN_parser_;
    ::fhir::decimal_pskel* precision_parser_;
    ::fhir::decimal_pskel* sensitivity_parser_;
    ::fhir::decimal_pskel* fMeasure_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Roc_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Repository_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    url ();

    virtual void
    name ();

    virtual void
    datasetId ();

    virtual void
    variantsetId ();

    virtual void
    readsetId ();

    virtual void
    post_MolecularSequence_Repository ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::repositoryType_pskel& /* type */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* datasetId */,
             ::fhir::string_pskel& /* variantsetId */,
             ::fhir::string_pskel& /* readsetId */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::repositoryType_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    datasetId_parser (::fhir::string_pskel&);

    void
    variantsetId_parser (::fhir::string_pskel&);

    void
    readsetId_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Repository_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Repository_pskel* MolecularSequence_Repository_impl_;
    MolecularSequence_Repository_pskel (MolecularSequence_Repository_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::repositoryType_pskel* type_parser_;
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* datasetId_parser_;
    ::fhir::string_pskel* variantsetId_parser_;
    ::fhir::string_pskel* readsetId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Repository_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_StructureVariant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    variantType ();

    virtual void
    exact ();

    virtual void
    length ();

    virtual void
    outer ();

    virtual void
    inner ();

    virtual void
    post_MolecularSequence_StructureVariant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* variantType */,
             ::fhir::boolean_pskel& /* exact */,
             ::fhir::integer_pskel& /* length */,
             ::fhir::MolecularSequence_Outer_pskel& /* outer */,
             ::fhir::MolecularSequence_Inner_pskel& /* inner */);

    // Individual element parsers.
    //
    void
    variantType_parser (::fhir::CodeableConcept_pskel&);

    void
    exact_parser (::fhir::boolean_pskel&);

    void
    length_parser (::fhir::integer_pskel&);

    void
    outer_parser (::fhir::MolecularSequence_Outer_pskel&);

    void
    inner_parser (::fhir::MolecularSequence_Inner_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_StructureVariant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_StructureVariant_pskel* MolecularSequence_StructureVariant_impl_;
    MolecularSequence_StructureVariant_pskel (MolecularSequence_StructureVariant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* variantType_parser_;
    ::fhir::boolean_pskel* exact_parser_;
    ::fhir::integer_pskel* length_parser_;
    ::fhir::MolecularSequence_Outer_pskel* outer_parser_;
    ::fhir::MolecularSequence_Inner_pskel* inner_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_StructureVariant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Outer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    post_MolecularSequence_Outer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Outer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Outer_pskel* MolecularSequence_Outer_impl_;
    MolecularSequence_Outer_pskel (MolecularSequence_Outer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Outer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Inner_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    post_MolecularSequence_Inner ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Inner_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Inner_pskel* MolecularSequence_Inner_impl_;
    MolecularSequence_Inner_pskel (MolecularSequence_Inner_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Inner_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class strandType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_strandType_list ();

    // Constructor.
    //
    strandType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    strandType_list_pskel* strandType_list_impl_;
    strandType_list_pskel (strandType_list_pskel*, void*);

    protected:
    static const char* const _xsde_strandType_list_pskel_enums_[2UL];
  };

  class strandType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_strandType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::strandType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::strandType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    strandType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    strandType_pskel* strandType_impl_;
    strandType_pskel (strandType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::strandType_list_pskel* value_parser_;
  };

  class orientationType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_orientationType_list ();

    // Constructor.
    //
    orientationType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    orientationType_list_pskel* orientationType_list_impl_;
    orientationType_list_pskel (orientationType_list_pskel*, void*);

    protected:
    static const char* const _xsde_orientationType_list_pskel_enums_[2UL];
  };

  class orientationType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_orientationType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::orientationType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::orientationType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    orientationType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    orientationType_pskel* orientationType_impl_;
    orientationType_pskel (orientationType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::orientationType_list_pskel* value_parser_;
  };

  class repositoryType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_repositoryType_list ();

    // Constructor.
    //
    repositoryType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    repositoryType_list_pskel* repositoryType_list_impl_;
    repositoryType_list_pskel (repositoryType_list_pskel*, void*);

    protected:
    static const char* const _xsde_repositoryType_list_pskel_enums_[5UL];
  };

  class repositoryType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_repositoryType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::repositoryType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::repositoryType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    repositoryType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    repositoryType_pskel* repositoryType_impl_;
    repositoryType_pskel (repositoryType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::repositoryType_list_pskel* value_parser_;
  };

  class qualityType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_qualityType_list ();

    // Constructor.
    //
    qualityType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    qualityType_list_pskel* qualityType_list_impl_;
    qualityType_list_pskel (qualityType_list_pskel*, void*);

    protected:
    static const char* const _xsde_qualityType_list_pskel_enums_[3UL];
  };

  class qualityType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_qualityType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::qualityType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::qualityType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    qualityType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    qualityType_pskel* qualityType_impl_;
    qualityType_pskel (qualityType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::qualityType_list_pskel* value_parser_;
  };

  class sequenceType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_sequenceType_list ();

    // Constructor.
    //
    sequenceType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    sequenceType_list_pskel* sequenceType_list_impl_;
    sequenceType_list_pskel (sequenceType_list_pskel*, void*);

    protected:
    static const char* const _xsde_sequenceType_list_pskel_enums_[3UL];
  };

  class sequenceType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_sequenceType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::sequenceType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::sequenceType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    sequenceType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    sequenceType_pskel* sequenceType_impl_;
    sequenceType_pskel (sequenceType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::sequenceType_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MOLECULARSEQUENCE_PSKEL_HXX
