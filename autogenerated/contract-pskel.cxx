// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "contract-pskel.hxx"

namespace fhir
{
  // Contract_pskel
  //

  void Contract_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Contract_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void Contract_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void Contract_pskel::
  status_parser (::fhir::ContractResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Contract_pskel::
  legalState_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->legalState_parser_ = &p;
  }

  void Contract_pskel::
  instantiatesCanonical_parser (::fhir::Reference_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void Contract_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void Contract_pskel::
  contentDerivative_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->contentDerivative_parser_ = &p;
  }

  void Contract_pskel::
  issued_parser (::fhir::dateTime_pskel& p)
  {
    this->issued_parser_ = &p;
  }

  void Contract_pskel::
  applies_parser (::fhir::Period_pskel& p)
  {
    this->applies_parser_ = &p;
  }

  void Contract_pskel::
  expirationType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->expirationType_parser_ = &p;
  }

  void Contract_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Contract_pskel::
  authority_parser (::fhir::Reference_pskel& p)
  {
    this->authority_parser_ = &p;
  }

  void Contract_pskel::
  domain_parser (::fhir::Reference_pskel& p)
  {
    this->domain_parser_ = &p;
  }

  void Contract_pskel::
  site_parser (::fhir::Reference_pskel& p)
  {
    this->site_parser_ = &p;
  }

  void Contract_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Contract_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void Contract_pskel::
  subtitle_parser (::fhir::string_pskel& p)
  {
    this->subtitle_parser_ = &p;
  }

  void Contract_pskel::
  alias_parser (::fhir::string_pskel& p)
  {
    this->alias_parser_ = &p;
  }

  void Contract_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void Contract_pskel::
  scope_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->scope_parser_ = &p;
  }

  void Contract_pskel::
  topicCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->topicCodeableConcept_parser_ = &p;
  }

  void Contract_pskel::
  topicReference_parser (::fhir::Reference_pskel& p)
  {
    this->topicReference_parser_ = &p;
  }

  void Contract_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Contract_pskel::
  subType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subType_parser_ = &p;
  }

  void Contract_pskel::
  contentDefinition_parser (::fhir::Contract_ContentDefinition_pskel& p)
  {
    this->contentDefinition_parser_ = &p;
  }

  void Contract_pskel::
  term_parser (::fhir::Contract_Term_pskel& p)
  {
    this->term_parser_ = &p;
  }

  void Contract_pskel::
  supportingInfo_parser (::fhir::Reference_pskel& p)
  {
    this->supportingInfo_parser_ = &p;
  }

  void Contract_pskel::
  relevantHistory_parser (::fhir::Reference_pskel& p)
  {
    this->relevantHistory_parser_ = &p;
  }

  void Contract_pskel::
  signer_parser (::fhir::Contract_Signer_pskel& p)
  {
    this->signer_parser_ = &p;
  }

  void Contract_pskel::
  friendly_parser (::fhir::Contract_Friendly_pskel& p)
  {
    this->friendly_parser_ = &p;
  }

  void Contract_pskel::
  legal_parser (::fhir::Contract_Legal_pskel& p)
  {
    this->legal_parser_ = &p;
  }

  void Contract_pskel::
  rule_parser (::fhir::Contract_Rule_pskel& p)
  {
    this->rule_parser_ = &p;
  }

  void Contract_pskel::
  legallyBindingAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->legallyBindingAttachment_parser_ = &p;
  }

  void Contract_pskel::
  legallyBindingReference_parser (::fhir::Reference_pskel& p)
  {
    this->legallyBindingReference_parser_ = &p;
  }

  void Contract_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::uri_pskel& url,
           ::fhir::string_pskel& version,
           ::fhir::ContractResourceStatusCodes_pskel& status,
           ::fhir::CodeableConcept_pskel& legalState,
           ::fhir::Reference_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::CodeableConcept_pskel& contentDerivative,
           ::fhir::dateTime_pskel& issued,
           ::fhir::Period_pskel& applies,
           ::fhir::CodeableConcept_pskel& expirationType,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& authority,
           ::fhir::Reference_pskel& domain,
           ::fhir::Reference_pskel& site,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& subtitle,
           ::fhir::string_pskel& alias,
           ::fhir::Reference_pskel& author,
           ::fhir::CodeableConcept_pskel& scope,
           ::fhir::CodeableConcept_pskel& topicCodeableConcept,
           ::fhir::Reference_pskel& topicReference,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& subType,
           ::fhir::Contract_ContentDefinition_pskel& contentDefinition,
           ::fhir::Contract_Term_pskel& term,
           ::fhir::Reference_pskel& supportingInfo,
           ::fhir::Reference_pskel& relevantHistory,
           ::fhir::Contract_Signer_pskel& signer,
           ::fhir::Contract_Friendly_pskel& friendly,
           ::fhir::Contract_Legal_pskel& legal,
           ::fhir::Contract_Rule_pskel& rule,
           ::fhir::Attachment_pskel& legallyBindingAttachment,
           ::fhir::Reference_pskel& legallyBindingReference)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->url_parser_ = &url;
    this->version_parser_ = &version;
    this->status_parser_ = &status;
    this->legalState_parser_ = &legalState;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->contentDerivative_parser_ = &contentDerivative;
    this->issued_parser_ = &issued;
    this->applies_parser_ = &applies;
    this->expirationType_parser_ = &expirationType;
    this->subject_parser_ = &subject;
    this->authority_parser_ = &authority;
    this->domain_parser_ = &domain;
    this->site_parser_ = &site;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->subtitle_parser_ = &subtitle;
    this->alias_parser_ = &alias;
    this->author_parser_ = &author;
    this->scope_parser_ = &scope;
    this->topicCodeableConcept_parser_ = &topicCodeableConcept;
    this->topicReference_parser_ = &topicReference;
    this->type_parser_ = &type;
    this->subType_parser_ = &subType;
    this->contentDefinition_parser_ = &contentDefinition;
    this->term_parser_ = &term;
    this->supportingInfo_parser_ = &supportingInfo;
    this->relevantHistory_parser_ = &relevantHistory;
    this->signer_parser_ = &signer;
    this->friendly_parser_ = &friendly;
    this->legal_parser_ = &legal;
    this->rule_parser_ = &rule;
    this->legallyBindingAttachment_parser_ = &legallyBindingAttachment;
    this->legallyBindingReference_parser_ = &legallyBindingReference;
  }

  Contract_pskel::
  Contract_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Contract_impl_ (0),
    identifier_parser_ (0),
    url_parser_ (0),
    version_parser_ (0),
    status_parser_ (0),
    legalState_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    contentDerivative_parser_ (0),
    issued_parser_ (0),
    applies_parser_ (0),
    expirationType_parser_ (0),
    subject_parser_ (0),
    authority_parser_ (0),
    domain_parser_ (0),
    site_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    subtitle_parser_ (0),
    alias_parser_ (0),
    author_parser_ (0),
    scope_parser_ (0),
    topicCodeableConcept_parser_ (0),
    topicReference_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    contentDefinition_parser_ (0),
    term_parser_ (0),
    supportingInfo_parser_ (0),
    relevantHistory_parser_ (0),
    signer_parser_ (0),
    friendly_parser_ (0),
    legal_parser_ (0),
    rule_parser_ (0),
    legallyBindingAttachment_parser_ (0),
    legallyBindingReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_pskel::
  Contract_pskel (Contract_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Contract_impl_ (impl),
    identifier_parser_ (0),
    url_parser_ (0),
    version_parser_ (0),
    status_parser_ (0),
    legalState_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    contentDerivative_parser_ (0),
    issued_parser_ (0),
    applies_parser_ (0),
    expirationType_parser_ (0),
    subject_parser_ (0),
    authority_parser_ (0),
    domain_parser_ (0),
    site_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    subtitle_parser_ (0),
    alias_parser_ (0),
    author_parser_ (0),
    scope_parser_ (0),
    topicCodeableConcept_parser_ (0),
    topicReference_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    contentDefinition_parser_ (0),
    term_parser_ (0),
    supportingInfo_parser_ (0),
    relevantHistory_parser_ (0),
    signer_parser_ (0),
    friendly_parser_ (0),
    legal_parser_ (0),
    rule_parser_ (0),
    legallyBindingAttachment_parser_ (0),
    legallyBindingReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_ContentDefinition_pskel
  //

  void Contract_ContentDefinition_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Contract_ContentDefinition_pskel::
  subType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subType_parser_ = &p;
  }

  void Contract_ContentDefinition_pskel::
  publisher_parser (::fhir::Reference_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void Contract_ContentDefinition_pskel::
  publicationDate_parser (::fhir::dateTime_pskel& p)
  {
    this->publicationDate_parser_ = &p;
  }

  void Contract_ContentDefinition_pskel::
  publicationStatus_parser (::fhir::ContractResourcePublicationStatusCodes_pskel& p)
  {
    this->publicationStatus_parser_ = &p;
  }

  void Contract_ContentDefinition_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void Contract_ContentDefinition_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& subType,
           ::fhir::Reference_pskel& publisher,
           ::fhir::dateTime_pskel& publicationDate,
           ::fhir::ContractResourcePublicationStatusCodes_pskel& publicationStatus,
           ::fhir::markdown_pskel& copyright)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->subType_parser_ = &subType;
    this->publisher_parser_ = &publisher;
    this->publicationDate_parser_ = &publicationDate;
    this->publicationStatus_parser_ = &publicationStatus;
    this->copyright_parser_ = &copyright;
  }

  Contract_ContentDefinition_pskel::
  Contract_ContentDefinition_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_ContentDefinition_impl_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    publisher_parser_ (0),
    publicationDate_parser_ (0),
    publicationStatus_parser_ (0),
    copyright_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_ContentDefinition_pskel::
  Contract_ContentDefinition_pskel (Contract_ContentDefinition_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_ContentDefinition_impl_ (impl),
    type_parser_ (0),
    subType_parser_ (0),
    publisher_parser_ (0),
    publicationDate_parser_ (0),
    publicationStatus_parser_ (0),
    copyright_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Term_pskel
  //

  void Contract_Term_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Contract_Term_pskel::
  issued_parser (::fhir::dateTime_pskel& p)
  {
    this->issued_parser_ = &p;
  }

  void Contract_Term_pskel::
  applies_parser (::fhir::Period_pskel& p)
  {
    this->applies_parser_ = &p;
  }

  void Contract_Term_pskel::
  topicCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->topicCodeableConcept_parser_ = &p;
  }

  void Contract_Term_pskel::
  topicReference_parser (::fhir::Reference_pskel& p)
  {
    this->topicReference_parser_ = &p;
  }

  void Contract_Term_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Contract_Term_pskel::
  subType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subType_parser_ = &p;
  }

  void Contract_Term_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void Contract_Term_pskel::
  securityLabel_parser (::fhir::Contract_SecurityLabel_pskel& p)
  {
    this->securityLabel_parser_ = &p;
  }

  void Contract_Term_pskel::
  offer_parser (::fhir::Contract_Offer_pskel& p)
  {
    this->offer_parser_ = &p;
  }

  void Contract_Term_pskel::
  asset_parser (::fhir::Contract_Asset_pskel& p)
  {
    this->asset_parser_ = &p;
  }

  void Contract_Term_pskel::
  action_parser (::fhir::Contract_Action_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void Contract_Term_pskel::
  group_parser (::fhir::Contract_Term_pskel& p)
  {
    this->group_parser_ = &p;
  }

  void Contract_Term_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::dateTime_pskel& issued,
           ::fhir::Period_pskel& applies,
           ::fhir::CodeableConcept_pskel& topicCodeableConcept,
           ::fhir::Reference_pskel& topicReference,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& subType,
           ::fhir::string_pskel& text,
           ::fhir::Contract_SecurityLabel_pskel& securityLabel,
           ::fhir::Contract_Offer_pskel& offer,
           ::fhir::Contract_Asset_pskel& asset,
           ::fhir::Contract_Action_pskel& action,
           ::fhir::Contract_Term_pskel& group)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->issued_parser_ = &issued;
    this->applies_parser_ = &applies;
    this->topicCodeableConcept_parser_ = &topicCodeableConcept;
    this->topicReference_parser_ = &topicReference;
    this->type_parser_ = &type;
    this->subType_parser_ = &subType;
    this->text_parser_ = &text;
    this->securityLabel_parser_ = &securityLabel;
    this->offer_parser_ = &offer;
    this->asset_parser_ = &asset;
    this->action_parser_ = &action;
    this->group_parser_ = &group;
  }

  Contract_Term_pskel::
  Contract_Term_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Term_impl_ (0),
    identifier_parser_ (0),
    issued_parser_ (0),
    applies_parser_ (0),
    topicCodeableConcept_parser_ (0),
    topicReference_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    text_parser_ (0),
    securityLabel_parser_ (0),
    offer_parser_ (0),
    asset_parser_ (0),
    action_parser_ (0),
    group_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Term_pskel::
  Contract_Term_pskel (Contract_Term_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Term_impl_ (impl),
    identifier_parser_ (0),
    issued_parser_ (0),
    applies_parser_ (0),
    topicCodeableConcept_parser_ (0),
    topicReference_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    text_parser_ (0),
    securityLabel_parser_ (0),
    offer_parser_ (0),
    asset_parser_ (0),
    action_parser_ (0),
    group_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_SecurityLabel_pskel
  //

  void Contract_SecurityLabel_pskel::
  number_parser (::fhir::unsignedInt_pskel& p)
  {
    this->number_parser_ = &p;
  }

  void Contract_SecurityLabel_pskel::
  classification_parser (::fhir::Coding_pskel& p)
  {
    this->classification_parser_ = &p;
  }

  void Contract_SecurityLabel_pskel::
  category_parser (::fhir::Coding_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void Contract_SecurityLabel_pskel::
  control_parser (::fhir::Coding_pskel& p)
  {
    this->control_parser_ = &p;
  }

  void Contract_SecurityLabel_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::unsignedInt_pskel& number,
           ::fhir::Coding_pskel& classification,
           ::fhir::Coding_pskel& category,
           ::fhir::Coding_pskel& control)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->number_parser_ = &number;
    this->classification_parser_ = &classification;
    this->category_parser_ = &category;
    this->control_parser_ = &control;
  }

  Contract_SecurityLabel_pskel::
  Contract_SecurityLabel_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_SecurityLabel_impl_ (0),
    number_parser_ (0),
    classification_parser_ (0),
    category_parser_ (0),
    control_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_SecurityLabel_pskel::
  Contract_SecurityLabel_pskel (Contract_SecurityLabel_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_SecurityLabel_impl_ (impl),
    number_parser_ (0),
    classification_parser_ (0),
    category_parser_ (0),
    control_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Offer_pskel
  //

  void Contract_Offer_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Contract_Offer_pskel::
  party_parser (::fhir::Contract_Party_pskel& p)
  {
    this->party_parser_ = &p;
  }

  void Contract_Offer_pskel::
  topic_parser (::fhir::Reference_pskel& p)
  {
    this->topic_parser_ = &p;
  }

  void Contract_Offer_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Contract_Offer_pskel::
  decision_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->decision_parser_ = &p;
  }

  void Contract_Offer_pskel::
  decisionMode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->decisionMode_parser_ = &p;
  }

  void Contract_Offer_pskel::
  answer_parser (::fhir::Contract_Answer_pskel& p)
  {
    this->answer_parser_ = &p;
  }

  void Contract_Offer_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void Contract_Offer_pskel::
  linkId_parser (::fhir::string_pskel& p)
  {
    this->linkId_parser_ = &p;
  }

  void Contract_Offer_pskel::
  securityLabelNumber_parser (::fhir::unsignedInt_pskel& p)
  {
    this->securityLabelNumber_parser_ = &p;
  }

  void Contract_Offer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Contract_Party_pskel& party,
           ::fhir::Reference_pskel& topic,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& decision,
           ::fhir::CodeableConcept_pskel& decisionMode,
           ::fhir::Contract_Answer_pskel& answer,
           ::fhir::string_pskel& text,
           ::fhir::string_pskel& linkId,
           ::fhir::unsignedInt_pskel& securityLabelNumber)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->party_parser_ = &party;
    this->topic_parser_ = &topic;
    this->type_parser_ = &type;
    this->decision_parser_ = &decision;
    this->decisionMode_parser_ = &decisionMode;
    this->answer_parser_ = &answer;
    this->text_parser_ = &text;
    this->linkId_parser_ = &linkId;
    this->securityLabelNumber_parser_ = &securityLabelNumber;
  }

  Contract_Offer_pskel::
  Contract_Offer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Offer_impl_ (0),
    identifier_parser_ (0),
    party_parser_ (0),
    topic_parser_ (0),
    type_parser_ (0),
    decision_parser_ (0),
    decisionMode_parser_ (0),
    answer_parser_ (0),
    text_parser_ (0),
    linkId_parser_ (0),
    securityLabelNumber_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Offer_pskel::
  Contract_Offer_pskel (Contract_Offer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Offer_impl_ (impl),
    identifier_parser_ (0),
    party_parser_ (0),
    topic_parser_ (0),
    type_parser_ (0),
    decision_parser_ (0),
    decisionMode_parser_ (0),
    answer_parser_ (0),
    text_parser_ (0),
    linkId_parser_ (0),
    securityLabelNumber_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Party_pskel
  //

  void Contract_Party_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void Contract_Party_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void Contract_Party_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& reference,
           ::fhir::CodeableConcept_pskel& role)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->reference_parser_ = &reference;
    this->role_parser_ = &role;
  }

  Contract_Party_pskel::
  Contract_Party_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Party_impl_ (0),
    reference_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Party_pskel::
  Contract_Party_pskel (Contract_Party_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Party_impl_ (impl),
    reference_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Answer_pskel
  //

  void Contract_Answer_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->valueDecimal_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueDate_parser (::fhir::date_pskel& p)
  {
    this->valueDate_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueUri_parser (::fhir::uri_pskel& p)
  {
    this->valueUri_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->valueAttachment_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->valueCoding_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Contract_Answer_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void Contract_Answer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::decimal_pskel& valueDecimal,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::date_pskel& valueDate,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::time_pskel& valueTime,
           ::fhir::string_pskel& valueString,
           ::fhir::uri_pskel& valueUri,
           ::fhir::Attachment_pskel& valueAttachment,
           ::fhir::Coding_pskel& valueCoding,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Reference_pskel& valueReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueDecimal_parser_ = &valueDecimal;
    this->valueInteger_parser_ = &valueInteger;
    this->valueDate_parser_ = &valueDate;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valueTime_parser_ = &valueTime;
    this->valueString_parser_ = &valueString;
    this->valueUri_parser_ = &valueUri;
    this->valueAttachment_parser_ = &valueAttachment;
    this->valueCoding_parser_ = &valueCoding;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueReference_parser_ = &valueReference;
  }

  Contract_Answer_pskel::
  Contract_Answer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Answer_impl_ (0),
    valueBoolean_parser_ (0),
    valueDecimal_parser_ (0),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueUri_parser_ (0),
    valueAttachment_parser_ (0),
    valueCoding_parser_ (0),
    valueQuantity_parser_ (0),
    valueReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Answer_pskel::
  Contract_Answer_pskel (Contract_Answer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Answer_impl_ (impl),
    valueBoolean_parser_ (0),
    valueDecimal_parser_ (0),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueUri_parser_ (0),
    valueAttachment_parser_ (0),
    valueCoding_parser_ (0),
    valueQuantity_parser_ (0),
    valueReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Asset_pskel
  //

  void Contract_Asset_pskel::
  scope_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->scope_parser_ = &p;
  }

  void Contract_Asset_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Contract_Asset_pskel::
  typeReference_parser (::fhir::Reference_pskel& p)
  {
    this->typeReference_parser_ = &p;
  }

  void Contract_Asset_pskel::
  subtype_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subtype_parser_ = &p;
  }

  void Contract_Asset_pskel::
  relationship_parser (::fhir::Coding_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void Contract_Asset_pskel::
  context_parser (::fhir::Contract_Context_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void Contract_Asset_pskel::
  condition_parser (::fhir::string_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void Contract_Asset_pskel::
  periodType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->periodType_parser_ = &p;
  }

  void Contract_Asset_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Contract_Asset_pskel::
  usePeriod_parser (::fhir::Period_pskel& p)
  {
    this->usePeriod_parser_ = &p;
  }

  void Contract_Asset_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void Contract_Asset_pskel::
  linkId_parser (::fhir::string_pskel& p)
  {
    this->linkId_parser_ = &p;
  }

  void Contract_Asset_pskel::
  answer_parser (::fhir::Contract_Answer_pskel& p)
  {
    this->answer_parser_ = &p;
  }

  void Contract_Asset_pskel::
  securityLabelNumber_parser (::fhir::unsignedInt_pskel& p)
  {
    this->securityLabelNumber_parser_ = &p;
  }

  void Contract_Asset_pskel::
  valuedItem_parser (::fhir::Contract_ValuedItem_pskel& p)
  {
    this->valuedItem_parser_ = &p;
  }

  void Contract_Asset_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& scope,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& typeReference,
           ::fhir::CodeableConcept_pskel& subtype,
           ::fhir::Coding_pskel& relationship,
           ::fhir::Contract_Context_pskel& context,
           ::fhir::string_pskel& condition,
           ::fhir::CodeableConcept_pskel& periodType,
           ::fhir::Period_pskel& period,
           ::fhir::Period_pskel& usePeriod,
           ::fhir::string_pskel& text,
           ::fhir::string_pskel& linkId,
           ::fhir::Contract_Answer_pskel& answer,
           ::fhir::unsignedInt_pskel& securityLabelNumber,
           ::fhir::Contract_ValuedItem_pskel& valuedItem)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->scope_parser_ = &scope;
    this->type_parser_ = &type;
    this->typeReference_parser_ = &typeReference;
    this->subtype_parser_ = &subtype;
    this->relationship_parser_ = &relationship;
    this->context_parser_ = &context;
    this->condition_parser_ = &condition;
    this->periodType_parser_ = &periodType;
    this->period_parser_ = &period;
    this->usePeriod_parser_ = &usePeriod;
    this->text_parser_ = &text;
    this->linkId_parser_ = &linkId;
    this->answer_parser_ = &answer;
    this->securityLabelNumber_parser_ = &securityLabelNumber;
    this->valuedItem_parser_ = &valuedItem;
  }

  Contract_Asset_pskel::
  Contract_Asset_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Asset_impl_ (0),
    scope_parser_ (0),
    type_parser_ (0),
    typeReference_parser_ (0),
    subtype_parser_ (0),
    relationship_parser_ (0),
    context_parser_ (0),
    condition_parser_ (0),
    periodType_parser_ (0),
    period_parser_ (0),
    usePeriod_parser_ (0),
    text_parser_ (0),
    linkId_parser_ (0),
    answer_parser_ (0),
    securityLabelNumber_parser_ (0),
    valuedItem_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Asset_pskel::
  Contract_Asset_pskel (Contract_Asset_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Asset_impl_ (impl),
    scope_parser_ (0),
    type_parser_ (0),
    typeReference_parser_ (0),
    subtype_parser_ (0),
    relationship_parser_ (0),
    context_parser_ (0),
    condition_parser_ (0),
    periodType_parser_ (0),
    period_parser_ (0),
    usePeriod_parser_ (0),
    text_parser_ (0),
    linkId_parser_ (0),
    answer_parser_ (0),
    securityLabelNumber_parser_ (0),
    valuedItem_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Context_pskel
  //

  void Contract_Context_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void Contract_Context_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Contract_Context_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void Contract_Context_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& reference,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::string_pskel& text)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->reference_parser_ = &reference;
    this->code_parser_ = &code;
    this->text_parser_ = &text;
  }

  Contract_Context_pskel::
  Contract_Context_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Context_impl_ (0),
    reference_parser_ (0),
    code_parser_ (0),
    text_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Context_pskel::
  Contract_Context_pskel (Contract_Context_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Context_impl_ (impl),
    reference_parser_ (0),
    code_parser_ (0),
    text_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_ValuedItem_pskel
  //

  void Contract_ValuedItem_pskel::
  entityCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->entityCodeableConcept_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  entityReference_parser (::fhir::Reference_pskel& p)
  {
    this->entityReference_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  effectiveTime_parser (::fhir::dateTime_pskel& p)
  {
    this->effectiveTime_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  points_parser (::fhir::decimal_pskel& p)
  {
    this->points_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  payment_parser (::fhir::string_pskel& p)
  {
    this->payment_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  paymentDate_parser (::fhir::dateTime_pskel& p)
  {
    this->paymentDate_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  responsible_parser (::fhir::Reference_pskel& p)
  {
    this->responsible_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  recipient_parser (::fhir::Reference_pskel& p)
  {
    this->recipient_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  linkId_parser (::fhir::string_pskel& p)
  {
    this->linkId_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  securityLabelNumber_parser (::fhir::unsignedInt_pskel& p)
  {
    this->securityLabelNumber_parser_ = &p;
  }

  void Contract_ValuedItem_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& entityCodeableConcept,
           ::fhir::Reference_pskel& entityReference,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::dateTime_pskel& effectiveTime,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::decimal_pskel& points,
           ::fhir::Money_pskel& net,
           ::fhir::string_pskel& payment,
           ::fhir::dateTime_pskel& paymentDate,
           ::fhir::Reference_pskel& responsible,
           ::fhir::Reference_pskel& recipient,
           ::fhir::string_pskel& linkId,
           ::fhir::unsignedInt_pskel& securityLabelNumber)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->entityCodeableConcept_parser_ = &entityCodeableConcept;
    this->entityReference_parser_ = &entityReference;
    this->identifier_parser_ = &identifier;
    this->effectiveTime_parser_ = &effectiveTime;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->points_parser_ = &points;
    this->net_parser_ = &net;
    this->payment_parser_ = &payment;
    this->paymentDate_parser_ = &paymentDate;
    this->responsible_parser_ = &responsible;
    this->recipient_parser_ = &recipient;
    this->linkId_parser_ = &linkId;
    this->securityLabelNumber_parser_ = &securityLabelNumber;
  }

  Contract_ValuedItem_pskel::
  Contract_ValuedItem_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_ValuedItem_impl_ (0),
    entityCodeableConcept_parser_ (0),
    entityReference_parser_ (0),
    identifier_parser_ (0),
    effectiveTime_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    points_parser_ (0),
    net_parser_ (0),
    payment_parser_ (0),
    paymentDate_parser_ (0),
    responsible_parser_ (0),
    recipient_parser_ (0),
    linkId_parser_ (0),
    securityLabelNumber_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_ValuedItem_pskel::
  Contract_ValuedItem_pskel (Contract_ValuedItem_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_ValuedItem_impl_ (impl),
    entityCodeableConcept_parser_ (0),
    entityReference_parser_ (0),
    identifier_parser_ (0),
    effectiveTime_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    points_parser_ (0),
    net_parser_ (0),
    payment_parser_ (0),
    paymentDate_parser_ (0),
    responsible_parser_ (0),
    recipient_parser_ (0),
    linkId_parser_ (0),
    securityLabelNumber_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Action_pskel
  //

  void Contract_Action_pskel::
  doNotPerform_parser (::fhir::boolean_pskel& p)
  {
    this->doNotPerform_parser_ = &p;
  }

  void Contract_Action_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Contract_Action_pskel::
  subject_parser (::fhir::Contract_Subject_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Contract_Action_pskel::
  intent_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void Contract_Action_pskel::
  linkId_parser (::fhir::string_pskel& p)
  {
    this->linkId_parser_ = &p;
  }

  void Contract_Action_pskel::
  status_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Contract_Action_pskel::
  context_parser (::fhir::Reference_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void Contract_Action_pskel::
  contextLinkId_parser (::fhir::string_pskel& p)
  {
    this->contextLinkId_parser_ = &p;
  }

  void Contract_Action_pskel::
  occurrenceDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->occurrenceDateTime_parser_ = &p;
  }

  void Contract_Action_pskel::
  occurrencePeriod_parser (::fhir::Period_pskel& p)
  {
    this->occurrencePeriod_parser_ = &p;
  }

  void Contract_Action_pskel::
  occurrenceTiming_parser (::fhir::Timing_pskel& p)
  {
    this->occurrenceTiming_parser_ = &p;
  }

  void Contract_Action_pskel::
  requester_parser (::fhir::Reference_pskel& p)
  {
    this->requester_parser_ = &p;
  }

  void Contract_Action_pskel::
  requesterLinkId_parser (::fhir::string_pskel& p)
  {
    this->requesterLinkId_parser_ = &p;
  }

  void Contract_Action_pskel::
  performerType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->performerType_parser_ = &p;
  }

  void Contract_Action_pskel::
  performerRole_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->performerRole_parser_ = &p;
  }

  void Contract_Action_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void Contract_Action_pskel::
  performerLinkId_parser (::fhir::string_pskel& p)
  {
    this->performerLinkId_parser_ = &p;
  }

  void Contract_Action_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Contract_Action_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void Contract_Action_pskel::
  reason_parser (::fhir::string_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void Contract_Action_pskel::
  reasonLinkId_parser (::fhir::string_pskel& p)
  {
    this->reasonLinkId_parser_ = &p;
  }

  void Contract_Action_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Contract_Action_pskel::
  securityLabelNumber_parser (::fhir::unsignedInt_pskel& p)
  {
    this->securityLabelNumber_parser_ = &p;
  }

  void Contract_Action_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& doNotPerform,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Contract_Subject_pskel& subject,
           ::fhir::CodeableConcept_pskel& intent,
           ::fhir::string_pskel& linkId,
           ::fhir::CodeableConcept_pskel& status,
           ::fhir::Reference_pskel& context,
           ::fhir::string_pskel& contextLinkId,
           ::fhir::dateTime_pskel& occurrenceDateTime,
           ::fhir::Period_pskel& occurrencePeriod,
           ::fhir::Timing_pskel& occurrenceTiming,
           ::fhir::Reference_pskel& requester,
           ::fhir::string_pskel& requesterLinkId,
           ::fhir::CodeableConcept_pskel& performerType,
           ::fhir::CodeableConcept_pskel& performerRole,
           ::fhir::Reference_pskel& performer,
           ::fhir::string_pskel& performerLinkId,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::string_pskel& reason,
           ::fhir::string_pskel& reasonLinkId,
           ::fhir::Annotation_pskel& note,
           ::fhir::unsignedInt_pskel& securityLabelNumber)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->doNotPerform_parser_ = &doNotPerform;
    this->type_parser_ = &type;
    this->subject_parser_ = &subject;
    this->intent_parser_ = &intent;
    this->linkId_parser_ = &linkId;
    this->status_parser_ = &status;
    this->context_parser_ = &context;
    this->contextLinkId_parser_ = &contextLinkId;
    this->occurrenceDateTime_parser_ = &occurrenceDateTime;
    this->occurrencePeriod_parser_ = &occurrencePeriod;
    this->occurrenceTiming_parser_ = &occurrenceTiming;
    this->requester_parser_ = &requester;
    this->requesterLinkId_parser_ = &requesterLinkId;
    this->performerType_parser_ = &performerType;
    this->performerRole_parser_ = &performerRole;
    this->performer_parser_ = &performer;
    this->performerLinkId_parser_ = &performerLinkId;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->reason_parser_ = &reason;
    this->reasonLinkId_parser_ = &reasonLinkId;
    this->note_parser_ = &note;
    this->securityLabelNumber_parser_ = &securityLabelNumber;
  }

  Contract_Action_pskel::
  Contract_Action_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Action_impl_ (0),
    doNotPerform_parser_ (0),
    type_parser_ (0),
    subject_parser_ (0),
    intent_parser_ (0),
    linkId_parser_ (0),
    status_parser_ (0),
    context_parser_ (0),
    contextLinkId_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    requester_parser_ (0),
    requesterLinkId_parser_ (0),
    performerType_parser_ (0),
    performerRole_parser_ (0),
    performer_parser_ (0),
    performerLinkId_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    reason_parser_ (0),
    reasonLinkId_parser_ (0),
    note_parser_ (0),
    securityLabelNumber_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Action_pskel::
  Contract_Action_pskel (Contract_Action_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Action_impl_ (impl),
    doNotPerform_parser_ (0),
    type_parser_ (0),
    subject_parser_ (0),
    intent_parser_ (0),
    linkId_parser_ (0),
    status_parser_ (0),
    context_parser_ (0),
    contextLinkId_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    requester_parser_ (0),
    requesterLinkId_parser_ (0),
    performerType_parser_ (0),
    performerRole_parser_ (0),
    performer_parser_ (0),
    performerLinkId_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    reason_parser_ (0),
    reasonLinkId_parser_ (0),
    note_parser_ (0),
    securityLabelNumber_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Subject_pskel
  //

  void Contract_Subject_pskel::
  reference_parser (::fhir::Reference_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void Contract_Subject_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void Contract_Subject_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& reference,
           ::fhir::CodeableConcept_pskel& role)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->reference_parser_ = &reference;
    this->role_parser_ = &role;
  }

  Contract_Subject_pskel::
  Contract_Subject_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Subject_impl_ (0),
    reference_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Subject_pskel::
  Contract_Subject_pskel (Contract_Subject_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Subject_impl_ (impl),
    reference_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Signer_pskel
  //

  void Contract_Signer_pskel::
  type_parser (::fhir::Coding_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Contract_Signer_pskel::
  party_parser (::fhir::Reference_pskel& p)
  {
    this->party_parser_ = &p;
  }

  void Contract_Signer_pskel::
  signature_parser (::fhir::Signature_pskel& p)
  {
    this->signature_parser_ = &p;
  }

  void Contract_Signer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Coding_pskel& type,
           ::fhir::Reference_pskel& party,
           ::fhir::Signature_pskel& signature)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->party_parser_ = &party;
    this->signature_parser_ = &signature;
  }

  Contract_Signer_pskel::
  Contract_Signer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Signer_impl_ (0),
    type_parser_ (0),
    party_parser_ (0),
    signature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Signer_pskel::
  Contract_Signer_pskel (Contract_Signer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Signer_impl_ (impl),
    type_parser_ (0),
    party_parser_ (0),
    signature_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Friendly_pskel
  //

  void Contract_Friendly_pskel::
  contentAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->contentAttachment_parser_ = &p;
  }

  void Contract_Friendly_pskel::
  contentReference_parser (::fhir::Reference_pskel& p)
  {
    this->contentReference_parser_ = &p;
  }

  void Contract_Friendly_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Attachment_pskel& contentAttachment,
           ::fhir::Reference_pskel& contentReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->contentAttachment_parser_ = &contentAttachment;
    this->contentReference_parser_ = &contentReference;
  }

  Contract_Friendly_pskel::
  Contract_Friendly_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Friendly_impl_ (0),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Friendly_pskel::
  Contract_Friendly_pskel (Contract_Friendly_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Friendly_impl_ (impl),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Legal_pskel
  //

  void Contract_Legal_pskel::
  contentAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->contentAttachment_parser_ = &p;
  }

  void Contract_Legal_pskel::
  contentReference_parser (::fhir::Reference_pskel& p)
  {
    this->contentReference_parser_ = &p;
  }

  void Contract_Legal_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Attachment_pskel& contentAttachment,
           ::fhir::Reference_pskel& contentReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->contentAttachment_parser_ = &contentAttachment;
    this->contentReference_parser_ = &contentReference;
  }

  Contract_Legal_pskel::
  Contract_Legal_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Legal_impl_ (0),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Legal_pskel::
  Contract_Legal_pskel (Contract_Legal_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Legal_impl_ (impl),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Contract_Rule_pskel
  //

  void Contract_Rule_pskel::
  contentAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->contentAttachment_parser_ = &p;
  }

  void Contract_Rule_pskel::
  contentReference_parser (::fhir::Reference_pskel& p)
  {
    this->contentReference_parser_ = &p;
  }

  void Contract_Rule_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Attachment_pskel& contentAttachment,
           ::fhir::Reference_pskel& contentReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->contentAttachment_parser_ = &contentAttachment;
    this->contentReference_parser_ = &contentReference;
  }

  Contract_Rule_pskel::
  Contract_Rule_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Contract_Rule_impl_ (0),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Contract_Rule_pskel::
  Contract_Rule_pskel (Contract_Rule_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Contract_Rule_impl_ (impl),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ContractResourceStatusCodes_list_pskel
  //

  ContractResourceStatusCodes_list_pskel::
  ContractResourceStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ContractResourceStatusCodes_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ContractResourceStatusCodes_list_pskel_enums_, 15UL);
  }

  ContractResourceStatusCodes_list_pskel::
  ContractResourceStatusCodes_list_pskel (ContractResourceStatusCodes_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ContractResourceStatusCodes_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ContractResourceStatusCodes_list_pskel_enums_, 15UL);
  }

  // ContractResourceStatusCodes_pskel
  //

  void ContractResourceStatusCodes_pskel::
  value_parser (::fhir::ContractResourceStatusCodes_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ContractResourceStatusCodes_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ContractResourceStatusCodes_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ContractResourceStatusCodes_pskel::
  ContractResourceStatusCodes_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ContractResourceStatusCodes_impl_ (0),
    value_parser_ (0)
  {
  }

  ContractResourceStatusCodes_pskel::
  ContractResourceStatusCodes_pskel (ContractResourceStatusCodes_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ContractResourceStatusCodes_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ContractResourcePublicationStatusCodes_list_pskel
  //

  ContractResourcePublicationStatusCodes_list_pskel::
  ContractResourcePublicationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ContractResourcePublicationStatusCodes_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ContractResourcePublicationStatusCodes_list_pskel_enums_, 15UL);
  }

  ContractResourcePublicationStatusCodes_list_pskel::
  ContractResourcePublicationStatusCodes_list_pskel (ContractResourcePublicationStatusCodes_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ContractResourcePublicationStatusCodes_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ContractResourcePublicationStatusCodes_list_pskel_enums_, 15UL);
  }

  // ContractResourcePublicationStatusCodes_pskel
  //

  void ContractResourcePublicationStatusCodes_pskel::
  value_parser (::fhir::ContractResourcePublicationStatusCodes_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ContractResourcePublicationStatusCodes_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ContractResourcePublicationStatusCodes_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ContractResourcePublicationStatusCodes_pskel::
  ContractResourcePublicationStatusCodes_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ContractResourcePublicationStatusCodes_impl_ (0),
    value_parser_ (0)
  {
  }

  ContractResourcePublicationStatusCodes_pskel::
  ContractResourcePublicationStatusCodes_pskel (ContractResourcePublicationStatusCodes_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ContractResourcePublicationStatusCodes_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Contract_pskel
  //

  void Contract_pskel::
  identifier ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->identifier ();
  }

  void Contract_pskel::
  url ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->url ();
  }

  void Contract_pskel::
  version ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->version ();
  }

  void Contract_pskel::
  status ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->status ();
  }

  void Contract_pskel::
  legalState ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->legalState ();
  }

  void Contract_pskel::
  instantiatesCanonical ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->instantiatesCanonical ();
  }

  void Contract_pskel::
  instantiatesUri ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->instantiatesUri ();
  }

  void Contract_pskel::
  contentDerivative ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->contentDerivative ();
  }

  void Contract_pskel::
  issued ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->issued ();
  }

  void Contract_pskel::
  applies ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->applies ();
  }

  void Contract_pskel::
  expirationType ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->expirationType ();
  }

  void Contract_pskel::
  subject ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->subject ();
  }

  void Contract_pskel::
  authority ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->authority ();
  }

  void Contract_pskel::
  domain ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->domain ();
  }

  void Contract_pskel::
  site ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->site ();
  }

  void Contract_pskel::
  name ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->name ();
  }

  void Contract_pskel::
  title ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->title ();
  }

  void Contract_pskel::
  subtitle ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->subtitle ();
  }

  void Contract_pskel::
  alias ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->alias ();
  }

  void Contract_pskel::
  author ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->author ();
  }

  void Contract_pskel::
  scope ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->scope ();
  }

  void Contract_pskel::
  topicCodeableConcept ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->topicCodeableConcept ();
  }

  void Contract_pskel::
  topicReference ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->topicReference ();
  }

  void Contract_pskel::
  type ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->type ();
  }

  void Contract_pskel::
  subType ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->subType ();
  }

  void Contract_pskel::
  contentDefinition ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->contentDefinition ();
  }

  void Contract_pskel::
  term ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->term ();
  }

  void Contract_pskel::
  supportingInfo ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->supportingInfo ();
  }

  void Contract_pskel::
  relevantHistory ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->relevantHistory ();
  }

  void Contract_pskel::
  signer ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->signer ();
  }

  void Contract_pskel::
  friendly ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->friendly ();
  }

  void Contract_pskel::
  legal ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->legal ();
  }

  void Contract_pskel::
  rule ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->rule ();
  }

  void Contract_pskel::
  legallyBindingAttachment ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->legallyBindingAttachment ();
  }

  void Contract_pskel::
  legallyBindingReference ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->legallyBindingReference ();
  }

  void Contract_pskel::
  post_Contract ()
  {
    if (this->Contract_impl_)
      this->Contract_impl_->post_Contract ();
    else
      post_DomainResource ();
  }

  void Contract_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->legalState_parser_)
      this->legalState_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->contentDerivative_parser_)
      this->contentDerivative_parser_->_reset ();

    if (this->issued_parser_)
      this->issued_parser_->_reset ();

    if (this->applies_parser_)
      this->applies_parser_->_reset ();

    if (this->expirationType_parser_)
      this->expirationType_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->authority_parser_)
      this->authority_parser_->_reset ();

    if (this->domain_parser_)
      this->domain_parser_->_reset ();

    if (this->site_parser_)
      this->site_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->subtitle_parser_)
      this->subtitle_parser_->_reset ();

    if (this->alias_parser_)
      this->alias_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->scope_parser_)
      this->scope_parser_->_reset ();

    if (this->topicCodeableConcept_parser_)
      this->topicCodeableConcept_parser_->_reset ();

    if (this->topicReference_parser_)
      this->topicReference_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subType_parser_)
      this->subType_parser_->_reset ();

    if (this->contentDefinition_parser_)
      this->contentDefinition_parser_->_reset ();

    if (this->term_parser_)
      this->term_parser_->_reset ();

    if (this->supportingInfo_parser_)
      this->supportingInfo_parser_->_reset ();

    if (this->relevantHistory_parser_)
      this->relevantHistory_parser_->_reset ();

    if (this->signer_parser_)
      this->signer_parser_->_reset ();

    if (this->friendly_parser_)
      this->friendly_parser_->_reset ();

    if (this->legal_parser_)
      this->legal_parser_->_reset ();

    if (this->rule_parser_)
      this->rule_parser_->_reset ();

    if (this->legallyBindingAttachment_parser_)
      this->legallyBindingAttachment_parser_->_reset ();

    if (this->legallyBindingReference_parser_)
      this->legallyBindingReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_ContentDefinition_pskel
  //

  void Contract_ContentDefinition_pskel::
  type ()
  {
    if (this->Contract_ContentDefinition_impl_)
      this->Contract_ContentDefinition_impl_->type ();
  }

  void Contract_ContentDefinition_pskel::
  subType ()
  {
    if (this->Contract_ContentDefinition_impl_)
      this->Contract_ContentDefinition_impl_->subType ();
  }

  void Contract_ContentDefinition_pskel::
  publisher ()
  {
    if (this->Contract_ContentDefinition_impl_)
      this->Contract_ContentDefinition_impl_->publisher ();
  }

  void Contract_ContentDefinition_pskel::
  publicationDate ()
  {
    if (this->Contract_ContentDefinition_impl_)
      this->Contract_ContentDefinition_impl_->publicationDate ();
  }

  void Contract_ContentDefinition_pskel::
  publicationStatus ()
  {
    if (this->Contract_ContentDefinition_impl_)
      this->Contract_ContentDefinition_impl_->publicationStatus ();
  }

  void Contract_ContentDefinition_pskel::
  copyright ()
  {
    if (this->Contract_ContentDefinition_impl_)
      this->Contract_ContentDefinition_impl_->copyright ();
  }

  void Contract_ContentDefinition_pskel::
  post_Contract_ContentDefinition ()
  {
    if (this->Contract_ContentDefinition_impl_)
      this->Contract_ContentDefinition_impl_->post_Contract_ContentDefinition ();
    else
      post_BackboneElement ();
  }

  void Contract_ContentDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subType_parser_)
      this->subType_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->publicationDate_parser_)
      this->publicationDate_parser_->_reset ();

    if (this->publicationStatus_parser_)
      this->publicationStatus_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Term_pskel
  //

  void Contract_Term_pskel::
  identifier ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->identifier ();
  }

  void Contract_Term_pskel::
  issued ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->issued ();
  }

  void Contract_Term_pskel::
  applies ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->applies ();
  }

  void Contract_Term_pskel::
  topicCodeableConcept ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->topicCodeableConcept ();
  }

  void Contract_Term_pskel::
  topicReference ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->topicReference ();
  }

  void Contract_Term_pskel::
  type ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->type ();
  }

  void Contract_Term_pskel::
  subType ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->subType ();
  }

  void Contract_Term_pskel::
  text ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->text ();
  }

  void Contract_Term_pskel::
  securityLabel ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->securityLabel ();
  }

  void Contract_Term_pskel::
  offer ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->offer ();
  }

  void Contract_Term_pskel::
  asset ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->asset ();
  }

  void Contract_Term_pskel::
  action ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->action ();
  }

  void Contract_Term_pskel::
  group ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->group ();
  }

  void Contract_Term_pskel::
  post_Contract_Term ()
  {
    if (this->Contract_Term_impl_)
      this->Contract_Term_impl_->post_Contract_Term ();
    else
      post_BackboneElement ();
  }

  void Contract_Term_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->issued_parser_)
      this->issued_parser_->_reset ();

    if (this->applies_parser_)
      this->applies_parser_->_reset ();

    if (this->topicCodeableConcept_parser_)
      this->topicCodeableConcept_parser_->_reset ();

    if (this->topicReference_parser_)
      this->topicReference_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subType_parser_)
      this->subType_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->securityLabel_parser_)
      this->securityLabel_parser_->_reset ();

    if (this->offer_parser_)
      this->offer_parser_->_reset ();

    if (this->asset_parser_)
      this->asset_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    if (this->group_parser_)
      this->group_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_SecurityLabel_pskel
  //

  void Contract_SecurityLabel_pskel::
  number ()
  {
    if (this->Contract_SecurityLabel_impl_)
      this->Contract_SecurityLabel_impl_->number ();
  }

  void Contract_SecurityLabel_pskel::
  classification ()
  {
    if (this->Contract_SecurityLabel_impl_)
      this->Contract_SecurityLabel_impl_->classification ();
  }

  void Contract_SecurityLabel_pskel::
  category ()
  {
    if (this->Contract_SecurityLabel_impl_)
      this->Contract_SecurityLabel_impl_->category ();
  }

  void Contract_SecurityLabel_pskel::
  control ()
  {
    if (this->Contract_SecurityLabel_impl_)
      this->Contract_SecurityLabel_impl_->control ();
  }

  void Contract_SecurityLabel_pskel::
  post_Contract_SecurityLabel ()
  {
    if (this->Contract_SecurityLabel_impl_)
      this->Contract_SecurityLabel_impl_->post_Contract_SecurityLabel ();
    else
      post_BackboneElement ();
  }

  void Contract_SecurityLabel_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->number_parser_)
      this->number_parser_->_reset ();

    if (this->classification_parser_)
      this->classification_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->control_parser_)
      this->control_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Offer_pskel
  //

  void Contract_Offer_pskel::
  identifier ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->identifier ();
  }

  void Contract_Offer_pskel::
  party ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->party ();
  }

  void Contract_Offer_pskel::
  topic ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->topic ();
  }

  void Contract_Offer_pskel::
  type ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->type ();
  }

  void Contract_Offer_pskel::
  decision ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->decision ();
  }

  void Contract_Offer_pskel::
  decisionMode ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->decisionMode ();
  }

  void Contract_Offer_pskel::
  answer ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->answer ();
  }

  void Contract_Offer_pskel::
  text ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->text ();
  }

  void Contract_Offer_pskel::
  linkId ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->linkId ();
  }

  void Contract_Offer_pskel::
  securityLabelNumber ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->securityLabelNumber ();
  }

  void Contract_Offer_pskel::
  post_Contract_Offer ()
  {
    if (this->Contract_Offer_impl_)
      this->Contract_Offer_impl_->post_Contract_Offer ();
    else
      post_BackboneElement ();
  }

  void Contract_Offer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->party_parser_)
      this->party_parser_->_reset ();

    if (this->topic_parser_)
      this->topic_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->decision_parser_)
      this->decision_parser_->_reset ();

    if (this->decisionMode_parser_)
      this->decisionMode_parser_->_reset ();

    if (this->answer_parser_)
      this->answer_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->linkId_parser_)
      this->linkId_parser_->_reset ();

    if (this->securityLabelNumber_parser_)
      this->securityLabelNumber_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Party_pskel
  //

  void Contract_Party_pskel::
  reference ()
  {
    if (this->Contract_Party_impl_)
      this->Contract_Party_impl_->reference ();
  }

  void Contract_Party_pskel::
  role ()
  {
    if (this->Contract_Party_impl_)
      this->Contract_Party_impl_->role ();
  }

  void Contract_Party_pskel::
  post_Contract_Party ()
  {
    if (this->Contract_Party_impl_)
      this->Contract_Party_impl_->post_Contract_Party ();
    else
      post_BackboneElement ();
  }

  void Contract_Party_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Answer_pskel
  //

  void Contract_Answer_pskel::
  valueBoolean ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueBoolean ();
  }

  void Contract_Answer_pskel::
  valueDecimal ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueDecimal ();
  }

  void Contract_Answer_pskel::
  valueInteger ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueInteger ();
  }

  void Contract_Answer_pskel::
  valueDate ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueDate ();
  }

  void Contract_Answer_pskel::
  valueDateTime ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueDateTime ();
  }

  void Contract_Answer_pskel::
  valueTime ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueTime ();
  }

  void Contract_Answer_pskel::
  valueString ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueString ();
  }

  void Contract_Answer_pskel::
  valueUri ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueUri ();
  }

  void Contract_Answer_pskel::
  valueAttachment ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueAttachment ();
  }

  void Contract_Answer_pskel::
  valueCoding ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueCoding ();
  }

  void Contract_Answer_pskel::
  valueQuantity ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueQuantity ();
  }

  void Contract_Answer_pskel::
  valueReference ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->valueReference ();
  }

  void Contract_Answer_pskel::
  post_Contract_Answer ()
  {
    if (this->Contract_Answer_impl_)
      this->Contract_Answer_impl_->post_Contract_Answer ();
    else
      post_BackboneElement ();
  }

  void Contract_Answer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueDecimal_parser_)
      this->valueDecimal_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueDate_parser_)
      this->valueDate_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueUri_parser_)
      this->valueUri_parser_->_reset ();

    if (this->valueAttachment_parser_)
      this->valueAttachment_parser_->_reset ();

    if (this->valueCoding_parser_)
      this->valueCoding_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Asset_pskel
  //

  void Contract_Asset_pskel::
  scope ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->scope ();
  }

  void Contract_Asset_pskel::
  type ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->type ();
  }

  void Contract_Asset_pskel::
  typeReference ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->typeReference ();
  }

  void Contract_Asset_pskel::
  subtype ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->subtype ();
  }

  void Contract_Asset_pskel::
  relationship ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->relationship ();
  }

  void Contract_Asset_pskel::
  context ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->context ();
  }

  void Contract_Asset_pskel::
  condition ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->condition ();
  }

  void Contract_Asset_pskel::
  periodType ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->periodType ();
  }

  void Contract_Asset_pskel::
  period ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->period ();
  }

  void Contract_Asset_pskel::
  usePeriod ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->usePeriod ();
  }

  void Contract_Asset_pskel::
  text ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->text ();
  }

  void Contract_Asset_pskel::
  linkId ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->linkId ();
  }

  void Contract_Asset_pskel::
  answer ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->answer ();
  }

  void Contract_Asset_pskel::
  securityLabelNumber ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->securityLabelNumber ();
  }

  void Contract_Asset_pskel::
  valuedItem ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->valuedItem ();
  }

  void Contract_Asset_pskel::
  post_Contract_Asset ()
  {
    if (this->Contract_Asset_impl_)
      this->Contract_Asset_impl_->post_Contract_Asset ();
    else
      post_BackboneElement ();
  }

  void Contract_Asset_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->scope_parser_)
      this->scope_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->typeReference_parser_)
      this->typeReference_parser_->_reset ();

    if (this->subtype_parser_)
      this->subtype_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->periodType_parser_)
      this->periodType_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->usePeriod_parser_)
      this->usePeriod_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->linkId_parser_)
      this->linkId_parser_->_reset ();

    if (this->answer_parser_)
      this->answer_parser_->_reset ();

    if (this->securityLabelNumber_parser_)
      this->securityLabelNumber_parser_->_reset ();

    if (this->valuedItem_parser_)
      this->valuedItem_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Context_pskel
  //

  void Contract_Context_pskel::
  reference ()
  {
    if (this->Contract_Context_impl_)
      this->Contract_Context_impl_->reference ();
  }

  void Contract_Context_pskel::
  code ()
  {
    if (this->Contract_Context_impl_)
      this->Contract_Context_impl_->code ();
  }

  void Contract_Context_pskel::
  text ()
  {
    if (this->Contract_Context_impl_)
      this->Contract_Context_impl_->text ();
  }

  void Contract_Context_pskel::
  post_Contract_Context ()
  {
    if (this->Contract_Context_impl_)
      this->Contract_Context_impl_->post_Contract_Context ();
    else
      post_BackboneElement ();
  }

  void Contract_Context_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_ValuedItem_pskel
  //

  void Contract_ValuedItem_pskel::
  entityCodeableConcept ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->entityCodeableConcept ();
  }

  void Contract_ValuedItem_pskel::
  entityReference ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->entityReference ();
  }

  void Contract_ValuedItem_pskel::
  identifier ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->identifier ();
  }

  void Contract_ValuedItem_pskel::
  effectiveTime ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->effectiveTime ();
  }

  void Contract_ValuedItem_pskel::
  quantity ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->quantity ();
  }

  void Contract_ValuedItem_pskel::
  unitPrice ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->unitPrice ();
  }

  void Contract_ValuedItem_pskel::
  factor ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->factor ();
  }

  void Contract_ValuedItem_pskel::
  points ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->points ();
  }

  void Contract_ValuedItem_pskel::
  net ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->net ();
  }

  void Contract_ValuedItem_pskel::
  payment ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->payment ();
  }

  void Contract_ValuedItem_pskel::
  paymentDate ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->paymentDate ();
  }

  void Contract_ValuedItem_pskel::
  responsible ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->responsible ();
  }

  void Contract_ValuedItem_pskel::
  recipient ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->recipient ();
  }

  void Contract_ValuedItem_pskel::
  linkId ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->linkId ();
  }

  void Contract_ValuedItem_pskel::
  securityLabelNumber ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->securityLabelNumber ();
  }

  void Contract_ValuedItem_pskel::
  post_Contract_ValuedItem ()
  {
    if (this->Contract_ValuedItem_impl_)
      this->Contract_ValuedItem_impl_->post_Contract_ValuedItem ();
    else
      post_BackboneElement ();
  }

  void Contract_ValuedItem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->entityCodeableConcept_parser_)
      this->entityCodeableConcept_parser_->_reset ();

    if (this->entityReference_parser_)
      this->entityReference_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->effectiveTime_parser_)
      this->effectiveTime_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->points_parser_)
      this->points_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->payment_parser_)
      this->payment_parser_->_reset ();

    if (this->paymentDate_parser_)
      this->paymentDate_parser_->_reset ();

    if (this->responsible_parser_)
      this->responsible_parser_->_reset ();

    if (this->recipient_parser_)
      this->recipient_parser_->_reset ();

    if (this->linkId_parser_)
      this->linkId_parser_->_reset ();

    if (this->securityLabelNumber_parser_)
      this->securityLabelNumber_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Action_pskel
  //

  void Contract_Action_pskel::
  doNotPerform ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->doNotPerform ();
  }

  void Contract_Action_pskel::
  type ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->type ();
  }

  void Contract_Action_pskel::
  subject ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->subject ();
  }

  void Contract_Action_pskel::
  intent ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->intent ();
  }

  void Contract_Action_pskel::
  linkId ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->linkId ();
  }

  void Contract_Action_pskel::
  status ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->status ();
  }

  void Contract_Action_pskel::
  context ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->context ();
  }

  void Contract_Action_pskel::
  contextLinkId ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->contextLinkId ();
  }

  void Contract_Action_pskel::
  occurrenceDateTime ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->occurrenceDateTime ();
  }

  void Contract_Action_pskel::
  occurrencePeriod ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->occurrencePeriod ();
  }

  void Contract_Action_pskel::
  occurrenceTiming ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->occurrenceTiming ();
  }

  void Contract_Action_pskel::
  requester ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->requester ();
  }

  void Contract_Action_pskel::
  requesterLinkId ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->requesterLinkId ();
  }

  void Contract_Action_pskel::
  performerType ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->performerType ();
  }

  void Contract_Action_pskel::
  performerRole ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->performerRole ();
  }

  void Contract_Action_pskel::
  performer ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->performer ();
  }

  void Contract_Action_pskel::
  performerLinkId ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->performerLinkId ();
  }

  void Contract_Action_pskel::
  reasonCode ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->reasonCode ();
  }

  void Contract_Action_pskel::
  reasonReference ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->reasonReference ();
  }

  void Contract_Action_pskel::
  reason ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->reason ();
  }

  void Contract_Action_pskel::
  reasonLinkId ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->reasonLinkId ();
  }

  void Contract_Action_pskel::
  note ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->note ();
  }

  void Contract_Action_pskel::
  securityLabelNumber ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->securityLabelNumber ();
  }

  void Contract_Action_pskel::
  post_Contract_Action ()
  {
    if (this->Contract_Action_impl_)
      this->Contract_Action_impl_->post_Contract_Action ();
    else
      post_BackboneElement ();
  }

  void Contract_Action_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->doNotPerform_parser_)
      this->doNotPerform_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->linkId_parser_)
      this->linkId_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->contextLinkId_parser_)
      this->contextLinkId_parser_->_reset ();

    if (this->occurrenceDateTime_parser_)
      this->occurrenceDateTime_parser_->_reset ();

    if (this->occurrencePeriod_parser_)
      this->occurrencePeriod_parser_->_reset ();

    if (this->occurrenceTiming_parser_)
      this->occurrenceTiming_parser_->_reset ();

    if (this->requester_parser_)
      this->requester_parser_->_reset ();

    if (this->requesterLinkId_parser_)
      this->requesterLinkId_parser_->_reset ();

    if (this->performerType_parser_)
      this->performerType_parser_->_reset ();

    if (this->performerRole_parser_)
      this->performerRole_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->performerLinkId_parser_)
      this->performerLinkId_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    if (this->reasonLinkId_parser_)
      this->reasonLinkId_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->securityLabelNumber_parser_)
      this->securityLabelNumber_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Subject_pskel
  //

  void Contract_Subject_pskel::
  reference ()
  {
    if (this->Contract_Subject_impl_)
      this->Contract_Subject_impl_->reference ();
  }

  void Contract_Subject_pskel::
  role ()
  {
    if (this->Contract_Subject_impl_)
      this->Contract_Subject_impl_->role ();
  }

  void Contract_Subject_pskel::
  post_Contract_Subject ()
  {
    if (this->Contract_Subject_impl_)
      this->Contract_Subject_impl_->post_Contract_Subject ();
    else
      post_BackboneElement ();
  }

  void Contract_Subject_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Signer_pskel
  //

  void Contract_Signer_pskel::
  type ()
  {
    if (this->Contract_Signer_impl_)
      this->Contract_Signer_impl_->type ();
  }

  void Contract_Signer_pskel::
  party ()
  {
    if (this->Contract_Signer_impl_)
      this->Contract_Signer_impl_->party ();
  }

  void Contract_Signer_pskel::
  signature ()
  {
    if (this->Contract_Signer_impl_)
      this->Contract_Signer_impl_->signature ();
  }

  void Contract_Signer_pskel::
  post_Contract_Signer ()
  {
    if (this->Contract_Signer_impl_)
      this->Contract_Signer_impl_->post_Contract_Signer ();
    else
      post_BackboneElement ();
  }

  void Contract_Signer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->party_parser_)
      this->party_parser_->_reset ();

    if (this->signature_parser_)
      this->signature_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Friendly_pskel
  //

  void Contract_Friendly_pskel::
  contentAttachment ()
  {
    if (this->Contract_Friendly_impl_)
      this->Contract_Friendly_impl_->contentAttachment ();
  }

  void Contract_Friendly_pskel::
  contentReference ()
  {
    if (this->Contract_Friendly_impl_)
      this->Contract_Friendly_impl_->contentReference ();
  }

  void Contract_Friendly_pskel::
  post_Contract_Friendly ()
  {
    if (this->Contract_Friendly_impl_)
      this->Contract_Friendly_impl_->post_Contract_Friendly ();
    else
      post_BackboneElement ();
  }

  void Contract_Friendly_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->contentAttachment_parser_)
      this->contentAttachment_parser_->_reset ();

    if (this->contentReference_parser_)
      this->contentReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Legal_pskel
  //

  void Contract_Legal_pskel::
  contentAttachment ()
  {
    if (this->Contract_Legal_impl_)
      this->Contract_Legal_impl_->contentAttachment ();
  }

  void Contract_Legal_pskel::
  contentReference ()
  {
    if (this->Contract_Legal_impl_)
      this->Contract_Legal_impl_->contentReference ();
  }

  void Contract_Legal_pskel::
  post_Contract_Legal ()
  {
    if (this->Contract_Legal_impl_)
      this->Contract_Legal_impl_->post_Contract_Legal ();
    else
      post_BackboneElement ();
  }

  void Contract_Legal_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->contentAttachment_parser_)
      this->contentAttachment_parser_->_reset ();

    if (this->contentReference_parser_)
      this->contentReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Contract_Rule_pskel
  //

  void Contract_Rule_pskel::
  contentAttachment ()
  {
    if (this->Contract_Rule_impl_)
      this->Contract_Rule_impl_->contentAttachment ();
  }

  void Contract_Rule_pskel::
  contentReference ()
  {
    if (this->Contract_Rule_impl_)
      this->Contract_Rule_impl_->contentReference ();
  }

  void Contract_Rule_pskel::
  post_Contract_Rule ()
  {
    if (this->Contract_Rule_impl_)
      this->Contract_Rule_impl_->post_Contract_Rule ();
    else
      post_BackboneElement ();
  }

  void Contract_Rule_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->contentAttachment_parser_)
      this->contentAttachment_parser_->_reset ();

    if (this->contentReference_parser_)
      this->contentReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // ContractResourceStatusCodes_list_pskel
  //

  void ContractResourceStatusCodes_list_pskel::
  post_ContractResourceStatusCodes_list ()
  {
    if (this->ContractResourceStatusCodes_list_impl_)
      this->ContractResourceStatusCodes_list_impl_->post_ContractResourceStatusCodes_list ();
    else
      post_code_primitive ();
  }

  const char* const ContractResourceStatusCodes_list_pskel::_xsde_ContractResourceStatusCodes_list_pskel_enums_[15UL] = 
  {
    "amended",
    "appended",
    "cancelled",
    "disputed",
    "entered-in-error",
    "executable",
    "executed",
    "negotiable",
    "offered",
    "policy",
    "rejected",
    "renewed",
    "resolved",
    "revoked",
    "terminated"
  };

  // ContractResourceStatusCodes_pskel
  //

  void ContractResourceStatusCodes_pskel::
  value ()
  {
    if (this->ContractResourceStatusCodes_impl_)
      this->ContractResourceStatusCodes_impl_->value ();
  }

  void ContractResourceStatusCodes_pskel::
  post_ContractResourceStatusCodes ()
  {
    if (this->ContractResourceStatusCodes_impl_)
      this->ContractResourceStatusCodes_impl_->post_ContractResourceStatusCodes ();
    else
      post_Element ();
  }

  void ContractResourceStatusCodes_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ContractResourcePublicationStatusCodes_list_pskel
  //

  void ContractResourcePublicationStatusCodes_list_pskel::
  post_ContractResourcePublicationStatusCodes_list ()
  {
    if (this->ContractResourcePublicationStatusCodes_list_impl_)
      this->ContractResourcePublicationStatusCodes_list_impl_->post_ContractResourcePublicationStatusCodes_list ();
    else
      post_code_primitive ();
  }

  const char* const ContractResourcePublicationStatusCodes_list_pskel::_xsde_ContractResourcePublicationStatusCodes_list_pskel_enums_[15UL] = 
  {
    "amended",
    "appended",
    "cancelled",
    "disputed",
    "entered-in-error",
    "executable",
    "executed",
    "negotiable",
    "offered",
    "policy",
    "rejected",
    "renewed",
    "resolved",
    "revoked",
    "terminated"
  };

  // ContractResourcePublicationStatusCodes_pskel
  //

  void ContractResourcePublicationStatusCodes_pskel::
  value ()
  {
    if (this->ContractResourcePublicationStatusCodes_impl_)
      this->ContractResourcePublicationStatusCodes_impl_->value ();
  }

  void ContractResourcePublicationStatusCodes_pskel::
  post_ContractResourcePublicationStatusCodes ()
  {
    if (this->ContractResourcePublicationStatusCodes_impl_)
      this->ContractResourcePublicationStatusCodes_impl_->post_ContractResourcePublicationStatusCodes ();
    else
      post_Element ();
  }

  void ContractResourcePublicationStatusCodes_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Contract_pskel.
  //
  bool Contract_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "url" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "legalState" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "contentDerivative" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "issued" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "applies" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "expirationType" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "subject" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "authority" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "domain" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "site" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "subtitle" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;
        else if (n == "alias" &&
                 ns == "http://hl7.org/fhir")
          s = 18UL;
        else if (n == "author" &&
                 ns == "http://hl7.org/fhir")
          s = 19UL;
        else if (n == "scope" &&
                 ns == "http://hl7.org/fhir")
          s = 20UL;
        else if (n == "topicCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 21UL;
        else if (n == "topicReference" &&
                 ns == "http://hl7.org/fhir")
          s = 22UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 23UL;
        else if (n == "subType" &&
                 ns == "http://hl7.org/fhir")
          s = 24UL;
        else if (n == "contentDefinition" &&
                 ns == "http://hl7.org/fhir")
          s = 25UL;
        else if (n == "term" &&
                 ns == "http://hl7.org/fhir")
          s = 26UL;
        else if (n == "supportingInfo" &&
                 ns == "http://hl7.org/fhir")
          s = 27UL;
        else if (n == "relevantHistory" &&
                 ns == "http://hl7.org/fhir")
          s = 28UL;
        else if (n == "signer" &&
                 ns == "http://hl7.org/fhir")
          s = 29UL;
        else if (n == "friendly" &&
                 ns == "http://hl7.org/fhir")
          s = 30UL;
        else if (n == "legal" &&
                 ns == "http://hl7.org/fhir")
          s = 31UL;
        else if (n == "rule" &&
                 ns == "http://hl7.org/fhir")
          s = 32UL;
        else if (n == "legallyBindingAttachment" &&
                 ns == "http://hl7.org/fhir")
          s = 33UL;
        else if (n == "legallyBindingReference" &&
                 ns == "http://hl7.org/fhir")
          s = 34UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ContractResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "legalState" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->legalState_parser_)
            {
              this->legalState_parser_->pre ();
              ctx.nested_parser (this->legalState_parser_);
            }
          }
          else
          {
            if (this->legalState_parser_ != 0)
            {
              this->legalState_parser_->post_CodeableConcept ();
              this->legalState ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_Reference ();
              this->instantiatesCanonical ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "contentDerivative" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentDerivative_parser_)
            {
              this->contentDerivative_parser_->pre ();
              ctx.nested_parser (this->contentDerivative_parser_);
            }
          }
          else
          {
            if (this->contentDerivative_parser_ != 0)
            {
              this->contentDerivative_parser_->post_CodeableConcept ();
              this->contentDerivative ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "issued" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issued_parser_)
            {
              this->issued_parser_->pre ();
              ctx.nested_parser (this->issued_parser_);
            }
          }
          else
          {
            if (this->issued_parser_ != 0)
            {
              this->issued_parser_->post_dateTime ();
              this->issued ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "applies" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->applies_parser_)
            {
              this->applies_parser_->pre ();
              ctx.nested_parser (this->applies_parser_);
            }
          }
          else
          {
            if (this->applies_parser_ != 0)
            {
              this->applies_parser_->post_Period ();
              this->applies ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "expirationType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expirationType_parser_)
            {
              this->expirationType_parser_->pre ();
              ctx.nested_parser (this->expirationType_parser_);
            }
          }
          else
          {
            if (this->expirationType_parser_ != 0)
            {
              this->expirationType_parser_->post_CodeableConcept ();
              this->expirationType ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "authority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authority_parser_)
            {
              this->authority_parser_->pre ();
              ctx.nested_parser (this->authority_parser_);
            }
          }
          else
          {
            if (this->authority_parser_ != 0)
            {
              this->authority_parser_->post_Reference ();
              this->authority ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "domain" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->domain_parser_)
            {
              this->domain_parser_->pre ();
              ctx.nested_parser (this->domain_parser_);
            }
          }
          else
          {
            if (this->domain_parser_ != 0)
            {
              this->domain_parser_->post_Reference ();
              this->domain ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "site" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->site_parser_)
            {
              this->site_parser_->pre ();
              ctx.nested_parser (this->site_parser_);
            }
          }
          else
          {
            if (this->site_parser_ != 0)
            {
              this->site_parser_->post_Reference ();
              this->site ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "subtitle" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subtitle_parser_)
            {
              this->subtitle_parser_->pre ();
              ctx.nested_parser (this->subtitle_parser_);
            }
          }
          else
          {
            if (this->subtitle_parser_ != 0)
            {
              this->subtitle_parser_->post_string ();
              this->subtitle ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "alias" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->alias_parser_)
            {
              this->alias_parser_->pre ();
              ctx.nested_parser (this->alias_parser_);
            }
          }
          else
          {
            if (this->alias_parser_ != 0)
            {
              this->alias_parser_->post_string ();
              this->alias ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "scope" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scope_parser_)
            {
              this->scope_parser_->pre ();
              ctx.nested_parser (this->scope_parser_);
            }
          }
          else
          {
            if (this->scope_parser_ != 0)
            {
              this->scope_parser_->post_CodeableConcept ();
              this->scope ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "topicCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topicCodeableConcept_parser_)
            {
              this->topicCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->topicCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->topicCodeableConcept_parser_ != 0)
            {
              this->topicCodeableConcept_parser_->post_CodeableConcept ();
              this->topicCodeableConcept ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "topicReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topicReference_parser_)
            {
              this->topicReference_parser_->pre ();
              ctx.nested_parser (this->topicReference_parser_);
            }
          }
          else
          {
            if (this->topicReference_parser_ != 0)
            {
              this->topicReference_parser_->post_Reference ();
              this->topicReference ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "subType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subType_parser_)
            {
              this->subType_parser_->pre ();
              ctx.nested_parser (this->subType_parser_);
            }
          }
          else
          {
            if (this->subType_parser_ != 0)
            {
              this->subType_parser_->post_CodeableConcept ();
              this->subType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "contentDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentDefinition_parser_)
            {
              this->contentDefinition_parser_->pre ();
              ctx.nested_parser (this->contentDefinition_parser_);
            }
          }
          else
          {
            if (this->contentDefinition_parser_ != 0)
            {
              this->contentDefinition_parser_->post_Contract_ContentDefinition ();
              this->contentDefinition ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "term" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->term_parser_)
            {
              this->term_parser_->pre ();
              ctx.nested_parser (this->term_parser_);
            }
          }
          else
          {
            if (this->term_parser_ != 0)
            {
              this->term_parser_->post_Contract_Term ();
              this->term ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "supportingInfo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInfo_parser_)
            {
              this->supportingInfo_parser_->pre ();
              ctx.nested_parser (this->supportingInfo_parser_);
            }
          }
          else
          {
            if (this->supportingInfo_parser_ != 0)
            {
              this->supportingInfo_parser_->post_Reference ();
              this->supportingInfo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "relevantHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relevantHistory_parser_)
            {
              this->relevantHistory_parser_->pre ();
              ctx.nested_parser (this->relevantHistory_parser_);
            }
          }
          else
          {
            if (this->relevantHistory_parser_ != 0)
            {
              this->relevantHistory_parser_->post_Reference ();
              this->relevantHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "signer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->signer_parser_)
            {
              this->signer_parser_->pre ();
              ctx.nested_parser (this->signer_parser_);
            }
          }
          else
          {
            if (this->signer_parser_ != 0)
            {
              this->signer_parser_->post_Contract_Signer ();
              this->signer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "friendly" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->friendly_parser_)
            {
              this->friendly_parser_->pre ();
              ctx.nested_parser (this->friendly_parser_);
            }
          }
          else
          {
            if (this->friendly_parser_ != 0)
            {
              this->friendly_parser_->post_Contract_Friendly ();
              this->friendly ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "legal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->legal_parser_)
            {
              this->legal_parser_->pre ();
              ctx.nested_parser (this->legal_parser_);
            }
          }
          else
          {
            if (this->legal_parser_ != 0)
            {
              this->legal_parser_->post_Contract_Legal ();
              this->legal ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "rule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rule_parser_)
            {
              this->rule_parser_->pre ();
              ctx.nested_parser (this->rule_parser_);
            }
          }
          else
          {
            if (this->rule_parser_ != 0)
            {
              this->rule_parser_->post_Contract_Rule ();
              this->rule ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "legallyBindingAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->legallyBindingAttachment_parser_)
            {
              this->legallyBindingAttachment_parser_->pre ();
              ctx.nested_parser (this->legallyBindingAttachment_parser_);
            }
          }
          else
          {
            if (this->legallyBindingAttachment_parser_ != 0)
            {
              this->legallyBindingAttachment_parser_->post_Attachment ();
              this->legallyBindingAttachment ();
            }

            count = 0;
            state = 34UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 34UL;
          // Fall through.
        }
      }
      case 34UL:
      {
        if (n == "legallyBindingReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->legallyBindingReference_parser_)
            {
              this->legallyBindingReference_parser_->pre ();
              ctx.nested_parser (this->legallyBindingReference_parser_);
            }
          }
          else
          {
            if (this->legallyBindingReference_parser_ != 0)
            {
              this->legallyBindingReference_parser_->post_Reference ();
              this->legallyBindingReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_ContentDefinition_pskel.
  //
  bool Contract_ContentDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_ContentDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_ContentDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_ContentDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_ContentDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Contract_ContentDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "subType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subType_parser_)
            {
              this->subType_parser_->pre ();
              ctx.nested_parser (this->subType_parser_);
            }
          }
          else
          {
            if (this->subType_parser_ != 0)
            {
              this->subType_parser_->post_CodeableConcept ();
              this->subType ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_Reference ();
              this->publisher ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "publicationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publicationDate_parser_)
            {
              this->publicationDate_parser_->pre ();
              ctx.nested_parser (this->publicationDate_parser_);
            }
          }
          else
          {
            if (this->publicationDate_parser_ != 0)
            {
              this->publicationDate_parser_->post_dateTime ();
              this->publicationDate ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "publicationStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publicationStatus_parser_)
            {
              this->publicationStatus_parser_->pre ();
              ctx.nested_parser (this->publicationStatus_parser_);
            }
          }
          else
          {
            if (this->publicationStatus_parser_ != 0)
            {
              this->publicationStatus_parser_->post_ContractResourcePublicationStatusCodes ();
              this->publicationStatus ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Term_pskel.
  //
  bool Contract_Term_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "issued" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "applies" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "topicCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "topicReference" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "subType" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "securityLabel" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "offer" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Term_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Term_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Term_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Term_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Contract_Term_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "issued" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issued_parser_)
            {
              this->issued_parser_->pre ();
              ctx.nested_parser (this->issued_parser_);
            }
          }
          else
          {
            if (this->issued_parser_ != 0)
            {
              this->issued_parser_->post_dateTime ();
              this->issued ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "applies" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->applies_parser_)
            {
              this->applies_parser_->pre ();
              ctx.nested_parser (this->applies_parser_);
            }
          }
          else
          {
            if (this->applies_parser_ != 0)
            {
              this->applies_parser_->post_Period ();
              this->applies ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "topicCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topicCodeableConcept_parser_)
            {
              this->topicCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->topicCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->topicCodeableConcept_parser_ != 0)
            {
              this->topicCodeableConcept_parser_->post_CodeableConcept ();
              this->topicCodeableConcept ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "topicReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topicReference_parser_)
            {
              this->topicReference_parser_->pre ();
              ctx.nested_parser (this->topicReference_parser_);
            }
          }
          else
          {
            if (this->topicReference_parser_ != 0)
            {
              this->topicReference_parser_->post_Reference ();
              this->topicReference ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "subType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subType_parser_)
            {
              this->subType_parser_->pre ();
              ctx.nested_parser (this->subType_parser_);
            }
          }
          else
          {
            if (this->subType_parser_ != 0)
            {
              this->subType_parser_->post_CodeableConcept ();
              this->subType ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "securityLabel" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabel_parser_)
            {
              this->securityLabel_parser_->pre ();
              ctx.nested_parser (this->securityLabel_parser_);
            }
          }
          else
          {
            if (this->securityLabel_parser_ != 0)
            {
              this->securityLabel_parser_->post_Contract_SecurityLabel ();
              this->securityLabel ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "offer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->offer_parser_)
            {
              this->offer_parser_->pre ();
              ctx.nested_parser (this->offer_parser_);
            }
          }
          else
          {
            if (this->offer_parser_ != 0)
            {
              this->offer_parser_->post_Contract_Offer ();
              this->offer ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "asset" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->asset_parser_)
            {
              this->asset_parser_->pre ();
              ctx.nested_parser (this->asset_parser_);
            }
          }
          else
          {
            if (this->asset_parser_ != 0)
            {
              this->asset_parser_->post_Contract_Asset ();
              this->asset ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_Contract_Action ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "group" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->group_parser_)
            {
              this->group_parser_->pre ();
              ctx.nested_parser (this->group_parser_);
            }
          }
          else
          {
            if (this->group_parser_ != 0)
            {
              this->group_parser_->post_Contract_Term ();
              this->group ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_SecurityLabel_pskel.
  //
  bool Contract_SecurityLabel_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "number" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "classification" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_SecurityLabel_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_SecurityLabel_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_SecurityLabel_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_SecurityLabel_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Contract_SecurityLabel_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "number" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->number_parser_)
            {
              this->number_parser_->pre ();
              ctx.nested_parser (this->number_parser_);
            }
          }
          else
          {
            if (this->number_parser_ != 0)
            {
              this->number_parser_->post_unsignedInt ();
              this->number ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "classification" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->classification_parser_)
            {
              this->classification_parser_->pre ();
              ctx.nested_parser (this->classification_parser_);
            }
          }
          else
          {
            if (this->classification_parser_ != 0)
            {
              this->classification_parser_->post_Coding ();
              this->classification ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_Coding ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "control" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->control_parser_)
            {
              this->control_parser_->pre ();
              ctx.nested_parser (this->control_parser_);
            }
          }
          else
          {
            if (this->control_parser_ != 0)
            {
              this->control_parser_->post_Coding ();
              this->control ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Offer_pskel.
  //
  bool Contract_Offer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "party" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "topic" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "decision" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "decisionMode" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "answer" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "linkId" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "securityLabelNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Offer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Offer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Offer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Offer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_Offer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "party" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->party_parser_)
            {
              this->party_parser_->pre ();
              ctx.nested_parser (this->party_parser_);
            }
          }
          else
          {
            if (this->party_parser_ != 0)
            {
              this->party_parser_->post_Contract_Party ();
              this->party ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "topic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topic_parser_)
            {
              this->topic_parser_->pre ();
              ctx.nested_parser (this->topic_parser_);
            }
          }
          else
          {
            if (this->topic_parser_ != 0)
            {
              this->topic_parser_->post_Reference ();
              this->topic ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "decision" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->decision_parser_)
            {
              this->decision_parser_->pre ();
              ctx.nested_parser (this->decision_parser_);
            }
          }
          else
          {
            if (this->decision_parser_ != 0)
            {
              this->decision_parser_->post_CodeableConcept ();
              this->decision ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "decisionMode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->decisionMode_parser_)
            {
              this->decisionMode_parser_->pre ();
              ctx.nested_parser (this->decisionMode_parser_);
            }
          }
          else
          {
            if (this->decisionMode_parser_ != 0)
            {
              this->decisionMode_parser_->post_CodeableConcept ();
              this->decisionMode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "answer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answer_parser_)
            {
              this->answer_parser_->pre ();
              ctx.nested_parser (this->answer_parser_);
            }
          }
          else
          {
            if (this->answer_parser_ != 0)
            {
              this->answer_parser_->post_Contract_Answer ();
              this->answer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->linkId_parser_)
            {
              this->linkId_parser_->pre ();
              ctx.nested_parser (this->linkId_parser_);
            }
          }
          else
          {
            if (this->linkId_parser_ != 0)
            {
              this->linkId_parser_->post_string ();
              this->linkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "securityLabelNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabelNumber_parser_)
            {
              this->securityLabelNumber_parser_->pre ();
              ctx.nested_parser (this->securityLabelNumber_parser_);
            }
          }
          else
          {
            if (this->securityLabelNumber_parser_ != 0)
            {
              this->securityLabelNumber_parser_->post_unsignedInt ();
              this->securityLabelNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Party_pskel.
  //
  bool Contract_Party_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Party_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Party_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Party_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Party_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Contract_Party_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Answer_pskel.
  //
  bool Contract_Answer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "valueDecimal" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "valueInteger" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "valueDate" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "valueDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "valueTime" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "valueString" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "valueUri" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "valueAttachment" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "valueCoding" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "valueQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "valueReference" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Answer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Answer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Answer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Answer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_Answer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDecimal_parser_)
            {
              this->valueDecimal_parser_->pre ();
              ctx.nested_parser (this->valueDecimal_parser_);
            }
          }
          else
          {
            if (this->valueDecimal_parser_ != 0)
            {
              this->valueDecimal_parser_->post_decimal ();
              this->valueDecimal ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDate_parser_)
            {
              this->valueDate_parser_->pre ();
              ctx.nested_parser (this->valueDate_parser_);
            }
          }
          else
          {
            if (this->valueDate_parser_ != 0)
            {
              this->valueDate_parser_->post_date ();
              this->valueDate ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUri_parser_)
            {
              this->valueUri_parser_->pre ();
              ctx.nested_parser (this->valueUri_parser_);
            }
          }
          else
          {
            if (this->valueUri_parser_ != 0)
            {
              this->valueUri_parser_->post_uri ();
              this->valueUri ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "valueAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAttachment_parser_)
            {
              this->valueAttachment_parser_->pre ();
              ctx.nested_parser (this->valueAttachment_parser_);
            }
          }
          else
          {
            if (this->valueAttachment_parser_ != 0)
            {
              this->valueAttachment_parser_->post_Attachment ();
              this->valueAttachment ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "valueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCoding_parser_)
            {
              this->valueCoding_parser_->pre ();
              ctx.nested_parser (this->valueCoding_parser_);
            }
          }
          else
          {
            if (this->valueCoding_parser_ != 0)
            {
              this->valueCoding_parser_->post_Coding ();
              this->valueCoding ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Asset_pskel.
  //
  bool Contract_Asset_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "scope" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "typeReference" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "subtype" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "relationship" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "context" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "condition" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "periodType" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "usePeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "linkId" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "answer" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "securityLabelNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "valuedItem" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Asset_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Asset_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Asset_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Asset_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_Asset_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "scope" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scope_parser_)
            {
              this->scope_parser_->pre ();
              ctx.nested_parser (this->scope_parser_);
            }
          }
          else
          {
            if (this->scope_parser_ != 0)
            {
              this->scope_parser_->post_CodeableConcept ();
              this->scope ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "typeReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->typeReference_parser_)
            {
              this->typeReference_parser_->pre ();
              ctx.nested_parser (this->typeReference_parser_);
            }
          }
          else
          {
            if (this->typeReference_parser_ != 0)
            {
              this->typeReference_parser_->post_Reference ();
              this->typeReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "subtype" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subtype_parser_)
            {
              this->subtype_parser_->pre ();
              ctx.nested_parser (this->subtype_parser_);
            }
          }
          else
          {
            if (this->subtype_parser_ != 0)
            {
              this->subtype_parser_->post_CodeableConcept ();
              this->subtype ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_Coding ();
              this->relationship ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_Contract_Context ();
              this->context ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_string ();
              this->condition ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "periodType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->periodType_parser_)
            {
              this->periodType_parser_->pre ();
              ctx.nested_parser (this->periodType_parser_);
            }
          }
          else
          {
            if (this->periodType_parser_ != 0)
            {
              this->periodType_parser_->post_CodeableConcept ();
              this->periodType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "usePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usePeriod_parser_)
            {
              this->usePeriod_parser_->pre ();
              ctx.nested_parser (this->usePeriod_parser_);
            }
          }
          else
          {
            if (this->usePeriod_parser_ != 0)
            {
              this->usePeriod_parser_->post_Period ();
              this->usePeriod ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->linkId_parser_)
            {
              this->linkId_parser_->pre ();
              ctx.nested_parser (this->linkId_parser_);
            }
          }
          else
          {
            if (this->linkId_parser_ != 0)
            {
              this->linkId_parser_->post_string ();
              this->linkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "answer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answer_parser_)
            {
              this->answer_parser_->pre ();
              ctx.nested_parser (this->answer_parser_);
            }
          }
          else
          {
            if (this->answer_parser_ != 0)
            {
              this->answer_parser_->post_Contract_Answer ();
              this->answer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "securityLabelNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabelNumber_parser_)
            {
              this->securityLabelNumber_parser_->pre ();
              ctx.nested_parser (this->securityLabelNumber_parser_);
            }
          }
          else
          {
            if (this->securityLabelNumber_parser_ != 0)
            {
              this->securityLabelNumber_parser_->post_unsignedInt ();
              this->securityLabelNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "valuedItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valuedItem_parser_)
            {
              this->valuedItem_parser_->pre ();
              ctx.nested_parser (this->valuedItem_parser_);
            }
          }
          else
          {
            if (this->valuedItem_parser_ != 0)
            {
              this->valuedItem_parser_->post_Contract_ValuedItem ();
              this->valuedItem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Context_pskel.
  //
  bool Contract_Context_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Context_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Context_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Context_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Context_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_Context_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_ValuedItem_pskel.
  //
  bool Contract_ValuedItem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "entityCodeableConcept" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "entityReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "effectiveTime" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "unitPrice" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "factor" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "points" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "net" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "payment" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "paymentDate" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "responsible" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "recipient" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "linkId" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "securityLabelNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_ValuedItem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_ValuedItem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_ValuedItem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_ValuedItem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_ValuedItem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "entityCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entityCodeableConcept_parser_)
            {
              this->entityCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->entityCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->entityCodeableConcept_parser_ != 0)
            {
              this->entityCodeableConcept_parser_->post_CodeableConcept ();
              this->entityCodeableConcept ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "entityReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entityReference_parser_)
            {
              this->entityReference_parser_->pre ();
              ctx.nested_parser (this->entityReference_parser_);
            }
          }
          else
          {
            if (this->entityReference_parser_ != 0)
            {
              this->entityReference_parser_->post_Reference ();
              this->entityReference ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "effectiveTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectiveTime_parser_)
            {
              this->effectiveTime_parser_->pre ();
              ctx.nested_parser (this->effectiveTime_parser_);
            }
          }
          else
          {
            if (this->effectiveTime_parser_ != 0)
            {
              this->effectiveTime_parser_->post_dateTime ();
              this->effectiveTime ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "points" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->points_parser_)
            {
              this->points_parser_->pre ();
              ctx.nested_parser (this->points_parser_);
            }
          }
          else
          {
            if (this->points_parser_ != 0)
            {
              this->points_parser_->post_decimal ();
              this->points ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "payment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payment_parser_)
            {
              this->payment_parser_->pre ();
              ctx.nested_parser (this->payment_parser_);
            }
          }
          else
          {
            if (this->payment_parser_ != 0)
            {
              this->payment_parser_->post_string ();
              this->payment ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "paymentDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paymentDate_parser_)
            {
              this->paymentDate_parser_->pre ();
              ctx.nested_parser (this->paymentDate_parser_);
            }
          }
          else
          {
            if (this->paymentDate_parser_ != 0)
            {
              this->paymentDate_parser_->post_dateTime ();
              this->paymentDate ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "responsible" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->responsible_parser_)
            {
              this->responsible_parser_->pre ();
              ctx.nested_parser (this->responsible_parser_);
            }
          }
          else
          {
            if (this->responsible_parser_ != 0)
            {
              this->responsible_parser_->post_Reference ();
              this->responsible ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "recipient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recipient_parser_)
            {
              this->recipient_parser_->pre ();
              ctx.nested_parser (this->recipient_parser_);
            }
          }
          else
          {
            if (this->recipient_parser_ != 0)
            {
              this->recipient_parser_->post_Reference ();
              this->recipient ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->linkId_parser_)
            {
              this->linkId_parser_->pre ();
              ctx.nested_parser (this->linkId_parser_);
            }
          }
          else
          {
            if (this->linkId_parser_ != 0)
            {
              this->linkId_parser_->post_string ();
              this->linkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "securityLabelNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabelNumber_parser_)
            {
              this->securityLabelNumber_parser_->pre ();
              ctx.nested_parser (this->securityLabelNumber_parser_);
            }
          }
          else
          {
            if (this->securityLabelNumber_parser_ != 0)
            {
              this->securityLabelNumber_parser_->post_unsignedInt ();
              this->securityLabelNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Action_pskel.
  //
  bool Contract_Action_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "doNotPerform" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Action_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Action_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Action_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Action_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Contract_Action_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "doNotPerform" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doNotPerform_parser_)
            {
              this->doNotPerform_parser_->pre ();
              ctx.nested_parser (this->doNotPerform_parser_);
            }
          }
          else
          {
            if (this->doNotPerform_parser_ != 0)
            {
              this->doNotPerform_parser_->post_boolean ();
              this->doNotPerform ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Contract_Subject ();
              this->subject ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_CodeableConcept ();
              this->intent ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->linkId_parser_)
            {
              this->linkId_parser_->pre ();
              ctx.nested_parser (this->linkId_parser_);
            }
          }
          else
          {
            if (this->linkId_parser_ != 0)
            {
              this->linkId_parser_->post_string ();
              this->linkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CodeableConcept ();
              this->status ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_Reference ();
              this->context ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "contextLinkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contextLinkId_parser_)
            {
              this->contextLinkId_parser_->pre ();
              ctx.nested_parser (this->contextLinkId_parser_);
            }
          }
          else
          {
            if (this->contextLinkId_parser_ != 0)
            {
              this->contextLinkId_parser_->post_string ();
              this->contextLinkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "occurrenceDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceDateTime_parser_)
            {
              this->occurrenceDateTime_parser_->pre ();
              ctx.nested_parser (this->occurrenceDateTime_parser_);
            }
          }
          else
          {
            if (this->occurrenceDateTime_parser_ != 0)
            {
              this->occurrenceDateTime_parser_->post_dateTime ();
              this->occurrenceDateTime ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "occurrencePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrencePeriod_parser_)
            {
              this->occurrencePeriod_parser_->pre ();
              ctx.nested_parser (this->occurrencePeriod_parser_);
            }
          }
          else
          {
            if (this->occurrencePeriod_parser_ != 0)
            {
              this->occurrencePeriod_parser_->post_Period ();
              this->occurrencePeriod ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "occurrenceTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceTiming_parser_)
            {
              this->occurrenceTiming_parser_->pre ();
              ctx.nested_parser (this->occurrenceTiming_parser_);
            }
          }
          else
          {
            if (this->occurrenceTiming_parser_ != 0)
            {
              this->occurrenceTiming_parser_->post_Timing ();
              this->occurrenceTiming ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "requester" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requester_parser_)
            {
              this->requester_parser_->pre ();
              ctx.nested_parser (this->requester_parser_);
            }
          }
          else
          {
            if (this->requester_parser_ != 0)
            {
              this->requester_parser_->post_Reference ();
              this->requester ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "requesterLinkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requesterLinkId_parser_)
            {
              this->requesterLinkId_parser_->pre ();
              ctx.nested_parser (this->requesterLinkId_parser_);
            }
          }
          else
          {
            if (this->requesterLinkId_parser_ != 0)
            {
              this->requesterLinkId_parser_->post_string ();
              this->requesterLinkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "performerType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performerType_parser_)
            {
              this->performerType_parser_->pre ();
              ctx.nested_parser (this->performerType_parser_);
            }
          }
          else
          {
            if (this->performerType_parser_ != 0)
            {
              this->performerType_parser_->post_CodeableConcept ();
              this->performerType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "performerRole" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performerRole_parser_)
            {
              this->performerRole_parser_->pre ();
              ctx.nested_parser (this->performerRole_parser_);
            }
          }
          else
          {
            if (this->performerRole_parser_ != 0)
            {
              this->performerRole_parser_->post_CodeableConcept ();
              this->performerRole ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "performerLinkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performerLinkId_parser_)
            {
              this->performerLinkId_parser_->pre ();
              ctx.nested_parser (this->performerLinkId_parser_);
            }
          }
          else
          {
            if (this->performerLinkId_parser_ != 0)
            {
              this->performerLinkId_parser_->post_string ();
              this->performerLinkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_string ();
              this->reason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "reasonLinkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonLinkId_parser_)
            {
              this->reasonLinkId_parser_->pre ();
              ctx.nested_parser (this->reasonLinkId_parser_);
            }
          }
          else
          {
            if (this->reasonLinkId_parser_ != 0)
            {
              this->reasonLinkId_parser_->post_string ();
              this->reasonLinkId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "securityLabelNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabelNumber_parser_)
            {
              this->securityLabelNumber_parser_->pre ();
              ctx.nested_parser (this->securityLabelNumber_parser_);
            }
          }
          else
          {
            if (this->securityLabelNumber_parser_ != 0)
            {
              this->securityLabelNumber_parser_->post_unsignedInt ();
              this->securityLabelNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Subject_pskel.
  //
  bool Contract_Subject_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Subject_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Subject_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Subject_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Subject_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Contract_Subject_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Reference ();
              this->reference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Signer_pskel.
  //
  bool Contract_Signer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Signer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Signer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Signer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Signer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Contract_Signer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_Coding ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "party" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->party_parser_)
            {
              this->party_parser_->pre ();
              ctx.nested_parser (this->party_parser_);
            }
          }
          else
          {
            if (this->party_parser_ != 0)
            {
              this->party_parser_->post_Reference ();
              this->party ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "signature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->signature_parser_)
            {
              this->signature_parser_->pre ();
              ctx.nested_parser (this->signature_parser_);
            }
          }
          else
          {
            if (this->signature_parser_ != 0)
            {
              this->signature_parser_->post_Signature ();
              this->signature ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Friendly_pskel.
  //
  bool Contract_Friendly_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "contentAttachment" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "contentReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Friendly_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Friendly_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Friendly_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Friendly_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_Friendly_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "contentAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentAttachment_parser_)
            {
              this->contentAttachment_parser_->pre ();
              ctx.nested_parser (this->contentAttachment_parser_);
            }
          }
          else
          {
            if (this->contentAttachment_parser_ != 0)
            {
              this->contentAttachment_parser_->post_Attachment ();
              this->contentAttachment ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "contentReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentReference_parser_)
            {
              this->contentReference_parser_->pre ();
              ctx.nested_parser (this->contentReference_parser_);
            }
          }
          else
          {
            if (this->contentReference_parser_ != 0)
            {
              this->contentReference_parser_->post_Reference ();
              this->contentReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Legal_pskel.
  //
  bool Contract_Legal_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "contentAttachment" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "contentReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Legal_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Legal_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Legal_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Legal_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_Legal_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "contentAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentAttachment_parser_)
            {
              this->contentAttachment_parser_->pre ();
              ctx.nested_parser (this->contentAttachment_parser_);
            }
          }
          else
          {
            if (this->contentAttachment_parser_ != 0)
            {
              this->contentAttachment_parser_->post_Attachment ();
              this->contentAttachment ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "contentReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentReference_parser_)
            {
              this->contentReference_parser_->pre ();
              ctx.nested_parser (this->contentReference_parser_);
            }
          }
          else
          {
            if (this->contentReference_parser_ != 0)
            {
              this->contentReference_parser_->post_Reference ();
              this->contentReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Contract_Rule_pskel.
  //
  bool Contract_Rule_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "contentAttachment" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "contentReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Contract_Rule_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Contract_Rule_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Contract_Rule_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Contract_Rule_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Contract_Rule_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "contentAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentAttachment_parser_)
            {
              this->contentAttachment_parser_->pre ();
              ctx.nested_parser (this->contentAttachment_parser_);
            }
          }
          else
          {
            if (this->contentAttachment_parser_ != 0)
            {
              this->contentAttachment_parser_->post_Attachment ();
              this->contentAttachment ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "contentReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentReference_parser_)
            {
              this->contentReference_parser_->pre ();
              ctx.nested_parser (this->contentReference_parser_);
            }
          }
          else
          {
            if (this->contentReference_parser_ != 0)
            {
              this->contentReference_parser_->post_Reference ();
              this->contentReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ContractResourceStatusCodes_pskel.
  //
  bool ContractResourceStatusCodes_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ContractResourceStatusCodes_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ContractResourcePublicationStatusCodes_pskel.
  //
  bool ContractResourcePublicationStatusCodes_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ContractResourcePublicationStatusCodes_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

