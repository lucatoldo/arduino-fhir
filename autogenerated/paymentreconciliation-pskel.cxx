// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "paymentreconciliation-pskel.hxx"

namespace fhir
{
  // PaymentReconciliation_pskel
  //

  void PaymentReconciliation_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  status_parser (::fhir::FinancialResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  paymentIssuer_parser (::fhir::Reference_pskel& p)
  {
    this->paymentIssuer_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  request_parser (::fhir::Reference_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  requestor_parser (::fhir::Reference_pskel& p)
  {
    this->requestor_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  outcome_parser (::fhir::RemittanceOutcome_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  disposition_parser (::fhir::string_pskel& p)
  {
    this->disposition_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  paymentDate_parser (::fhir::date_pskel& p)
  {
    this->paymentDate_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  paymentAmount_parser (::fhir::Money_pskel& p)
  {
    this->paymentAmount_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  paymentIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->paymentIdentifier_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  detail_parser (::fhir::PaymentReconciliation_Detail_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  formCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->formCode_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  processNote_parser (::fhir::PaymentReconciliation_ProcessNote_pskel& p)
  {
    this->processNote_parser_ = &p;
  }

  void PaymentReconciliation_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::FinancialResourceStatusCodes_pskel& status,
           ::fhir::Period_pskel& period,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& paymentIssuer,
           ::fhir::Reference_pskel& request,
           ::fhir::Reference_pskel& requestor,
           ::fhir::RemittanceOutcome_pskel& outcome,
           ::fhir::string_pskel& disposition,
           ::fhir::date_pskel& paymentDate,
           ::fhir::Money_pskel& paymentAmount,
           ::fhir::Identifier_pskel& paymentIdentifier,
           ::fhir::PaymentReconciliation_Detail_pskel& detail,
           ::fhir::CodeableConcept_pskel& formCode,
           ::fhir::PaymentReconciliation_ProcessNote_pskel& processNote)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->period_parser_ = &period;
    this->created_parser_ = &created;
    this->paymentIssuer_parser_ = &paymentIssuer;
    this->request_parser_ = &request;
    this->requestor_parser_ = &requestor;
    this->outcome_parser_ = &outcome;
    this->disposition_parser_ = &disposition;
    this->paymentDate_parser_ = &paymentDate;
    this->paymentAmount_parser_ = &paymentAmount;
    this->paymentIdentifier_parser_ = &paymentIdentifier;
    this->detail_parser_ = &detail;
    this->formCode_parser_ = &formCode;
    this->processNote_parser_ = &processNote;
  }

  PaymentReconciliation_pskel::
  PaymentReconciliation_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    PaymentReconciliation_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    period_parser_ (0),
    created_parser_ (0),
    paymentIssuer_parser_ (0),
    request_parser_ (0),
    requestor_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    paymentDate_parser_ (0),
    paymentAmount_parser_ (0),
    paymentIdentifier_parser_ (0),
    detail_parser_ (0),
    formCode_parser_ (0),
    processNote_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PaymentReconciliation_pskel::
  PaymentReconciliation_pskel (PaymentReconciliation_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    PaymentReconciliation_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    period_parser_ (0),
    created_parser_ (0),
    paymentIssuer_parser_ (0),
    request_parser_ (0),
    requestor_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    paymentDate_parser_ (0),
    paymentAmount_parser_ (0),
    paymentIdentifier_parser_ (0),
    detail_parser_ (0),
    formCode_parser_ (0),
    processNote_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PaymentReconciliation_Detail_pskel
  //

  void PaymentReconciliation_Detail_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  predecessor_parser (::fhir::Identifier_pskel& p)
  {
    this->predecessor_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  request_parser (::fhir::Reference_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  submitter_parser (::fhir::Reference_pskel& p)
  {
    this->submitter_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  response_parser (::fhir::Reference_pskel& p)
  {
    this->response_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  date_parser (::fhir::date_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  responsible_parser (::fhir::Reference_pskel& p)
  {
    this->responsible_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  payee_parser (::fhir::Reference_pskel& p)
  {
    this->payee_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void PaymentReconciliation_Detail_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Identifier_pskel& predecessor,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& request,
           ::fhir::Reference_pskel& submitter,
           ::fhir::Reference_pskel& response,
           ::fhir::date_pskel& date,
           ::fhir::Reference_pskel& responsible,
           ::fhir::Reference_pskel& payee,
           ::fhir::Money_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->predecessor_parser_ = &predecessor;
    this->type_parser_ = &type;
    this->request_parser_ = &request;
    this->submitter_parser_ = &submitter;
    this->response_parser_ = &response;
    this->date_parser_ = &date;
    this->responsible_parser_ = &responsible;
    this->payee_parser_ = &payee;
    this->amount_parser_ = &amount;
  }

  PaymentReconciliation_Detail_pskel::
  PaymentReconciliation_Detail_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PaymentReconciliation_Detail_impl_ (0),
    identifier_parser_ (0),
    predecessor_parser_ (0),
    type_parser_ (0),
    request_parser_ (0),
    submitter_parser_ (0),
    response_parser_ (0),
    date_parser_ (0),
    responsible_parser_ (0),
    payee_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PaymentReconciliation_Detail_pskel::
  PaymentReconciliation_Detail_pskel (PaymentReconciliation_Detail_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PaymentReconciliation_Detail_impl_ (impl),
    identifier_parser_ (0),
    predecessor_parser_ (0),
    type_parser_ (0),
    request_parser_ (0),
    submitter_parser_ (0),
    response_parser_ (0),
    date_parser_ (0),
    responsible_parser_ (0),
    payee_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PaymentReconciliation_ProcessNote_pskel
  //

  void PaymentReconciliation_ProcessNote_pskel::
  type_parser (::fhir::NoteType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void PaymentReconciliation_ProcessNote_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void PaymentReconciliation_ProcessNote_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::NoteType_pskel& type,
           ::fhir::string_pskel& text)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->text_parser_ = &text;
  }

  PaymentReconciliation_ProcessNote_pskel::
  PaymentReconciliation_ProcessNote_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PaymentReconciliation_ProcessNote_impl_ (0),
    type_parser_ (0),
    text_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PaymentReconciliation_ProcessNote_pskel::
  PaymentReconciliation_ProcessNote_pskel (PaymentReconciliation_ProcessNote_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PaymentReconciliation_ProcessNote_impl_ (impl),
    type_parser_ (0),
    text_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // PaymentReconciliation_pskel
  //

  void PaymentReconciliation_pskel::
  identifier ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->identifier ();
  }

  void PaymentReconciliation_pskel::
  status ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->status ();
  }

  void PaymentReconciliation_pskel::
  period ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->period ();
  }

  void PaymentReconciliation_pskel::
  created ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->created ();
  }

  void PaymentReconciliation_pskel::
  paymentIssuer ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->paymentIssuer ();
  }

  void PaymentReconciliation_pskel::
  request ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->request ();
  }

  void PaymentReconciliation_pskel::
  requestor ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->requestor ();
  }

  void PaymentReconciliation_pskel::
  outcome ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->outcome ();
  }

  void PaymentReconciliation_pskel::
  disposition ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->disposition ();
  }

  void PaymentReconciliation_pskel::
  paymentDate ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->paymentDate ();
  }

  void PaymentReconciliation_pskel::
  paymentAmount ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->paymentAmount ();
  }

  void PaymentReconciliation_pskel::
  paymentIdentifier ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->paymentIdentifier ();
  }

  void PaymentReconciliation_pskel::
  detail ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->detail ();
  }

  void PaymentReconciliation_pskel::
  formCode ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->formCode ();
  }

  void PaymentReconciliation_pskel::
  processNote ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->processNote ();
  }

  void PaymentReconciliation_pskel::
  post_PaymentReconciliation ()
  {
    if (this->PaymentReconciliation_impl_)
      this->PaymentReconciliation_impl_->post_PaymentReconciliation ();
    else
      post_DomainResource ();
  }

  void PaymentReconciliation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->paymentIssuer_parser_)
      this->paymentIssuer_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->requestor_parser_)
      this->requestor_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->disposition_parser_)
      this->disposition_parser_->_reset ();

    if (this->paymentDate_parser_)
      this->paymentDate_parser_->_reset ();

    if (this->paymentAmount_parser_)
      this->paymentAmount_parser_->_reset ();

    if (this->paymentIdentifier_parser_)
      this->paymentIdentifier_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    if (this->formCode_parser_)
      this->formCode_parser_->_reset ();

    if (this->processNote_parser_)
      this->processNote_parser_->_reset ();

    this->resetting_ = false;
  }

  // PaymentReconciliation_Detail_pskel
  //

  void PaymentReconciliation_Detail_pskel::
  identifier ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->identifier ();
  }

  void PaymentReconciliation_Detail_pskel::
  predecessor ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->predecessor ();
  }

  void PaymentReconciliation_Detail_pskel::
  type ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->type ();
  }

  void PaymentReconciliation_Detail_pskel::
  request ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->request ();
  }

  void PaymentReconciliation_Detail_pskel::
  submitter ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->submitter ();
  }

  void PaymentReconciliation_Detail_pskel::
  response ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->response ();
  }

  void PaymentReconciliation_Detail_pskel::
  date ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->date ();
  }

  void PaymentReconciliation_Detail_pskel::
  responsible ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->responsible ();
  }

  void PaymentReconciliation_Detail_pskel::
  payee ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->payee ();
  }

  void PaymentReconciliation_Detail_pskel::
  amount ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->amount ();
  }

  void PaymentReconciliation_Detail_pskel::
  post_PaymentReconciliation_Detail ()
  {
    if (this->PaymentReconciliation_Detail_impl_)
      this->PaymentReconciliation_Detail_impl_->post_PaymentReconciliation_Detail ();
    else
      post_BackboneElement ();
  }

  void PaymentReconciliation_Detail_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->predecessor_parser_)
      this->predecessor_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->submitter_parser_)
      this->submitter_parser_->_reset ();

    if (this->response_parser_)
      this->response_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->responsible_parser_)
      this->responsible_parser_->_reset ();

    if (this->payee_parser_)
      this->payee_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // PaymentReconciliation_ProcessNote_pskel
  //

  void PaymentReconciliation_ProcessNote_pskel::
  type ()
  {
    if (this->PaymentReconciliation_ProcessNote_impl_)
      this->PaymentReconciliation_ProcessNote_impl_->type ();
  }

  void PaymentReconciliation_ProcessNote_pskel::
  text ()
  {
    if (this->PaymentReconciliation_ProcessNote_impl_)
      this->PaymentReconciliation_ProcessNote_impl_->text ();
  }

  void PaymentReconciliation_ProcessNote_pskel::
  post_PaymentReconciliation_ProcessNote ()
  {
    if (this->PaymentReconciliation_ProcessNote_impl_)
      this->PaymentReconciliation_ProcessNote_impl_->post_PaymentReconciliation_ProcessNote ();
    else
      post_BackboneElement ();
  }

  void PaymentReconciliation_ProcessNote_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for PaymentReconciliation_pskel.
  //
  bool PaymentReconciliation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PaymentReconciliation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PaymentReconciliation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PaymentReconciliation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void PaymentReconciliation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PaymentReconciliation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FinancialResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "paymentIssuer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paymentIssuer_parser_)
            {
              this->paymentIssuer_parser_->pre ();
              ctx.nested_parser (this->paymentIssuer_parser_);
            }
          }
          else
          {
            if (this->paymentIssuer_parser_ != 0)
            {
              this->paymentIssuer_parser_->post_Reference ();
              this->paymentIssuer ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_Reference ();
              this->request ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "requestor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requestor_parser_)
            {
              this->requestor_parser_->pre ();
              ctx.nested_parser (this->requestor_parser_);
            }
          }
          else
          {
            if (this->requestor_parser_ != 0)
            {
              this->requestor_parser_->post_Reference ();
              this->requestor ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_RemittanceOutcome ();
              this->outcome ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "disposition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->disposition_parser_)
            {
              this->disposition_parser_->pre ();
              ctx.nested_parser (this->disposition_parser_);
            }
          }
          else
          {
            if (this->disposition_parser_ != 0)
            {
              this->disposition_parser_->post_string ();
              this->disposition ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "paymentDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paymentDate_parser_)
            {
              this->paymentDate_parser_->pre ();
              ctx.nested_parser (this->paymentDate_parser_);
            }
          }
          else
          {
            if (this->paymentDate_parser_ != 0)
            {
              this->paymentDate_parser_->post_date ();
              this->paymentDate ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "paymentAmount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paymentAmount_parser_)
            {
              this->paymentAmount_parser_->pre ();
              ctx.nested_parser (this->paymentAmount_parser_);
            }
          }
          else
          {
            if (this->paymentAmount_parser_ != 0)
            {
              this->paymentAmount_parser_->post_Money ();
              this->paymentAmount ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "paymentIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paymentIdentifier_parser_)
            {
              this->paymentIdentifier_parser_->pre ();
              ctx.nested_parser (this->paymentIdentifier_parser_);
            }
          }
          else
          {
            if (this->paymentIdentifier_parser_ != 0)
            {
              this->paymentIdentifier_parser_->post_Identifier ();
              this->paymentIdentifier ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_PaymentReconciliation_Detail ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "formCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->formCode_parser_)
            {
              this->formCode_parser_->pre ();
              ctx.nested_parser (this->formCode_parser_);
            }
          }
          else
          {
            if (this->formCode_parser_ != 0)
            {
              this->formCode_parser_->post_CodeableConcept ();
              this->formCode ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "processNote" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->processNote_parser_)
            {
              this->processNote_parser_->pre ();
              ctx.nested_parser (this->processNote_parser_);
            }
          }
          else
          {
            if (this->processNote_parser_ != 0)
            {
              this->processNote_parser_->post_PaymentReconciliation_ProcessNote ();
              this->processNote ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PaymentReconciliation_Detail_pskel.
  //
  bool PaymentReconciliation_Detail_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "predecessor" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PaymentReconciliation_Detail_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PaymentReconciliation_Detail_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PaymentReconciliation_Detail_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PaymentReconciliation_Detail_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PaymentReconciliation_Detail_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "predecessor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->predecessor_parser_)
            {
              this->predecessor_parser_->pre ();
              ctx.nested_parser (this->predecessor_parser_);
            }
          }
          else
          {
            if (this->predecessor_parser_ != 0)
            {
              this->predecessor_parser_->post_Identifier ();
              this->predecessor ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_Reference ();
              this->request ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "submitter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->submitter_parser_)
            {
              this->submitter_parser_->pre ();
              ctx.nested_parser (this->submitter_parser_);
            }
          }
          else
          {
            if (this->submitter_parser_ != 0)
            {
              this->submitter_parser_->post_Reference ();
              this->submitter ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "response" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->response_parser_)
            {
              this->response_parser_->pre ();
              ctx.nested_parser (this->response_parser_);
            }
          }
          else
          {
            if (this->response_parser_ != 0)
            {
              this->response_parser_->post_Reference ();
              this->response ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_date ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "responsible" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->responsible_parser_)
            {
              this->responsible_parser_->pre ();
              ctx.nested_parser (this->responsible_parser_);
            }
          }
          else
          {
            if (this->responsible_parser_ != 0)
            {
              this->responsible_parser_->post_Reference ();
              this->responsible ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "payee" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payee_parser_)
            {
              this->payee_parser_->pre ();
              ctx.nested_parser (this->payee_parser_);
            }
          }
          else
          {
            if (this->payee_parser_ != 0)
            {
              this->payee_parser_->post_Reference ();
              this->payee ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PaymentReconciliation_ProcessNote_pskel.
  //
  bool PaymentReconciliation_ProcessNote_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PaymentReconciliation_ProcessNote_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PaymentReconciliation_ProcessNote_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PaymentReconciliation_ProcessNote_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PaymentReconciliation_ProcessNote_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void PaymentReconciliation_ProcessNote_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_NoteType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

