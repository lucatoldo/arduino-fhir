// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "plandefinition-pskel.hxx"

namespace fhir
{
  // PlanDefinition_pskel
  //

  void PlanDefinition_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void PlanDefinition_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void PlanDefinition_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void PlanDefinition_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void PlanDefinition_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void PlanDefinition_pskel::
  subtitle_parser (::fhir::string_pskel& p)
  {
    this->subtitle_parser_ = &p;
  }

  void PlanDefinition_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void PlanDefinition_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void PlanDefinition_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void PlanDefinition_pskel::
  subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subjectCodeableConcept_parser_ = &p;
  }

  void PlanDefinition_pskel::
  subjectReference_parser (::fhir::Reference_pskel& p)
  {
    this->subjectReference_parser_ = &p;
  }

  void PlanDefinition_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void PlanDefinition_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void PlanDefinition_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void PlanDefinition_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void PlanDefinition_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void PlanDefinition_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void PlanDefinition_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void PlanDefinition_pskel::
  usage_parser (::fhir::string_pskel& p)
  {
    this->usage_parser_ = &p;
  }

  void PlanDefinition_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void PlanDefinition_pskel::
  approvalDate_parser (::fhir::date_pskel& p)
  {
    this->approvalDate_parser_ = &p;
  }

  void PlanDefinition_pskel::
  lastReviewDate_parser (::fhir::date_pskel& p)
  {
    this->lastReviewDate_parser_ = &p;
  }

  void PlanDefinition_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void PlanDefinition_pskel::
  topic_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->topic_parser_ = &p;
  }

  void PlanDefinition_pskel::
  author_parser (::fhir::ContactDetail_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void PlanDefinition_pskel::
  editor_parser (::fhir::ContactDetail_pskel& p)
  {
    this->editor_parser_ = &p;
  }

  void PlanDefinition_pskel::
  reviewer_parser (::fhir::ContactDetail_pskel& p)
  {
    this->reviewer_parser_ = &p;
  }

  void PlanDefinition_pskel::
  endorser_parser (::fhir::ContactDetail_pskel& p)
  {
    this->endorser_parser_ = &p;
  }

  void PlanDefinition_pskel::
  relatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->relatedArtifact_parser_ = &p;
  }

  void PlanDefinition_pskel::
  library_parser (::fhir::canonical_pskel& p)
  {
    this->library_parser_ = &p;
  }

  void PlanDefinition_pskel::
  goal_parser (::fhir::PlanDefinition_Goal_pskel& p)
  {
    this->goal_parser_ = &p;
  }

  void PlanDefinition_pskel::
  action_parser (::fhir::PlanDefinition_Action_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void PlanDefinition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& subtitle,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::CodeableConcept_pskel& subjectCodeableConcept,
           ::fhir::Reference_pskel& subjectReference,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::string_pskel& usage,
           ::fhir::markdown_pskel& copyright,
           ::fhir::date_pskel& approvalDate,
           ::fhir::date_pskel& lastReviewDate,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::CodeableConcept_pskel& topic,
           ::fhir::ContactDetail_pskel& author,
           ::fhir::ContactDetail_pskel& editor,
           ::fhir::ContactDetail_pskel& reviewer,
           ::fhir::ContactDetail_pskel& endorser,
           ::fhir::RelatedArtifact_pskel& relatedArtifact,
           ::fhir::canonical_pskel& library,
           ::fhir::PlanDefinition_Goal_pskel& goal,
           ::fhir::PlanDefinition_Action_pskel& action)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->subtitle_parser_ = &subtitle;
    this->type_parser_ = &type;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->subjectCodeableConcept_parser_ = &subjectCodeableConcept;
    this->subjectReference_parser_ = &subjectReference;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->usage_parser_ = &usage;
    this->copyright_parser_ = &copyright;
    this->approvalDate_parser_ = &approvalDate;
    this->lastReviewDate_parser_ = &lastReviewDate;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->topic_parser_ = &topic;
    this->author_parser_ = &author;
    this->editor_parser_ = &editor;
    this->reviewer_parser_ = &reviewer;
    this->endorser_parser_ = &endorser;
    this->relatedArtifact_parser_ = &relatedArtifact;
    this->library_parser_ = &library;
    this->goal_parser_ = &goal;
    this->action_parser_ = &action;
  }

  PlanDefinition_pskel::
  PlanDefinition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    PlanDefinition_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    subtitle_parser_ (0),
    type_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    subjectCodeableConcept_parser_ (0),
    subjectReference_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    usage_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    library_parser_ (0),
    goal_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_pskel::
  PlanDefinition_pskel (PlanDefinition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    PlanDefinition_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    subtitle_parser_ (0),
    type_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    subjectCodeableConcept_parser_ (0),
    subjectReference_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    usage_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    library_parser_ (0),
    goal_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PlanDefinition_Goal_pskel
  //

  void PlanDefinition_Goal_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void PlanDefinition_Goal_pskel::
  description_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void PlanDefinition_Goal_pskel::
  priority_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void PlanDefinition_Goal_pskel::
  start_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->start_parser_ = &p;
  }

  void PlanDefinition_Goal_pskel::
  addresses_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->addresses_parser_ = &p;
  }

  void PlanDefinition_Goal_pskel::
  documentation_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void PlanDefinition_Goal_pskel::
  target_parser (::fhir::PlanDefinition_Target_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void PlanDefinition_Goal_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& description,
           ::fhir::CodeableConcept_pskel& priority,
           ::fhir::CodeableConcept_pskel& start,
           ::fhir::CodeableConcept_pskel& addresses,
           ::fhir::RelatedArtifact_pskel& documentation,
           ::fhir::PlanDefinition_Target_pskel& target)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->description_parser_ = &description;
    this->priority_parser_ = &priority;
    this->start_parser_ = &start;
    this->addresses_parser_ = &addresses;
    this->documentation_parser_ = &documentation;
    this->target_parser_ = &target;
  }

  PlanDefinition_Goal_pskel::
  PlanDefinition_Goal_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PlanDefinition_Goal_impl_ (0),
    category_parser_ (0),
    description_parser_ (0),
    priority_parser_ (0),
    start_parser_ (0),
    addresses_parser_ (0),
    documentation_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_Goal_pskel::
  PlanDefinition_Goal_pskel (PlanDefinition_Goal_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PlanDefinition_Goal_impl_ (impl),
    category_parser_ (0),
    description_parser_ (0),
    priority_parser_ (0),
    start_parser_ (0),
    addresses_parser_ (0),
    documentation_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PlanDefinition_Target_pskel
  //

  void PlanDefinition_Target_pskel::
  measure_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->measure_parser_ = &p;
  }

  void PlanDefinition_Target_pskel::
  detailQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->detailQuantity_parser_ = &p;
  }

  void PlanDefinition_Target_pskel::
  detailRange_parser (::fhir::Range_pskel& p)
  {
    this->detailRange_parser_ = &p;
  }

  void PlanDefinition_Target_pskel::
  detailCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->detailCodeableConcept_parser_ = &p;
  }

  void PlanDefinition_Target_pskel::
  due_parser (::fhir::Duration_pskel& p)
  {
    this->due_parser_ = &p;
  }

  void PlanDefinition_Target_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& measure,
           ::fhir::Quantity_pskel& detailQuantity,
           ::fhir::Range_pskel& detailRange,
           ::fhir::CodeableConcept_pskel& detailCodeableConcept,
           ::fhir::Duration_pskel& due)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->measure_parser_ = &measure;
    this->detailQuantity_parser_ = &detailQuantity;
    this->detailRange_parser_ = &detailRange;
    this->detailCodeableConcept_parser_ = &detailCodeableConcept;
    this->due_parser_ = &due;
  }

  PlanDefinition_Target_pskel::
  PlanDefinition_Target_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PlanDefinition_Target_impl_ (0),
    measure_parser_ (0),
    detailQuantity_parser_ (0),
    detailRange_parser_ (0),
    detailCodeableConcept_parser_ (0),
    due_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_Target_pskel::
  PlanDefinition_Target_pskel (PlanDefinition_Target_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PlanDefinition_Target_impl_ (impl),
    measure_parser_ (0),
    detailQuantity_parser_ (0),
    detailRange_parser_ (0),
    detailCodeableConcept_parser_ (0),
    due_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PlanDefinition_Action_pskel
  //

  void PlanDefinition_Action_pskel::
  prefix_parser (::fhir::string_pskel& p)
  {
    this->prefix_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  textEquivalent_parser (::fhir::string_pskel& p)
  {
    this->textEquivalent_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  reason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  documentation_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  goalId_parser (::fhir::id_pskel& p)
  {
    this->goalId_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subjectCodeableConcept_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  subjectReference_parser (::fhir::Reference_pskel& p)
  {
    this->subjectReference_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  trigger_parser (::fhir::TriggerDefinition_pskel& p)
  {
    this->trigger_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  condition_parser (::fhir::PlanDefinition_Condition_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  input_parser (::fhir::DataRequirement_pskel& p)
  {
    this->input_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  output_parser (::fhir::DataRequirement_pskel& p)
  {
    this->output_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  relatedAction_parser (::fhir::PlanDefinition_RelatedAction_pskel& p)
  {
    this->relatedAction_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  timingDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->timingDateTime_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  timingAge_parser (::fhir::Age_pskel& p)
  {
    this->timingAge_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  timingPeriod_parser (::fhir::Period_pskel& p)
  {
    this->timingPeriod_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  timingDuration_parser (::fhir::Duration_pskel& p)
  {
    this->timingDuration_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  timingRange_parser (::fhir::Range_pskel& p)
  {
    this->timingRange_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  timingTiming_parser (::fhir::Timing_pskel& p)
  {
    this->timingTiming_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  participant_parser (::fhir::PlanDefinition_Participant_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  groupingBehavior_parser (::fhir::ActionGroupingBehavior_pskel& p)
  {
    this->groupingBehavior_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  selectionBehavior_parser (::fhir::ActionSelectionBehavior_pskel& p)
  {
    this->selectionBehavior_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  requiredBehavior_parser (::fhir::ActionRequiredBehavior_pskel& p)
  {
    this->requiredBehavior_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  precheckBehavior_parser (::fhir::ActionPrecheckBehavior_pskel& p)
  {
    this->precheckBehavior_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  cardinalityBehavior_parser (::fhir::ActionCardinalityBehavior_pskel& p)
  {
    this->cardinalityBehavior_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  definitionCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->definitionCanonical_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  definitionUri_parser (::fhir::uri_pskel& p)
  {
    this->definitionUri_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  transform_parser (::fhir::canonical_pskel& p)
  {
    this->transform_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  dynamicValue_parser (::fhir::PlanDefinition_DynamicValue_pskel& p)
  {
    this->dynamicValue_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  action_parser (::fhir::PlanDefinition_Action_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void PlanDefinition_Action_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& prefix,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& description,
           ::fhir::string_pskel& textEquivalent,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& reason,
           ::fhir::RelatedArtifact_pskel& documentation,
           ::fhir::id_pskel& goalId,
           ::fhir::CodeableConcept_pskel& subjectCodeableConcept,
           ::fhir::Reference_pskel& subjectReference,
           ::fhir::TriggerDefinition_pskel& trigger,
           ::fhir::PlanDefinition_Condition_pskel& condition,
           ::fhir::DataRequirement_pskel& input,
           ::fhir::DataRequirement_pskel& output,
           ::fhir::PlanDefinition_RelatedAction_pskel& relatedAction,
           ::fhir::dateTime_pskel& timingDateTime,
           ::fhir::Age_pskel& timingAge,
           ::fhir::Period_pskel& timingPeriod,
           ::fhir::Duration_pskel& timingDuration,
           ::fhir::Range_pskel& timingRange,
           ::fhir::Timing_pskel& timingTiming,
           ::fhir::PlanDefinition_Participant_pskel& participant,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::ActionGroupingBehavior_pskel& groupingBehavior,
           ::fhir::ActionSelectionBehavior_pskel& selectionBehavior,
           ::fhir::ActionRequiredBehavior_pskel& requiredBehavior,
           ::fhir::ActionPrecheckBehavior_pskel& precheckBehavior,
           ::fhir::ActionCardinalityBehavior_pskel& cardinalityBehavior,
           ::fhir::canonical_pskel& definitionCanonical,
           ::fhir::uri_pskel& definitionUri,
           ::fhir::canonical_pskel& transform,
           ::fhir::PlanDefinition_DynamicValue_pskel& dynamicValue,
           ::fhir::PlanDefinition_Action_pskel& action)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->prefix_parser_ = &prefix;
    this->title_parser_ = &title;
    this->description_parser_ = &description;
    this->textEquivalent_parser_ = &textEquivalent;
    this->priority_parser_ = &priority;
    this->code_parser_ = &code;
    this->reason_parser_ = &reason;
    this->documentation_parser_ = &documentation;
    this->goalId_parser_ = &goalId;
    this->subjectCodeableConcept_parser_ = &subjectCodeableConcept;
    this->subjectReference_parser_ = &subjectReference;
    this->trigger_parser_ = &trigger;
    this->condition_parser_ = &condition;
    this->input_parser_ = &input;
    this->output_parser_ = &output;
    this->relatedAction_parser_ = &relatedAction;
    this->timingDateTime_parser_ = &timingDateTime;
    this->timingAge_parser_ = &timingAge;
    this->timingPeriod_parser_ = &timingPeriod;
    this->timingDuration_parser_ = &timingDuration;
    this->timingRange_parser_ = &timingRange;
    this->timingTiming_parser_ = &timingTiming;
    this->participant_parser_ = &participant;
    this->type_parser_ = &type;
    this->groupingBehavior_parser_ = &groupingBehavior;
    this->selectionBehavior_parser_ = &selectionBehavior;
    this->requiredBehavior_parser_ = &requiredBehavior;
    this->precheckBehavior_parser_ = &precheckBehavior;
    this->cardinalityBehavior_parser_ = &cardinalityBehavior;
    this->definitionCanonical_parser_ = &definitionCanonical;
    this->definitionUri_parser_ = &definitionUri;
    this->transform_parser_ = &transform;
    this->dynamicValue_parser_ = &dynamicValue;
    this->action_parser_ = &action;
  }

  PlanDefinition_Action_pskel::
  PlanDefinition_Action_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PlanDefinition_Action_impl_ (0),
    prefix_parser_ (0),
    title_parser_ (0),
    description_parser_ (0),
    textEquivalent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    reason_parser_ (0),
    documentation_parser_ (0),
    goalId_parser_ (0),
    subjectCodeableConcept_parser_ (0),
    subjectReference_parser_ (0),
    trigger_parser_ (0),
    condition_parser_ (0),
    input_parser_ (0),
    output_parser_ (0),
    relatedAction_parser_ (0),
    timingDateTime_parser_ (0),
    timingAge_parser_ (0),
    timingPeriod_parser_ (0),
    timingDuration_parser_ (0),
    timingRange_parser_ (0),
    timingTiming_parser_ (0),
    participant_parser_ (0),
    type_parser_ (0),
    groupingBehavior_parser_ (0),
    selectionBehavior_parser_ (0),
    requiredBehavior_parser_ (0),
    precheckBehavior_parser_ (0),
    cardinalityBehavior_parser_ (0),
    definitionCanonical_parser_ (0),
    definitionUri_parser_ (0),
    transform_parser_ (0),
    dynamicValue_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_Action_pskel::
  PlanDefinition_Action_pskel (PlanDefinition_Action_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PlanDefinition_Action_impl_ (impl),
    prefix_parser_ (0),
    title_parser_ (0),
    description_parser_ (0),
    textEquivalent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    reason_parser_ (0),
    documentation_parser_ (0),
    goalId_parser_ (0),
    subjectCodeableConcept_parser_ (0),
    subjectReference_parser_ (0),
    trigger_parser_ (0),
    condition_parser_ (0),
    input_parser_ (0),
    output_parser_ (0),
    relatedAction_parser_ (0),
    timingDateTime_parser_ (0),
    timingAge_parser_ (0),
    timingPeriod_parser_ (0),
    timingDuration_parser_ (0),
    timingRange_parser_ (0),
    timingTiming_parser_ (0),
    participant_parser_ (0),
    type_parser_ (0),
    groupingBehavior_parser_ (0),
    selectionBehavior_parser_ (0),
    requiredBehavior_parser_ (0),
    precheckBehavior_parser_ (0),
    cardinalityBehavior_parser_ (0),
    definitionCanonical_parser_ (0),
    definitionUri_parser_ (0),
    transform_parser_ (0),
    dynamicValue_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PlanDefinition_Condition_pskel
  //

  void PlanDefinition_Condition_pskel::
  kind_parser (::fhir::ActionConditionKind_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void PlanDefinition_Condition_pskel::
  expression_parser (::fhir::Expression_pskel& p)
  {
    this->expression_parser_ = &p;
  }

  void PlanDefinition_Condition_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ActionConditionKind_pskel& kind,
           ::fhir::Expression_pskel& expression)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->kind_parser_ = &kind;
    this->expression_parser_ = &expression;
  }

  PlanDefinition_Condition_pskel::
  PlanDefinition_Condition_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PlanDefinition_Condition_impl_ (0),
    kind_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_Condition_pskel::
  PlanDefinition_Condition_pskel (PlanDefinition_Condition_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PlanDefinition_Condition_impl_ (impl),
    kind_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PlanDefinition_RelatedAction_pskel
  //

  void PlanDefinition_RelatedAction_pskel::
  actionId_parser (::fhir::id_pskel& p)
  {
    this->actionId_parser_ = &p;
  }

  void PlanDefinition_RelatedAction_pskel::
  relationship_parser (::fhir::ActionRelationshipType_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void PlanDefinition_RelatedAction_pskel::
  offsetDuration_parser (::fhir::Duration_pskel& p)
  {
    this->offsetDuration_parser_ = &p;
  }

  void PlanDefinition_RelatedAction_pskel::
  offsetRange_parser (::fhir::Range_pskel& p)
  {
    this->offsetRange_parser_ = &p;
  }

  void PlanDefinition_RelatedAction_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& actionId,
           ::fhir::ActionRelationshipType_pskel& relationship,
           ::fhir::Duration_pskel& offsetDuration,
           ::fhir::Range_pskel& offsetRange)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->actionId_parser_ = &actionId;
    this->relationship_parser_ = &relationship;
    this->offsetDuration_parser_ = &offsetDuration;
    this->offsetRange_parser_ = &offsetRange;
  }

  PlanDefinition_RelatedAction_pskel::
  PlanDefinition_RelatedAction_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PlanDefinition_RelatedAction_impl_ (0),
    actionId_parser_ (0),
    relationship_parser_ (0),
    offsetDuration_parser_ (0),
    offsetRange_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_RelatedAction_pskel::
  PlanDefinition_RelatedAction_pskel (PlanDefinition_RelatedAction_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PlanDefinition_RelatedAction_impl_ (impl),
    actionId_parser_ (0),
    relationship_parser_ (0),
    offsetDuration_parser_ (0),
    offsetRange_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PlanDefinition_Participant_pskel
  //

  void PlanDefinition_Participant_pskel::
  type_parser (::fhir::ActionParticipantType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void PlanDefinition_Participant_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void PlanDefinition_Participant_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ActionParticipantType_pskel& type,
           ::fhir::CodeableConcept_pskel& role)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->role_parser_ = &role;
  }

  PlanDefinition_Participant_pskel::
  PlanDefinition_Participant_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PlanDefinition_Participant_impl_ (0),
    type_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_Participant_pskel::
  PlanDefinition_Participant_pskel (PlanDefinition_Participant_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PlanDefinition_Participant_impl_ (impl),
    type_parser_ (0),
    role_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PlanDefinition_DynamicValue_pskel
  //

  void PlanDefinition_DynamicValue_pskel::
  path_parser (::fhir::string_pskel& p)
  {
    this->path_parser_ = &p;
  }

  void PlanDefinition_DynamicValue_pskel::
  expression_parser (::fhir::Expression_pskel& p)
  {
    this->expression_parser_ = &p;
  }

  void PlanDefinition_DynamicValue_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& path,
           ::fhir::Expression_pskel& expression)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->path_parser_ = &path;
    this->expression_parser_ = &expression;
  }

  PlanDefinition_DynamicValue_pskel::
  PlanDefinition_DynamicValue_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PlanDefinition_DynamicValue_impl_ (0),
    path_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PlanDefinition_DynamicValue_pskel::
  PlanDefinition_DynamicValue_pskel (PlanDefinition_DynamicValue_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PlanDefinition_DynamicValue_impl_ (impl),
    path_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ActionRequiredBehavior_list_pskel
  //

  ActionRequiredBehavior_list_pskel::
  ActionRequiredBehavior_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionRequiredBehavior_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionRequiredBehavior_list_pskel_enums_, 3UL);
  }

  ActionRequiredBehavior_list_pskel::
  ActionRequiredBehavior_list_pskel (ActionRequiredBehavior_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionRequiredBehavior_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionRequiredBehavior_list_pskel_enums_, 3UL);
  }

  // ActionRequiredBehavior_pskel
  //

  void ActionRequiredBehavior_pskel::
  value_parser (::fhir::ActionRequiredBehavior_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionRequiredBehavior_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionRequiredBehavior_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionRequiredBehavior_pskel::
  ActionRequiredBehavior_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionRequiredBehavior_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionRequiredBehavior_pskel::
  ActionRequiredBehavior_pskel (ActionRequiredBehavior_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionRequiredBehavior_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ActionRelationshipType_list_pskel
  //

  ActionRelationshipType_list_pskel::
  ActionRelationshipType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionRelationshipType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionRelationshipType_list_pskel_enums_, 9UL);
  }

  ActionRelationshipType_list_pskel::
  ActionRelationshipType_list_pskel (ActionRelationshipType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionRelationshipType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionRelationshipType_list_pskel_enums_, 9UL);
  }

  // ActionRelationshipType_pskel
  //

  void ActionRelationshipType_pskel::
  value_parser (::fhir::ActionRelationshipType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionRelationshipType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionRelationshipType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionRelationshipType_pskel::
  ActionRelationshipType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionRelationshipType_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionRelationshipType_pskel::
  ActionRelationshipType_pskel (ActionRelationshipType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionRelationshipType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ActionGroupingBehavior_list_pskel
  //

  ActionGroupingBehavior_list_pskel::
  ActionGroupingBehavior_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionGroupingBehavior_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionGroupingBehavior_list_pskel_enums_, 3UL);
  }

  ActionGroupingBehavior_list_pskel::
  ActionGroupingBehavior_list_pskel (ActionGroupingBehavior_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionGroupingBehavior_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionGroupingBehavior_list_pskel_enums_, 3UL);
  }

  // ActionGroupingBehavior_pskel
  //

  void ActionGroupingBehavior_pskel::
  value_parser (::fhir::ActionGroupingBehavior_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionGroupingBehavior_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionGroupingBehavior_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionGroupingBehavior_pskel::
  ActionGroupingBehavior_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionGroupingBehavior_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionGroupingBehavior_pskel::
  ActionGroupingBehavior_pskel (ActionGroupingBehavior_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionGroupingBehavior_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ActionSelectionBehavior_list_pskel
  //

  ActionSelectionBehavior_list_pskel::
  ActionSelectionBehavior_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionSelectionBehavior_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionSelectionBehavior_list_pskel_enums_, 6UL);
  }

  ActionSelectionBehavior_list_pskel::
  ActionSelectionBehavior_list_pskel (ActionSelectionBehavior_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionSelectionBehavior_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionSelectionBehavior_list_pskel_enums_, 6UL);
  }

  // ActionSelectionBehavior_pskel
  //

  void ActionSelectionBehavior_pskel::
  value_parser (::fhir::ActionSelectionBehavior_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionSelectionBehavior_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionSelectionBehavior_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionSelectionBehavior_pskel::
  ActionSelectionBehavior_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionSelectionBehavior_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionSelectionBehavior_pskel::
  ActionSelectionBehavior_pskel (ActionSelectionBehavior_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionSelectionBehavior_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ActionCardinalityBehavior_list_pskel
  //

  ActionCardinalityBehavior_list_pskel::
  ActionCardinalityBehavior_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionCardinalityBehavior_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionCardinalityBehavior_list_pskel_enums_, 2UL);
  }

  ActionCardinalityBehavior_list_pskel::
  ActionCardinalityBehavior_list_pskel (ActionCardinalityBehavior_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionCardinalityBehavior_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionCardinalityBehavior_list_pskel_enums_, 2UL);
  }

  // ActionCardinalityBehavior_pskel
  //

  void ActionCardinalityBehavior_pskel::
  value_parser (::fhir::ActionCardinalityBehavior_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionCardinalityBehavior_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionCardinalityBehavior_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionCardinalityBehavior_pskel::
  ActionCardinalityBehavior_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionCardinalityBehavior_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionCardinalityBehavior_pskel::
  ActionCardinalityBehavior_pskel (ActionCardinalityBehavior_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionCardinalityBehavior_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ActionPrecheckBehavior_list_pskel
  //

  ActionPrecheckBehavior_list_pskel::
  ActionPrecheckBehavior_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionPrecheckBehavior_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionPrecheckBehavior_list_pskel_enums_, 2UL);
  }

  ActionPrecheckBehavior_list_pskel::
  ActionPrecheckBehavior_list_pskel (ActionPrecheckBehavior_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionPrecheckBehavior_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionPrecheckBehavior_list_pskel_enums_, 2UL);
  }

  // ActionPrecheckBehavior_pskel
  //

  void ActionPrecheckBehavior_pskel::
  value_parser (::fhir::ActionPrecheckBehavior_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionPrecheckBehavior_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionPrecheckBehavior_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionPrecheckBehavior_pskel::
  ActionPrecheckBehavior_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionPrecheckBehavior_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionPrecheckBehavior_pskel::
  ActionPrecheckBehavior_pskel (ActionPrecheckBehavior_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionPrecheckBehavior_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ActionConditionKind_list_pskel
  //

  ActionConditionKind_list_pskel::
  ActionConditionKind_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ActionConditionKind_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ActionConditionKind_list_pskel_enums_, 3UL);
  }

  ActionConditionKind_list_pskel::
  ActionConditionKind_list_pskel (ActionConditionKind_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ActionConditionKind_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ActionConditionKind_list_pskel_enums_, 3UL);
  }

  // ActionConditionKind_pskel
  //

  void ActionConditionKind_pskel::
  value_parser (::fhir::ActionConditionKind_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ActionConditionKind_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ActionConditionKind_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ActionConditionKind_pskel::
  ActionConditionKind_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ActionConditionKind_impl_ (0),
    value_parser_ (0)
  {
  }

  ActionConditionKind_pskel::
  ActionConditionKind_pskel (ActionConditionKind_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ActionConditionKind_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // PlanDefinition_pskel
  //

  void PlanDefinition_pskel::
  url ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->url ();
  }

  void PlanDefinition_pskel::
  identifier ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->identifier ();
  }

  void PlanDefinition_pskel::
  version ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->version ();
  }

  void PlanDefinition_pskel::
  name ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->name ();
  }

  void PlanDefinition_pskel::
  title ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->title ();
  }

  void PlanDefinition_pskel::
  subtitle ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->subtitle ();
  }

  void PlanDefinition_pskel::
  type ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->type ();
  }

  void PlanDefinition_pskel::
  status ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->status ();
  }

  void PlanDefinition_pskel::
  experimental ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->experimental ();
  }

  void PlanDefinition_pskel::
  subjectCodeableConcept ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->subjectCodeableConcept ();
  }

  void PlanDefinition_pskel::
  subjectReference ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->subjectReference ();
  }

  void PlanDefinition_pskel::
  date ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->date ();
  }

  void PlanDefinition_pskel::
  publisher ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->publisher ();
  }

  void PlanDefinition_pskel::
  contact ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->contact ();
  }

  void PlanDefinition_pskel::
  description ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->description ();
  }

  void PlanDefinition_pskel::
  useContext ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->useContext ();
  }

  void PlanDefinition_pskel::
  jurisdiction ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->jurisdiction ();
  }

  void PlanDefinition_pskel::
  purpose ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->purpose ();
  }

  void PlanDefinition_pskel::
  usage ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->usage ();
  }

  void PlanDefinition_pskel::
  copyright ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->copyright ();
  }

  void PlanDefinition_pskel::
  approvalDate ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->approvalDate ();
  }

  void PlanDefinition_pskel::
  lastReviewDate ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->lastReviewDate ();
  }

  void PlanDefinition_pskel::
  effectivePeriod ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->effectivePeriod ();
  }

  void PlanDefinition_pskel::
  topic ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->topic ();
  }

  void PlanDefinition_pskel::
  author ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->author ();
  }

  void PlanDefinition_pskel::
  editor ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->editor ();
  }

  void PlanDefinition_pskel::
  reviewer ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->reviewer ();
  }

  void PlanDefinition_pskel::
  endorser ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->endorser ();
  }

  void PlanDefinition_pskel::
  relatedArtifact ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->relatedArtifact ();
  }

  void PlanDefinition_pskel::
  library ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->library ();
  }

  void PlanDefinition_pskel::
  goal ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->goal ();
  }

  void PlanDefinition_pskel::
  action ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->action ();
  }

  void PlanDefinition_pskel::
  post_PlanDefinition ()
  {
    if (this->PlanDefinition_impl_)
      this->PlanDefinition_impl_->post_PlanDefinition ();
    else
      post_DomainResource ();
  }

  void PlanDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->subtitle_parser_)
      this->subtitle_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->subjectCodeableConcept_parser_)
      this->subjectCodeableConcept_parser_->_reset ();

    if (this->subjectReference_parser_)
      this->subjectReference_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->usage_parser_)
      this->usage_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->approvalDate_parser_)
      this->approvalDate_parser_->_reset ();

    if (this->lastReviewDate_parser_)
      this->lastReviewDate_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->topic_parser_)
      this->topic_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->editor_parser_)
      this->editor_parser_->_reset ();

    if (this->reviewer_parser_)
      this->reviewer_parser_->_reset ();

    if (this->endorser_parser_)
      this->endorser_parser_->_reset ();

    if (this->relatedArtifact_parser_)
      this->relatedArtifact_parser_->_reset ();

    if (this->library_parser_)
      this->library_parser_->_reset ();

    if (this->goal_parser_)
      this->goal_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    this->resetting_ = false;
  }

  // PlanDefinition_Goal_pskel
  //

  void PlanDefinition_Goal_pskel::
  category ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->category ();
  }

  void PlanDefinition_Goal_pskel::
  description ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->description ();
  }

  void PlanDefinition_Goal_pskel::
  priority ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->priority ();
  }

  void PlanDefinition_Goal_pskel::
  start ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->start ();
  }

  void PlanDefinition_Goal_pskel::
  addresses ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->addresses ();
  }

  void PlanDefinition_Goal_pskel::
  documentation ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->documentation ();
  }

  void PlanDefinition_Goal_pskel::
  target ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->target ();
  }

  void PlanDefinition_Goal_pskel::
  post_PlanDefinition_Goal ()
  {
    if (this->PlanDefinition_Goal_impl_)
      this->PlanDefinition_Goal_impl_->post_PlanDefinition_Goal ();
    else
      post_BackboneElement ();
  }

  void PlanDefinition_Goal_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->start_parser_)
      this->start_parser_->_reset ();

    if (this->addresses_parser_)
      this->addresses_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    this->resetting_ = false;
  }

  // PlanDefinition_Target_pskel
  //

  void PlanDefinition_Target_pskel::
  measure ()
  {
    if (this->PlanDefinition_Target_impl_)
      this->PlanDefinition_Target_impl_->measure ();
  }

  void PlanDefinition_Target_pskel::
  detailQuantity ()
  {
    if (this->PlanDefinition_Target_impl_)
      this->PlanDefinition_Target_impl_->detailQuantity ();
  }

  void PlanDefinition_Target_pskel::
  detailRange ()
  {
    if (this->PlanDefinition_Target_impl_)
      this->PlanDefinition_Target_impl_->detailRange ();
  }

  void PlanDefinition_Target_pskel::
  detailCodeableConcept ()
  {
    if (this->PlanDefinition_Target_impl_)
      this->PlanDefinition_Target_impl_->detailCodeableConcept ();
  }

  void PlanDefinition_Target_pskel::
  due ()
  {
    if (this->PlanDefinition_Target_impl_)
      this->PlanDefinition_Target_impl_->due ();
  }

  void PlanDefinition_Target_pskel::
  post_PlanDefinition_Target ()
  {
    if (this->PlanDefinition_Target_impl_)
      this->PlanDefinition_Target_impl_->post_PlanDefinition_Target ();
    else
      post_BackboneElement ();
  }

  void PlanDefinition_Target_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->measure_parser_)
      this->measure_parser_->_reset ();

    if (this->detailQuantity_parser_)
      this->detailQuantity_parser_->_reset ();

    if (this->detailRange_parser_)
      this->detailRange_parser_->_reset ();

    if (this->detailCodeableConcept_parser_)
      this->detailCodeableConcept_parser_->_reset ();

    if (this->due_parser_)
      this->due_parser_->_reset ();

    this->resetting_ = false;
  }

  // PlanDefinition_Action_pskel
  //

  void PlanDefinition_Action_pskel::
  prefix ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->prefix ();
  }

  void PlanDefinition_Action_pskel::
  title ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->title ();
  }

  void PlanDefinition_Action_pskel::
  description ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->description ();
  }

  void PlanDefinition_Action_pskel::
  textEquivalent ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->textEquivalent ();
  }

  void PlanDefinition_Action_pskel::
  priority ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->priority ();
  }

  void PlanDefinition_Action_pskel::
  code ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->code ();
  }

  void PlanDefinition_Action_pskel::
  reason ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->reason ();
  }

  void PlanDefinition_Action_pskel::
  documentation ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->documentation ();
  }

  void PlanDefinition_Action_pskel::
  goalId ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->goalId ();
  }

  void PlanDefinition_Action_pskel::
  subjectCodeableConcept ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->subjectCodeableConcept ();
  }

  void PlanDefinition_Action_pskel::
  subjectReference ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->subjectReference ();
  }

  void PlanDefinition_Action_pskel::
  trigger ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->trigger ();
  }

  void PlanDefinition_Action_pskel::
  condition ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->condition ();
  }

  void PlanDefinition_Action_pskel::
  input ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->input ();
  }

  void PlanDefinition_Action_pskel::
  output ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->output ();
  }

  void PlanDefinition_Action_pskel::
  relatedAction ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->relatedAction ();
  }

  void PlanDefinition_Action_pskel::
  timingDateTime ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->timingDateTime ();
  }

  void PlanDefinition_Action_pskel::
  timingAge ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->timingAge ();
  }

  void PlanDefinition_Action_pskel::
  timingPeriod ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->timingPeriod ();
  }

  void PlanDefinition_Action_pskel::
  timingDuration ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->timingDuration ();
  }

  void PlanDefinition_Action_pskel::
  timingRange ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->timingRange ();
  }

  void PlanDefinition_Action_pskel::
  timingTiming ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->timingTiming ();
  }

  void PlanDefinition_Action_pskel::
  participant ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->participant ();
  }

  void PlanDefinition_Action_pskel::
  type ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->type ();
  }

  void PlanDefinition_Action_pskel::
  groupingBehavior ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->groupingBehavior ();
  }

  void PlanDefinition_Action_pskel::
  selectionBehavior ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->selectionBehavior ();
  }

  void PlanDefinition_Action_pskel::
  requiredBehavior ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->requiredBehavior ();
  }

  void PlanDefinition_Action_pskel::
  precheckBehavior ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->precheckBehavior ();
  }

  void PlanDefinition_Action_pskel::
  cardinalityBehavior ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->cardinalityBehavior ();
  }

  void PlanDefinition_Action_pskel::
  definitionCanonical ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->definitionCanonical ();
  }

  void PlanDefinition_Action_pskel::
  definitionUri ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->definitionUri ();
  }

  void PlanDefinition_Action_pskel::
  transform ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->transform ();
  }

  void PlanDefinition_Action_pskel::
  dynamicValue ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->dynamicValue ();
  }

  void PlanDefinition_Action_pskel::
  action ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->action ();
  }

  void PlanDefinition_Action_pskel::
  post_PlanDefinition_Action ()
  {
    if (this->PlanDefinition_Action_impl_)
      this->PlanDefinition_Action_impl_->post_PlanDefinition_Action ();
    else
      post_BackboneElement ();
  }

  void PlanDefinition_Action_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->prefix_parser_)
      this->prefix_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->textEquivalent_parser_)
      this->textEquivalent_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    if (this->goalId_parser_)
      this->goalId_parser_->_reset ();

    if (this->subjectCodeableConcept_parser_)
      this->subjectCodeableConcept_parser_->_reset ();

    if (this->subjectReference_parser_)
      this->subjectReference_parser_->_reset ();

    if (this->trigger_parser_)
      this->trigger_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->input_parser_)
      this->input_parser_->_reset ();

    if (this->output_parser_)
      this->output_parser_->_reset ();

    if (this->relatedAction_parser_)
      this->relatedAction_parser_->_reset ();

    if (this->timingDateTime_parser_)
      this->timingDateTime_parser_->_reset ();

    if (this->timingAge_parser_)
      this->timingAge_parser_->_reset ();

    if (this->timingPeriod_parser_)
      this->timingPeriod_parser_->_reset ();

    if (this->timingDuration_parser_)
      this->timingDuration_parser_->_reset ();

    if (this->timingRange_parser_)
      this->timingRange_parser_->_reset ();

    if (this->timingTiming_parser_)
      this->timingTiming_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->groupingBehavior_parser_)
      this->groupingBehavior_parser_->_reset ();

    if (this->selectionBehavior_parser_)
      this->selectionBehavior_parser_->_reset ();

    if (this->requiredBehavior_parser_)
      this->requiredBehavior_parser_->_reset ();

    if (this->precheckBehavior_parser_)
      this->precheckBehavior_parser_->_reset ();

    if (this->cardinalityBehavior_parser_)
      this->cardinalityBehavior_parser_->_reset ();

    if (this->definitionCanonical_parser_)
      this->definitionCanonical_parser_->_reset ();

    if (this->definitionUri_parser_)
      this->definitionUri_parser_->_reset ();

    if (this->transform_parser_)
      this->transform_parser_->_reset ();

    if (this->dynamicValue_parser_)
      this->dynamicValue_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    this->resetting_ = false;
  }

  // PlanDefinition_Condition_pskel
  //

  void PlanDefinition_Condition_pskel::
  kind ()
  {
    if (this->PlanDefinition_Condition_impl_)
      this->PlanDefinition_Condition_impl_->kind ();
  }

  void PlanDefinition_Condition_pskel::
  expression ()
  {
    if (this->PlanDefinition_Condition_impl_)
      this->PlanDefinition_Condition_impl_->expression ();
  }

  void PlanDefinition_Condition_pskel::
  post_PlanDefinition_Condition ()
  {
    if (this->PlanDefinition_Condition_impl_)
      this->PlanDefinition_Condition_impl_->post_PlanDefinition_Condition ();
    else
      post_BackboneElement ();
  }

  void PlanDefinition_Condition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->expression_parser_)
      this->expression_parser_->_reset ();

    this->resetting_ = false;
  }

  // PlanDefinition_RelatedAction_pskel
  //

  void PlanDefinition_RelatedAction_pskel::
  actionId ()
  {
    if (this->PlanDefinition_RelatedAction_impl_)
      this->PlanDefinition_RelatedAction_impl_->actionId ();
  }

  void PlanDefinition_RelatedAction_pskel::
  relationship ()
  {
    if (this->PlanDefinition_RelatedAction_impl_)
      this->PlanDefinition_RelatedAction_impl_->relationship ();
  }

  void PlanDefinition_RelatedAction_pskel::
  offsetDuration ()
  {
    if (this->PlanDefinition_RelatedAction_impl_)
      this->PlanDefinition_RelatedAction_impl_->offsetDuration ();
  }

  void PlanDefinition_RelatedAction_pskel::
  offsetRange ()
  {
    if (this->PlanDefinition_RelatedAction_impl_)
      this->PlanDefinition_RelatedAction_impl_->offsetRange ();
  }

  void PlanDefinition_RelatedAction_pskel::
  post_PlanDefinition_RelatedAction ()
  {
    if (this->PlanDefinition_RelatedAction_impl_)
      this->PlanDefinition_RelatedAction_impl_->post_PlanDefinition_RelatedAction ();
    else
      post_BackboneElement ();
  }

  void PlanDefinition_RelatedAction_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->actionId_parser_)
      this->actionId_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->offsetDuration_parser_)
      this->offsetDuration_parser_->_reset ();

    if (this->offsetRange_parser_)
      this->offsetRange_parser_->_reset ();

    this->resetting_ = false;
  }

  // PlanDefinition_Participant_pskel
  //

  void PlanDefinition_Participant_pskel::
  type ()
  {
    if (this->PlanDefinition_Participant_impl_)
      this->PlanDefinition_Participant_impl_->type ();
  }

  void PlanDefinition_Participant_pskel::
  role ()
  {
    if (this->PlanDefinition_Participant_impl_)
      this->PlanDefinition_Participant_impl_->role ();
  }

  void PlanDefinition_Participant_pskel::
  post_PlanDefinition_Participant ()
  {
    if (this->PlanDefinition_Participant_impl_)
      this->PlanDefinition_Participant_impl_->post_PlanDefinition_Participant ();
    else
      post_BackboneElement ();
  }

  void PlanDefinition_Participant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    this->resetting_ = false;
  }

  // PlanDefinition_DynamicValue_pskel
  //

  void PlanDefinition_DynamicValue_pskel::
  path ()
  {
    if (this->PlanDefinition_DynamicValue_impl_)
      this->PlanDefinition_DynamicValue_impl_->path ();
  }

  void PlanDefinition_DynamicValue_pskel::
  expression ()
  {
    if (this->PlanDefinition_DynamicValue_impl_)
      this->PlanDefinition_DynamicValue_impl_->expression ();
  }

  void PlanDefinition_DynamicValue_pskel::
  post_PlanDefinition_DynamicValue ()
  {
    if (this->PlanDefinition_DynamicValue_impl_)
      this->PlanDefinition_DynamicValue_impl_->post_PlanDefinition_DynamicValue ();
    else
      post_BackboneElement ();
  }

  void PlanDefinition_DynamicValue_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->path_parser_)
      this->path_parser_->_reset ();

    if (this->expression_parser_)
      this->expression_parser_->_reset ();

    this->resetting_ = false;
  }

  // ActionRequiredBehavior_list_pskel
  //

  void ActionRequiredBehavior_list_pskel::
  post_ActionRequiredBehavior_list ()
  {
    if (this->ActionRequiredBehavior_list_impl_)
      this->ActionRequiredBehavior_list_impl_->post_ActionRequiredBehavior_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionRequiredBehavior_list_pskel::_xsde_ActionRequiredBehavior_list_pskel_enums_[3UL] = 
  {
    "could",
    "must",
    "must-unless-documented"
  };

  // ActionRequiredBehavior_pskel
  //

  void ActionRequiredBehavior_pskel::
  value ()
  {
    if (this->ActionRequiredBehavior_impl_)
      this->ActionRequiredBehavior_impl_->value ();
  }

  void ActionRequiredBehavior_pskel::
  post_ActionRequiredBehavior ()
  {
    if (this->ActionRequiredBehavior_impl_)
      this->ActionRequiredBehavior_impl_->post_ActionRequiredBehavior ();
    else
      post_Element ();
  }

  void ActionRequiredBehavior_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ActionRelationshipType_list_pskel
  //

  void ActionRelationshipType_list_pskel::
  post_ActionRelationshipType_list ()
  {
    if (this->ActionRelationshipType_list_impl_)
      this->ActionRelationshipType_list_impl_->post_ActionRelationshipType_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionRelationshipType_list_pskel::_xsde_ActionRelationshipType_list_pskel_enums_[9UL] = 
  {
    "after",
    "after-end",
    "after-start",
    "before",
    "before-end",
    "before-start",
    "concurrent",
    "concurrent-with-end",
    "concurrent-with-start"
  };

  // ActionRelationshipType_pskel
  //

  void ActionRelationshipType_pskel::
  value ()
  {
    if (this->ActionRelationshipType_impl_)
      this->ActionRelationshipType_impl_->value ();
  }

  void ActionRelationshipType_pskel::
  post_ActionRelationshipType ()
  {
    if (this->ActionRelationshipType_impl_)
      this->ActionRelationshipType_impl_->post_ActionRelationshipType ();
    else
      post_Element ();
  }

  void ActionRelationshipType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ActionGroupingBehavior_list_pskel
  //

  void ActionGroupingBehavior_list_pskel::
  post_ActionGroupingBehavior_list ()
  {
    if (this->ActionGroupingBehavior_list_impl_)
      this->ActionGroupingBehavior_list_impl_->post_ActionGroupingBehavior_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionGroupingBehavior_list_pskel::_xsde_ActionGroupingBehavior_list_pskel_enums_[3UL] = 
  {
    "logical-group",
    "sentence-group",
    "visual-group"
  };

  // ActionGroupingBehavior_pskel
  //

  void ActionGroupingBehavior_pskel::
  value ()
  {
    if (this->ActionGroupingBehavior_impl_)
      this->ActionGroupingBehavior_impl_->value ();
  }

  void ActionGroupingBehavior_pskel::
  post_ActionGroupingBehavior ()
  {
    if (this->ActionGroupingBehavior_impl_)
      this->ActionGroupingBehavior_impl_->post_ActionGroupingBehavior ();
    else
      post_Element ();
  }

  void ActionGroupingBehavior_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ActionSelectionBehavior_list_pskel
  //

  void ActionSelectionBehavior_list_pskel::
  post_ActionSelectionBehavior_list ()
  {
    if (this->ActionSelectionBehavior_list_impl_)
      this->ActionSelectionBehavior_list_impl_->post_ActionSelectionBehavior_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionSelectionBehavior_list_pskel::_xsde_ActionSelectionBehavior_list_pskel_enums_[6UL] = 
  {
    "all",
    "all-or-none",
    "any",
    "at-most-one",
    "exactly-one",
    "one-or-more"
  };

  // ActionSelectionBehavior_pskel
  //

  void ActionSelectionBehavior_pskel::
  value ()
  {
    if (this->ActionSelectionBehavior_impl_)
      this->ActionSelectionBehavior_impl_->value ();
  }

  void ActionSelectionBehavior_pskel::
  post_ActionSelectionBehavior ()
  {
    if (this->ActionSelectionBehavior_impl_)
      this->ActionSelectionBehavior_impl_->post_ActionSelectionBehavior ();
    else
      post_Element ();
  }

  void ActionSelectionBehavior_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ActionCardinalityBehavior_list_pskel
  //

  void ActionCardinalityBehavior_list_pskel::
  post_ActionCardinalityBehavior_list ()
  {
    if (this->ActionCardinalityBehavior_list_impl_)
      this->ActionCardinalityBehavior_list_impl_->post_ActionCardinalityBehavior_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionCardinalityBehavior_list_pskel::_xsde_ActionCardinalityBehavior_list_pskel_enums_[2UL] = 
  {
    "multiple",
    "single"
  };

  // ActionCardinalityBehavior_pskel
  //

  void ActionCardinalityBehavior_pskel::
  value ()
  {
    if (this->ActionCardinalityBehavior_impl_)
      this->ActionCardinalityBehavior_impl_->value ();
  }

  void ActionCardinalityBehavior_pskel::
  post_ActionCardinalityBehavior ()
  {
    if (this->ActionCardinalityBehavior_impl_)
      this->ActionCardinalityBehavior_impl_->post_ActionCardinalityBehavior ();
    else
      post_Element ();
  }

  void ActionCardinalityBehavior_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ActionPrecheckBehavior_list_pskel
  //

  void ActionPrecheckBehavior_list_pskel::
  post_ActionPrecheckBehavior_list ()
  {
    if (this->ActionPrecheckBehavior_list_impl_)
      this->ActionPrecheckBehavior_list_impl_->post_ActionPrecheckBehavior_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionPrecheckBehavior_list_pskel::_xsde_ActionPrecheckBehavior_list_pskel_enums_[2UL] = 
  {
    "no",
    "yes"
  };

  // ActionPrecheckBehavior_pskel
  //

  void ActionPrecheckBehavior_pskel::
  value ()
  {
    if (this->ActionPrecheckBehavior_impl_)
      this->ActionPrecheckBehavior_impl_->value ();
  }

  void ActionPrecheckBehavior_pskel::
  post_ActionPrecheckBehavior ()
  {
    if (this->ActionPrecheckBehavior_impl_)
      this->ActionPrecheckBehavior_impl_->post_ActionPrecheckBehavior ();
    else
      post_Element ();
  }

  void ActionPrecheckBehavior_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ActionConditionKind_list_pskel
  //

  void ActionConditionKind_list_pskel::
  post_ActionConditionKind_list ()
  {
    if (this->ActionConditionKind_list_impl_)
      this->ActionConditionKind_list_impl_->post_ActionConditionKind_list ();
    else
      post_code_primitive ();
  }

  const char* const ActionConditionKind_list_pskel::_xsde_ActionConditionKind_list_pskel_enums_[3UL] = 
  {
    "applicability",
    "start",
    "stop"
  };

  // ActionConditionKind_pskel
  //

  void ActionConditionKind_pskel::
  value ()
  {
    if (this->ActionConditionKind_impl_)
      this->ActionConditionKind_impl_->value ();
  }

  void ActionConditionKind_pskel::
  post_ActionConditionKind ()
  {
    if (this->ActionConditionKind_impl_)
      this->ActionConditionKind_impl_->post_ActionConditionKind ();
    else
      post_Element ();
  }

  void ActionConditionKind_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for PlanDefinition_pskel.
  //
  bool PlanDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "subtitle" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PlanDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "subtitle" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subtitle_parser_)
            {
              this->subtitle_parser_->pre ();
              ctx.nested_parser (this->subtitle_parser_);
            }
          }
          else
          {
            if (this->subtitle_parser_ != 0)
            {
              this->subtitle_parser_->post_string ();
              this->subtitle ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "subjectCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectCodeableConcept_parser_)
            {
              this->subjectCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->subjectCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->subjectCodeableConcept_parser_ != 0)
            {
              this->subjectCodeableConcept_parser_->post_CodeableConcept ();
              this->subjectCodeableConcept ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "subjectReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectReference_parser_)
            {
              this->subjectReference_parser_->pre ();
              ctx.nested_parser (this->subjectReference_parser_);
            }
          }
          else
          {
            if (this->subjectReference_parser_ != 0)
            {
              this->subjectReference_parser_->post_Reference ();
              this->subjectReference ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "usage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usage_parser_)
            {
              this->usage_parser_->pre ();
              ctx.nested_parser (this->usage_parser_);
            }
          }
          else
          {
            if (this->usage_parser_ != 0)
            {
              this->usage_parser_->post_string ();
              this->usage ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "approvalDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->approvalDate_parser_)
            {
              this->approvalDate_parser_->pre ();
              ctx.nested_parser (this->approvalDate_parser_);
            }
          }
          else
          {
            if (this->approvalDate_parser_ != 0)
            {
              this->approvalDate_parser_->post_date ();
              this->approvalDate ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "lastReviewDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastReviewDate_parser_)
            {
              this->lastReviewDate_parser_->pre ();
              ctx.nested_parser (this->lastReviewDate_parser_);
            }
          }
          else
          {
            if (this->lastReviewDate_parser_ != 0)
            {
              this->lastReviewDate_parser_->post_date ();
              this->lastReviewDate ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "topic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topic_parser_)
            {
              this->topic_parser_->pre ();
              ctx.nested_parser (this->topic_parser_);
            }
          }
          else
          {
            if (this->topic_parser_ != 0)
            {
              this->topic_parser_->post_CodeableConcept ();
              this->topic ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_ContactDetail ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "editor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->editor_parser_)
            {
              this->editor_parser_->pre ();
              ctx.nested_parser (this->editor_parser_);
            }
          }
          else
          {
            if (this->editor_parser_ != 0)
            {
              this->editor_parser_->post_ContactDetail ();
              this->editor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "reviewer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reviewer_parser_)
            {
              this->reviewer_parser_->pre ();
              ctx.nested_parser (this->reviewer_parser_);
            }
          }
          else
          {
            if (this->reviewer_parser_ != 0)
            {
              this->reviewer_parser_->post_ContactDetail ();
              this->reviewer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "endorser" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endorser_parser_)
            {
              this->endorser_parser_->pre ();
              ctx.nested_parser (this->endorser_parser_);
            }
          }
          else
          {
            if (this->endorser_parser_ != 0)
            {
              this->endorser_parser_->post_ContactDetail ();
              this->endorser ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "relatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatedArtifact_parser_)
            {
              this->relatedArtifact_parser_->pre ();
              ctx.nested_parser (this->relatedArtifact_parser_);
            }
          }
          else
          {
            if (this->relatedArtifact_parser_ != 0)
            {
              this->relatedArtifact_parser_->post_RelatedArtifact ();
              this->relatedArtifact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "library" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->library_parser_)
            {
              this->library_parser_->pre ();
              ctx.nested_parser (this->library_parser_);
            }
          }
          else
          {
            if (this->library_parser_ != 0)
            {
              this->library_parser_->post_canonical ();
              this->library ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "goal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->goal_parser_)
            {
              this->goal_parser_->pre ();
              ctx.nested_parser (this->goal_parser_);
            }
          }
          else
          {
            if (this->goal_parser_ != 0)
            {
              this->goal_parser_->post_PlanDefinition_Goal ();
              this->goal ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_PlanDefinition_Action ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PlanDefinition_Goal_pskel.
  //
  bool PlanDefinition_Goal_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_Goal_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_Goal_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_Goal_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_Goal_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PlanDefinition_Goal_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_CodeableConcept ();
              this->description ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_CodeableConcept ();
              this->priority ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "start" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->start_parser_)
            {
              this->start_parser_->pre ();
              ctx.nested_parser (this->start_parser_);
            }
          }
          else
          {
            if (this->start_parser_ != 0)
            {
              this->start_parser_->post_CodeableConcept ();
              this->start ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "addresses" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->addresses_parser_)
            {
              this->addresses_parser_->pre ();
              ctx.nested_parser (this->addresses_parser_);
            }
          }
          else
          {
            if (this->addresses_parser_ != 0)
            {
              this->addresses_parser_->post_CodeableConcept ();
              this->addresses ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_RelatedArtifact ();
              this->documentation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_PlanDefinition_Target ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PlanDefinition_Target_pskel.
  //
  bool PlanDefinition_Target_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "measure" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "detailQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "detailRange" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "detailCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "due" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_Target_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_Target_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_Target_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_Target_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void PlanDefinition_Target_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "measure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measure_parser_)
            {
              this->measure_parser_->pre ();
              ctx.nested_parser (this->measure_parser_);
            }
          }
          else
          {
            if (this->measure_parser_ != 0)
            {
              this->measure_parser_->post_CodeableConcept ();
              this->measure ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "detailQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailQuantity_parser_)
            {
              this->detailQuantity_parser_->pre ();
              ctx.nested_parser (this->detailQuantity_parser_);
            }
          }
          else
          {
            if (this->detailQuantity_parser_ != 0)
            {
              this->detailQuantity_parser_->post_Quantity ();
              this->detailQuantity ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "detailRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailRange_parser_)
            {
              this->detailRange_parser_->pre ();
              ctx.nested_parser (this->detailRange_parser_);
            }
          }
          else
          {
            if (this->detailRange_parser_ != 0)
            {
              this->detailRange_parser_->post_Range ();
              this->detailRange ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "detailCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailCodeableConcept_parser_)
            {
              this->detailCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->detailCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->detailCodeableConcept_parser_ != 0)
            {
              this->detailCodeableConcept_parser_->post_CodeableConcept ();
              this->detailCodeableConcept ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "due" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->due_parser_)
            {
              this->due_parser_->pre ();
              ctx.nested_parser (this->due_parser_);
            }
          }
          else
          {
            if (this->due_parser_ != 0)
            {
              this->due_parser_->post_Duration ();
              this->due ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PlanDefinition_Action_pskel.
  //
  bool PlanDefinition_Action_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "prefix" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "textEquivalent" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "priority" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "reason" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "documentation" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "goalId" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "subjectCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "subjectReference" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "trigger" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "condition" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "input" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "output" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "relatedAction" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "timingDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "timingAge" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;
        else if (n == "timingPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 18UL;
        else if (n == "timingDuration" &&
                 ns == "http://hl7.org/fhir")
          s = 19UL;
        else if (n == "timingRange" &&
                 ns == "http://hl7.org/fhir")
          s = 20UL;
        else if (n == "timingTiming" &&
                 ns == "http://hl7.org/fhir")
          s = 21UL;
        else if (n == "participant" &&
                 ns == "http://hl7.org/fhir")
          s = 22UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 23UL;
        else if (n == "groupingBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 24UL;
        else if (n == "selectionBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 25UL;
        else if (n == "requiredBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 26UL;
        else if (n == "precheckBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 27UL;
        else if (n == "cardinalityBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 28UL;
        else if (n == "definitionCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 29UL;
        else if (n == "definitionUri" &&
                 ns == "http://hl7.org/fhir")
          s = 30UL;
        else if (n == "transform" &&
                 ns == "http://hl7.org/fhir")
          s = 31UL;
        else if (n == "dynamicValue" &&
                 ns == "http://hl7.org/fhir")
          s = 32UL;
        else if (n == "action" &&
                 ns == "http://hl7.org/fhir")
          s = 33UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_Action_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_Action_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_Action_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_Action_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void PlanDefinition_Action_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "prefix" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prefix_parser_)
            {
              this->prefix_parser_->pre ();
              ctx.nested_parser (this->prefix_parser_);
            }
          }
          else
          {
            if (this->prefix_parser_ != 0)
            {
              this->prefix_parser_->post_string ();
              this->prefix ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "textEquivalent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->textEquivalent_parser_)
            {
              this->textEquivalent_parser_->pre ();
              ctx.nested_parser (this->textEquivalent_parser_);
            }
          }
          else
          {
            if (this->textEquivalent_parser_ != 0)
            {
              this->textEquivalent_parser_->post_string ();
              this->textEquivalent ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_CodeableConcept ();
              this->reason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_RelatedArtifact ();
              this->documentation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "goalId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->goalId_parser_)
            {
              this->goalId_parser_->pre ();
              ctx.nested_parser (this->goalId_parser_);
            }
          }
          else
          {
            if (this->goalId_parser_ != 0)
            {
              this->goalId_parser_->post_id ();
              this->goalId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "subjectCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectCodeableConcept_parser_)
            {
              this->subjectCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->subjectCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->subjectCodeableConcept_parser_ != 0)
            {
              this->subjectCodeableConcept_parser_->post_CodeableConcept ();
              this->subjectCodeableConcept ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "subjectReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectReference_parser_)
            {
              this->subjectReference_parser_->pre ();
              ctx.nested_parser (this->subjectReference_parser_);
            }
          }
          else
          {
            if (this->subjectReference_parser_ != 0)
            {
              this->subjectReference_parser_->post_Reference ();
              this->subjectReference ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "trigger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->trigger_parser_)
            {
              this->trigger_parser_->pre ();
              ctx.nested_parser (this->trigger_parser_);
            }
          }
          else
          {
            if (this->trigger_parser_ != 0)
            {
              this->trigger_parser_->post_TriggerDefinition ();
              this->trigger ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_PlanDefinition_Condition ();
              this->condition ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "input" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->input_parser_)
            {
              this->input_parser_->pre ();
              ctx.nested_parser (this->input_parser_);
            }
          }
          else
          {
            if (this->input_parser_ != 0)
            {
              this->input_parser_->post_DataRequirement ();
              this->input ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "output" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->output_parser_)
            {
              this->output_parser_->pre ();
              ctx.nested_parser (this->output_parser_);
            }
          }
          else
          {
            if (this->output_parser_ != 0)
            {
              this->output_parser_->post_DataRequirement ();
              this->output ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "relatedAction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatedAction_parser_)
            {
              this->relatedAction_parser_->pre ();
              ctx.nested_parser (this->relatedAction_parser_);
            }
          }
          else
          {
            if (this->relatedAction_parser_ != 0)
            {
              this->relatedAction_parser_->post_PlanDefinition_RelatedAction ();
              this->relatedAction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "timingDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingDateTime_parser_)
            {
              this->timingDateTime_parser_->pre ();
              ctx.nested_parser (this->timingDateTime_parser_);
            }
          }
          else
          {
            if (this->timingDateTime_parser_ != 0)
            {
              this->timingDateTime_parser_->post_dateTime ();
              this->timingDateTime ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "timingAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingAge_parser_)
            {
              this->timingAge_parser_->pre ();
              ctx.nested_parser (this->timingAge_parser_);
            }
          }
          else
          {
            if (this->timingAge_parser_ != 0)
            {
              this->timingAge_parser_->post_Age ();
              this->timingAge ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "timingPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingPeriod_parser_)
            {
              this->timingPeriod_parser_->pre ();
              ctx.nested_parser (this->timingPeriod_parser_);
            }
          }
          else
          {
            if (this->timingPeriod_parser_ != 0)
            {
              this->timingPeriod_parser_->post_Period ();
              this->timingPeriod ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "timingDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingDuration_parser_)
            {
              this->timingDuration_parser_->pre ();
              ctx.nested_parser (this->timingDuration_parser_);
            }
          }
          else
          {
            if (this->timingDuration_parser_ != 0)
            {
              this->timingDuration_parser_->post_Duration ();
              this->timingDuration ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "timingRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingRange_parser_)
            {
              this->timingRange_parser_->pre ();
              ctx.nested_parser (this->timingRange_parser_);
            }
          }
          else
          {
            if (this->timingRange_parser_ != 0)
            {
              this->timingRange_parser_->post_Range ();
              this->timingRange ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "timingTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingTiming_parser_)
            {
              this->timingTiming_parser_->pre ();
              ctx.nested_parser (this->timingTiming_parser_);
            }
          }
          else
          {
            if (this->timingTiming_parser_ != 0)
            {
              this->timingTiming_parser_->post_Timing ();
              this->timingTiming ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_PlanDefinition_Participant ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "groupingBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupingBehavior_parser_)
            {
              this->groupingBehavior_parser_->pre ();
              ctx.nested_parser (this->groupingBehavior_parser_);
            }
          }
          else
          {
            if (this->groupingBehavior_parser_ != 0)
            {
              this->groupingBehavior_parser_->post_ActionGroupingBehavior ();
              this->groupingBehavior ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "selectionBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->selectionBehavior_parser_)
            {
              this->selectionBehavior_parser_->pre ();
              ctx.nested_parser (this->selectionBehavior_parser_);
            }
          }
          else
          {
            if (this->selectionBehavior_parser_ != 0)
            {
              this->selectionBehavior_parser_->post_ActionSelectionBehavior ();
              this->selectionBehavior ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "requiredBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requiredBehavior_parser_)
            {
              this->requiredBehavior_parser_->pre ();
              ctx.nested_parser (this->requiredBehavior_parser_);
            }
          }
          else
          {
            if (this->requiredBehavior_parser_ != 0)
            {
              this->requiredBehavior_parser_->post_ActionRequiredBehavior ();
              this->requiredBehavior ();
            }

            count = 0;
            state = 27UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "precheckBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->precheckBehavior_parser_)
            {
              this->precheckBehavior_parser_->pre ();
              ctx.nested_parser (this->precheckBehavior_parser_);
            }
          }
          else
          {
            if (this->precheckBehavior_parser_ != 0)
            {
              this->precheckBehavior_parser_->post_ActionPrecheckBehavior ();
              this->precheckBehavior ();
            }

            count = 0;
            state = 28UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "cardinalityBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->cardinalityBehavior_parser_)
            {
              this->cardinalityBehavior_parser_->pre ();
              ctx.nested_parser (this->cardinalityBehavior_parser_);
            }
          }
          else
          {
            if (this->cardinalityBehavior_parser_ != 0)
            {
              this->cardinalityBehavior_parser_->post_ActionCardinalityBehavior ();
              this->cardinalityBehavior ();
            }

            count = 0;
            state = 29UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "definitionCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionCanonical_parser_)
            {
              this->definitionCanonical_parser_->pre ();
              ctx.nested_parser (this->definitionCanonical_parser_);
            }
          }
          else
          {
            if (this->definitionCanonical_parser_ != 0)
            {
              this->definitionCanonical_parser_->post_canonical ();
              this->definitionCanonical ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "definitionUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionUri_parser_)
            {
              this->definitionUri_parser_->pre ();
              ctx.nested_parser (this->definitionUri_parser_);
            }
          }
          else
          {
            if (this->definitionUri_parser_ != 0)
            {
              this->definitionUri_parser_->post_uri ();
              this->definitionUri ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "transform" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->transform_parser_)
            {
              this->transform_parser_->pre ();
              ctx.nested_parser (this->transform_parser_);
            }
          }
          else
          {
            if (this->transform_parser_ != 0)
            {
              this->transform_parser_->post_canonical ();
              this->transform ();
            }

            count = 0;
            state = 32UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "dynamicValue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dynamicValue_parser_)
            {
              this->dynamicValue_parser_->pre ();
              ctx.nested_parser (this->dynamicValue_parser_);
            }
          }
          else
          {
            if (this->dynamicValue_parser_ != 0)
            {
              this->dynamicValue_parser_->post_PlanDefinition_DynamicValue ();
              this->dynamicValue ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_PlanDefinition_Action ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PlanDefinition_Condition_pskel.
  //
  bool PlanDefinition_Condition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_Condition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_Condition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_Condition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_Condition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PlanDefinition_Condition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_ActionConditionKind ();
              this->kind ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "expression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expression_parser_)
            {
              this->expression_parser_->pre ();
              ctx.nested_parser (this->expression_parser_);
            }
          }
          else
          {
            if (this->expression_parser_ != 0)
            {
              this->expression_parser_->post_Expression ();
              this->expression ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PlanDefinition_RelatedAction_pskel.
  //
  bool PlanDefinition_RelatedAction_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "actionId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_RelatedAction_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_RelatedAction_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_RelatedAction_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_RelatedAction_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PlanDefinition_RelatedAction_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "actionId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actionId_parser_)
            {
              this->actionId_parser_->pre ();
              ctx.nested_parser (this->actionId_parser_);
            }
          }
          else
          {
            if (this->actionId_parser_ != 0)
            {
              this->actionId_parser_->post_id ();
              this->actionId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_ActionRelationshipType ();
              this->relationship ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "offsetDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->offsetDuration_parser_)
            {
              this->offsetDuration_parser_->pre ();
              ctx.nested_parser (this->offsetDuration_parser_);
            }
          }
          else
          {
            if (this->offsetDuration_parser_ != 0)
            {
              this->offsetDuration_parser_->post_Duration ();
              this->offsetDuration ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "offsetRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->offsetRange_parser_)
            {
              this->offsetRange_parser_->pre ();
              ctx.nested_parser (this->offsetRange_parser_);
            }
          }
          else
          {
            if (this->offsetRange_parser_ != 0)
            {
              this->offsetRange_parser_->post_Range ();
              this->offsetRange ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PlanDefinition_Participant_pskel.
  //
  bool PlanDefinition_Participant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_Participant_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_Participant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_Participant_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_Participant_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PlanDefinition_Participant_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_ActionParticipantType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PlanDefinition_DynamicValue_pskel.
  //
  bool PlanDefinition_DynamicValue_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "path" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "expression" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PlanDefinition_DynamicValue_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PlanDefinition_DynamicValue_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PlanDefinition_DynamicValue_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PlanDefinition_DynamicValue_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void PlanDefinition_DynamicValue_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "path" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->path_parser_)
            {
              this->path_parser_->pre ();
              ctx.nested_parser (this->path_parser_);
            }
          }
          else
          {
            if (this->path_parser_ != 0)
            {
              this->path_parser_->post_string ();
              this->path ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "expression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expression_parser_)
            {
              this->expression_parser_->pre ();
              ctx.nested_parser (this->expression_parser_);
            }
          }
          else
          {
            if (this->expression_parser_ != 0)
            {
              this->expression_parser_->post_Expression ();
              this->expression ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ActionRequiredBehavior_pskel.
  //
  bool ActionRequiredBehavior_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionRequiredBehavior_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ActionRelationshipType_pskel.
  //
  bool ActionRelationshipType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionRelationshipType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ActionGroupingBehavior_pskel.
  //
  bool ActionGroupingBehavior_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionGroupingBehavior_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ActionSelectionBehavior_pskel.
  //
  bool ActionSelectionBehavior_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionSelectionBehavior_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ActionCardinalityBehavior_pskel.
  //
  bool ActionCardinalityBehavior_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionCardinalityBehavior_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ActionPrecheckBehavior_pskel.
  //
  bool ActionPrecheckBehavior_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionPrecheckBehavior_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ActionConditionKind_pskel.
  //
  bool ActionConditionKind_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ActionConditionKind_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

