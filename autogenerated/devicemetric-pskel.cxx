// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "devicemetric-pskel.hxx"

namespace fhir
{
  // DeviceMetric_pskel
  //

  void DeviceMetric_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void DeviceMetric_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void DeviceMetric_pskel::
  unit_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->unit_parser_ = &p;
  }

  void DeviceMetric_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void DeviceMetric_pskel::
  parent_parser (::fhir::Reference_pskel& p)
  {
    this->parent_parser_ = &p;
  }

  void DeviceMetric_pskel::
  operationalStatus_parser (::fhir::DeviceMetricOperationalStatus_pskel& p)
  {
    this->operationalStatus_parser_ = &p;
  }

  void DeviceMetric_pskel::
  color_parser (::fhir::DeviceMetricColor_pskel& p)
  {
    this->color_parser_ = &p;
  }

  void DeviceMetric_pskel::
  category_parser (::fhir::DeviceMetricCategory_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void DeviceMetric_pskel::
  measurementPeriod_parser (::fhir::Timing_pskel& p)
  {
    this->measurementPeriod_parser_ = &p;
  }

  void DeviceMetric_pskel::
  calibration_parser (::fhir::DeviceMetric_Calibration_pskel& p)
  {
    this->calibration_parser_ = &p;
  }

  void DeviceMetric_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& unit,
           ::fhir::Reference_pskel& source,
           ::fhir::Reference_pskel& parent,
           ::fhir::DeviceMetricOperationalStatus_pskel& operationalStatus,
           ::fhir::DeviceMetricColor_pskel& color,
           ::fhir::DeviceMetricCategory_pskel& category,
           ::fhir::Timing_pskel& measurementPeriod,
           ::fhir::DeviceMetric_Calibration_pskel& calibration)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->type_parser_ = &type;
    this->unit_parser_ = &unit;
    this->source_parser_ = &source;
    this->parent_parser_ = &parent;
    this->operationalStatus_parser_ = &operationalStatus;
    this->color_parser_ = &color;
    this->category_parser_ = &category;
    this->measurementPeriod_parser_ = &measurementPeriod;
    this->calibration_parser_ = &calibration;
  }

  DeviceMetric_pskel::
  DeviceMetric_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    DeviceMetric_impl_ (0),
    identifier_parser_ (0),
    type_parser_ (0),
    unit_parser_ (0),
    source_parser_ (0),
    parent_parser_ (0),
    operationalStatus_parser_ (0),
    color_parser_ (0),
    category_parser_ (0),
    measurementPeriod_parser_ (0),
    calibration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceMetric_pskel::
  DeviceMetric_pskel (DeviceMetric_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    DeviceMetric_impl_ (impl),
    identifier_parser_ (0),
    type_parser_ (0),
    unit_parser_ (0),
    source_parser_ (0),
    parent_parser_ (0),
    operationalStatus_parser_ (0),
    color_parser_ (0),
    category_parser_ (0),
    measurementPeriod_parser_ (0),
    calibration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceMetric_Calibration_pskel
  //

  void DeviceMetric_Calibration_pskel::
  type_parser (::fhir::DeviceMetricCalibrationType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void DeviceMetric_Calibration_pskel::
  state_parser (::fhir::DeviceMetricCalibrationState_pskel& p)
  {
    this->state_parser_ = &p;
  }

  void DeviceMetric_Calibration_pskel::
  time_parser (::fhir::instant_pskel& p)
  {
    this->time_parser_ = &p;
  }

  void DeviceMetric_Calibration_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::DeviceMetricCalibrationType_pskel& type,
           ::fhir::DeviceMetricCalibrationState_pskel& state,
           ::fhir::instant_pskel& time)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->state_parser_ = &state;
    this->time_parser_ = &time;
  }

  DeviceMetric_Calibration_pskel::
  DeviceMetric_Calibration_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceMetric_Calibration_impl_ (0),
    type_parser_ (0),
    state_parser_ (0),
    time_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceMetric_Calibration_pskel::
  DeviceMetric_Calibration_pskel (DeviceMetric_Calibration_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceMetric_Calibration_impl_ (impl),
    type_parser_ (0),
    state_parser_ (0),
    time_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceMetricCalibrationType_list_pskel
  //

  DeviceMetricCalibrationType_list_pskel::
  DeviceMetricCalibrationType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DeviceMetricCalibrationType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DeviceMetricCalibrationType_list_pskel_enums_, 4UL);
  }

  DeviceMetricCalibrationType_list_pskel::
  DeviceMetricCalibrationType_list_pskel (DeviceMetricCalibrationType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DeviceMetricCalibrationType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DeviceMetricCalibrationType_list_pskel_enums_, 4UL);
  }

  // DeviceMetricCalibrationType_pskel
  //

  void DeviceMetricCalibrationType_pskel::
  value_parser (::fhir::DeviceMetricCalibrationType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DeviceMetricCalibrationType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DeviceMetricCalibrationType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DeviceMetricCalibrationType_pskel::
  DeviceMetricCalibrationType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DeviceMetricCalibrationType_impl_ (0),
    value_parser_ (0)
  {
  }

  DeviceMetricCalibrationType_pskel::
  DeviceMetricCalibrationType_pskel (DeviceMetricCalibrationType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DeviceMetricCalibrationType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // DeviceMetricColor_list_pskel
  //

  DeviceMetricColor_list_pskel::
  DeviceMetricColor_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DeviceMetricColor_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DeviceMetricColor_list_pskel_enums_, 8UL);
  }

  DeviceMetricColor_list_pskel::
  DeviceMetricColor_list_pskel (DeviceMetricColor_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DeviceMetricColor_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DeviceMetricColor_list_pskel_enums_, 8UL);
  }

  // DeviceMetricColor_pskel
  //

  void DeviceMetricColor_pskel::
  value_parser (::fhir::DeviceMetricColor_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DeviceMetricColor_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DeviceMetricColor_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DeviceMetricColor_pskel::
  DeviceMetricColor_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DeviceMetricColor_impl_ (0),
    value_parser_ (0)
  {
  }

  DeviceMetricColor_pskel::
  DeviceMetricColor_pskel (DeviceMetricColor_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DeviceMetricColor_impl_ (impl),
    value_parser_ (0)
  {
  }

  // DeviceMetricCalibrationState_list_pskel
  //

  DeviceMetricCalibrationState_list_pskel::
  DeviceMetricCalibrationState_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DeviceMetricCalibrationState_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DeviceMetricCalibrationState_list_pskel_enums_, 4UL);
  }

  DeviceMetricCalibrationState_list_pskel::
  DeviceMetricCalibrationState_list_pskel (DeviceMetricCalibrationState_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DeviceMetricCalibrationState_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DeviceMetricCalibrationState_list_pskel_enums_, 4UL);
  }

  // DeviceMetricCalibrationState_pskel
  //

  void DeviceMetricCalibrationState_pskel::
  value_parser (::fhir::DeviceMetricCalibrationState_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DeviceMetricCalibrationState_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DeviceMetricCalibrationState_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DeviceMetricCalibrationState_pskel::
  DeviceMetricCalibrationState_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DeviceMetricCalibrationState_impl_ (0),
    value_parser_ (0)
  {
  }

  DeviceMetricCalibrationState_pskel::
  DeviceMetricCalibrationState_pskel (DeviceMetricCalibrationState_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DeviceMetricCalibrationState_impl_ (impl),
    value_parser_ (0)
  {
  }

  // DeviceMetricOperationalStatus_list_pskel
  //

  DeviceMetricOperationalStatus_list_pskel::
  DeviceMetricOperationalStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DeviceMetricOperationalStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DeviceMetricOperationalStatus_list_pskel_enums_, 4UL);
  }

  DeviceMetricOperationalStatus_list_pskel::
  DeviceMetricOperationalStatus_list_pskel (DeviceMetricOperationalStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DeviceMetricOperationalStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DeviceMetricOperationalStatus_list_pskel_enums_, 4UL);
  }

  // DeviceMetricOperationalStatus_pskel
  //

  void DeviceMetricOperationalStatus_pskel::
  value_parser (::fhir::DeviceMetricOperationalStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DeviceMetricOperationalStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DeviceMetricOperationalStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DeviceMetricOperationalStatus_pskel::
  DeviceMetricOperationalStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DeviceMetricOperationalStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  DeviceMetricOperationalStatus_pskel::
  DeviceMetricOperationalStatus_pskel (DeviceMetricOperationalStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DeviceMetricOperationalStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // DeviceMetricCategory_list_pskel
  //

  DeviceMetricCategory_list_pskel::
  DeviceMetricCategory_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DeviceMetricCategory_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DeviceMetricCategory_list_pskel_enums_, 4UL);
  }

  DeviceMetricCategory_list_pskel::
  DeviceMetricCategory_list_pskel (DeviceMetricCategory_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DeviceMetricCategory_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DeviceMetricCategory_list_pskel_enums_, 4UL);
  }

  // DeviceMetricCategory_pskel
  //

  void DeviceMetricCategory_pskel::
  value_parser (::fhir::DeviceMetricCategory_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DeviceMetricCategory_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DeviceMetricCategory_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DeviceMetricCategory_pskel::
  DeviceMetricCategory_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DeviceMetricCategory_impl_ (0),
    value_parser_ (0)
  {
  }

  DeviceMetricCategory_pskel::
  DeviceMetricCategory_pskel (DeviceMetricCategory_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DeviceMetricCategory_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // DeviceMetric_pskel
  //

  void DeviceMetric_pskel::
  identifier ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->identifier ();
  }

  void DeviceMetric_pskel::
  type ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->type ();
  }

  void DeviceMetric_pskel::
  unit ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->unit ();
  }

  void DeviceMetric_pskel::
  source ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->source ();
  }

  void DeviceMetric_pskel::
  parent ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->parent ();
  }

  void DeviceMetric_pskel::
  operationalStatus ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->operationalStatus ();
  }

  void DeviceMetric_pskel::
  color ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->color ();
  }

  void DeviceMetric_pskel::
  category ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->category ();
  }

  void DeviceMetric_pskel::
  measurementPeriod ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->measurementPeriod ();
  }

  void DeviceMetric_pskel::
  calibration ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->calibration ();
  }

  void DeviceMetric_pskel::
  post_DeviceMetric ()
  {
    if (this->DeviceMetric_impl_)
      this->DeviceMetric_impl_->post_DeviceMetric ();
    else
      post_DomainResource ();
  }

  void DeviceMetric_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->unit_parser_)
      this->unit_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->parent_parser_)
      this->parent_parser_->_reset ();

    if (this->operationalStatus_parser_)
      this->operationalStatus_parser_->_reset ();

    if (this->color_parser_)
      this->color_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->measurementPeriod_parser_)
      this->measurementPeriod_parser_->_reset ();

    if (this->calibration_parser_)
      this->calibration_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceMetric_Calibration_pskel
  //

  void DeviceMetric_Calibration_pskel::
  type ()
  {
    if (this->DeviceMetric_Calibration_impl_)
      this->DeviceMetric_Calibration_impl_->type ();
  }

  void DeviceMetric_Calibration_pskel::
  state ()
  {
    if (this->DeviceMetric_Calibration_impl_)
      this->DeviceMetric_Calibration_impl_->state ();
  }

  void DeviceMetric_Calibration_pskel::
  time ()
  {
    if (this->DeviceMetric_Calibration_impl_)
      this->DeviceMetric_Calibration_impl_->time ();
  }

  void DeviceMetric_Calibration_pskel::
  post_DeviceMetric_Calibration ()
  {
    if (this->DeviceMetric_Calibration_impl_)
      this->DeviceMetric_Calibration_impl_->post_DeviceMetric_Calibration ();
    else
      post_BackboneElement ();
  }

  void DeviceMetric_Calibration_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->state_parser_)
      this->state_parser_->_reset ();

    if (this->time_parser_)
      this->time_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceMetricCalibrationType_list_pskel
  //

  void DeviceMetricCalibrationType_list_pskel::
  post_DeviceMetricCalibrationType_list ()
  {
    if (this->DeviceMetricCalibrationType_list_impl_)
      this->DeviceMetricCalibrationType_list_impl_->post_DeviceMetricCalibrationType_list ();
    else
      post_code_primitive ();
  }

  const char* const DeviceMetricCalibrationType_list_pskel::_xsde_DeviceMetricCalibrationType_list_pskel_enums_[4UL] = 
  {
    "gain",
    "offset",
    "two-point",
    "unspecified"
  };

  // DeviceMetricCalibrationType_pskel
  //

  void DeviceMetricCalibrationType_pskel::
  value ()
  {
    if (this->DeviceMetricCalibrationType_impl_)
      this->DeviceMetricCalibrationType_impl_->value ();
  }

  void DeviceMetricCalibrationType_pskel::
  post_DeviceMetricCalibrationType ()
  {
    if (this->DeviceMetricCalibrationType_impl_)
      this->DeviceMetricCalibrationType_impl_->post_DeviceMetricCalibrationType ();
    else
      post_Element ();
  }

  void DeviceMetricCalibrationType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // DeviceMetricColor_list_pskel
  //

  void DeviceMetricColor_list_pskel::
  post_DeviceMetricColor_list ()
  {
    if (this->DeviceMetricColor_list_impl_)
      this->DeviceMetricColor_list_impl_->post_DeviceMetricColor_list ();
    else
      post_code_primitive ();
  }

  const char* const DeviceMetricColor_list_pskel::_xsde_DeviceMetricColor_list_pskel_enums_[8UL] = 
  {
    "black",
    "blue",
    "cyan",
    "green",
    "magenta",
    "red",
    "white",
    "yellow"
  };

  // DeviceMetricColor_pskel
  //

  void DeviceMetricColor_pskel::
  value ()
  {
    if (this->DeviceMetricColor_impl_)
      this->DeviceMetricColor_impl_->value ();
  }

  void DeviceMetricColor_pskel::
  post_DeviceMetricColor ()
  {
    if (this->DeviceMetricColor_impl_)
      this->DeviceMetricColor_impl_->post_DeviceMetricColor ();
    else
      post_Element ();
  }

  void DeviceMetricColor_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // DeviceMetricCalibrationState_list_pskel
  //

  void DeviceMetricCalibrationState_list_pskel::
  post_DeviceMetricCalibrationState_list ()
  {
    if (this->DeviceMetricCalibrationState_list_impl_)
      this->DeviceMetricCalibrationState_list_impl_->post_DeviceMetricCalibrationState_list ();
    else
      post_code_primitive ();
  }

  const char* const DeviceMetricCalibrationState_list_pskel::_xsde_DeviceMetricCalibrationState_list_pskel_enums_[4UL] = 
  {
    "calibrated",
    "calibration-required",
    "not-calibrated",
    "unspecified"
  };

  // DeviceMetricCalibrationState_pskel
  //

  void DeviceMetricCalibrationState_pskel::
  value ()
  {
    if (this->DeviceMetricCalibrationState_impl_)
      this->DeviceMetricCalibrationState_impl_->value ();
  }

  void DeviceMetricCalibrationState_pskel::
  post_DeviceMetricCalibrationState ()
  {
    if (this->DeviceMetricCalibrationState_impl_)
      this->DeviceMetricCalibrationState_impl_->post_DeviceMetricCalibrationState ();
    else
      post_Element ();
  }

  void DeviceMetricCalibrationState_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // DeviceMetricOperationalStatus_list_pskel
  //

  void DeviceMetricOperationalStatus_list_pskel::
  post_DeviceMetricOperationalStatus_list ()
  {
    if (this->DeviceMetricOperationalStatus_list_impl_)
      this->DeviceMetricOperationalStatus_list_impl_->post_DeviceMetricOperationalStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const DeviceMetricOperationalStatus_list_pskel::_xsde_DeviceMetricOperationalStatus_list_pskel_enums_[4UL] = 
  {
    "entered-in-error",
    "off",
    "on",
    "standby"
  };

  // DeviceMetricOperationalStatus_pskel
  //

  void DeviceMetricOperationalStatus_pskel::
  value ()
  {
    if (this->DeviceMetricOperationalStatus_impl_)
      this->DeviceMetricOperationalStatus_impl_->value ();
  }

  void DeviceMetricOperationalStatus_pskel::
  post_DeviceMetricOperationalStatus ()
  {
    if (this->DeviceMetricOperationalStatus_impl_)
      this->DeviceMetricOperationalStatus_impl_->post_DeviceMetricOperationalStatus ();
    else
      post_Element ();
  }

  void DeviceMetricOperationalStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // DeviceMetricCategory_list_pskel
  //

  void DeviceMetricCategory_list_pskel::
  post_DeviceMetricCategory_list ()
  {
    if (this->DeviceMetricCategory_list_impl_)
      this->DeviceMetricCategory_list_impl_->post_DeviceMetricCategory_list ();
    else
      post_code_primitive ();
  }

  const char* const DeviceMetricCategory_list_pskel::_xsde_DeviceMetricCategory_list_pskel_enums_[4UL] = 
  {
    "calculation",
    "measurement",
    "setting",
    "unspecified"
  };

  // DeviceMetricCategory_pskel
  //

  void DeviceMetricCategory_pskel::
  value ()
  {
    if (this->DeviceMetricCategory_impl_)
      this->DeviceMetricCategory_impl_->value ();
  }

  void DeviceMetricCategory_pskel::
  post_DeviceMetricCategory ()
  {
    if (this->DeviceMetricCategory_impl_)
      this->DeviceMetricCategory_impl_->post_DeviceMetricCategory ();
    else
      post_Element ();
  }

  void DeviceMetricCategory_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for DeviceMetric_pskel.
  //
  bool DeviceMetric_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceMetric_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceMetric_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceMetric_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceMetric_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceMetric_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "unit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unit_parser_)
            {
              this->unit_parser_->pre ();
              ctx.nested_parser (this->unit_parser_);
            }
          }
          else
          {
            if (this->unit_parser_ != 0)
            {
              this->unit_parser_->post_CodeableConcept ();
              this->unit ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "parent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parent_parser_)
            {
              this->parent_parser_->pre ();
              ctx.nested_parser (this->parent_parser_);
            }
          }
          else
          {
            if (this->parent_parser_ != 0)
            {
              this->parent_parser_->post_Reference ();
              this->parent ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "operationalStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operationalStatus_parser_)
            {
              this->operationalStatus_parser_->pre ();
              ctx.nested_parser (this->operationalStatus_parser_);
            }
          }
          else
          {
            if (this->operationalStatus_parser_ != 0)
            {
              this->operationalStatus_parser_->post_DeviceMetricOperationalStatus ();
              this->operationalStatus ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "color" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->color_parser_)
            {
              this->color_parser_->pre ();
              ctx.nested_parser (this->color_parser_);
            }
          }
          else
          {
            if (this->color_parser_ != 0)
            {
              this->color_parser_->post_DeviceMetricColor ();
              this->color ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_DeviceMetricCategory ();
              this->category ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "measurementPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measurementPeriod_parser_)
            {
              this->measurementPeriod_parser_->pre ();
              ctx.nested_parser (this->measurementPeriod_parser_);
            }
          }
          else
          {
            if (this->measurementPeriod_parser_ != 0)
            {
              this->measurementPeriod_parser_->post_Timing ();
              this->measurementPeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "calibration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->calibration_parser_)
            {
              this->calibration_parser_->pre ();
              ctx.nested_parser (this->calibration_parser_);
            }
          }
          else
          {
            if (this->calibration_parser_ != 0)
            {
              this->calibration_parser_->post_DeviceMetric_Calibration ();
              this->calibration ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceMetric_Calibration_pskel.
  //
  bool DeviceMetric_Calibration_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "state" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "time" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceMetric_Calibration_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceMetric_Calibration_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceMetric_Calibration_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceMetric_Calibration_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void DeviceMetric_Calibration_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_DeviceMetricCalibrationType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "state" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->state_parser_)
            {
              this->state_parser_->pre ();
              ctx.nested_parser (this->state_parser_);
            }
          }
          else
          {
            if (this->state_parser_ != 0)
            {
              this->state_parser_->post_DeviceMetricCalibrationState ();
              this->state ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "time" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->time_parser_)
            {
              this->time_parser_->pre ();
              ctx.nested_parser (this->time_parser_);
            }
          }
          else
          {
            if (this->time_parser_ != 0)
            {
              this->time_parser_->post_instant ();
              this->time ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for DeviceMetricCalibrationType_pskel.
  //
  bool DeviceMetricCalibrationType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DeviceMetricCalibrationType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for DeviceMetricColor_pskel.
  //
  bool DeviceMetricColor_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DeviceMetricColor_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for DeviceMetricCalibrationState_pskel.
  //
  bool DeviceMetricCalibrationState_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DeviceMetricCalibrationState_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for DeviceMetricOperationalStatus_pskel.
  //
  bool DeviceMetricOperationalStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DeviceMetricOperationalStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for DeviceMetricCategory_pskel.
  //
  bool DeviceMetricCategory_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DeviceMetricCategory_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

