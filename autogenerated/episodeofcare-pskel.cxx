// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "episodeofcare-pskel.hxx"

namespace fhir
{
  // EpisodeOfCare_pskel
  //

  void EpisodeOfCare_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  status_parser (::fhir::EpisodeOfCareStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  statusHistory_parser (::fhir::EpisodeOfCare_StatusHistory_pskel& p)
  {
    this->statusHistory_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  diagnosis_parser (::fhir::EpisodeOfCare_Diagnosis_pskel& p)
  {
    this->diagnosis_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  managingOrganization_parser (::fhir::Reference_pskel& p)
  {
    this->managingOrganization_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  referralRequest_parser (::fhir::Reference_pskel& p)
  {
    this->referralRequest_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  careManager_parser (::fhir::Reference_pskel& p)
  {
    this->careManager_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  team_parser (::fhir::Reference_pskel& p)
  {
    this->team_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  account_parser (::fhir::Reference_pskel& p)
  {
    this->account_parser_ = &p;
  }

  void EpisodeOfCare_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::EpisodeOfCareStatus_pskel& status,
           ::fhir::EpisodeOfCare_StatusHistory_pskel& statusHistory,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::EpisodeOfCare_Diagnosis_pskel& diagnosis,
           ::fhir::Reference_pskel& patient,
           ::fhir::Reference_pskel& managingOrganization,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& referralRequest,
           ::fhir::Reference_pskel& careManager,
           ::fhir::Reference_pskel& team,
           ::fhir::Reference_pskel& account)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->statusHistory_parser_ = &statusHistory;
    this->type_parser_ = &type;
    this->diagnosis_parser_ = &diagnosis;
    this->patient_parser_ = &patient;
    this->managingOrganization_parser_ = &managingOrganization;
    this->period_parser_ = &period;
    this->referralRequest_parser_ = &referralRequest;
    this->careManager_parser_ = &careManager;
    this->team_parser_ = &team;
    this->account_parser_ = &account;
  }

  EpisodeOfCare_pskel::
  EpisodeOfCare_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    EpisodeOfCare_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    statusHistory_parser_ (0),
    type_parser_ (0),
    diagnosis_parser_ (0),
    patient_parser_ (0),
    managingOrganization_parser_ (0),
    period_parser_ (0),
    referralRequest_parser_ (0),
    careManager_parser_ (0),
    team_parser_ (0),
    account_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  EpisodeOfCare_pskel::
  EpisodeOfCare_pskel (EpisodeOfCare_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    EpisodeOfCare_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    statusHistory_parser_ (0),
    type_parser_ (0),
    diagnosis_parser_ (0),
    patient_parser_ (0),
    managingOrganization_parser_ (0),
    period_parser_ (0),
    referralRequest_parser_ (0),
    careManager_parser_ (0),
    team_parser_ (0),
    account_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EpisodeOfCare_StatusHistory_pskel
  //

  void EpisodeOfCare_StatusHistory_pskel::
  status_parser (::fhir::EpisodeOfCareStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void EpisodeOfCare_StatusHistory_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void EpisodeOfCare_StatusHistory_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::EpisodeOfCareStatus_pskel& status,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->status_parser_ = &status;
    this->period_parser_ = &period;
  }

  EpisodeOfCare_StatusHistory_pskel::
  EpisodeOfCare_StatusHistory_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    EpisodeOfCare_StatusHistory_impl_ (0),
    status_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  EpisodeOfCare_StatusHistory_pskel::
  EpisodeOfCare_StatusHistory_pskel (EpisodeOfCare_StatusHistory_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    EpisodeOfCare_StatusHistory_impl_ (impl),
    status_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EpisodeOfCare_Diagnosis_pskel
  //

  void EpisodeOfCare_Diagnosis_pskel::
  condition_parser (::fhir::Reference_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void EpisodeOfCare_Diagnosis_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void EpisodeOfCare_Diagnosis_pskel::
  rank_parser (::fhir::positiveInt_pskel& p)
  {
    this->rank_parser_ = &p;
  }

  void EpisodeOfCare_Diagnosis_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& condition,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::positiveInt_pskel& rank)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->condition_parser_ = &condition;
    this->role_parser_ = &role;
    this->rank_parser_ = &rank;
  }

  EpisodeOfCare_Diagnosis_pskel::
  EpisodeOfCare_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    EpisodeOfCare_Diagnosis_impl_ (0),
    condition_parser_ (0),
    role_parser_ (0),
    rank_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  EpisodeOfCare_Diagnosis_pskel::
  EpisodeOfCare_Diagnosis_pskel (EpisodeOfCare_Diagnosis_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    EpisodeOfCare_Diagnosis_impl_ (impl),
    condition_parser_ (0),
    role_parser_ (0),
    rank_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EpisodeOfCareStatus_list_pskel
  //

  EpisodeOfCareStatus_list_pskel::
  EpisodeOfCareStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EpisodeOfCareStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EpisodeOfCareStatus_list_pskel_enums_, 7UL);
  }

  EpisodeOfCareStatus_list_pskel::
  EpisodeOfCareStatus_list_pskel (EpisodeOfCareStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EpisodeOfCareStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EpisodeOfCareStatus_list_pskel_enums_, 7UL);
  }

  // EpisodeOfCareStatus_pskel
  //

  void EpisodeOfCareStatus_pskel::
  value_parser (::fhir::EpisodeOfCareStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EpisodeOfCareStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EpisodeOfCareStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EpisodeOfCareStatus_pskel::
  EpisodeOfCareStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EpisodeOfCareStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  EpisodeOfCareStatus_pskel::
  EpisodeOfCareStatus_pskel (EpisodeOfCareStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EpisodeOfCareStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // EpisodeOfCare_pskel
  //

  void EpisodeOfCare_pskel::
  identifier ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->identifier ();
  }

  void EpisodeOfCare_pskel::
  status ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->status ();
  }

  void EpisodeOfCare_pskel::
  statusHistory ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->statusHistory ();
  }

  void EpisodeOfCare_pskel::
  type ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->type ();
  }

  void EpisodeOfCare_pskel::
  diagnosis ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->diagnosis ();
  }

  void EpisodeOfCare_pskel::
  patient ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->patient ();
  }

  void EpisodeOfCare_pskel::
  managingOrganization ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->managingOrganization ();
  }

  void EpisodeOfCare_pskel::
  period ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->period ();
  }

  void EpisodeOfCare_pskel::
  referralRequest ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->referralRequest ();
  }

  void EpisodeOfCare_pskel::
  careManager ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->careManager ();
  }

  void EpisodeOfCare_pskel::
  team ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->team ();
  }

  void EpisodeOfCare_pskel::
  account ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->account ();
  }

  void EpisodeOfCare_pskel::
  post_EpisodeOfCare ()
  {
    if (this->EpisodeOfCare_impl_)
      this->EpisodeOfCare_impl_->post_EpisodeOfCare ();
    else
      post_DomainResource ();
  }

  void EpisodeOfCare_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusHistory_parser_)
      this->statusHistory_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->diagnosis_parser_)
      this->diagnosis_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->managingOrganization_parser_)
      this->managingOrganization_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->referralRequest_parser_)
      this->referralRequest_parser_->_reset ();

    if (this->careManager_parser_)
      this->careManager_parser_->_reset ();

    if (this->team_parser_)
      this->team_parser_->_reset ();

    if (this->account_parser_)
      this->account_parser_->_reset ();

    this->resetting_ = false;
  }

  // EpisodeOfCare_StatusHistory_pskel
  //

  void EpisodeOfCare_StatusHistory_pskel::
  status ()
  {
    if (this->EpisodeOfCare_StatusHistory_impl_)
      this->EpisodeOfCare_StatusHistory_impl_->status ();
  }

  void EpisodeOfCare_StatusHistory_pskel::
  period ()
  {
    if (this->EpisodeOfCare_StatusHistory_impl_)
      this->EpisodeOfCare_StatusHistory_impl_->period ();
  }

  void EpisodeOfCare_StatusHistory_pskel::
  post_EpisodeOfCare_StatusHistory ()
  {
    if (this->EpisodeOfCare_StatusHistory_impl_)
      this->EpisodeOfCare_StatusHistory_impl_->post_EpisodeOfCare_StatusHistory ();
    else
      post_BackboneElement ();
  }

  void EpisodeOfCare_StatusHistory_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // EpisodeOfCare_Diagnosis_pskel
  //

  void EpisodeOfCare_Diagnosis_pskel::
  condition ()
  {
    if (this->EpisodeOfCare_Diagnosis_impl_)
      this->EpisodeOfCare_Diagnosis_impl_->condition ();
  }

  void EpisodeOfCare_Diagnosis_pskel::
  role ()
  {
    if (this->EpisodeOfCare_Diagnosis_impl_)
      this->EpisodeOfCare_Diagnosis_impl_->role ();
  }

  void EpisodeOfCare_Diagnosis_pskel::
  rank ()
  {
    if (this->EpisodeOfCare_Diagnosis_impl_)
      this->EpisodeOfCare_Diagnosis_impl_->rank ();
  }

  void EpisodeOfCare_Diagnosis_pskel::
  post_EpisodeOfCare_Diagnosis ()
  {
    if (this->EpisodeOfCare_Diagnosis_impl_)
      this->EpisodeOfCare_Diagnosis_impl_->post_EpisodeOfCare_Diagnosis ();
    else
      post_BackboneElement ();
  }

  void EpisodeOfCare_Diagnosis_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->rank_parser_)
      this->rank_parser_->_reset ();

    this->resetting_ = false;
  }

  // EpisodeOfCareStatus_list_pskel
  //

  void EpisodeOfCareStatus_list_pskel::
  post_EpisodeOfCareStatus_list ()
  {
    if (this->EpisodeOfCareStatus_list_impl_)
      this->EpisodeOfCareStatus_list_impl_->post_EpisodeOfCareStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const EpisodeOfCareStatus_list_pskel::_xsde_EpisodeOfCareStatus_list_pskel_enums_[7UL] = 
  {
    "active",
    "cancelled",
    "entered-in-error",
    "finished",
    "onhold",
    "planned",
    "waitlist"
  };

  // EpisodeOfCareStatus_pskel
  //

  void EpisodeOfCareStatus_pskel::
  value ()
  {
    if (this->EpisodeOfCareStatus_impl_)
      this->EpisodeOfCareStatus_impl_->value ();
  }

  void EpisodeOfCareStatus_pskel::
  post_EpisodeOfCareStatus ()
  {
    if (this->EpisodeOfCareStatus_impl_)
      this->EpisodeOfCareStatus_impl_->post_EpisodeOfCareStatus ();
    else
      post_Element ();
  }

  void EpisodeOfCareStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for EpisodeOfCare_pskel.
  //
  bool EpisodeOfCare_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &EpisodeOfCare_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool EpisodeOfCare_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void EpisodeOfCare_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void EpisodeOfCare_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void EpisodeOfCare_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EpisodeOfCareStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "statusHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusHistory_parser_)
            {
              this->statusHistory_parser_->pre ();
              ctx.nested_parser (this->statusHistory_parser_);
            }
          }
          else
          {
            if (this->statusHistory_parser_ != 0)
            {
              this->statusHistory_parser_->post_EpisodeOfCare_StatusHistory ();
              this->statusHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "diagnosis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosis_parser_)
            {
              this->diagnosis_parser_->pre ();
              ctx.nested_parser (this->diagnosis_parser_);
            }
          }
          else
          {
            if (this->diagnosis_parser_ != 0)
            {
              this->diagnosis_parser_->post_EpisodeOfCare_Diagnosis ();
              this->diagnosis ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "managingOrganization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->managingOrganization_parser_)
            {
              this->managingOrganization_parser_->pre ();
              ctx.nested_parser (this->managingOrganization_parser_);
            }
          }
          else
          {
            if (this->managingOrganization_parser_ != 0)
            {
              this->managingOrganization_parser_->post_Reference ();
              this->managingOrganization ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "referralRequest" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referralRequest_parser_)
            {
              this->referralRequest_parser_->pre ();
              ctx.nested_parser (this->referralRequest_parser_);
            }
          }
          else
          {
            if (this->referralRequest_parser_ != 0)
            {
              this->referralRequest_parser_->post_Reference ();
              this->referralRequest ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "careManager" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->careManager_parser_)
            {
              this->careManager_parser_->pre ();
              ctx.nested_parser (this->careManager_parser_);
            }
          }
          else
          {
            if (this->careManager_parser_ != 0)
            {
              this->careManager_parser_->post_Reference ();
              this->careManager ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "team" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->team_parser_)
            {
              this->team_parser_->pre ();
              ctx.nested_parser (this->team_parser_);
            }
          }
          else
          {
            if (this->team_parser_ != 0)
            {
              this->team_parser_->post_Reference ();
              this->team ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "account" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->account_parser_)
            {
              this->account_parser_->pre ();
              ctx.nested_parser (this->account_parser_);
            }
          }
          else
          {
            if (this->account_parser_ != 0)
            {
              this->account_parser_->post_Reference ();
              this->account ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for EpisodeOfCare_StatusHistory_pskel.
  //
  bool EpisodeOfCare_StatusHistory_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "status" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &EpisodeOfCare_StatusHistory_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool EpisodeOfCare_StatusHistory_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void EpisodeOfCare_StatusHistory_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void EpisodeOfCare_StatusHistory_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void EpisodeOfCare_StatusHistory_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EpisodeOfCareStatus ();
              this->status ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for EpisodeOfCare_Diagnosis_pskel.
  //
  bool EpisodeOfCare_Diagnosis_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &EpisodeOfCare_Diagnosis_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool EpisodeOfCare_Diagnosis_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void EpisodeOfCare_Diagnosis_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void EpisodeOfCare_Diagnosis_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void EpisodeOfCare_Diagnosis_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_Reference ();
              this->condition ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "rank" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rank_parser_)
            {
              this->rank_parser_->pre ();
              ctx.nested_parser (this->rank_parser_);
            }
          }
          else
          {
            if (this->rank_parser_ != 0)
            {
              this->rank_parser_->post_positiveInt ();
              this->rank ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for EpisodeOfCareStatus_pskel.
  //
  bool EpisodeOfCareStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EpisodeOfCareStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

