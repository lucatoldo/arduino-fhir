// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef SUBSTANCESPECIFICATION_PSKEL_HXX
#define SUBSTANCESPECIFICATION_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class SubstanceSpecification_pskel;
  class SubstanceSpecification_Moiety_pskel;
  class SubstanceSpecification_Property_pskel;
  class SubstanceSpecification_Structure_pskel;
  class SubstanceSpecification_Isotope_pskel;
  class SubstanceSpecification_MolecularWeight_pskel;
  class SubstanceSpecification_Representation_pskel;
  class SubstanceSpecification_Code_pskel;
  class SubstanceSpecification_Name_pskel;
  class SubstanceSpecification_Official_pskel;
  class SubstanceSpecification_Relationship_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class SubstanceSpecification_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    status ();

    virtual void
    domain ();

    virtual void
    description ();

    virtual void
    source ();

    virtual void
    comment ();

    virtual void
    moiety ();

    virtual void
    property ();

    virtual void
    referenceInformation ();

    virtual void
    structure ();

    virtual void
    code ();

    virtual void
    name ();

    virtual void
    molecularWeight ();

    virtual void
    relationship ();

    virtual void
    nucleicAcid ();

    virtual void
    polymer ();

    virtual void
    protein ();

    virtual void
    sourceMaterial ();

    virtual void
    post_SubstanceSpecification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* domain */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::SubstanceSpecification_Moiety_pskel& /* moiety */,
             ::fhir::SubstanceSpecification_Property_pskel& /* property */,
             ::fhir::Reference_pskel& /* referenceInformation */,
             ::fhir::SubstanceSpecification_Structure_pskel& /* structure */,
             ::fhir::SubstanceSpecification_Code_pskel& /* code */,
             ::fhir::SubstanceSpecification_Name_pskel& /* name */,
             ::fhir::SubstanceSpecification_MolecularWeight_pskel& /* molecularWeight */,
             ::fhir::SubstanceSpecification_Relationship_pskel& /* relationship */,
             ::fhir::Reference_pskel& /* nucleicAcid */,
             ::fhir::Reference_pskel& /* polymer */,
             ::fhir::Reference_pskel& /* protein */,
             ::fhir::Reference_pskel& /* sourceMaterial */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    domain_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    moiety_parser (::fhir::SubstanceSpecification_Moiety_pskel&);

    void
    property_parser (::fhir::SubstanceSpecification_Property_pskel&);

    void
    referenceInformation_parser (::fhir::Reference_pskel&);

    void
    structure_parser (::fhir::SubstanceSpecification_Structure_pskel&);

    void
    code_parser (::fhir::SubstanceSpecification_Code_pskel&);

    void
    name_parser (::fhir::SubstanceSpecification_Name_pskel&);

    void
    molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel&);

    void
    relationship_parser (::fhir::SubstanceSpecification_Relationship_pskel&);

    void
    nucleicAcid_parser (::fhir::Reference_pskel&);

    void
    polymer_parser (::fhir::Reference_pskel&);

    void
    protein_parser (::fhir::Reference_pskel&);

    void
    sourceMaterial_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_pskel* SubstanceSpecification_impl_;
    SubstanceSpecification_pskel (SubstanceSpecification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* domain_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::SubstanceSpecification_Moiety_pskel* moiety_parser_;
    ::fhir::SubstanceSpecification_Property_pskel* property_parser_;
    ::fhir::Reference_pskel* referenceInformation_parser_;
    ::fhir::SubstanceSpecification_Structure_pskel* structure_parser_;
    ::fhir::SubstanceSpecification_Code_pskel* code_parser_;
    ::fhir::SubstanceSpecification_Name_pskel* name_parser_;
    ::fhir::SubstanceSpecification_MolecularWeight_pskel* molecularWeight_parser_;
    ::fhir::SubstanceSpecification_Relationship_pskel* relationship_parser_;
    ::fhir::Reference_pskel* nucleicAcid_parser_;
    ::fhir::Reference_pskel* polymer_parser_;
    ::fhir::Reference_pskel* protein_parser_;
    ::fhir::Reference_pskel* sourceMaterial_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Moiety_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    role ();

    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    stereochemistry ();

    virtual void
    opticalActivity ();

    virtual void
    molecularFormula ();

    virtual void
    amountQuantity ();

    virtual void
    amountString ();

    virtual void
    post_SubstanceSpecification_Moiety ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* stereochemistry */,
             ::fhir::CodeableConcept_pskel& /* opticalActivity */,
             ::fhir::string_pskel& /* molecularFormula */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::string_pskel& /* amountString */);

    // Individual element parsers.
    //
    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    stereochemistry_parser (::fhir::CodeableConcept_pskel&);

    void
    opticalActivity_parser (::fhir::CodeableConcept_pskel&);

    void
    molecularFormula_parser (::fhir::string_pskel&);

    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Moiety_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Moiety_pskel* SubstanceSpecification_Moiety_impl_;
    SubstanceSpecification_Moiety_pskel (SubstanceSpecification_Moiety_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* stereochemistry_parser_;
    ::fhir::CodeableConcept_pskel* opticalActivity_parser_;
    ::fhir::string_pskel* molecularFormula_parser_;
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::string_pskel* amountString_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Moiety_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Property_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    code ();

    virtual void
    parameters ();

    virtual void
    definingSubstanceReference ();

    virtual void
    definingSubstanceCodeableConcept ();

    virtual void
    amountQuantity ();

    virtual void
    amountString ();

    virtual void
    post_SubstanceSpecification_Property ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* parameters */,
             ::fhir::Reference_pskel& /* definingSubstanceReference */,
             ::fhir::CodeableConcept_pskel& /* definingSubstanceCodeableConcept */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::string_pskel& /* amountString */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    parameters_parser (::fhir::string_pskel&);

    void
    definingSubstanceReference_parser (::fhir::Reference_pskel&);

    void
    definingSubstanceCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Property_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Property_pskel* SubstanceSpecification_Property_impl_;
    SubstanceSpecification_Property_pskel (SubstanceSpecification_Property_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* parameters_parser_;
    ::fhir::Reference_pskel* definingSubstanceReference_parser_;
    ::fhir::CodeableConcept_pskel* definingSubstanceCodeableConcept_parser_;
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::string_pskel* amountString_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Property_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Structure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    stereochemistry ();

    virtual void
    opticalActivity ();

    virtual void
    molecularFormula ();

    virtual void
    molecularFormulaByMoiety ();

    virtual void
    isotope ();

    virtual void
    molecularWeight ();

    virtual void
    source ();

    virtual void
    representation ();

    virtual void
    post_SubstanceSpecification_Structure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* stereochemistry */,
             ::fhir::CodeableConcept_pskel& /* opticalActivity */,
             ::fhir::string_pskel& /* molecularFormula */,
             ::fhir::string_pskel& /* molecularFormulaByMoiety */,
             ::fhir::SubstanceSpecification_Isotope_pskel& /* isotope */,
             ::fhir::SubstanceSpecification_MolecularWeight_pskel& /* molecularWeight */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::SubstanceSpecification_Representation_pskel& /* representation */);

    // Individual element parsers.
    //
    void
    stereochemistry_parser (::fhir::CodeableConcept_pskel&);

    void
    opticalActivity_parser (::fhir::CodeableConcept_pskel&);

    void
    molecularFormula_parser (::fhir::string_pskel&);

    void
    molecularFormulaByMoiety_parser (::fhir::string_pskel&);

    void
    isotope_parser (::fhir::SubstanceSpecification_Isotope_pskel&);

    void
    molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    representation_parser (::fhir::SubstanceSpecification_Representation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Structure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Structure_pskel* SubstanceSpecification_Structure_impl_;
    SubstanceSpecification_Structure_pskel (SubstanceSpecification_Structure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* stereochemistry_parser_;
    ::fhir::CodeableConcept_pskel* opticalActivity_parser_;
    ::fhir::string_pskel* molecularFormula_parser_;
    ::fhir::string_pskel* molecularFormulaByMoiety_parser_;
    ::fhir::SubstanceSpecification_Isotope_pskel* isotope_parser_;
    ::fhir::SubstanceSpecification_MolecularWeight_pskel* molecularWeight_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::SubstanceSpecification_Representation_pskel* representation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Structure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Isotope_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    substitution ();

    virtual void
    halfLife ();

    virtual void
    molecularWeight ();

    virtual void
    post_SubstanceSpecification_Isotope ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* substitution */,
             ::fhir::Quantity_pskel& /* halfLife */,
             ::fhir::SubstanceSpecification_MolecularWeight_pskel& /* molecularWeight */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::CodeableConcept_pskel&);

    void
    substitution_parser (::fhir::CodeableConcept_pskel&);

    void
    halfLife_parser (::fhir::Quantity_pskel&);

    void
    molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Isotope_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Isotope_pskel* SubstanceSpecification_Isotope_impl_;
    SubstanceSpecification_Isotope_pskel (SubstanceSpecification_Isotope_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* substitution_parser_;
    ::fhir::Quantity_pskel* halfLife_parser_;
    ::fhir::SubstanceSpecification_MolecularWeight_pskel* molecularWeight_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Isotope_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_MolecularWeight_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    method ();

    virtual void
    type ();

    virtual void
    amount ();

    virtual void
    post_SubstanceSpecification_MolecularWeight ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_MolecularWeight_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_MolecularWeight_pskel* SubstanceSpecification_MolecularWeight_impl_;
    SubstanceSpecification_MolecularWeight_pskel (SubstanceSpecification_MolecularWeight_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_MolecularWeight_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Representation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    representation ();

    virtual void
    attachment ();

    virtual void
    post_SubstanceSpecification_Representation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* representation */,
             ::fhir::Attachment_pskel& /* attachment */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    representation_parser (::fhir::string_pskel&);

    void
    attachment_parser (::fhir::Attachment_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Representation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Representation_pskel* SubstanceSpecification_Representation_impl_;
    SubstanceSpecification_Representation_pskel (SubstanceSpecification_Representation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* representation_parser_;
    ::fhir::Attachment_pskel* attachment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Representation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Code_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    status ();

    virtual void
    statusDate ();

    virtual void
    comment ();

    virtual void
    source ();

    virtual void
    post_SubstanceSpecification_Code ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::dateTime_pskel& /* statusDate */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    statusDate_parser (::fhir::dateTime_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Code_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Code_pskel* SubstanceSpecification_Code_impl_;
    SubstanceSpecification_Code_pskel (SubstanceSpecification_Code_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::dateTime_pskel* statusDate_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Code_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Name_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    status ();

    virtual void
    preferred ();

    virtual void
    language ();

    virtual void
    domain ();

    virtual void
    jurisdiction ();

    virtual void
    synonym ();

    virtual void
    translation ();

    virtual void
    official ();

    virtual void
    source ();

    virtual void
    post_SubstanceSpecification_Name ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::boolean_pskel& /* preferred */,
             ::fhir::CodeableConcept_pskel& /* language */,
             ::fhir::CodeableConcept_pskel& /* domain */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::SubstanceSpecification_Name_pskel& /* synonym */,
             ::fhir::SubstanceSpecification_Name_pskel& /* translation */,
             ::fhir::SubstanceSpecification_Official_pskel& /* official */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    preferred_parser (::fhir::boolean_pskel&);

    void
    language_parser (::fhir::CodeableConcept_pskel&);

    void
    domain_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    synonym_parser (::fhir::SubstanceSpecification_Name_pskel&);

    void
    translation_parser (::fhir::SubstanceSpecification_Name_pskel&);

    void
    official_parser (::fhir::SubstanceSpecification_Official_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Name_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Name_pskel* SubstanceSpecification_Name_impl_;
    SubstanceSpecification_Name_pskel (SubstanceSpecification_Name_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::boolean_pskel* preferred_parser_;
    ::fhir::CodeableConcept_pskel* language_parser_;
    ::fhir::CodeableConcept_pskel* domain_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::SubstanceSpecification_Name_pskel* synonym_parser_;
    ::fhir::SubstanceSpecification_Name_pskel* translation_parser_;
    ::fhir::SubstanceSpecification_Official_pskel* official_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Name_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Official_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    authority ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    post_SubstanceSpecification_Official ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* authority */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */);

    // Individual element parsers.
    //
    void
    authority_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Official_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Official_pskel* SubstanceSpecification_Official_impl_;
    SubstanceSpecification_Official_pskel (SubstanceSpecification_Official_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* authority_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Official_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Relationship_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    substanceReference ();

    virtual void
    substanceCodeableConcept ();

    virtual void
    relationship ();

    virtual void
    isDefining ();

    virtual void
    amountQuantity ();

    virtual void
    amountRange ();

    virtual void
    amountRatio ();

    virtual void
    amountString ();

    virtual void
    amountRatioLowLimit ();

    virtual void
    amountType ();

    virtual void
    source ();

    virtual void
    post_SubstanceSpecification_Relationship ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* substanceReference */,
             ::fhir::CodeableConcept_pskel& /* substanceCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::boolean_pskel& /* isDefining */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::Range_pskel& /* amountRange */,
             ::fhir::Ratio_pskel& /* amountRatio */,
             ::fhir::string_pskel& /* amountString */,
             ::fhir::Ratio_pskel& /* amountRatioLowLimit */,
             ::fhir::CodeableConcept_pskel& /* amountType */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    substanceReference_parser (::fhir::Reference_pskel&);

    void
    substanceCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    isDefining_parser (::fhir::boolean_pskel&);

    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountRange_parser (::fhir::Range_pskel&);

    void
    amountRatio_parser (::fhir::Ratio_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    void
    amountRatioLowLimit_parser (::fhir::Ratio_pskel&);

    void
    amountType_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Relationship_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Relationship_pskel* SubstanceSpecification_Relationship_impl_;
    SubstanceSpecification_Relationship_pskel (SubstanceSpecification_Relationship_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* substanceReference_parser_;
    ::fhir::CodeableConcept_pskel* substanceCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::boolean_pskel* isDefining_parser_;
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::Range_pskel* amountRange_parser_;
    ::fhir::Ratio_pskel* amountRatio_parser_;
    ::fhir::string_pskel* amountString_parser_;
    ::fhir::Ratio_pskel* amountRatioLowLimit_parser_;
    ::fhir::CodeableConcept_pskel* amountType_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Relationship_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SUBSTANCESPECIFICATION_PSKEL_HXX
