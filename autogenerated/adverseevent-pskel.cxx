// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "adverseevent-pskel.hxx"

namespace fhir
{
  // AdverseEvent_pskel
  //

  void AdverseEvent_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void AdverseEvent_pskel::
  actuality_parser (::fhir::AdverseEventActuality_pskel& p)
  {
    this->actuality_parser_ = &p;
  }

  void AdverseEvent_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void AdverseEvent_pskel::
  event_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->event_parser_ = &p;
  }

  void AdverseEvent_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void AdverseEvent_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void AdverseEvent_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void AdverseEvent_pskel::
  detected_parser (::fhir::dateTime_pskel& p)
  {
    this->detected_parser_ = &p;
  }

  void AdverseEvent_pskel::
  recordedDate_parser (::fhir::dateTime_pskel& p)
  {
    this->recordedDate_parser_ = &p;
  }

  void AdverseEvent_pskel::
  resultingCondition_parser (::fhir::Reference_pskel& p)
  {
    this->resultingCondition_parser_ = &p;
  }

  void AdverseEvent_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void AdverseEvent_pskel::
  seriousness_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->seriousness_parser_ = &p;
  }

  void AdverseEvent_pskel::
  severity_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->severity_parser_ = &p;
  }

  void AdverseEvent_pskel::
  outcome_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void AdverseEvent_pskel::
  recorder_parser (::fhir::Reference_pskel& p)
  {
    this->recorder_parser_ = &p;
  }

  void AdverseEvent_pskel::
  contributor_parser (::fhir::Reference_pskel& p)
  {
    this->contributor_parser_ = &p;
  }

  void AdverseEvent_pskel::
  suspectEntity_parser (::fhir::AdverseEvent_SuspectEntity_pskel& p)
  {
    this->suspectEntity_parser_ = &p;
  }

  void AdverseEvent_pskel::
  subjectMedicalHistory_parser (::fhir::Reference_pskel& p)
  {
    this->subjectMedicalHistory_parser_ = &p;
  }

  void AdverseEvent_pskel::
  referenceDocument_parser (::fhir::Reference_pskel& p)
  {
    this->referenceDocument_parser_ = &p;
  }

  void AdverseEvent_pskel::
  study_parser (::fhir::Reference_pskel& p)
  {
    this->study_parser_ = &p;
  }

  void AdverseEvent_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::AdverseEventActuality_pskel& actuality,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& event,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& date,
           ::fhir::dateTime_pskel& detected,
           ::fhir::dateTime_pskel& recordedDate,
           ::fhir::Reference_pskel& resultingCondition,
           ::fhir::Reference_pskel& location,
           ::fhir::CodeableConcept_pskel& seriousness,
           ::fhir::CodeableConcept_pskel& severity,
           ::fhir::CodeableConcept_pskel& outcome,
           ::fhir::Reference_pskel& recorder,
           ::fhir::Reference_pskel& contributor,
           ::fhir::AdverseEvent_SuspectEntity_pskel& suspectEntity,
           ::fhir::Reference_pskel& subjectMedicalHistory,
           ::fhir::Reference_pskel& referenceDocument,
           ::fhir::Reference_pskel& study)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->actuality_parser_ = &actuality;
    this->category_parser_ = &category;
    this->event_parser_ = &event;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->date_parser_ = &date;
    this->detected_parser_ = &detected;
    this->recordedDate_parser_ = &recordedDate;
    this->resultingCondition_parser_ = &resultingCondition;
    this->location_parser_ = &location;
    this->seriousness_parser_ = &seriousness;
    this->severity_parser_ = &severity;
    this->outcome_parser_ = &outcome;
    this->recorder_parser_ = &recorder;
    this->contributor_parser_ = &contributor;
    this->suspectEntity_parser_ = &suspectEntity;
    this->subjectMedicalHistory_parser_ = &subjectMedicalHistory;
    this->referenceDocument_parser_ = &referenceDocument;
    this->study_parser_ = &study;
  }

  AdverseEvent_pskel::
  AdverseEvent_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    AdverseEvent_impl_ (0),
    identifier_parser_ (0),
    actuality_parser_ (0),
    category_parser_ (0),
    event_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    date_parser_ (0),
    detected_parser_ (0),
    recordedDate_parser_ (0),
    resultingCondition_parser_ (0),
    location_parser_ (0),
    seriousness_parser_ (0),
    severity_parser_ (0),
    outcome_parser_ (0),
    recorder_parser_ (0),
    contributor_parser_ (0),
    suspectEntity_parser_ (0),
    subjectMedicalHistory_parser_ (0),
    referenceDocument_parser_ (0),
    study_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AdverseEvent_pskel::
  AdverseEvent_pskel (AdverseEvent_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    AdverseEvent_impl_ (impl),
    identifier_parser_ (0),
    actuality_parser_ (0),
    category_parser_ (0),
    event_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    date_parser_ (0),
    detected_parser_ (0),
    recordedDate_parser_ (0),
    resultingCondition_parser_ (0),
    location_parser_ (0),
    seriousness_parser_ (0),
    severity_parser_ (0),
    outcome_parser_ (0),
    recorder_parser_ (0),
    contributor_parser_ (0),
    suspectEntity_parser_ (0),
    subjectMedicalHistory_parser_ (0),
    referenceDocument_parser_ (0),
    study_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AdverseEvent_SuspectEntity_pskel
  //

  void AdverseEvent_SuspectEntity_pskel::
  instance_parser (::fhir::Reference_pskel& p)
  {
    this->instance_parser_ = &p;
  }

  void AdverseEvent_SuspectEntity_pskel::
  causality_parser (::fhir::AdverseEvent_Causality_pskel& p)
  {
    this->causality_parser_ = &p;
  }

  void AdverseEvent_SuspectEntity_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& instance,
           ::fhir::AdverseEvent_Causality_pskel& causality)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->instance_parser_ = &instance;
    this->causality_parser_ = &causality;
  }

  AdverseEvent_SuspectEntity_pskel::
  AdverseEvent_SuspectEntity_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AdverseEvent_SuspectEntity_impl_ (0),
    instance_parser_ (0),
    causality_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AdverseEvent_SuspectEntity_pskel::
  AdverseEvent_SuspectEntity_pskel (AdverseEvent_SuspectEntity_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AdverseEvent_SuspectEntity_impl_ (impl),
    instance_parser_ (0),
    causality_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AdverseEvent_Causality_pskel
  //

  void AdverseEvent_Causality_pskel::
  assessment_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->assessment_parser_ = &p;
  }

  void AdverseEvent_Causality_pskel::
  productRelatedness_parser (::fhir::string_pskel& p)
  {
    this->productRelatedness_parser_ = &p;
  }

  void AdverseEvent_Causality_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void AdverseEvent_Causality_pskel::
  method_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->method_parser_ = &p;
  }

  void AdverseEvent_Causality_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& assessment,
           ::fhir::string_pskel& productRelatedness,
           ::fhir::Reference_pskel& author,
           ::fhir::CodeableConcept_pskel& method)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->assessment_parser_ = &assessment;
    this->productRelatedness_parser_ = &productRelatedness;
    this->author_parser_ = &author;
    this->method_parser_ = &method;
  }

  AdverseEvent_Causality_pskel::
  AdverseEvent_Causality_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AdverseEvent_Causality_impl_ (0),
    assessment_parser_ (0),
    productRelatedness_parser_ (0),
    author_parser_ (0),
    method_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AdverseEvent_Causality_pskel::
  AdverseEvent_Causality_pskel (AdverseEvent_Causality_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AdverseEvent_Causality_impl_ (impl),
    assessment_parser_ (0),
    productRelatedness_parser_ (0),
    author_parser_ (0),
    method_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AdverseEventActuality_list_pskel
  //

  AdverseEventActuality_list_pskel::
  AdverseEventActuality_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AdverseEventActuality_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AdverseEventActuality_list_pskel_enums_, 2UL);
  }

  AdverseEventActuality_list_pskel::
  AdverseEventActuality_list_pskel (AdverseEventActuality_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AdverseEventActuality_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AdverseEventActuality_list_pskel_enums_, 2UL);
  }

  // AdverseEventActuality_pskel
  //

  void AdverseEventActuality_pskel::
  value_parser (::fhir::AdverseEventActuality_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AdverseEventActuality_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AdverseEventActuality_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AdverseEventActuality_pskel::
  AdverseEventActuality_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AdverseEventActuality_impl_ (0),
    value_parser_ (0)
  {
  }

  AdverseEventActuality_pskel::
  AdverseEventActuality_pskel (AdverseEventActuality_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AdverseEventActuality_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // AdverseEvent_pskel
  //

  void AdverseEvent_pskel::
  identifier ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->identifier ();
  }

  void AdverseEvent_pskel::
  actuality ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->actuality ();
  }

  void AdverseEvent_pskel::
  category ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->category ();
  }

  void AdverseEvent_pskel::
  event ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->event ();
  }

  void AdverseEvent_pskel::
  subject ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->subject ();
  }

  void AdverseEvent_pskel::
  encounter ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->encounter ();
  }

  void AdverseEvent_pskel::
  date ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->date ();
  }

  void AdverseEvent_pskel::
  detected ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->detected ();
  }

  void AdverseEvent_pskel::
  recordedDate ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->recordedDate ();
  }

  void AdverseEvent_pskel::
  resultingCondition ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->resultingCondition ();
  }

  void AdverseEvent_pskel::
  location ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->location ();
  }

  void AdverseEvent_pskel::
  seriousness ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->seriousness ();
  }

  void AdverseEvent_pskel::
  severity ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->severity ();
  }

  void AdverseEvent_pskel::
  outcome ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->outcome ();
  }

  void AdverseEvent_pskel::
  recorder ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->recorder ();
  }

  void AdverseEvent_pskel::
  contributor ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->contributor ();
  }

  void AdverseEvent_pskel::
  suspectEntity ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->suspectEntity ();
  }

  void AdverseEvent_pskel::
  subjectMedicalHistory ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->subjectMedicalHistory ();
  }

  void AdverseEvent_pskel::
  referenceDocument ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->referenceDocument ();
  }

  void AdverseEvent_pskel::
  study ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->study ();
  }

  void AdverseEvent_pskel::
  post_AdverseEvent ()
  {
    if (this->AdverseEvent_impl_)
      this->AdverseEvent_impl_->post_AdverseEvent ();
    else
      post_DomainResource ();
  }

  void AdverseEvent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->actuality_parser_)
      this->actuality_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->event_parser_)
      this->event_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->detected_parser_)
      this->detected_parser_->_reset ();

    if (this->recordedDate_parser_)
      this->recordedDate_parser_->_reset ();

    if (this->resultingCondition_parser_)
      this->resultingCondition_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->seriousness_parser_)
      this->seriousness_parser_->_reset ();

    if (this->severity_parser_)
      this->severity_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->recorder_parser_)
      this->recorder_parser_->_reset ();

    if (this->contributor_parser_)
      this->contributor_parser_->_reset ();

    if (this->suspectEntity_parser_)
      this->suspectEntity_parser_->_reset ();

    if (this->subjectMedicalHistory_parser_)
      this->subjectMedicalHistory_parser_->_reset ();

    if (this->referenceDocument_parser_)
      this->referenceDocument_parser_->_reset ();

    if (this->study_parser_)
      this->study_parser_->_reset ();

    this->resetting_ = false;
  }

  // AdverseEvent_SuspectEntity_pskel
  //

  void AdverseEvent_SuspectEntity_pskel::
  instance ()
  {
    if (this->AdverseEvent_SuspectEntity_impl_)
      this->AdverseEvent_SuspectEntity_impl_->instance ();
  }

  void AdverseEvent_SuspectEntity_pskel::
  causality ()
  {
    if (this->AdverseEvent_SuspectEntity_impl_)
      this->AdverseEvent_SuspectEntity_impl_->causality ();
  }

  void AdverseEvent_SuspectEntity_pskel::
  post_AdverseEvent_SuspectEntity ()
  {
    if (this->AdverseEvent_SuspectEntity_impl_)
      this->AdverseEvent_SuspectEntity_impl_->post_AdverseEvent_SuspectEntity ();
    else
      post_BackboneElement ();
  }

  void AdverseEvent_SuspectEntity_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->instance_parser_)
      this->instance_parser_->_reset ();

    if (this->causality_parser_)
      this->causality_parser_->_reset ();

    this->resetting_ = false;
  }

  // AdverseEvent_Causality_pskel
  //

  void AdverseEvent_Causality_pskel::
  assessment ()
  {
    if (this->AdverseEvent_Causality_impl_)
      this->AdverseEvent_Causality_impl_->assessment ();
  }

  void AdverseEvent_Causality_pskel::
  productRelatedness ()
  {
    if (this->AdverseEvent_Causality_impl_)
      this->AdverseEvent_Causality_impl_->productRelatedness ();
  }

  void AdverseEvent_Causality_pskel::
  author ()
  {
    if (this->AdverseEvent_Causality_impl_)
      this->AdverseEvent_Causality_impl_->author ();
  }

  void AdverseEvent_Causality_pskel::
  method ()
  {
    if (this->AdverseEvent_Causality_impl_)
      this->AdverseEvent_Causality_impl_->method ();
  }

  void AdverseEvent_Causality_pskel::
  post_AdverseEvent_Causality ()
  {
    if (this->AdverseEvent_Causality_impl_)
      this->AdverseEvent_Causality_impl_->post_AdverseEvent_Causality ();
    else
      post_BackboneElement ();
  }

  void AdverseEvent_Causality_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->assessment_parser_)
      this->assessment_parser_->_reset ();

    if (this->productRelatedness_parser_)
      this->productRelatedness_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->method_parser_)
      this->method_parser_->_reset ();

    this->resetting_ = false;
  }

  // AdverseEventActuality_list_pskel
  //

  void AdverseEventActuality_list_pskel::
  post_AdverseEventActuality_list ()
  {
    if (this->AdverseEventActuality_list_impl_)
      this->AdverseEventActuality_list_impl_->post_AdverseEventActuality_list ();
    else
      post_code_primitive ();
  }

  const char* const AdverseEventActuality_list_pskel::_xsde_AdverseEventActuality_list_pskel_enums_[2UL] = 
  {
    "actual",
    "potential"
  };

  // AdverseEventActuality_pskel
  //

  void AdverseEventActuality_pskel::
  value ()
  {
    if (this->AdverseEventActuality_impl_)
      this->AdverseEventActuality_impl_->value ();
  }

  void AdverseEventActuality_pskel::
  post_AdverseEventActuality ()
  {
    if (this->AdverseEventActuality_impl_)
      this->AdverseEventActuality_impl_->post_AdverseEventActuality ();
    else
      post_Element ();
  }

  void AdverseEventActuality_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for AdverseEvent_pskel.
  //
  bool AdverseEvent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "actuality" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AdverseEvent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AdverseEvent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AdverseEvent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void AdverseEvent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AdverseEvent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "actuality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actuality_parser_)
            {
              this->actuality_parser_->pre ();
              ctx.nested_parser (this->actuality_parser_);
            }
          }
          else
          {
            if (this->actuality_parser_ != 0)
            {
              this->actuality_parser_->post_AdverseEventActuality ();
              this->actuality ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "event" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->event_parser_)
            {
              this->event_parser_->pre ();
              ctx.nested_parser (this->event_parser_);
            }
          }
          else
          {
            if (this->event_parser_ != 0)
            {
              this->event_parser_->post_CodeableConcept ();
              this->event ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "detected" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detected_parser_)
            {
              this->detected_parser_->pre ();
              ctx.nested_parser (this->detected_parser_);
            }
          }
          else
          {
            if (this->detected_parser_ != 0)
            {
              this->detected_parser_->post_dateTime ();
              this->detected ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "recordedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recordedDate_parser_)
            {
              this->recordedDate_parser_->pre ();
              ctx.nested_parser (this->recordedDate_parser_);
            }
          }
          else
          {
            if (this->recordedDate_parser_ != 0)
            {
              this->recordedDate_parser_->post_dateTime ();
              this->recordedDate ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "resultingCondition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resultingCondition_parser_)
            {
              this->resultingCondition_parser_->pre ();
              ctx.nested_parser (this->resultingCondition_parser_);
            }
          }
          else
          {
            if (this->resultingCondition_parser_ != 0)
            {
              this->resultingCondition_parser_->post_Reference ();
              this->resultingCondition ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "seriousness" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->seriousness_parser_)
            {
              this->seriousness_parser_->pre ();
              ctx.nested_parser (this->seriousness_parser_);
            }
          }
          else
          {
            if (this->seriousness_parser_ != 0)
            {
              this->seriousness_parser_->post_CodeableConcept ();
              this->seriousness ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "severity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->severity_parser_)
            {
              this->severity_parser_->pre ();
              ctx.nested_parser (this->severity_parser_);
            }
          }
          else
          {
            if (this->severity_parser_ != 0)
            {
              this->severity_parser_->post_CodeableConcept ();
              this->severity ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_CodeableConcept ();
              this->outcome ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "recorder" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recorder_parser_)
            {
              this->recorder_parser_->pre ();
              ctx.nested_parser (this->recorder_parser_);
            }
          }
          else
          {
            if (this->recorder_parser_ != 0)
            {
              this->recorder_parser_->post_Reference ();
              this->recorder ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "contributor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contributor_parser_)
            {
              this->contributor_parser_->pre ();
              ctx.nested_parser (this->contributor_parser_);
            }
          }
          else
          {
            if (this->contributor_parser_ != 0)
            {
              this->contributor_parser_->post_Reference ();
              this->contributor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "suspectEntity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->suspectEntity_parser_)
            {
              this->suspectEntity_parser_->pre ();
              ctx.nested_parser (this->suspectEntity_parser_);
            }
          }
          else
          {
            if (this->suspectEntity_parser_ != 0)
            {
              this->suspectEntity_parser_->post_AdverseEvent_SuspectEntity ();
              this->suspectEntity ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "subjectMedicalHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subjectMedicalHistory_parser_)
            {
              this->subjectMedicalHistory_parser_->pre ();
              ctx.nested_parser (this->subjectMedicalHistory_parser_);
            }
          }
          else
          {
            if (this->subjectMedicalHistory_parser_ != 0)
            {
              this->subjectMedicalHistory_parser_->post_Reference ();
              this->subjectMedicalHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "referenceDocument" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referenceDocument_parser_)
            {
              this->referenceDocument_parser_->pre ();
              ctx.nested_parser (this->referenceDocument_parser_);
            }
          }
          else
          {
            if (this->referenceDocument_parser_ != 0)
            {
              this->referenceDocument_parser_->post_Reference ();
              this->referenceDocument ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "study" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->study_parser_)
            {
              this->study_parser_->pre ();
              ctx.nested_parser (this->study_parser_);
            }
          }
          else
          {
            if (this->study_parser_ != 0)
            {
              this->study_parser_->post_Reference ();
              this->study ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AdverseEvent_SuspectEntity_pskel.
  //
  bool AdverseEvent_SuspectEntity_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "instance" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AdverseEvent_SuspectEntity_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AdverseEvent_SuspectEntity_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AdverseEvent_SuspectEntity_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AdverseEvent_SuspectEntity_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AdverseEvent_SuspectEntity_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "instance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instance_parser_)
            {
              this->instance_parser_->pre ();
              ctx.nested_parser (this->instance_parser_);
            }
          }
          else
          {
            if (this->instance_parser_ != 0)
            {
              this->instance_parser_->post_Reference ();
              this->instance ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "causality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->causality_parser_)
            {
              this->causality_parser_->pre ();
              ctx.nested_parser (this->causality_parser_);
            }
          }
          else
          {
            if (this->causality_parser_ != 0)
            {
              this->causality_parser_->post_AdverseEvent_Causality ();
              this->causality ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AdverseEvent_Causality_pskel.
  //
  bool AdverseEvent_Causality_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "assessment" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "productRelatedness" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "author" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "method" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AdverseEvent_Causality_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AdverseEvent_Causality_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AdverseEvent_Causality_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AdverseEvent_Causality_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void AdverseEvent_Causality_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "assessment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->assessment_parser_)
            {
              this->assessment_parser_->pre ();
              ctx.nested_parser (this->assessment_parser_);
            }
          }
          else
          {
            if (this->assessment_parser_ != 0)
            {
              this->assessment_parser_->post_CodeableConcept ();
              this->assessment ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "productRelatedness" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productRelatedness_parser_)
            {
              this->productRelatedness_parser_->pre ();
              ctx.nested_parser (this->productRelatedness_parser_);
            }
          }
          else
          {
            if (this->productRelatedness_parser_ != 0)
            {
              this->productRelatedness_parser_->post_string ();
              this->productRelatedness ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "method" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->method_parser_)
            {
              this->method_parser_->pre ();
              ctx.nested_parser (this->method_parser_);
            }
          }
          else
          {
            if (this->method_parser_ != 0)
            {
              this->method_parser_->post_CodeableConcept ();
              this->method ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for AdverseEventActuality_pskel.
  //
  bool AdverseEventActuality_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AdverseEventActuality_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

