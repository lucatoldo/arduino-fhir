// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "medication-pskel.hxx"

namespace fhir
{
  // Medication_pskel
  //

  void Medication_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Medication_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Medication_pskel::
  status_parser (::fhir::MedicationStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Medication_pskel::
  manufacturer_parser (::fhir::Reference_pskel& p)
  {
    this->manufacturer_parser_ = &p;
  }

  void Medication_pskel::
  form_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->form_parser_ = &p;
  }

  void Medication_pskel::
  amount_parser (::fhir::Ratio_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void Medication_pskel::
  ingredient_parser (::fhir::Medication_Ingredient_pskel& p)
  {
    this->ingredient_parser_ = &p;
  }

  void Medication_pskel::
  batch_parser (::fhir::Medication_Batch_pskel& p)
  {
    this->batch_parser_ = &p;
  }

  void Medication_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::MedicationStatusCodes_pskel& status,
           ::fhir::Reference_pskel& manufacturer,
           ::fhir::CodeableConcept_pskel& form,
           ::fhir::Ratio_pskel& amount,
           ::fhir::Medication_Ingredient_pskel& ingredient,
           ::fhir::Medication_Batch_pskel& batch)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->code_parser_ = &code;
    this->status_parser_ = &status;
    this->manufacturer_parser_ = &manufacturer;
    this->form_parser_ = &form;
    this->amount_parser_ = &amount;
    this->ingredient_parser_ = &ingredient;
    this->batch_parser_ = &batch;
  }

  Medication_pskel::
  Medication_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Medication_impl_ (0),
    identifier_parser_ (0),
    code_parser_ (0),
    status_parser_ (0),
    manufacturer_parser_ (0),
    form_parser_ (0),
    amount_parser_ (0),
    ingredient_parser_ (0),
    batch_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Medication_pskel::
  Medication_pskel (Medication_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Medication_impl_ (impl),
    identifier_parser_ (0),
    code_parser_ (0),
    status_parser_ (0),
    manufacturer_parser_ (0),
    form_parser_ (0),
    amount_parser_ (0),
    ingredient_parser_ (0),
    batch_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Medication_Ingredient_pskel
  //

  void Medication_Ingredient_pskel::
  itemCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->itemCodeableConcept_parser_ = &p;
  }

  void Medication_Ingredient_pskel::
  itemReference_parser (::fhir::Reference_pskel& p)
  {
    this->itemReference_parser_ = &p;
  }

  void Medication_Ingredient_pskel::
  isActive_parser (::fhir::boolean_pskel& p)
  {
    this->isActive_parser_ = &p;
  }

  void Medication_Ingredient_pskel::
  strength_parser (::fhir::Ratio_pskel& p)
  {
    this->strength_parser_ = &p;
  }

  void Medication_Ingredient_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& itemCodeableConcept,
           ::fhir::Reference_pskel& itemReference,
           ::fhir::boolean_pskel& isActive,
           ::fhir::Ratio_pskel& strength)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->itemCodeableConcept_parser_ = &itemCodeableConcept;
    this->itemReference_parser_ = &itemReference;
    this->isActive_parser_ = &isActive;
    this->strength_parser_ = &strength;
  }

  Medication_Ingredient_pskel::
  Medication_Ingredient_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Medication_Ingredient_impl_ (0),
    itemCodeableConcept_parser_ (0),
    itemReference_parser_ (0),
    isActive_parser_ (0),
    strength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Medication_Ingredient_pskel::
  Medication_Ingredient_pskel (Medication_Ingredient_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Medication_Ingredient_impl_ (impl),
    itemCodeableConcept_parser_ (0),
    itemReference_parser_ (0),
    isActive_parser_ (0),
    strength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Medication_Batch_pskel
  //

  void Medication_Batch_pskel::
  lotNumber_parser (::fhir::string_pskel& p)
  {
    this->lotNumber_parser_ = &p;
  }

  void Medication_Batch_pskel::
  expirationDate_parser (::fhir::dateTime_pskel& p)
  {
    this->expirationDate_parser_ = &p;
  }

  void Medication_Batch_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& lotNumber,
           ::fhir::dateTime_pskel& expirationDate)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->lotNumber_parser_ = &lotNumber;
    this->expirationDate_parser_ = &expirationDate;
  }

  Medication_Batch_pskel::
  Medication_Batch_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Medication_Batch_impl_ (0),
    lotNumber_parser_ (0),
    expirationDate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Medication_Batch_pskel::
  Medication_Batch_pskel (Medication_Batch_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Medication_Batch_impl_ (impl),
    lotNumber_parser_ (0),
    expirationDate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicationStatusCodes_list_pskel
  //

  MedicationStatusCodes_list_pskel::
  MedicationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    MedicationStatusCodes_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_MedicationStatusCodes_list_pskel_enums_, 3UL);
  }

  MedicationStatusCodes_list_pskel::
  MedicationStatusCodes_list_pskel (MedicationStatusCodes_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    MedicationStatusCodes_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_MedicationStatusCodes_list_pskel_enums_, 3UL);
  }

  // MedicationStatusCodes_pskel
  //

  void MedicationStatusCodes_pskel::
  value_parser (::fhir::MedicationStatusCodes_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void MedicationStatusCodes_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::MedicationStatusCodes_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  MedicationStatusCodes_pskel::
  MedicationStatusCodes_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    MedicationStatusCodes_impl_ (0),
    value_parser_ (0)
  {
  }

  MedicationStatusCodes_pskel::
  MedicationStatusCodes_pskel (MedicationStatusCodes_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    MedicationStatusCodes_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Medication_pskel
  //

  void Medication_pskel::
  identifier ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->identifier ();
  }

  void Medication_pskel::
  code ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->code ();
  }

  void Medication_pskel::
  status ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->status ();
  }

  void Medication_pskel::
  manufacturer ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->manufacturer ();
  }

  void Medication_pskel::
  form ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->form ();
  }

  void Medication_pskel::
  amount ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->amount ();
  }

  void Medication_pskel::
  ingredient ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->ingredient ();
  }

  void Medication_pskel::
  batch ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->batch ();
  }

  void Medication_pskel::
  post_Medication ()
  {
    if (this->Medication_impl_)
      this->Medication_impl_->post_Medication ();
    else
      post_DomainResource ();
  }

  void Medication_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->manufacturer_parser_)
      this->manufacturer_parser_->_reset ();

    if (this->form_parser_)
      this->form_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    if (this->ingredient_parser_)
      this->ingredient_parser_->_reset ();

    if (this->batch_parser_)
      this->batch_parser_->_reset ();

    this->resetting_ = false;
  }

  // Medication_Ingredient_pskel
  //

  void Medication_Ingredient_pskel::
  itemCodeableConcept ()
  {
    if (this->Medication_Ingredient_impl_)
      this->Medication_Ingredient_impl_->itemCodeableConcept ();
  }

  void Medication_Ingredient_pskel::
  itemReference ()
  {
    if (this->Medication_Ingredient_impl_)
      this->Medication_Ingredient_impl_->itemReference ();
  }

  void Medication_Ingredient_pskel::
  isActive ()
  {
    if (this->Medication_Ingredient_impl_)
      this->Medication_Ingredient_impl_->isActive ();
  }

  void Medication_Ingredient_pskel::
  strength ()
  {
    if (this->Medication_Ingredient_impl_)
      this->Medication_Ingredient_impl_->strength ();
  }

  void Medication_Ingredient_pskel::
  post_Medication_Ingredient ()
  {
    if (this->Medication_Ingredient_impl_)
      this->Medication_Ingredient_impl_->post_Medication_Ingredient ();
    else
      post_BackboneElement ();
  }

  void Medication_Ingredient_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->itemCodeableConcept_parser_)
      this->itemCodeableConcept_parser_->_reset ();

    if (this->itemReference_parser_)
      this->itemReference_parser_->_reset ();

    if (this->isActive_parser_)
      this->isActive_parser_->_reset ();

    if (this->strength_parser_)
      this->strength_parser_->_reset ();

    this->resetting_ = false;
  }

  // Medication_Batch_pskel
  //

  void Medication_Batch_pskel::
  lotNumber ()
  {
    if (this->Medication_Batch_impl_)
      this->Medication_Batch_impl_->lotNumber ();
  }

  void Medication_Batch_pskel::
  expirationDate ()
  {
    if (this->Medication_Batch_impl_)
      this->Medication_Batch_impl_->expirationDate ();
  }

  void Medication_Batch_pskel::
  post_Medication_Batch ()
  {
    if (this->Medication_Batch_impl_)
      this->Medication_Batch_impl_->post_Medication_Batch ();
    else
      post_BackboneElement ();
  }

  void Medication_Batch_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->lotNumber_parser_)
      this->lotNumber_parser_->_reset ();

    if (this->expirationDate_parser_)
      this->expirationDate_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicationStatusCodes_list_pskel
  //

  void MedicationStatusCodes_list_pskel::
  post_MedicationStatusCodes_list ()
  {
    if (this->MedicationStatusCodes_list_impl_)
      this->MedicationStatusCodes_list_impl_->post_MedicationStatusCodes_list ();
    else
      post_code_primitive ();
  }

  const char* const MedicationStatusCodes_list_pskel::_xsde_MedicationStatusCodes_list_pskel_enums_[3UL] = 
  {
    "active",
    "entered-in-error",
    "inactive"
  };

  // MedicationStatusCodes_pskel
  //

  void MedicationStatusCodes_pskel::
  value ()
  {
    if (this->MedicationStatusCodes_impl_)
      this->MedicationStatusCodes_impl_->value ();
  }

  void MedicationStatusCodes_pskel::
  post_MedicationStatusCodes ()
  {
    if (this->MedicationStatusCodes_impl_)
      this->MedicationStatusCodes_impl_->post_MedicationStatusCodes ();
    else
      post_Element ();
  }

  void MedicationStatusCodes_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Medication_pskel.
  //
  bool Medication_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "manufacturer" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "form" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "amount" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "ingredient" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "batch" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Medication_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Medication_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Medication_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Medication_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Medication_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_MedicationStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "manufacturer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturer_parser_)
            {
              this->manufacturer_parser_->pre ();
              ctx.nested_parser (this->manufacturer_parser_);
            }
          }
          else
          {
            if (this->manufacturer_parser_ != 0)
            {
              this->manufacturer_parser_->post_Reference ();
              this->manufacturer ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "form" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->form_parser_)
            {
              this->form_parser_->pre ();
              ctx.nested_parser (this->form_parser_);
            }
          }
          else
          {
            if (this->form_parser_ != 0)
            {
              this->form_parser_->post_CodeableConcept ();
              this->form ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Ratio ();
              this->amount ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "ingredient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ingredient_parser_)
            {
              this->ingredient_parser_->pre ();
              ctx.nested_parser (this->ingredient_parser_);
            }
          }
          else
          {
            if (this->ingredient_parser_ != 0)
            {
              this->ingredient_parser_->post_Medication_Ingredient ();
              this->ingredient ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "batch" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->batch_parser_)
            {
              this->batch_parser_->pre ();
              ctx.nested_parser (this->batch_parser_);
            }
          }
          else
          {
            if (this->batch_parser_ != 0)
            {
              this->batch_parser_->post_Medication_Batch ();
              this->batch ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Medication_Ingredient_pskel.
  //
  bool Medication_Ingredient_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "itemCodeableConcept" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "itemReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "isActive" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "strength" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Medication_Ingredient_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Medication_Ingredient_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Medication_Ingredient_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Medication_Ingredient_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Medication_Ingredient_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "itemCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemCodeableConcept_parser_)
            {
              this->itemCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->itemCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->itemCodeableConcept_parser_ != 0)
            {
              this->itemCodeableConcept_parser_->post_CodeableConcept ();
              this->itemCodeableConcept ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "itemReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemReference_parser_)
            {
              this->itemReference_parser_->pre ();
              ctx.nested_parser (this->itemReference_parser_);
            }
          }
          else
          {
            if (this->itemReference_parser_ != 0)
            {
              this->itemReference_parser_->post_Reference ();
              this->itemReference ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "isActive" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->isActive_parser_)
            {
              this->isActive_parser_->pre ();
              ctx.nested_parser (this->isActive_parser_);
            }
          }
          else
          {
            if (this->isActive_parser_ != 0)
            {
              this->isActive_parser_->post_boolean ();
              this->isActive ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "strength" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->strength_parser_)
            {
              this->strength_parser_->pre ();
              ctx.nested_parser (this->strength_parser_);
            }
          }
          else
          {
            if (this->strength_parser_ != 0)
            {
              this->strength_parser_->post_Ratio ();
              this->strength ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Medication_Batch_pskel.
  //
  bool Medication_Batch_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "lotNumber" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "expirationDate" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Medication_Batch_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Medication_Batch_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Medication_Batch_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Medication_Batch_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Medication_Batch_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "lotNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lotNumber_parser_)
            {
              this->lotNumber_parser_->pre ();
              ctx.nested_parser (this->lotNumber_parser_);
            }
          }
          else
          {
            if (this->lotNumber_parser_ != 0)
            {
              this->lotNumber_parser_->post_string ();
              this->lotNumber ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "expirationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expirationDate_parser_)
            {
              this->expirationDate_parser_->pre ();
              ctx.nested_parser (this->expirationDate_parser_);
            }
          }
          else
          {
            if (this->expirationDate_parser_ != 0)
            {
              this->expirationDate_parser_->post_dateTime ();
              this->expirationDate ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for MedicationStatusCodes_pskel.
  //
  bool MedicationStatusCodes_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_MedicationStatusCodes_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

