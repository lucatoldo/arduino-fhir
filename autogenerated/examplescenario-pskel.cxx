// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "examplescenario-pskel.hxx"

namespace fhir
{
  // ExampleScenario_pskel
  //

  void ExampleScenario_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void ExampleScenario_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ExampleScenario_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void ExampleScenario_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ExampleScenario_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ExampleScenario_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void ExampleScenario_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ExampleScenario_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void ExampleScenario_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void ExampleScenario_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void ExampleScenario_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void ExampleScenario_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void ExampleScenario_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void ExampleScenario_pskel::
  actor_parser (::fhir::ExampleScenario_Actor_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void ExampleScenario_pskel::
  instance_parser (::fhir::ExampleScenario_Instance_pskel& p)
  {
    this->instance_parser_ = &p;
  }

  void ExampleScenario_pskel::
  process_parser (::fhir::ExampleScenario_Process_pskel& p)
  {
    this->process_parser_ = &p;
  }

  void ExampleScenario_pskel::
  workflow_parser (::fhir::canonical_pskel& p)
  {
    this->workflow_parser_ = &p;
  }

  void ExampleScenario_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& copyright,
           ::fhir::markdown_pskel& purpose,
           ::fhir::ExampleScenario_Actor_pskel& actor,
           ::fhir::ExampleScenario_Instance_pskel& instance,
           ::fhir::ExampleScenario_Process_pskel& process,
           ::fhir::canonical_pskel& workflow)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->copyright_parser_ = &copyright;
    this->purpose_parser_ = &purpose;
    this->actor_parser_ = &actor;
    this->instance_parser_ = &instance;
    this->process_parser_ = &process;
    this->workflow_parser_ = &workflow;
  }

  ExampleScenario_pskel::
  ExampleScenario_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ExampleScenario_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    purpose_parser_ (0),
    actor_parser_ (0),
    instance_parser_ (0),
    process_parser_ (0),
    workflow_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_pskel::
  ExampleScenario_pskel (ExampleScenario_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ExampleScenario_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    purpose_parser_ (0),
    actor_parser_ (0),
    instance_parser_ (0),
    process_parser_ (0),
    workflow_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_Actor_pskel
  //

  void ExampleScenario_Actor_pskel::
  actorId_parser (::fhir::string_pskel& p)
  {
    this->actorId_parser_ = &p;
  }

  void ExampleScenario_Actor_pskel::
  type_parser (::fhir::ExampleScenarioActorType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExampleScenario_Actor_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ExampleScenario_Actor_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ExampleScenario_Actor_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& actorId,
           ::fhir::ExampleScenarioActorType_pskel& type,
           ::fhir::string_pskel& name,
           ::fhir::markdown_pskel& description)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->actorId_parser_ = &actorId;
    this->type_parser_ = &type;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
  }

  ExampleScenario_Actor_pskel::
  ExampleScenario_Actor_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_Actor_impl_ (0),
    actorId_parser_ (0),
    type_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_Actor_pskel::
  ExampleScenario_Actor_pskel (ExampleScenario_Actor_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_Actor_impl_ (impl),
    actorId_parser_ (0),
    type_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_Instance_pskel
  //

  void ExampleScenario_Instance_pskel::
  resourceId_parser (::fhir::string_pskel& p)
  {
    this->resourceId_parser_ = &p;
  }

  void ExampleScenario_Instance_pskel::
  resourceType_parser (::fhir::ResourceType_pskel& p)
  {
    this->resourceType_parser_ = &p;
  }

  void ExampleScenario_Instance_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ExampleScenario_Instance_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ExampleScenario_Instance_pskel::
  version_parser (::fhir::ExampleScenario_Version_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void ExampleScenario_Instance_pskel::
  containedInstance_parser (::fhir::ExampleScenario_ContainedInstance_pskel& p)
  {
    this->containedInstance_parser_ = &p;
  }

  void ExampleScenario_Instance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& resourceId,
           ::fhir::ResourceType_pskel& resourceType,
           ::fhir::string_pskel& name,
           ::fhir::markdown_pskel& description,
           ::fhir::ExampleScenario_Version_pskel& version,
           ::fhir::ExampleScenario_ContainedInstance_pskel& containedInstance)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->resourceId_parser_ = &resourceId;
    this->resourceType_parser_ = &resourceType;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
    this->version_parser_ = &version;
    this->containedInstance_parser_ = &containedInstance;
  }

  ExampleScenario_Instance_pskel::
  ExampleScenario_Instance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_Instance_impl_ (0),
    resourceId_parser_ (0),
    resourceType_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    version_parser_ (0),
    containedInstance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_Instance_pskel::
  ExampleScenario_Instance_pskel (ExampleScenario_Instance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_Instance_impl_ (impl),
    resourceId_parser_ (0),
    resourceType_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    version_parser_ (0),
    containedInstance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_Version_pskel
  //

  void ExampleScenario_Version_pskel::
  versionId_parser (::fhir::string_pskel& p)
  {
    this->versionId_parser_ = &p;
  }

  void ExampleScenario_Version_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ExampleScenario_Version_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& versionId,
           ::fhir::markdown_pskel& description)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->versionId_parser_ = &versionId;
    this->description_parser_ = &description;
  }

  ExampleScenario_Version_pskel::
  ExampleScenario_Version_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_Version_impl_ (0),
    versionId_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_Version_pskel::
  ExampleScenario_Version_pskel (ExampleScenario_Version_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_Version_impl_ (impl),
    versionId_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_ContainedInstance_pskel
  //

  void ExampleScenario_ContainedInstance_pskel::
  resourceId_parser (::fhir::string_pskel& p)
  {
    this->resourceId_parser_ = &p;
  }

  void ExampleScenario_ContainedInstance_pskel::
  versionId_parser (::fhir::string_pskel& p)
  {
    this->versionId_parser_ = &p;
  }

  void ExampleScenario_ContainedInstance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& resourceId,
           ::fhir::string_pskel& versionId)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->resourceId_parser_ = &resourceId;
    this->versionId_parser_ = &versionId;
  }

  ExampleScenario_ContainedInstance_pskel::
  ExampleScenario_ContainedInstance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_ContainedInstance_impl_ (0),
    resourceId_parser_ (0),
    versionId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_ContainedInstance_pskel::
  ExampleScenario_ContainedInstance_pskel (ExampleScenario_ContainedInstance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_ContainedInstance_impl_ (impl),
    resourceId_parser_ (0),
    versionId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_Process_pskel
  //

  void ExampleScenario_Process_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ExampleScenario_Process_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ExampleScenario_Process_pskel::
  preConditions_parser (::fhir::markdown_pskel& p)
  {
    this->preConditions_parser_ = &p;
  }

  void ExampleScenario_Process_pskel::
  postConditions_parser (::fhir::markdown_pskel& p)
  {
    this->postConditions_parser_ = &p;
  }

  void ExampleScenario_Process_pskel::
  step_parser (::fhir::ExampleScenario_Step_pskel& p)
  {
    this->step_parser_ = &p;
  }

  void ExampleScenario_Process_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& title,
           ::fhir::markdown_pskel& description,
           ::fhir::markdown_pskel& preConditions,
           ::fhir::markdown_pskel& postConditions,
           ::fhir::ExampleScenario_Step_pskel& step)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->title_parser_ = &title;
    this->description_parser_ = &description;
    this->preConditions_parser_ = &preConditions;
    this->postConditions_parser_ = &postConditions;
    this->step_parser_ = &step;
  }

  ExampleScenario_Process_pskel::
  ExampleScenario_Process_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_Process_impl_ (0),
    title_parser_ (0),
    description_parser_ (0),
    preConditions_parser_ (0),
    postConditions_parser_ (0),
    step_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_Process_pskel::
  ExampleScenario_Process_pskel (ExampleScenario_Process_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_Process_impl_ (impl),
    title_parser_ (0),
    description_parser_ (0),
    preConditions_parser_ (0),
    postConditions_parser_ (0),
    step_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_Step_pskel
  //

  void ExampleScenario_Step_pskel::
  process_parser (::fhir::ExampleScenario_Process_pskel& p)
  {
    this->process_parser_ = &p;
  }

  void ExampleScenario_Step_pskel::
  pause_parser (::fhir::boolean_pskel& p)
  {
    this->pause_parser_ = &p;
  }

  void ExampleScenario_Step_pskel::
  operation_parser (::fhir::ExampleScenario_Operation_pskel& p)
  {
    this->operation_parser_ = &p;
  }

  void ExampleScenario_Step_pskel::
  alternative_parser (::fhir::ExampleScenario_Alternative_pskel& p)
  {
    this->alternative_parser_ = &p;
  }

  void ExampleScenario_Step_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ExampleScenario_Process_pskel& process,
           ::fhir::boolean_pskel& pause,
           ::fhir::ExampleScenario_Operation_pskel& operation,
           ::fhir::ExampleScenario_Alternative_pskel& alternative)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->process_parser_ = &process;
    this->pause_parser_ = &pause;
    this->operation_parser_ = &operation;
    this->alternative_parser_ = &alternative;
  }

  ExampleScenario_Step_pskel::
  ExampleScenario_Step_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_Step_impl_ (0),
    process_parser_ (0),
    pause_parser_ (0),
    operation_parser_ (0),
    alternative_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_Step_pskel::
  ExampleScenario_Step_pskel (ExampleScenario_Step_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_Step_impl_ (impl),
    process_parser_ (0),
    pause_parser_ (0),
    operation_parser_ (0),
    alternative_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_Operation_pskel
  //

  void ExampleScenario_Operation_pskel::
  number_parser (::fhir::string_pskel& p)
  {
    this->number_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  type_parser (::fhir::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  initiator_parser (::fhir::string_pskel& p)
  {
    this->initiator_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  receiver_parser (::fhir::string_pskel& p)
  {
    this->receiver_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  initiatorActive_parser (::fhir::boolean_pskel& p)
  {
    this->initiatorActive_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  receiverActive_parser (::fhir::boolean_pskel& p)
  {
    this->receiverActive_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  request_parser (::fhir::ExampleScenario_ContainedInstance_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  response_parser (::fhir::ExampleScenario_ContainedInstance_pskel& p)
  {
    this->response_parser_ = &p;
  }

  void ExampleScenario_Operation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& number,
           ::fhir::string_pskel& type,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& initiator,
           ::fhir::string_pskel& receiver,
           ::fhir::markdown_pskel& description,
           ::fhir::boolean_pskel& initiatorActive,
           ::fhir::boolean_pskel& receiverActive,
           ::fhir::ExampleScenario_ContainedInstance_pskel& request,
           ::fhir::ExampleScenario_ContainedInstance_pskel& response)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->number_parser_ = &number;
    this->type_parser_ = &type;
    this->name_parser_ = &name;
    this->initiator_parser_ = &initiator;
    this->receiver_parser_ = &receiver;
    this->description_parser_ = &description;
    this->initiatorActive_parser_ = &initiatorActive;
    this->receiverActive_parser_ = &receiverActive;
    this->request_parser_ = &request;
    this->response_parser_ = &response;
  }

  ExampleScenario_Operation_pskel::
  ExampleScenario_Operation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_Operation_impl_ (0),
    number_parser_ (0),
    type_parser_ (0),
    name_parser_ (0),
    initiator_parser_ (0),
    receiver_parser_ (0),
    description_parser_ (0),
    initiatorActive_parser_ (0),
    receiverActive_parser_ (0),
    request_parser_ (0),
    response_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_Operation_pskel::
  ExampleScenario_Operation_pskel (ExampleScenario_Operation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_Operation_impl_ (impl),
    number_parser_ (0),
    type_parser_ (0),
    name_parser_ (0),
    initiator_parser_ (0),
    receiver_parser_ (0),
    description_parser_ (0),
    initiatorActive_parser_ (0),
    receiverActive_parser_ (0),
    request_parser_ (0),
    response_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenario_Alternative_pskel
  //

  void ExampleScenario_Alternative_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ExampleScenario_Alternative_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ExampleScenario_Alternative_pskel::
  step_parser (::fhir::ExampleScenario_Step_pskel& p)
  {
    this->step_parser_ = &p;
  }

  void ExampleScenario_Alternative_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& title,
           ::fhir::markdown_pskel& description,
           ::fhir::ExampleScenario_Step_pskel& step)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->title_parser_ = &title;
    this->description_parser_ = &description;
    this->step_parser_ = &step;
  }

  ExampleScenario_Alternative_pskel::
  ExampleScenario_Alternative_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExampleScenario_Alternative_impl_ (0),
    title_parser_ (0),
    description_parser_ (0),
    step_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExampleScenario_Alternative_pskel::
  ExampleScenario_Alternative_pskel (ExampleScenario_Alternative_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExampleScenario_Alternative_impl_ (impl),
    title_parser_ (0),
    description_parser_ (0),
    step_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExampleScenarioActorType_list_pskel
  //

  ExampleScenarioActorType_list_pskel::
  ExampleScenarioActorType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ExampleScenarioActorType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ExampleScenarioActorType_list_pskel_enums_, 2UL);
  }

  ExampleScenarioActorType_list_pskel::
  ExampleScenarioActorType_list_pskel (ExampleScenarioActorType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ExampleScenarioActorType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ExampleScenarioActorType_list_pskel_enums_, 2UL);
  }

  // ExampleScenarioActorType_pskel
  //

  void ExampleScenarioActorType_pskel::
  value_parser (::fhir::ExampleScenarioActorType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ExampleScenarioActorType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ExampleScenarioActorType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ExampleScenarioActorType_pskel::
  ExampleScenarioActorType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ExampleScenarioActorType_impl_ (0),
    value_parser_ (0)
  {
  }

  ExampleScenarioActorType_pskel::
  ExampleScenarioActorType_pskel (ExampleScenarioActorType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ExampleScenarioActorType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ResourceType_list_pskel
  //

  ResourceType_list_pskel::
  ResourceType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ResourceType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ResourceType_list_pskel_enums_, 148UL);
  }

  ResourceType_list_pskel::
  ResourceType_list_pskel (ResourceType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ResourceType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ResourceType_list_pskel_enums_, 148UL);
  }

  // ResourceType_pskel
  //

  void ResourceType_pskel::
  value_parser (::fhir::ResourceType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ResourceType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ResourceType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ResourceType_pskel::
  ResourceType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ResourceType_impl_ (0),
    value_parser_ (0)
  {
  }

  ResourceType_pskel::
  ResourceType_pskel (ResourceType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ResourceType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ExampleScenario_pskel
  //

  void ExampleScenario_pskel::
  url ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->url ();
  }

  void ExampleScenario_pskel::
  identifier ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->identifier ();
  }

  void ExampleScenario_pskel::
  version ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->version ();
  }

  void ExampleScenario_pskel::
  name ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->name ();
  }

  void ExampleScenario_pskel::
  status ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->status ();
  }

  void ExampleScenario_pskel::
  experimental ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->experimental ();
  }

  void ExampleScenario_pskel::
  date ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->date ();
  }

  void ExampleScenario_pskel::
  publisher ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->publisher ();
  }

  void ExampleScenario_pskel::
  contact ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->contact ();
  }

  void ExampleScenario_pskel::
  useContext ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->useContext ();
  }

  void ExampleScenario_pskel::
  jurisdiction ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->jurisdiction ();
  }

  void ExampleScenario_pskel::
  copyright ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->copyright ();
  }

  void ExampleScenario_pskel::
  purpose ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->purpose ();
  }

  void ExampleScenario_pskel::
  actor ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->actor ();
  }

  void ExampleScenario_pskel::
  instance ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->instance ();
  }

  void ExampleScenario_pskel::
  process ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->process ();
  }

  void ExampleScenario_pskel::
  workflow ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->workflow ();
  }

  void ExampleScenario_pskel::
  post_ExampleScenario ()
  {
    if (this->ExampleScenario_impl_)
      this->ExampleScenario_impl_->post_ExampleScenario ();
    else
      post_DomainResource ();
  }

  void ExampleScenario_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    if (this->instance_parser_)
      this->instance_parser_->_reset ();

    if (this->process_parser_)
      this->process_parser_->_reset ();

    if (this->workflow_parser_)
      this->workflow_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_Actor_pskel
  //

  void ExampleScenario_Actor_pskel::
  actorId ()
  {
    if (this->ExampleScenario_Actor_impl_)
      this->ExampleScenario_Actor_impl_->actorId ();
  }

  void ExampleScenario_Actor_pskel::
  type ()
  {
    if (this->ExampleScenario_Actor_impl_)
      this->ExampleScenario_Actor_impl_->type ();
  }

  void ExampleScenario_Actor_pskel::
  name ()
  {
    if (this->ExampleScenario_Actor_impl_)
      this->ExampleScenario_Actor_impl_->name ();
  }

  void ExampleScenario_Actor_pskel::
  description ()
  {
    if (this->ExampleScenario_Actor_impl_)
      this->ExampleScenario_Actor_impl_->description ();
  }

  void ExampleScenario_Actor_pskel::
  post_ExampleScenario_Actor ()
  {
    if (this->ExampleScenario_Actor_impl_)
      this->ExampleScenario_Actor_impl_->post_ExampleScenario_Actor ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_Actor_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->actorId_parser_)
      this->actorId_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_Instance_pskel
  //

  void ExampleScenario_Instance_pskel::
  resourceId ()
  {
    if (this->ExampleScenario_Instance_impl_)
      this->ExampleScenario_Instance_impl_->resourceId ();
  }

  void ExampleScenario_Instance_pskel::
  resourceType ()
  {
    if (this->ExampleScenario_Instance_impl_)
      this->ExampleScenario_Instance_impl_->resourceType ();
  }

  void ExampleScenario_Instance_pskel::
  name ()
  {
    if (this->ExampleScenario_Instance_impl_)
      this->ExampleScenario_Instance_impl_->name ();
  }

  void ExampleScenario_Instance_pskel::
  description ()
  {
    if (this->ExampleScenario_Instance_impl_)
      this->ExampleScenario_Instance_impl_->description ();
  }

  void ExampleScenario_Instance_pskel::
  version ()
  {
    if (this->ExampleScenario_Instance_impl_)
      this->ExampleScenario_Instance_impl_->version ();
  }

  void ExampleScenario_Instance_pskel::
  containedInstance ()
  {
    if (this->ExampleScenario_Instance_impl_)
      this->ExampleScenario_Instance_impl_->containedInstance ();
  }

  void ExampleScenario_Instance_pskel::
  post_ExampleScenario_Instance ()
  {
    if (this->ExampleScenario_Instance_impl_)
      this->ExampleScenario_Instance_impl_->post_ExampleScenario_Instance ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_Instance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->resourceId_parser_)
      this->resourceId_parser_->_reset ();

    if (this->resourceType_parser_)
      this->resourceType_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->containedInstance_parser_)
      this->containedInstance_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_Version_pskel
  //

  void ExampleScenario_Version_pskel::
  versionId ()
  {
    if (this->ExampleScenario_Version_impl_)
      this->ExampleScenario_Version_impl_->versionId ();
  }

  void ExampleScenario_Version_pskel::
  description ()
  {
    if (this->ExampleScenario_Version_impl_)
      this->ExampleScenario_Version_impl_->description ();
  }

  void ExampleScenario_Version_pskel::
  post_ExampleScenario_Version ()
  {
    if (this->ExampleScenario_Version_impl_)
      this->ExampleScenario_Version_impl_->post_ExampleScenario_Version ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_Version_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->versionId_parser_)
      this->versionId_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_ContainedInstance_pskel
  //

  void ExampleScenario_ContainedInstance_pskel::
  resourceId ()
  {
    if (this->ExampleScenario_ContainedInstance_impl_)
      this->ExampleScenario_ContainedInstance_impl_->resourceId ();
  }

  void ExampleScenario_ContainedInstance_pskel::
  versionId ()
  {
    if (this->ExampleScenario_ContainedInstance_impl_)
      this->ExampleScenario_ContainedInstance_impl_->versionId ();
  }

  void ExampleScenario_ContainedInstance_pskel::
  post_ExampleScenario_ContainedInstance ()
  {
    if (this->ExampleScenario_ContainedInstance_impl_)
      this->ExampleScenario_ContainedInstance_impl_->post_ExampleScenario_ContainedInstance ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_ContainedInstance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->resourceId_parser_)
      this->resourceId_parser_->_reset ();

    if (this->versionId_parser_)
      this->versionId_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_Process_pskel
  //

  void ExampleScenario_Process_pskel::
  title ()
  {
    if (this->ExampleScenario_Process_impl_)
      this->ExampleScenario_Process_impl_->title ();
  }

  void ExampleScenario_Process_pskel::
  description ()
  {
    if (this->ExampleScenario_Process_impl_)
      this->ExampleScenario_Process_impl_->description ();
  }

  void ExampleScenario_Process_pskel::
  preConditions ()
  {
    if (this->ExampleScenario_Process_impl_)
      this->ExampleScenario_Process_impl_->preConditions ();
  }

  void ExampleScenario_Process_pskel::
  postConditions ()
  {
    if (this->ExampleScenario_Process_impl_)
      this->ExampleScenario_Process_impl_->postConditions ();
  }

  void ExampleScenario_Process_pskel::
  step ()
  {
    if (this->ExampleScenario_Process_impl_)
      this->ExampleScenario_Process_impl_->step ();
  }

  void ExampleScenario_Process_pskel::
  post_ExampleScenario_Process ()
  {
    if (this->ExampleScenario_Process_impl_)
      this->ExampleScenario_Process_impl_->post_ExampleScenario_Process ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_Process_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->preConditions_parser_)
      this->preConditions_parser_->_reset ();

    if (this->postConditions_parser_)
      this->postConditions_parser_->_reset ();

    if (this->step_parser_)
      this->step_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_Step_pskel
  //

  void ExampleScenario_Step_pskel::
  process ()
  {
    if (this->ExampleScenario_Step_impl_)
      this->ExampleScenario_Step_impl_->process ();
  }

  void ExampleScenario_Step_pskel::
  pause ()
  {
    if (this->ExampleScenario_Step_impl_)
      this->ExampleScenario_Step_impl_->pause ();
  }

  void ExampleScenario_Step_pskel::
  operation ()
  {
    if (this->ExampleScenario_Step_impl_)
      this->ExampleScenario_Step_impl_->operation ();
  }

  void ExampleScenario_Step_pskel::
  alternative ()
  {
    if (this->ExampleScenario_Step_impl_)
      this->ExampleScenario_Step_impl_->alternative ();
  }

  void ExampleScenario_Step_pskel::
  post_ExampleScenario_Step ()
  {
    if (this->ExampleScenario_Step_impl_)
      this->ExampleScenario_Step_impl_->post_ExampleScenario_Step ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_Step_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->process_parser_)
      this->process_parser_->_reset ();

    if (this->pause_parser_)
      this->pause_parser_->_reset ();

    if (this->operation_parser_)
      this->operation_parser_->_reset ();

    if (this->alternative_parser_)
      this->alternative_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_Operation_pskel
  //

  void ExampleScenario_Operation_pskel::
  number ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->number ();
  }

  void ExampleScenario_Operation_pskel::
  type ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->type ();
  }

  void ExampleScenario_Operation_pskel::
  name ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->name ();
  }

  void ExampleScenario_Operation_pskel::
  initiator ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->initiator ();
  }

  void ExampleScenario_Operation_pskel::
  receiver ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->receiver ();
  }

  void ExampleScenario_Operation_pskel::
  description ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->description ();
  }

  void ExampleScenario_Operation_pskel::
  initiatorActive ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->initiatorActive ();
  }

  void ExampleScenario_Operation_pskel::
  receiverActive ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->receiverActive ();
  }

  void ExampleScenario_Operation_pskel::
  request ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->request ();
  }

  void ExampleScenario_Operation_pskel::
  response ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->response ();
  }

  void ExampleScenario_Operation_pskel::
  post_ExampleScenario_Operation ()
  {
    if (this->ExampleScenario_Operation_impl_)
      this->ExampleScenario_Operation_impl_->post_ExampleScenario_Operation ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_Operation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->number_parser_)
      this->number_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->initiator_parser_)
      this->initiator_parser_->_reset ();

    if (this->receiver_parser_)
      this->receiver_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->initiatorActive_parser_)
      this->initiatorActive_parser_->_reset ();

    if (this->receiverActive_parser_)
      this->receiverActive_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->response_parser_)
      this->response_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenario_Alternative_pskel
  //

  void ExampleScenario_Alternative_pskel::
  title ()
  {
    if (this->ExampleScenario_Alternative_impl_)
      this->ExampleScenario_Alternative_impl_->title ();
  }

  void ExampleScenario_Alternative_pskel::
  description ()
  {
    if (this->ExampleScenario_Alternative_impl_)
      this->ExampleScenario_Alternative_impl_->description ();
  }

  void ExampleScenario_Alternative_pskel::
  step ()
  {
    if (this->ExampleScenario_Alternative_impl_)
      this->ExampleScenario_Alternative_impl_->step ();
  }

  void ExampleScenario_Alternative_pskel::
  post_ExampleScenario_Alternative ()
  {
    if (this->ExampleScenario_Alternative_impl_)
      this->ExampleScenario_Alternative_impl_->post_ExampleScenario_Alternative ();
    else
      post_BackboneElement ();
  }

  void ExampleScenario_Alternative_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->step_parser_)
      this->step_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExampleScenarioActorType_list_pskel
  //

  void ExampleScenarioActorType_list_pskel::
  post_ExampleScenarioActorType_list ()
  {
    if (this->ExampleScenarioActorType_list_impl_)
      this->ExampleScenarioActorType_list_impl_->post_ExampleScenarioActorType_list ();
    else
      post_code_primitive ();
  }

  const char* const ExampleScenarioActorType_list_pskel::_xsde_ExampleScenarioActorType_list_pskel_enums_[2UL] = 
  {
    "entity",
    "person"
  };

  // ExampleScenarioActorType_pskel
  //

  void ExampleScenarioActorType_pskel::
  value ()
  {
    if (this->ExampleScenarioActorType_impl_)
      this->ExampleScenarioActorType_impl_->value ();
  }

  void ExampleScenarioActorType_pskel::
  post_ExampleScenarioActorType ()
  {
    if (this->ExampleScenarioActorType_impl_)
      this->ExampleScenarioActorType_impl_->post_ExampleScenarioActorType ();
    else
      post_Element ();
  }

  void ExampleScenarioActorType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ResourceType_list_pskel
  //

  void ResourceType_list_pskel::
  post_ResourceType_list ()
  {
    if (this->ResourceType_list_impl_)
      this->ResourceType_list_impl_->post_ResourceType_list ();
    else
      post_code_primitive ();
  }

  const char* const ResourceType_list_pskel::_xsde_ResourceType_list_pskel_enums_[148UL] = 
  {
    "Account",
    "ActivityDefinition",
    "AdverseEvent",
    "AllergyIntolerance",
    "Appointment",
    "AppointmentResponse",
    "AuditEvent",
    "Basic",
    "Binary",
    "BiologicallyDerivedProduct",
    "BodyStructure",
    "Bundle",
    "CapabilityStatement",
    "CarePlan",
    "CareTeam",
    "CatalogEntry",
    "ChargeItem",
    "ChargeItemDefinition",
    "Claim",
    "ClaimResponse",
    "ClinicalImpression",
    "CodeSystem",
    "Communication",
    "CommunicationRequest",
    "CompartmentDefinition",
    "Composition",
    "ConceptMap",
    "Condition",
    "Consent",
    "Contract",
    "Coverage",
    "CoverageEligibilityRequest",
    "CoverageEligibilityResponse",
    "DetectedIssue",
    "Device",
    "DeviceDefinition",
    "DeviceMetric",
    "DeviceRequest",
    "DeviceUseStatement",
    "DiagnosticReport",
    "DocumentManifest",
    "DocumentReference",
    "DomainResource",
    "EffectEvidenceSynthesis",
    "Encounter",
    "Endpoint",
    "EnrollmentRequest",
    "EnrollmentResponse",
    "EpisodeOfCare",
    "EventDefinition",
    "Evidence",
    "EvidenceVariable",
    "ExampleScenario",
    "ExplanationOfBenefit",
    "FamilyMemberHistory",
    "Flag",
    "Goal",
    "GraphDefinition",
    "Group",
    "GuidanceResponse",
    "HealthcareService",
    "ImagingStudy",
    "Immunization",
    "ImmunizationEvaluation",
    "ImmunizationRecommendation",
    "ImplementationGuide",
    "InsurancePlan",
    "Invoice",
    "Library",
    "Linkage",
    "List",
    "Location",
    "Measure",
    "MeasureReport",
    "Media",
    "Medication",
    "MedicationAdministration",
    "MedicationDispense",
    "MedicationKnowledge",
    "MedicationRequest",
    "MedicationStatement",
    "MedicinalProduct",
    "MedicinalProductAuthorization",
    "MedicinalProductContraindication",
    "MedicinalProductIndication",
    "MedicinalProductIngredient",
    "MedicinalProductInteraction",
    "MedicinalProductManufactured",
    "MedicinalProductPackaged",
    "MedicinalProductPharmaceutical",
    "MedicinalProductUndesirableEffect",
    "MessageDefinition",
    "MessageHeader",
    "MolecularSequence",
    "NamingSystem",
    "NutritionOrder",
    "Observation",
    "ObservationDefinition",
    "OperationDefinition",
    "OperationOutcome",
    "Organization",
    "OrganizationAffiliation",
    "Parameters",
    "Patient",
    "PaymentNotice",
    "PaymentReconciliation",
    "Person",
    "PlanDefinition",
    "Practitioner",
    "PractitionerRole",
    "Procedure",
    "Provenance",
    "Questionnaire",
    "QuestionnaireResponse",
    "RelatedPerson",
    "RequestGroup",
    "ResearchDefinition",
    "ResearchElementDefinition",
    "ResearchStudy",
    "ResearchSubject",
    "Resource",
    "RiskAssessment",
    "RiskEvidenceSynthesis",
    "Schedule",
    "SearchParameter",
    "ServiceRequest",
    "Slot",
    "Specimen",
    "SpecimenDefinition",
    "StructureDefinition",
    "StructureMap",
    "Subscription",
    "Substance",
    "SubstanceNucleicAcid",
    "SubstancePolymer",
    "SubstanceProtein",
    "SubstanceReferenceInformation",
    "SubstanceSourceMaterial",
    "SubstanceSpecification",
    "SupplyDelivery",
    "SupplyRequest",
    "Task",
    "TerminologyCapabilities",
    "TestReport",
    "TestScript",
    "ValueSet",
    "VerificationResult",
    "VisionPrescription"
  };

  // ResourceType_pskel
  //

  void ResourceType_pskel::
  value ()
  {
    if (this->ResourceType_impl_)
      this->ResourceType_impl_->value ();
  }

  void ResourceType_pskel::
  post_ResourceType ()
  {
    if (this->ResourceType_impl_)
      this->ResourceType_impl_->post_ResourceType ();
    else
      post_Element ();
  }

  void ResourceType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ExampleScenario_pskel.
  //
  bool ExampleScenario_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_ExampleScenario_Actor ();
              this->actor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "instance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instance_parser_)
            {
              this->instance_parser_->pre ();
              ctx.nested_parser (this->instance_parser_);
            }
          }
          else
          {
            if (this->instance_parser_ != 0)
            {
              this->instance_parser_->post_ExampleScenario_Instance ();
              this->instance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "process" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->process_parser_)
            {
              this->process_parser_->pre ();
              ctx.nested_parser (this->process_parser_);
            }
          }
          else
          {
            if (this->process_parser_ != 0)
            {
              this->process_parser_->post_ExampleScenario_Process ();
              this->process ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "workflow" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->workflow_parser_)
            {
              this->workflow_parser_->pre ();
              ctx.nested_parser (this->workflow_parser_);
            }
          }
          else
          {
            if (this->workflow_parser_ != 0)
            {
              this->workflow_parser_->post_canonical ();
              this->workflow ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_Actor_pskel.
  //
  bool ExampleScenario_Actor_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "actorId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_Actor_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_Actor_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_Actor_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_Actor_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_Actor_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "actorId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actorId_parser_)
            {
              this->actorId_parser_->pre ();
              ctx.nested_parser (this->actorId_parser_);
            }
          }
          else
          {
            if (this->actorId_parser_ != 0)
            {
              this->actorId_parser_->post_string ();
              this->actorId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_ExampleScenarioActorType ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_Instance_pskel.
  //
  bool ExampleScenario_Instance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "resourceId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_Instance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_Instance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_Instance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_Instance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_Instance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "resourceId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resourceId_parser_)
            {
              this->resourceId_parser_->pre ();
              ctx.nested_parser (this->resourceId_parser_);
            }
          }
          else
          {
            if (this->resourceId_parser_ != 0)
            {
              this->resourceId_parser_->post_string ();
              this->resourceId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "resourceType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resourceType_parser_)
            {
              this->resourceType_parser_->pre ();
              ctx.nested_parser (this->resourceType_parser_);
            }
          }
          else
          {
            if (this->resourceType_parser_ != 0)
            {
              this->resourceType_parser_->post_ResourceType ();
              this->resourceType ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_ExampleScenario_Version ();
              this->version ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "containedInstance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->containedInstance_parser_)
            {
              this->containedInstance_parser_->pre ();
              ctx.nested_parser (this->containedInstance_parser_);
            }
          }
          else
          {
            if (this->containedInstance_parser_ != 0)
            {
              this->containedInstance_parser_->post_ExampleScenario_ContainedInstance ();
              this->containedInstance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_Version_pskel.
  //
  bool ExampleScenario_Version_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "versionId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_Version_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_Version_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_Version_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_Version_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_Version_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "versionId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->versionId_parser_)
            {
              this->versionId_parser_->pre ();
              ctx.nested_parser (this->versionId_parser_);
            }
          }
          else
          {
            if (this->versionId_parser_ != 0)
            {
              this->versionId_parser_->post_string ();
              this->versionId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_ContainedInstance_pskel.
  //
  bool ExampleScenario_ContainedInstance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "resourceId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_ContainedInstance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_ContainedInstance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_ContainedInstance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_ContainedInstance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_ContainedInstance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "resourceId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resourceId_parser_)
            {
              this->resourceId_parser_->pre ();
              ctx.nested_parser (this->resourceId_parser_);
            }
          }
          else
          {
            if (this->resourceId_parser_ != 0)
            {
              this->resourceId_parser_->post_string ();
              this->resourceId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "versionId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->versionId_parser_)
            {
              this->versionId_parser_->pre ();
              ctx.nested_parser (this->versionId_parser_);
            }
          }
          else
          {
            if (this->versionId_parser_ != 0)
            {
              this->versionId_parser_->post_string ();
              this->versionId ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_Process_pskel.
  //
  bool ExampleScenario_Process_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "title" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_Process_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_Process_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_Process_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_Process_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_Process_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "preConditions" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preConditions_parser_)
            {
              this->preConditions_parser_->pre ();
              ctx.nested_parser (this->preConditions_parser_);
            }
          }
          else
          {
            if (this->preConditions_parser_ != 0)
            {
              this->preConditions_parser_->post_markdown ();
              this->preConditions ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "postConditions" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->postConditions_parser_)
            {
              this->postConditions_parser_->pre ();
              ctx.nested_parser (this->postConditions_parser_);
            }
          }
          else
          {
            if (this->postConditions_parser_ != 0)
            {
              this->postConditions_parser_->post_markdown ();
              this->postConditions ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "step" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->step_parser_)
            {
              this->step_parser_->pre ();
              ctx.nested_parser (this->step_parser_);
            }
          }
          else
          {
            if (this->step_parser_ != 0)
            {
              this->step_parser_->post_ExampleScenario_Step ();
              this->step ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_Step_pskel.
  //
  bool ExampleScenario_Step_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "process" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "pause" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "operation" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "alternative" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_Step_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_Step_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_Step_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_Step_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ExampleScenario_Step_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "process" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->process_parser_)
            {
              this->process_parser_->pre ();
              ctx.nested_parser (this->process_parser_);
            }
          }
          else
          {
            if (this->process_parser_ != 0)
            {
              this->process_parser_->post_ExampleScenario_Process ();
              this->process ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "pause" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->pause_parser_)
            {
              this->pause_parser_->pre ();
              ctx.nested_parser (this->pause_parser_);
            }
          }
          else
          {
            if (this->pause_parser_ != 0)
            {
              this->pause_parser_->post_boolean ();
              this->pause ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "operation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operation_parser_)
            {
              this->operation_parser_->pre ();
              ctx.nested_parser (this->operation_parser_);
            }
          }
          else
          {
            if (this->operation_parser_ != 0)
            {
              this->operation_parser_->post_ExampleScenario_Operation ();
              this->operation ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "alternative" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->alternative_parser_)
            {
              this->alternative_parser_->pre ();
              ctx.nested_parser (this->alternative_parser_);
            }
          }
          else
          {
            if (this->alternative_parser_ != 0)
            {
              this->alternative_parser_->post_ExampleScenario_Alternative ();
              this->alternative ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_Operation_pskel.
  //
  bool ExampleScenario_Operation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "number" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_Operation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_Operation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_Operation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_Operation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_Operation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "number" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->number_parser_)
            {
              this->number_parser_->pre ();
              ctx.nested_parser (this->number_parser_);
            }
          }
          else
          {
            if (this->number_parser_ != 0)
            {
              this->number_parser_->post_string ();
              this->number ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_string ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "initiator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->initiator_parser_)
            {
              this->initiator_parser_->pre ();
              ctx.nested_parser (this->initiator_parser_);
            }
          }
          else
          {
            if (this->initiator_parser_ != 0)
            {
              this->initiator_parser_->post_string ();
              this->initiator ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "receiver" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->receiver_parser_)
            {
              this->receiver_parser_->pre ();
              ctx.nested_parser (this->receiver_parser_);
            }
          }
          else
          {
            if (this->receiver_parser_ != 0)
            {
              this->receiver_parser_->post_string ();
              this->receiver ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "initiatorActive" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->initiatorActive_parser_)
            {
              this->initiatorActive_parser_->pre ();
              ctx.nested_parser (this->initiatorActive_parser_);
            }
          }
          else
          {
            if (this->initiatorActive_parser_ != 0)
            {
              this->initiatorActive_parser_->post_boolean ();
              this->initiatorActive ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "receiverActive" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->receiverActive_parser_)
            {
              this->receiverActive_parser_->pre ();
              ctx.nested_parser (this->receiverActive_parser_);
            }
          }
          else
          {
            if (this->receiverActive_parser_ != 0)
            {
              this->receiverActive_parser_->post_boolean ();
              this->receiverActive ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_ExampleScenario_ContainedInstance ();
              this->request ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "response" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->response_parser_)
            {
              this->response_parser_->pre ();
              ctx.nested_parser (this->response_parser_);
            }
          }
          else
          {
            if (this->response_parser_ != 0)
            {
              this->response_parser_->post_ExampleScenario_ContainedInstance ();
              this->response ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExampleScenario_Alternative_pskel.
  //
  bool ExampleScenario_Alternative_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "title" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExampleScenario_Alternative_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExampleScenario_Alternative_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExampleScenario_Alternative_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExampleScenario_Alternative_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExampleScenario_Alternative_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "step" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->step_parser_)
            {
              this->step_parser_->pre ();
              ctx.nested_parser (this->step_parser_);
            }
          }
          else
          {
            if (this->step_parser_ != 0)
            {
              this->step_parser_->post_ExampleScenario_Step ();
              this->step ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ExampleScenarioActorType_pskel.
  //
  bool ExampleScenarioActorType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ExampleScenarioActorType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ResourceType_pskel.
  //
  bool ResourceType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ResourceType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

