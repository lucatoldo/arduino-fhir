// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef IMMUNIZATION_PSKEL_HXX
#define IMMUNIZATION_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class Immunization_pskel;
  class Immunization_Performer_pskel;
  class Immunization_Education_pskel;
  class Immunization_Reaction_pskel;
  class Immunization_ProtocolApplied_pskel;
  class ImmunizationStatusCodes_list_pskel;
  class ImmunizationStatusCodes_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class Immunization_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    vaccineCode ();

    virtual void
    patient ();

    virtual void
    encounter ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrenceString ();

    virtual void
    recorded ();

    virtual void
    primarySource ();

    virtual void
    reportOrigin ();

    virtual void
    location ();

    virtual void
    manufacturer ();

    virtual void
    lotNumber ();

    virtual void
    expirationDate ();

    virtual void
    site ();

    virtual void
    route ();

    virtual void
    doseQuantity ();

    virtual void
    performer ();

    virtual void
    note ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    isSubpotent ();

    virtual void
    subpotentReason ();

    virtual void
    education ();

    virtual void
    programEligibility ();

    virtual void
    fundingSource ();

    virtual void
    reaction ();

    virtual void
    protocolApplied ();

    virtual void
    post_Immunization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ImmunizationStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* vaccineCode */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::string_pskel& /* occurrenceString */,
             ::fhir::dateTime_pskel& /* recorded */,
             ::fhir::boolean_pskel& /* primarySource */,
             ::fhir::CodeableConcept_pskel& /* reportOrigin */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::string_pskel& /* lotNumber */,
             ::fhir::date_pskel& /* expirationDate */,
             ::fhir::CodeableConcept_pskel& /* site */,
             ::fhir::CodeableConcept_pskel& /* route */,
             ::fhir::Quantity_pskel& /* doseQuantity */,
             ::fhir::Immunization_Performer_pskel& /* performer */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::boolean_pskel& /* isSubpotent */,
             ::fhir::CodeableConcept_pskel& /* subpotentReason */,
             ::fhir::Immunization_Education_pskel& /* education */,
             ::fhir::CodeableConcept_pskel& /* programEligibility */,
             ::fhir::CodeableConcept_pskel& /* fundingSource */,
             ::fhir::Immunization_Reaction_pskel& /* reaction */,
             ::fhir::Immunization_ProtocolApplied_pskel& /* protocolApplied */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ImmunizationStatusCodes_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    vaccineCode_parser (::fhir::CodeableConcept_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrenceString_parser (::fhir::string_pskel&);

    void
    recorded_parser (::fhir::dateTime_pskel&);

    void
    primarySource_parser (::fhir::boolean_pskel&);

    void
    reportOrigin_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    lotNumber_parser (::fhir::string_pskel&);

    void
    expirationDate_parser (::fhir::date_pskel&);

    void
    site_parser (::fhir::CodeableConcept_pskel&);

    void
    route_parser (::fhir::CodeableConcept_pskel&);

    void
    doseQuantity_parser (::fhir::Quantity_pskel&);

    void
    performer_parser (::fhir::Immunization_Performer_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    isSubpotent_parser (::fhir::boolean_pskel&);

    void
    subpotentReason_parser (::fhir::CodeableConcept_pskel&);

    void
    education_parser (::fhir::Immunization_Education_pskel&);

    void
    programEligibility_parser (::fhir::CodeableConcept_pskel&);

    void
    fundingSource_parser (::fhir::CodeableConcept_pskel&);

    void
    reaction_parser (::fhir::Immunization_Reaction_pskel&);

    void
    protocolApplied_parser (::fhir::Immunization_ProtocolApplied_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_pskel* Immunization_impl_;
    Immunization_pskel (Immunization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ImmunizationStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* vaccineCode_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::string_pskel* occurrenceString_parser_;
    ::fhir::dateTime_pskel* recorded_parser_;
    ::fhir::boolean_pskel* primarySource_parser_;
    ::fhir::CodeableConcept_pskel* reportOrigin_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::string_pskel* lotNumber_parser_;
    ::fhir::date_pskel* expirationDate_parser_;
    ::fhir::CodeableConcept_pskel* site_parser_;
    ::fhir::CodeableConcept_pskel* route_parser_;
    ::fhir::Quantity_pskel* doseQuantity_parser_;
    ::fhir::Immunization_Performer_pskel* performer_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::boolean_pskel* isSubpotent_parser_;
    ::fhir::CodeableConcept_pskel* subpotentReason_parser_;
    ::fhir::Immunization_Education_pskel* education_parser_;
    ::fhir::CodeableConcept_pskel* programEligibility_parser_;
    ::fhir::CodeableConcept_pskel* fundingSource_parser_;
    ::fhir::Immunization_Reaction_pskel* reaction_parser_;
    ::fhir::Immunization_ProtocolApplied_pskel* protocolApplied_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_Performer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    function ();

    virtual void
    actor ();

    virtual void
    post_Immunization_Performer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* function */,
             ::fhir::Reference_pskel& /* actor */);

    // Individual element parsers.
    //
    void
    function_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_Performer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_Performer_pskel* Immunization_Performer_impl_;
    Immunization_Performer_pskel (Immunization_Performer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* function_parser_;
    ::fhir::Reference_pskel* actor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_Performer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_Education_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    documentType ();

    virtual void
    reference ();

    virtual void
    publicationDate ();

    virtual void
    presentationDate ();

    virtual void
    post_Immunization_Education ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* documentType */,
             ::fhir::uri_pskel& /* reference */,
             ::fhir::dateTime_pskel& /* publicationDate */,
             ::fhir::dateTime_pskel& /* presentationDate */);

    // Individual element parsers.
    //
    void
    documentType_parser (::fhir::string_pskel&);

    void
    reference_parser (::fhir::uri_pskel&);

    void
    publicationDate_parser (::fhir::dateTime_pskel&);

    void
    presentationDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_Education_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_Education_pskel* Immunization_Education_impl_;
    Immunization_Education_pskel (Immunization_Education_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* documentType_parser_;
    ::fhir::uri_pskel* reference_parser_;
    ::fhir::dateTime_pskel* publicationDate_parser_;
    ::fhir::dateTime_pskel* presentationDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_Education_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_Reaction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    date ();

    virtual void
    detail ();

    virtual void
    reported ();

    virtual void
    post_Immunization_Reaction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* detail */,
             ::fhir::boolean_pskel& /* reported */);

    // Individual element parsers.
    //
    void
    date_parser (::fhir::dateTime_pskel&);

    void
    detail_parser (::fhir::Reference_pskel&);

    void
    reported_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_Reaction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_Reaction_pskel* Immunization_Reaction_impl_;
    Immunization_Reaction_pskel (Immunization_Reaction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* detail_parser_;
    ::fhir::boolean_pskel* reported_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_Reaction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_ProtocolApplied_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    series ();

    virtual void
    authority ();

    virtual void
    targetDisease ();

    virtual void
    doseNumberPositiveInt ();

    virtual void
    doseNumberString ();

    virtual void
    seriesDosesPositiveInt ();

    virtual void
    seriesDosesString ();

    virtual void
    post_Immunization_ProtocolApplied ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* series */,
             ::fhir::Reference_pskel& /* authority */,
             ::fhir::CodeableConcept_pskel& /* targetDisease */,
             ::fhir::positiveInt_pskel& /* doseNumberPositiveInt */,
             ::fhir::string_pskel& /* doseNumberString */,
             ::fhir::positiveInt_pskel& /* seriesDosesPositiveInt */,
             ::fhir::string_pskel& /* seriesDosesString */);

    // Individual element parsers.
    //
    void
    series_parser (::fhir::string_pskel&);

    void
    authority_parser (::fhir::Reference_pskel&);

    void
    targetDisease_parser (::fhir::CodeableConcept_pskel&);

    void
    doseNumberPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    doseNumberString_parser (::fhir::string_pskel&);

    void
    seriesDosesPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    seriesDosesString_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_ProtocolApplied_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_ProtocolApplied_pskel* Immunization_ProtocolApplied_impl_;
    Immunization_ProtocolApplied_pskel (Immunization_ProtocolApplied_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* series_parser_;
    ::fhir::Reference_pskel* authority_parser_;
    ::fhir::CodeableConcept_pskel* targetDisease_parser_;
    ::fhir::positiveInt_pskel* doseNumberPositiveInt_parser_;
    ::fhir::string_pskel* doseNumberString_parser_;
    ::fhir::positiveInt_pskel* seriesDosesPositiveInt_parser_;
    ::fhir::string_pskel* seriesDosesString_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_ProtocolApplied_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImmunizationStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ImmunizationStatusCodes_list ();

    // Constructor.
    //
    ImmunizationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationStatusCodes_list_pskel* ImmunizationStatusCodes_list_impl_;
    ImmunizationStatusCodes_list_pskel (ImmunizationStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ImmunizationStatusCodes_list_pskel_enums_[3UL];
  };

  class ImmunizationStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ImmunizationStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ImmunizationStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ImmunizationStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImmunizationStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationStatusCodes_pskel* ImmunizationStatusCodes_impl_;
    ImmunizationStatusCodes_pskel (ImmunizationStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ImmunizationStatusCodes_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IMMUNIZATION_PSKEL_HXX
