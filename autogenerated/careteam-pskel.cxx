// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "careteam-pskel.hxx"

namespace fhir
{
  // CareTeam_pskel
  //

  void CareTeam_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void CareTeam_pskel::
  status_parser (::fhir::CareTeamStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void CareTeam_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void CareTeam_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void CareTeam_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void CareTeam_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void CareTeam_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void CareTeam_pskel::
  participant_parser (::fhir::CareTeam_Participant_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void CareTeam_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void CareTeam_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void CareTeam_pskel::
  managingOrganization_parser (::fhir::Reference_pskel& p)
  {
    this->managingOrganization_parser_ = &p;
  }

  void CareTeam_pskel::
  telecom_parser (::fhir::ContactPoint_pskel& p)
  {
    this->telecom_parser_ = &p;
  }

  void CareTeam_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void CareTeam_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CareTeamStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::string_pskel& name,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::Period_pskel& period,
           ::fhir::CareTeam_Participant_pskel& participant,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Reference_pskel& managingOrganization,
           ::fhir::ContactPoint_pskel& telecom,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->category_parser_ = &category;
    this->name_parser_ = &name;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->period_parser_ = &period;
    this->participant_parser_ = &participant;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->managingOrganization_parser_ = &managingOrganization;
    this->telecom_parser_ = &telecom;
    this->note_parser_ = &note;
  }

  CareTeam_pskel::
  CareTeam_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    CareTeam_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    category_parser_ (0),
    name_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    period_parser_ (0),
    participant_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    managingOrganization_parser_ (0),
    telecom_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CareTeam_pskel::
  CareTeam_pskel (CareTeam_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    CareTeam_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    category_parser_ (0),
    name_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    period_parser_ (0),
    participant_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    managingOrganization_parser_ (0),
    telecom_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CareTeam_Participant_pskel
  //

  void CareTeam_Participant_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void CareTeam_Participant_pskel::
  member_parser (::fhir::Reference_pskel& p)
  {
    this->member_parser_ = &p;
  }

  void CareTeam_Participant_pskel::
  onBehalfOf_parser (::fhir::Reference_pskel& p)
  {
    this->onBehalfOf_parser_ = &p;
  }

  void CareTeam_Participant_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void CareTeam_Participant_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::Reference_pskel& member,
           ::fhir::Reference_pskel& onBehalfOf,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->role_parser_ = &role;
    this->member_parser_ = &member;
    this->onBehalfOf_parser_ = &onBehalfOf;
    this->period_parser_ = &period;
  }

  CareTeam_Participant_pskel::
  CareTeam_Participant_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CareTeam_Participant_impl_ (0),
    role_parser_ (0),
    member_parser_ (0),
    onBehalfOf_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CareTeam_Participant_pskel::
  CareTeam_Participant_pskel (CareTeam_Participant_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CareTeam_Participant_impl_ (impl),
    role_parser_ (0),
    member_parser_ (0),
    onBehalfOf_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CareTeamStatus_list_pskel
  //

  CareTeamStatus_list_pskel::
  CareTeamStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CareTeamStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CareTeamStatus_list_pskel_enums_, 5UL);
  }

  CareTeamStatus_list_pskel::
  CareTeamStatus_list_pskel (CareTeamStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CareTeamStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CareTeamStatus_list_pskel_enums_, 5UL);
  }

  // CareTeamStatus_pskel
  //

  void CareTeamStatus_pskel::
  value_parser (::fhir::CareTeamStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CareTeamStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CareTeamStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CareTeamStatus_pskel::
  CareTeamStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CareTeamStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  CareTeamStatus_pskel::
  CareTeamStatus_pskel (CareTeamStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CareTeamStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // CareTeam_pskel
  //

  void CareTeam_pskel::
  identifier ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->identifier ();
  }

  void CareTeam_pskel::
  status ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->status ();
  }

  void CareTeam_pskel::
  category ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->category ();
  }

  void CareTeam_pskel::
  name ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->name ();
  }

  void CareTeam_pskel::
  subject ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->subject ();
  }

  void CareTeam_pskel::
  encounter ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->encounter ();
  }

  void CareTeam_pskel::
  period ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->period ();
  }

  void CareTeam_pskel::
  participant ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->participant ();
  }

  void CareTeam_pskel::
  reasonCode ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->reasonCode ();
  }

  void CareTeam_pskel::
  reasonReference ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->reasonReference ();
  }

  void CareTeam_pskel::
  managingOrganization ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->managingOrganization ();
  }

  void CareTeam_pskel::
  telecom ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->telecom ();
  }

  void CareTeam_pskel::
  note ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->note ();
  }

  void CareTeam_pskel::
  post_CareTeam ()
  {
    if (this->CareTeam_impl_)
      this->CareTeam_impl_->post_CareTeam ();
    else
      post_DomainResource ();
  }

  void CareTeam_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->managingOrganization_parser_)
      this->managingOrganization_parser_->_reset ();

    if (this->telecom_parser_)
      this->telecom_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // CareTeam_Participant_pskel
  //

  void CareTeam_Participant_pskel::
  role ()
  {
    if (this->CareTeam_Participant_impl_)
      this->CareTeam_Participant_impl_->role ();
  }

  void CareTeam_Participant_pskel::
  member ()
  {
    if (this->CareTeam_Participant_impl_)
      this->CareTeam_Participant_impl_->member ();
  }

  void CareTeam_Participant_pskel::
  onBehalfOf ()
  {
    if (this->CareTeam_Participant_impl_)
      this->CareTeam_Participant_impl_->onBehalfOf ();
  }

  void CareTeam_Participant_pskel::
  period ()
  {
    if (this->CareTeam_Participant_impl_)
      this->CareTeam_Participant_impl_->period ();
  }

  void CareTeam_Participant_pskel::
  post_CareTeam_Participant ()
  {
    if (this->CareTeam_Participant_impl_)
      this->CareTeam_Participant_impl_->post_CareTeam_Participant ();
    else
      post_BackboneElement ();
  }

  void CareTeam_Participant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->member_parser_)
      this->member_parser_->_reset ();

    if (this->onBehalfOf_parser_)
      this->onBehalfOf_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // CareTeamStatus_list_pskel
  //

  void CareTeamStatus_list_pskel::
  post_CareTeamStatus_list ()
  {
    if (this->CareTeamStatus_list_impl_)
      this->CareTeamStatus_list_impl_->post_CareTeamStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const CareTeamStatus_list_pskel::_xsde_CareTeamStatus_list_pskel_enums_[5UL] = 
  {
    "active",
    "entered-in-error",
    "inactive",
    "proposed",
    "suspended"
  };

  // CareTeamStatus_pskel
  //

  void CareTeamStatus_pskel::
  value ()
  {
    if (this->CareTeamStatus_impl_)
      this->CareTeamStatus_impl_->value ();
  }

  void CareTeamStatus_pskel::
  post_CareTeamStatus ()
  {
    if (this->CareTeamStatus_impl_)
      this->CareTeamStatus_impl_->post_CareTeamStatus ();
    else
      post_Element ();
  }

  void CareTeamStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for CareTeam_pskel.
  //
  bool CareTeam_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "category" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "subject" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "encounter" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "participant" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "reasonCode" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "reasonReference" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "managingOrganization" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "telecom" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "note" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CareTeam_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CareTeam_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CareTeam_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void CareTeam_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void CareTeam_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CareTeamStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_CareTeam_Participant ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "managingOrganization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->managingOrganization_parser_)
            {
              this->managingOrganization_parser_->pre ();
              ctx.nested_parser (this->managingOrganization_parser_);
            }
          }
          else
          {
            if (this->managingOrganization_parser_ != 0)
            {
              this->managingOrganization_parser_->post_Reference ();
              this->managingOrganization ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "telecom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->telecom_parser_)
            {
              this->telecom_parser_->pre ();
              ctx.nested_parser (this->telecom_parser_);
            }
          }
          else
          {
            if (this->telecom_parser_ != 0)
            {
              this->telecom_parser_->post_ContactPoint ();
              this->telecom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CareTeam_Participant_pskel.
  //
  bool CareTeam_Participant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "role" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "member" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "onBehalfOf" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CareTeam_Participant_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CareTeam_Participant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CareTeam_Participant_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CareTeam_Participant_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void CareTeam_Participant_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "member" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->member_parser_)
            {
              this->member_parser_->pre ();
              ctx.nested_parser (this->member_parser_);
            }
          }
          else
          {
            if (this->member_parser_ != 0)
            {
              this->member_parser_->post_Reference ();
              this->member ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "onBehalfOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onBehalfOf_parser_)
            {
              this->onBehalfOf_parser_->pre ();
              ctx.nested_parser (this->onBehalfOf_parser_);
            }
          }
          else
          {
            if (this->onBehalfOf_parser_ != 0)
            {
              this->onBehalfOf_parser_->post_Reference ();
              this->onBehalfOf ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for CareTeamStatus_pskel.
  //
  bool CareTeamStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CareTeamStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

