// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "graphdefinition-pskel.hxx"

namespace fhir
{
  // GraphDefinition_pskel
  //

  void GraphDefinition_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void GraphDefinition_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void GraphDefinition_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void GraphDefinition_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void GraphDefinition_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void GraphDefinition_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void GraphDefinition_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void GraphDefinition_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void GraphDefinition_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void GraphDefinition_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void GraphDefinition_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void GraphDefinition_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void GraphDefinition_pskel::
  start_parser (::fhir::code_pskel& p)
  {
    this->start_parser_ = &p;
  }

  void GraphDefinition_pskel::
  profile_parser (::fhir::canonical_pskel& p)
  {
    this->profile_parser_ = &p;
  }

  void GraphDefinition_pskel::
  link_parser (::fhir::GraphDefinition_Link_pskel& p)
  {
    this->link_parser_ = &p;
  }

  void GraphDefinition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::code_pskel& start,
           ::fhir::canonical_pskel& profile,
           ::fhir::GraphDefinition_Link_pskel& link)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->start_parser_ = &start;
    this->profile_parser_ = &profile;
    this->link_parser_ = &link;
  }

  GraphDefinition_pskel::
  GraphDefinition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    GraphDefinition_impl_ (0),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    start_parser_ (0),
    profile_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  GraphDefinition_pskel::
  GraphDefinition_pskel (GraphDefinition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    GraphDefinition_impl_ (impl),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    start_parser_ (0),
    profile_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GraphDefinition_Link_pskel
  //

  void GraphDefinition_Link_pskel::
  path_parser (::fhir::string_pskel& p)
  {
    this->path_parser_ = &p;
  }

  void GraphDefinition_Link_pskel::
  sliceName_parser (::fhir::string_pskel& p)
  {
    this->sliceName_parser_ = &p;
  }

  void GraphDefinition_Link_pskel::
  min_parser (::fhir::integer_pskel& p)
  {
    this->min_parser_ = &p;
  }

  void GraphDefinition_Link_pskel::
  max_parser (::fhir::string_pskel& p)
  {
    this->max_parser_ = &p;
  }

  void GraphDefinition_Link_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void GraphDefinition_Link_pskel::
  target_parser (::fhir::GraphDefinition_Target_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void GraphDefinition_Link_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& path,
           ::fhir::string_pskel& sliceName,
           ::fhir::integer_pskel& min,
           ::fhir::string_pskel& max,
           ::fhir::string_pskel& description,
           ::fhir::GraphDefinition_Target_pskel& target)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->path_parser_ = &path;
    this->sliceName_parser_ = &sliceName;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->description_parser_ = &description;
    this->target_parser_ = &target;
  }

  GraphDefinition_Link_pskel::
  GraphDefinition_Link_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    GraphDefinition_Link_impl_ (0),
    path_parser_ (0),
    sliceName_parser_ (0),
    min_parser_ (0),
    max_parser_ (0),
    description_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  GraphDefinition_Link_pskel::
  GraphDefinition_Link_pskel (GraphDefinition_Link_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    GraphDefinition_Link_impl_ (impl),
    path_parser_ (0),
    sliceName_parser_ (0),
    min_parser_ (0),
    max_parser_ (0),
    description_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GraphDefinition_Target_pskel
  //

  void GraphDefinition_Target_pskel::
  type_parser (::fhir::code_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void GraphDefinition_Target_pskel::
  params_parser (::fhir::string_pskel& p)
  {
    this->params_parser_ = &p;
  }

  void GraphDefinition_Target_pskel::
  profile_parser (::fhir::canonical_pskel& p)
  {
    this->profile_parser_ = &p;
  }

  void GraphDefinition_Target_pskel::
  compartment_parser (::fhir::GraphDefinition_Compartment_pskel& p)
  {
    this->compartment_parser_ = &p;
  }

  void GraphDefinition_Target_pskel::
  link_parser (::fhir::GraphDefinition_Link_pskel& p)
  {
    this->link_parser_ = &p;
  }

  void GraphDefinition_Target_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& type,
           ::fhir::string_pskel& params,
           ::fhir::canonical_pskel& profile,
           ::fhir::GraphDefinition_Compartment_pskel& compartment,
           ::fhir::GraphDefinition_Link_pskel& link)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->params_parser_ = &params;
    this->profile_parser_ = &profile;
    this->compartment_parser_ = &compartment;
    this->link_parser_ = &link;
  }

  GraphDefinition_Target_pskel::
  GraphDefinition_Target_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    GraphDefinition_Target_impl_ (0),
    type_parser_ (0),
    params_parser_ (0),
    profile_parser_ (0),
    compartment_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  GraphDefinition_Target_pskel::
  GraphDefinition_Target_pskel (GraphDefinition_Target_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    GraphDefinition_Target_impl_ (impl),
    type_parser_ (0),
    params_parser_ (0),
    profile_parser_ (0),
    compartment_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GraphDefinition_Compartment_pskel
  //

  void GraphDefinition_Compartment_pskel::
  use_parser (::fhir::GraphCompartmentUse_pskel& p)
  {
    this->use_parser_ = &p;
  }

  void GraphDefinition_Compartment_pskel::
  code_parser (::fhir::CompartmentType_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void GraphDefinition_Compartment_pskel::
  rule_parser (::fhir::GraphCompartmentRule_pskel& p)
  {
    this->rule_parser_ = &p;
  }

  void GraphDefinition_Compartment_pskel::
  expression_parser (::fhir::string_pskel& p)
  {
    this->expression_parser_ = &p;
  }

  void GraphDefinition_Compartment_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void GraphDefinition_Compartment_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::GraphCompartmentUse_pskel& use,
           ::fhir::CompartmentType_pskel& code,
           ::fhir::GraphCompartmentRule_pskel& rule,
           ::fhir::string_pskel& expression,
           ::fhir::string_pskel& description)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->use_parser_ = &use;
    this->code_parser_ = &code;
    this->rule_parser_ = &rule;
    this->expression_parser_ = &expression;
    this->description_parser_ = &description;
  }

  GraphDefinition_Compartment_pskel::
  GraphDefinition_Compartment_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    GraphDefinition_Compartment_impl_ (0),
    use_parser_ (0),
    code_parser_ (0),
    rule_parser_ (0),
    expression_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  GraphDefinition_Compartment_pskel::
  GraphDefinition_Compartment_pskel (GraphDefinition_Compartment_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    GraphDefinition_Compartment_impl_ (impl),
    use_parser_ (0),
    code_parser_ (0),
    rule_parser_ (0),
    expression_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GraphCompartmentUse_list_pskel
  //

  GraphCompartmentUse_list_pskel::
  GraphCompartmentUse_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    GraphCompartmentUse_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_GraphCompartmentUse_list_pskel_enums_, 2UL);
  }

  GraphCompartmentUse_list_pskel::
  GraphCompartmentUse_list_pskel (GraphCompartmentUse_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    GraphCompartmentUse_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_GraphCompartmentUse_list_pskel_enums_, 2UL);
  }

  // GraphCompartmentUse_pskel
  //

  void GraphCompartmentUse_pskel::
  value_parser (::fhir::GraphCompartmentUse_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void GraphCompartmentUse_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::GraphCompartmentUse_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  GraphCompartmentUse_pskel::
  GraphCompartmentUse_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    GraphCompartmentUse_impl_ (0),
    value_parser_ (0)
  {
  }

  GraphCompartmentUse_pskel::
  GraphCompartmentUse_pskel (GraphCompartmentUse_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    GraphCompartmentUse_impl_ (impl),
    value_parser_ (0)
  {
  }

  // GraphCompartmentRule_list_pskel
  //

  GraphCompartmentRule_list_pskel::
  GraphCompartmentRule_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    GraphCompartmentRule_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_GraphCompartmentRule_list_pskel_enums_, 4UL);
  }

  GraphCompartmentRule_list_pskel::
  GraphCompartmentRule_list_pskel (GraphCompartmentRule_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    GraphCompartmentRule_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_GraphCompartmentRule_list_pskel_enums_, 4UL);
  }

  // GraphCompartmentRule_pskel
  //

  void GraphCompartmentRule_pskel::
  value_parser (::fhir::GraphCompartmentRule_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void GraphCompartmentRule_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::GraphCompartmentRule_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  GraphCompartmentRule_pskel::
  GraphCompartmentRule_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    GraphCompartmentRule_impl_ (0),
    value_parser_ (0)
  {
  }

  GraphCompartmentRule_pskel::
  GraphCompartmentRule_pskel (GraphCompartmentRule_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    GraphCompartmentRule_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // GraphDefinition_pskel
  //

  void GraphDefinition_pskel::
  url ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->url ();
  }

  void GraphDefinition_pskel::
  version ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->version ();
  }

  void GraphDefinition_pskel::
  name ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->name ();
  }

  void GraphDefinition_pskel::
  status ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->status ();
  }

  void GraphDefinition_pskel::
  experimental ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->experimental ();
  }

  void GraphDefinition_pskel::
  date ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->date ();
  }

  void GraphDefinition_pskel::
  publisher ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->publisher ();
  }

  void GraphDefinition_pskel::
  contact ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->contact ();
  }

  void GraphDefinition_pskel::
  description ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->description ();
  }

  void GraphDefinition_pskel::
  useContext ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->useContext ();
  }

  void GraphDefinition_pskel::
  jurisdiction ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->jurisdiction ();
  }

  void GraphDefinition_pskel::
  purpose ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->purpose ();
  }

  void GraphDefinition_pskel::
  start ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->start ();
  }

  void GraphDefinition_pskel::
  profile ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->profile ();
  }

  void GraphDefinition_pskel::
  link ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->link ();
  }

  void GraphDefinition_pskel::
  post_GraphDefinition ()
  {
    if (this->GraphDefinition_impl_)
      this->GraphDefinition_impl_->post_GraphDefinition ();
    else
      post_DomainResource ();
  }

  void GraphDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->start_parser_)
      this->start_parser_->_reset ();

    if (this->profile_parser_)
      this->profile_parser_->_reset ();

    if (this->link_parser_)
      this->link_parser_->_reset ();

    this->resetting_ = false;
  }

  // GraphDefinition_Link_pskel
  //

  void GraphDefinition_Link_pskel::
  path ()
  {
    if (this->GraphDefinition_Link_impl_)
      this->GraphDefinition_Link_impl_->path ();
  }

  void GraphDefinition_Link_pskel::
  sliceName ()
  {
    if (this->GraphDefinition_Link_impl_)
      this->GraphDefinition_Link_impl_->sliceName ();
  }

  void GraphDefinition_Link_pskel::
  min ()
  {
    if (this->GraphDefinition_Link_impl_)
      this->GraphDefinition_Link_impl_->min ();
  }

  void GraphDefinition_Link_pskel::
  max ()
  {
    if (this->GraphDefinition_Link_impl_)
      this->GraphDefinition_Link_impl_->max ();
  }

  void GraphDefinition_Link_pskel::
  description ()
  {
    if (this->GraphDefinition_Link_impl_)
      this->GraphDefinition_Link_impl_->description ();
  }

  void GraphDefinition_Link_pskel::
  target ()
  {
    if (this->GraphDefinition_Link_impl_)
      this->GraphDefinition_Link_impl_->target ();
  }

  void GraphDefinition_Link_pskel::
  post_GraphDefinition_Link ()
  {
    if (this->GraphDefinition_Link_impl_)
      this->GraphDefinition_Link_impl_->post_GraphDefinition_Link ();
    else
      post_BackboneElement ();
  }

  void GraphDefinition_Link_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->path_parser_)
      this->path_parser_->_reset ();

    if (this->sliceName_parser_)
      this->sliceName_parser_->_reset ();

    if (this->min_parser_)
      this->min_parser_->_reset ();

    if (this->max_parser_)
      this->max_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    this->resetting_ = false;
  }

  // GraphDefinition_Target_pskel
  //

  void GraphDefinition_Target_pskel::
  type ()
  {
    if (this->GraphDefinition_Target_impl_)
      this->GraphDefinition_Target_impl_->type ();
  }

  void GraphDefinition_Target_pskel::
  params ()
  {
    if (this->GraphDefinition_Target_impl_)
      this->GraphDefinition_Target_impl_->params ();
  }

  void GraphDefinition_Target_pskel::
  profile ()
  {
    if (this->GraphDefinition_Target_impl_)
      this->GraphDefinition_Target_impl_->profile ();
  }

  void GraphDefinition_Target_pskel::
  compartment ()
  {
    if (this->GraphDefinition_Target_impl_)
      this->GraphDefinition_Target_impl_->compartment ();
  }

  void GraphDefinition_Target_pskel::
  link ()
  {
    if (this->GraphDefinition_Target_impl_)
      this->GraphDefinition_Target_impl_->link ();
  }

  void GraphDefinition_Target_pskel::
  post_GraphDefinition_Target ()
  {
    if (this->GraphDefinition_Target_impl_)
      this->GraphDefinition_Target_impl_->post_GraphDefinition_Target ();
    else
      post_BackboneElement ();
  }

  void GraphDefinition_Target_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->params_parser_)
      this->params_parser_->_reset ();

    if (this->profile_parser_)
      this->profile_parser_->_reset ();

    if (this->compartment_parser_)
      this->compartment_parser_->_reset ();

    if (this->link_parser_)
      this->link_parser_->_reset ();

    this->resetting_ = false;
  }

  // GraphDefinition_Compartment_pskel
  //

  void GraphDefinition_Compartment_pskel::
  use ()
  {
    if (this->GraphDefinition_Compartment_impl_)
      this->GraphDefinition_Compartment_impl_->use ();
  }

  void GraphDefinition_Compartment_pskel::
  code ()
  {
    if (this->GraphDefinition_Compartment_impl_)
      this->GraphDefinition_Compartment_impl_->code ();
  }

  void GraphDefinition_Compartment_pskel::
  rule ()
  {
    if (this->GraphDefinition_Compartment_impl_)
      this->GraphDefinition_Compartment_impl_->rule ();
  }

  void GraphDefinition_Compartment_pskel::
  expression ()
  {
    if (this->GraphDefinition_Compartment_impl_)
      this->GraphDefinition_Compartment_impl_->expression ();
  }

  void GraphDefinition_Compartment_pskel::
  description ()
  {
    if (this->GraphDefinition_Compartment_impl_)
      this->GraphDefinition_Compartment_impl_->description ();
  }

  void GraphDefinition_Compartment_pskel::
  post_GraphDefinition_Compartment ()
  {
    if (this->GraphDefinition_Compartment_impl_)
      this->GraphDefinition_Compartment_impl_->post_GraphDefinition_Compartment ();
    else
      post_BackboneElement ();
  }

  void GraphDefinition_Compartment_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->use_parser_)
      this->use_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->rule_parser_)
      this->rule_parser_->_reset ();

    if (this->expression_parser_)
      this->expression_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    this->resetting_ = false;
  }

  // GraphCompartmentUse_list_pskel
  //

  void GraphCompartmentUse_list_pskel::
  post_GraphCompartmentUse_list ()
  {
    if (this->GraphCompartmentUse_list_impl_)
      this->GraphCompartmentUse_list_impl_->post_GraphCompartmentUse_list ();
    else
      post_code_primitive ();
  }

  const char* const GraphCompartmentUse_list_pskel::_xsde_GraphCompartmentUse_list_pskel_enums_[2UL] = 
  {
    "condition",
    "requirement"
  };

  // GraphCompartmentUse_pskel
  //

  void GraphCompartmentUse_pskel::
  value ()
  {
    if (this->GraphCompartmentUse_impl_)
      this->GraphCompartmentUse_impl_->value ();
  }

  void GraphCompartmentUse_pskel::
  post_GraphCompartmentUse ()
  {
    if (this->GraphCompartmentUse_impl_)
      this->GraphCompartmentUse_impl_->post_GraphCompartmentUse ();
    else
      post_Element ();
  }

  void GraphCompartmentUse_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // GraphCompartmentRule_list_pskel
  //

  void GraphCompartmentRule_list_pskel::
  post_GraphCompartmentRule_list ()
  {
    if (this->GraphCompartmentRule_list_impl_)
      this->GraphCompartmentRule_list_impl_->post_GraphCompartmentRule_list ();
    else
      post_code_primitive ();
  }

  const char* const GraphCompartmentRule_list_pskel::_xsde_GraphCompartmentRule_list_pskel_enums_[4UL] = 
  {
    "custom",
    "different",
    "identical",
    "matching"
  };

  // GraphCompartmentRule_pskel
  //

  void GraphCompartmentRule_pskel::
  value ()
  {
    if (this->GraphCompartmentRule_impl_)
      this->GraphCompartmentRule_impl_->value ();
  }

  void GraphCompartmentRule_pskel::
  post_GraphCompartmentRule ()
  {
    if (this->GraphCompartmentRule_impl_)
      this->GraphCompartmentRule_impl_->post_GraphCompartmentRule ();
    else
      post_Element ();
  }

  void GraphCompartmentRule_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for GraphDefinition_pskel.
  //
  bool GraphDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &GraphDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool GraphDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void GraphDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void GraphDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void GraphDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "start" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->start_parser_)
            {
              this->start_parser_->pre ();
              ctx.nested_parser (this->start_parser_);
            }
          }
          else
          {
            if (this->start_parser_ != 0)
            {
              this->start_parser_->post_code ();
              this->start ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "profile" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->profile_parser_)
            {
              this->profile_parser_->pre ();
              ctx.nested_parser (this->profile_parser_);
            }
          }
          else
          {
            if (this->profile_parser_ != 0)
            {
              this->profile_parser_->post_canonical ();
              this->profile ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "link" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->link_parser_)
            {
              this->link_parser_->pre ();
              ctx.nested_parser (this->link_parser_);
            }
          }
          else
          {
            if (this->link_parser_ != 0)
            {
              this->link_parser_->post_GraphDefinition_Link ();
              this->link ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for GraphDefinition_Link_pskel.
  //
  bool GraphDefinition_Link_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "path" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "sliceName" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "min" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "max" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "target" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &GraphDefinition_Link_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool GraphDefinition_Link_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void GraphDefinition_Link_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void GraphDefinition_Link_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void GraphDefinition_Link_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "path" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->path_parser_)
            {
              this->path_parser_->pre ();
              ctx.nested_parser (this->path_parser_);
            }
          }
          else
          {
            if (this->path_parser_ != 0)
            {
              this->path_parser_->post_string ();
              this->path ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "sliceName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sliceName_parser_)
            {
              this->sliceName_parser_->pre ();
              ctx.nested_parser (this->sliceName_parser_);
            }
          }
          else
          {
            if (this->sliceName_parser_ != 0)
            {
              this->sliceName_parser_->post_string ();
              this->sliceName ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "min" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->min_parser_)
            {
              this->min_parser_->pre ();
              ctx.nested_parser (this->min_parser_);
            }
          }
          else
          {
            if (this->min_parser_ != 0)
            {
              this->min_parser_->post_integer ();
              this->min ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "max" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->max_parser_)
            {
              this->max_parser_->pre ();
              ctx.nested_parser (this->max_parser_);
            }
          }
          else
          {
            if (this->max_parser_ != 0)
            {
              this->max_parser_->post_string ();
              this->max ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_GraphDefinition_Target ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for GraphDefinition_Target_pskel.
  //
  bool GraphDefinition_Target_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &GraphDefinition_Target_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool GraphDefinition_Target_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void GraphDefinition_Target_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void GraphDefinition_Target_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void GraphDefinition_Target_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_code ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "params" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->params_parser_)
            {
              this->params_parser_->pre ();
              ctx.nested_parser (this->params_parser_);
            }
          }
          else
          {
            if (this->params_parser_ != 0)
            {
              this->params_parser_->post_string ();
              this->params ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "profile" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->profile_parser_)
            {
              this->profile_parser_->pre ();
              ctx.nested_parser (this->profile_parser_);
            }
          }
          else
          {
            if (this->profile_parser_ != 0)
            {
              this->profile_parser_->post_canonical ();
              this->profile ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "compartment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->compartment_parser_)
            {
              this->compartment_parser_->pre ();
              ctx.nested_parser (this->compartment_parser_);
            }
          }
          else
          {
            if (this->compartment_parser_ != 0)
            {
              this->compartment_parser_->post_GraphDefinition_Compartment ();
              this->compartment ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "link" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->link_parser_)
            {
              this->link_parser_->pre ();
              ctx.nested_parser (this->link_parser_);
            }
          }
          else
          {
            if (this->link_parser_ != 0)
            {
              this->link_parser_->post_GraphDefinition_Link ();
              this->link ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for GraphDefinition_Compartment_pskel.
  //
  bool GraphDefinition_Compartment_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "use" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &GraphDefinition_Compartment_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool GraphDefinition_Compartment_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void GraphDefinition_Compartment_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void GraphDefinition_Compartment_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void GraphDefinition_Compartment_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "use" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->use_parser_)
            {
              this->use_parser_->pre ();
              ctx.nested_parser (this->use_parser_);
            }
          }
          else
          {
            if (this->use_parser_ != 0)
            {
              this->use_parser_->post_GraphCompartmentUse ();
              this->use ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CompartmentType ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "rule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rule_parser_)
            {
              this->rule_parser_->pre ();
              ctx.nested_parser (this->rule_parser_);
            }
          }
          else
          {
            if (this->rule_parser_ != 0)
            {
              this->rule_parser_->post_GraphCompartmentRule ();
              this->rule ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "expression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expression_parser_)
            {
              this->expression_parser_->pre ();
              ctx.nested_parser (this->expression_parser_);
            }
          }
          else
          {
            if (this->expression_parser_ != 0)
            {
              this->expression_parser_->post_string ();
              this->expression ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for GraphCompartmentUse_pskel.
  //
  bool GraphCompartmentUse_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_GraphCompartmentUse_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for GraphCompartmentRule_pskel.
  //
  bool GraphCompartmentRule_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_GraphCompartmentRule_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

