// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef VERIFICATIONRESULT_PSKEL_HXX
#define VERIFICATIONRESULT_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class VerificationResult_pskel;
  class VerificationResult_PrimarySource_pskel;
  class VerificationResult_Attestation_pskel;
  class VerificationResult_Validator_pskel;
  class status_list_pskel;
  class status_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class VerificationResult_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    target ();

    virtual void
    targetLocation ();

    virtual void
    need ();

    virtual void
    status ();

    virtual void
    statusDate ();

    virtual void
    validationType ();

    virtual void
    validationProcess ();

    virtual void
    frequency ();

    virtual void
    lastPerformed ();

    virtual void
    nextScheduled ();

    virtual void
    failureAction ();

    virtual void
    primarySource ();

    virtual void
    attestation ();

    virtual void
    validator ();

    virtual void
    post_VerificationResult ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* target */,
             ::fhir::string_pskel& /* targetLocation */,
             ::fhir::CodeableConcept_pskel& /* need */,
             ::fhir::status_pskel& /* status */,
             ::fhir::dateTime_pskel& /* statusDate */,
             ::fhir::CodeableConcept_pskel& /* validationType */,
             ::fhir::CodeableConcept_pskel& /* validationProcess */,
             ::fhir::Timing_pskel& /* frequency */,
             ::fhir::dateTime_pskel& /* lastPerformed */,
             ::fhir::date_pskel& /* nextScheduled */,
             ::fhir::CodeableConcept_pskel& /* failureAction */,
             ::fhir::VerificationResult_PrimarySource_pskel& /* primarySource */,
             ::fhir::VerificationResult_Attestation_pskel& /* attestation */,
             ::fhir::VerificationResult_Validator_pskel& /* validator */);

    // Individual element parsers.
    //
    void
    target_parser (::fhir::Reference_pskel&);

    void
    targetLocation_parser (::fhir::string_pskel&);

    void
    need_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::status_pskel&);

    void
    statusDate_parser (::fhir::dateTime_pskel&);

    void
    validationType_parser (::fhir::CodeableConcept_pskel&);

    void
    validationProcess_parser (::fhir::CodeableConcept_pskel&);

    void
    frequency_parser (::fhir::Timing_pskel&);

    void
    lastPerformed_parser (::fhir::dateTime_pskel&);

    void
    nextScheduled_parser (::fhir::date_pskel&);

    void
    failureAction_parser (::fhir::CodeableConcept_pskel&);

    void
    primarySource_parser (::fhir::VerificationResult_PrimarySource_pskel&);

    void
    attestation_parser (::fhir::VerificationResult_Attestation_pskel&);

    void
    validator_parser (::fhir::VerificationResult_Validator_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_pskel* VerificationResult_impl_;
    VerificationResult_pskel (VerificationResult_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* target_parser_;
    ::fhir::string_pskel* targetLocation_parser_;
    ::fhir::CodeableConcept_pskel* need_parser_;
    ::fhir::status_pskel* status_parser_;
    ::fhir::dateTime_pskel* statusDate_parser_;
    ::fhir::CodeableConcept_pskel* validationType_parser_;
    ::fhir::CodeableConcept_pskel* validationProcess_parser_;
    ::fhir::Timing_pskel* frequency_parser_;
    ::fhir::dateTime_pskel* lastPerformed_parser_;
    ::fhir::date_pskel* nextScheduled_parser_;
    ::fhir::CodeableConcept_pskel* failureAction_parser_;
    ::fhir::VerificationResult_PrimarySource_pskel* primarySource_parser_;
    ::fhir::VerificationResult_Attestation_pskel* attestation_parser_;
    ::fhir::VerificationResult_Validator_pskel* validator_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VerificationResult_PrimarySource_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    who ();

    virtual void
    type ();

    virtual void
    communicationMethod ();

    virtual void
    validationStatus ();

    virtual void
    validationDate ();

    virtual void
    canPushUpdates ();

    virtual void
    pushTypeAvailable ();

    virtual void
    post_VerificationResult_PrimarySource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* communicationMethod */,
             ::fhir::CodeableConcept_pskel& /* validationStatus */,
             ::fhir::dateTime_pskel& /* validationDate */,
             ::fhir::CodeableConcept_pskel& /* canPushUpdates */,
             ::fhir::CodeableConcept_pskel& /* pushTypeAvailable */);

    // Individual element parsers.
    //
    void
    who_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    communicationMethod_parser (::fhir::CodeableConcept_pskel&);

    void
    validationStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    validationDate_parser (::fhir::dateTime_pskel&);

    void
    canPushUpdates_parser (::fhir::CodeableConcept_pskel&);

    void
    pushTypeAvailable_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_PrimarySource_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_PrimarySource_pskel* VerificationResult_PrimarySource_impl_;
    VerificationResult_PrimarySource_pskel (VerificationResult_PrimarySource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* communicationMethod_parser_;
    ::fhir::CodeableConcept_pskel* validationStatus_parser_;
    ::fhir::dateTime_pskel* validationDate_parser_;
    ::fhir::CodeableConcept_pskel* canPushUpdates_parser_;
    ::fhir::CodeableConcept_pskel* pushTypeAvailable_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_PrimarySource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VerificationResult_Attestation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    who ();

    virtual void
    onBehalfOf ();

    virtual void
    communicationMethod ();

    virtual void
    date ();

    virtual void
    sourceIdentityCertificate ();

    virtual void
    proxyIdentityCertificate ();

    virtual void
    proxySignature ();

    virtual void
    sourceSignature ();

    virtual void
    post_VerificationResult_Attestation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::Reference_pskel& /* onBehalfOf */,
             ::fhir::CodeableConcept_pskel& /* communicationMethod */,
             ::fhir::date_pskel& /* date */,
             ::fhir::string_pskel& /* sourceIdentityCertificate */,
             ::fhir::string_pskel& /* proxyIdentityCertificate */,
             ::fhir::Signature_pskel& /* proxySignature */,
             ::fhir::Signature_pskel& /* sourceSignature */);

    // Individual element parsers.
    //
    void
    who_parser (::fhir::Reference_pskel&);

    void
    onBehalfOf_parser (::fhir::Reference_pskel&);

    void
    communicationMethod_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::date_pskel&);

    void
    sourceIdentityCertificate_parser (::fhir::string_pskel&);

    void
    proxyIdentityCertificate_parser (::fhir::string_pskel&);

    void
    proxySignature_parser (::fhir::Signature_pskel&);

    void
    sourceSignature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_Attestation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_Attestation_pskel* VerificationResult_Attestation_impl_;
    VerificationResult_Attestation_pskel (VerificationResult_Attestation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::Reference_pskel* onBehalfOf_parser_;
    ::fhir::CodeableConcept_pskel* communicationMethod_parser_;
    ::fhir::date_pskel* date_parser_;
    ::fhir::string_pskel* sourceIdentityCertificate_parser_;
    ::fhir::string_pskel* proxyIdentityCertificate_parser_;
    ::fhir::Signature_pskel* proxySignature_parser_;
    ::fhir::Signature_pskel* sourceSignature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_Attestation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VerificationResult_Validator_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    organization ();

    virtual void
    identityCertificate ();

    virtual void
    attestationSignature ();

    virtual void
    post_VerificationResult_Validator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* organization */,
             ::fhir::string_pskel& /* identityCertificate */,
             ::fhir::Signature_pskel& /* attestationSignature */);

    // Individual element parsers.
    //
    void
    organization_parser (::fhir::Reference_pskel&);

    void
    identityCertificate_parser (::fhir::string_pskel&);

    void
    attestationSignature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_Validator_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_Validator_pskel* VerificationResult_Validator_impl_;
    VerificationResult_Validator_pskel (VerificationResult_Validator_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* organization_parser_;
    ::fhir::string_pskel* identityCertificate_parser_;
    ::fhir::Signature_pskel* attestationSignature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_Validator_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class status_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_status_list ();

    // Constructor.
    //
    status_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    status_list_pskel* status_list_impl_;
    status_list_pskel (status_list_pskel*, void*);

    protected:
    static const char* const _xsde_status_list_pskel_enums_[6UL];
  };

  class status_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_status ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::status_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::status_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    status_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    status_pskel* status_impl_;
    status_pskel (status_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::status_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VERIFICATIONRESULT_PSKEL_HXX
