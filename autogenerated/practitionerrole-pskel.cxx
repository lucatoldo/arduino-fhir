// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "practitionerrole-pskel.hxx"

namespace fhir
{
  // PractitionerRole_pskel
  //

  void PractitionerRole_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void PractitionerRole_pskel::
  active_parser (::fhir::boolean_pskel& p)
  {
    this->active_parser_ = &p;
  }

  void PractitionerRole_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void PractitionerRole_pskel::
  practitioner_parser (::fhir::Reference_pskel& p)
  {
    this->practitioner_parser_ = &p;
  }

  void PractitionerRole_pskel::
  organization_parser (::fhir::Reference_pskel& p)
  {
    this->organization_parser_ = &p;
  }

  void PractitionerRole_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void PractitionerRole_pskel::
  specialty_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->specialty_parser_ = &p;
  }

  void PractitionerRole_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void PractitionerRole_pskel::
  healthcareService_parser (::fhir::Reference_pskel& p)
  {
    this->healthcareService_parser_ = &p;
  }

  void PractitionerRole_pskel::
  telecom_parser (::fhir::ContactPoint_pskel& p)
  {
    this->telecom_parser_ = &p;
  }

  void PractitionerRole_pskel::
  availableTime_parser (::fhir::PractitionerRole_AvailableTime_pskel& p)
  {
    this->availableTime_parser_ = &p;
  }

  void PractitionerRole_pskel::
  notAvailable_parser (::fhir::PractitionerRole_NotAvailable_pskel& p)
  {
    this->notAvailable_parser_ = &p;
  }

  void PractitionerRole_pskel::
  availabilityExceptions_parser (::fhir::string_pskel& p)
  {
    this->availabilityExceptions_parser_ = &p;
  }

  void PractitionerRole_pskel::
  endpoint_parser (::fhir::Reference_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void PractitionerRole_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::boolean_pskel& active,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& practitioner,
           ::fhir::Reference_pskel& organization,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& specialty,
           ::fhir::Reference_pskel& location,
           ::fhir::Reference_pskel& healthcareService,
           ::fhir::ContactPoint_pskel& telecom,
           ::fhir::PractitionerRole_AvailableTime_pskel& availableTime,
           ::fhir::PractitionerRole_NotAvailable_pskel& notAvailable,
           ::fhir::string_pskel& availabilityExceptions,
           ::fhir::Reference_pskel& endpoint)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->active_parser_ = &active;
    this->period_parser_ = &period;
    this->practitioner_parser_ = &practitioner;
    this->organization_parser_ = &organization;
    this->code_parser_ = &code;
    this->specialty_parser_ = &specialty;
    this->location_parser_ = &location;
    this->healthcareService_parser_ = &healthcareService;
    this->telecom_parser_ = &telecom;
    this->availableTime_parser_ = &availableTime;
    this->notAvailable_parser_ = &notAvailable;
    this->availabilityExceptions_parser_ = &availabilityExceptions;
    this->endpoint_parser_ = &endpoint;
  }

  PractitionerRole_pskel::
  PractitionerRole_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    PractitionerRole_impl_ (0),
    identifier_parser_ (0),
    active_parser_ (0),
    period_parser_ (0),
    practitioner_parser_ (0),
    organization_parser_ (0),
    code_parser_ (0),
    specialty_parser_ (0),
    location_parser_ (0),
    healthcareService_parser_ (0),
    telecom_parser_ (0),
    availableTime_parser_ (0),
    notAvailable_parser_ (0),
    availabilityExceptions_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PractitionerRole_pskel::
  PractitionerRole_pskel (PractitionerRole_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    PractitionerRole_impl_ (impl),
    identifier_parser_ (0),
    active_parser_ (0),
    period_parser_ (0),
    practitioner_parser_ (0),
    organization_parser_ (0),
    code_parser_ (0),
    specialty_parser_ (0),
    location_parser_ (0),
    healthcareService_parser_ (0),
    telecom_parser_ (0),
    availableTime_parser_ (0),
    notAvailable_parser_ (0),
    availabilityExceptions_parser_ (0),
    endpoint_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PractitionerRole_AvailableTime_pskel
  //

  void PractitionerRole_AvailableTime_pskel::
  daysOfWeek_parser (::fhir::DaysOfWeek_pskel& p)
  {
    this->daysOfWeek_parser_ = &p;
  }

  void PractitionerRole_AvailableTime_pskel::
  allDay_parser (::fhir::boolean_pskel& p)
  {
    this->allDay_parser_ = &p;
  }

  void PractitionerRole_AvailableTime_pskel::
  availableStartTime_parser (::fhir::time_pskel& p)
  {
    this->availableStartTime_parser_ = &p;
  }

  void PractitionerRole_AvailableTime_pskel::
  availableEndTime_parser (::fhir::time_pskel& p)
  {
    this->availableEndTime_parser_ = &p;
  }

  void PractitionerRole_AvailableTime_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::DaysOfWeek_pskel& daysOfWeek,
           ::fhir::boolean_pskel& allDay,
           ::fhir::time_pskel& availableStartTime,
           ::fhir::time_pskel& availableEndTime)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->daysOfWeek_parser_ = &daysOfWeek;
    this->allDay_parser_ = &allDay;
    this->availableStartTime_parser_ = &availableStartTime;
    this->availableEndTime_parser_ = &availableEndTime;
  }

  PractitionerRole_AvailableTime_pskel::
  PractitionerRole_AvailableTime_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PractitionerRole_AvailableTime_impl_ (0),
    daysOfWeek_parser_ (0),
    allDay_parser_ (0),
    availableStartTime_parser_ (0),
    availableEndTime_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PractitionerRole_AvailableTime_pskel::
  PractitionerRole_AvailableTime_pskel (PractitionerRole_AvailableTime_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PractitionerRole_AvailableTime_impl_ (impl),
    daysOfWeek_parser_ (0),
    allDay_parser_ (0),
    availableStartTime_parser_ (0),
    availableEndTime_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // PractitionerRole_NotAvailable_pskel
  //

  void PractitionerRole_NotAvailable_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void PractitionerRole_NotAvailable_pskel::
  during_parser (::fhir::Period_pskel& p)
  {
    this->during_parser_ = &p;
  }

  void PractitionerRole_NotAvailable_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::Period_pskel& during)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->during_parser_ = &during;
  }

  PractitionerRole_NotAvailable_pskel::
  PractitionerRole_NotAvailable_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    PractitionerRole_NotAvailable_impl_ (0),
    description_parser_ (0),
    during_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  PractitionerRole_NotAvailable_pskel::
  PractitionerRole_NotAvailable_pskel (PractitionerRole_NotAvailable_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    PractitionerRole_NotAvailable_impl_ (impl),
    description_parser_ (0),
    during_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // PractitionerRole_pskel
  //

  void PractitionerRole_pskel::
  identifier ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->identifier ();
  }

  void PractitionerRole_pskel::
  active ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->active ();
  }

  void PractitionerRole_pskel::
  period ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->period ();
  }

  void PractitionerRole_pskel::
  practitioner ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->practitioner ();
  }

  void PractitionerRole_pskel::
  organization ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->organization ();
  }

  void PractitionerRole_pskel::
  code ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->code ();
  }

  void PractitionerRole_pskel::
  specialty ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->specialty ();
  }

  void PractitionerRole_pskel::
  location ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->location ();
  }

  void PractitionerRole_pskel::
  healthcareService ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->healthcareService ();
  }

  void PractitionerRole_pskel::
  telecom ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->telecom ();
  }

  void PractitionerRole_pskel::
  availableTime ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->availableTime ();
  }

  void PractitionerRole_pskel::
  notAvailable ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->notAvailable ();
  }

  void PractitionerRole_pskel::
  availabilityExceptions ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->availabilityExceptions ();
  }

  void PractitionerRole_pskel::
  endpoint ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->endpoint ();
  }

  void PractitionerRole_pskel::
  post_PractitionerRole ()
  {
    if (this->PractitionerRole_impl_)
      this->PractitionerRole_impl_->post_PractitionerRole ();
    else
      post_DomainResource ();
  }

  void PractitionerRole_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->active_parser_)
      this->active_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->practitioner_parser_)
      this->practitioner_parser_->_reset ();

    if (this->organization_parser_)
      this->organization_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->specialty_parser_)
      this->specialty_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->healthcareService_parser_)
      this->healthcareService_parser_->_reset ();

    if (this->telecom_parser_)
      this->telecom_parser_->_reset ();

    if (this->availableTime_parser_)
      this->availableTime_parser_->_reset ();

    if (this->notAvailable_parser_)
      this->notAvailable_parser_->_reset ();

    if (this->availabilityExceptions_parser_)
      this->availabilityExceptions_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    this->resetting_ = false;
  }

  // PractitionerRole_AvailableTime_pskel
  //

  void PractitionerRole_AvailableTime_pskel::
  daysOfWeek ()
  {
    if (this->PractitionerRole_AvailableTime_impl_)
      this->PractitionerRole_AvailableTime_impl_->daysOfWeek ();
  }

  void PractitionerRole_AvailableTime_pskel::
  allDay ()
  {
    if (this->PractitionerRole_AvailableTime_impl_)
      this->PractitionerRole_AvailableTime_impl_->allDay ();
  }

  void PractitionerRole_AvailableTime_pskel::
  availableStartTime ()
  {
    if (this->PractitionerRole_AvailableTime_impl_)
      this->PractitionerRole_AvailableTime_impl_->availableStartTime ();
  }

  void PractitionerRole_AvailableTime_pskel::
  availableEndTime ()
  {
    if (this->PractitionerRole_AvailableTime_impl_)
      this->PractitionerRole_AvailableTime_impl_->availableEndTime ();
  }

  void PractitionerRole_AvailableTime_pskel::
  post_PractitionerRole_AvailableTime ()
  {
    if (this->PractitionerRole_AvailableTime_impl_)
      this->PractitionerRole_AvailableTime_impl_->post_PractitionerRole_AvailableTime ();
    else
      post_BackboneElement ();
  }

  void PractitionerRole_AvailableTime_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->daysOfWeek_parser_)
      this->daysOfWeek_parser_->_reset ();

    if (this->allDay_parser_)
      this->allDay_parser_->_reset ();

    if (this->availableStartTime_parser_)
      this->availableStartTime_parser_->_reset ();

    if (this->availableEndTime_parser_)
      this->availableEndTime_parser_->_reset ();

    this->resetting_ = false;
  }

  // PractitionerRole_NotAvailable_pskel
  //

  void PractitionerRole_NotAvailable_pskel::
  description ()
  {
    if (this->PractitionerRole_NotAvailable_impl_)
      this->PractitionerRole_NotAvailable_impl_->description ();
  }

  void PractitionerRole_NotAvailable_pskel::
  during ()
  {
    if (this->PractitionerRole_NotAvailable_impl_)
      this->PractitionerRole_NotAvailable_impl_->during ();
  }

  void PractitionerRole_NotAvailable_pskel::
  post_PractitionerRole_NotAvailable ()
  {
    if (this->PractitionerRole_NotAvailable_impl_)
      this->PractitionerRole_NotAvailable_impl_->post_PractitionerRole_NotAvailable ();
    else
      post_BackboneElement ();
  }

  void PractitionerRole_NotAvailable_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->during_parser_)
      this->during_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for PractitionerRole_pskel.
  //
  bool PractitionerRole_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "active" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "practitioner" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "organization" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "specialty" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "location" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "healthcareService" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "telecom" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "availableTime" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "notAvailable" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "availabilityExceptions" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "endpoint" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PractitionerRole_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PractitionerRole_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PractitionerRole_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void PractitionerRole_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void PractitionerRole_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "active" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->active_parser_)
            {
              this->active_parser_->pre ();
              ctx.nested_parser (this->active_parser_);
            }
          }
          else
          {
            if (this->active_parser_ != 0)
            {
              this->active_parser_->post_boolean ();
              this->active ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "practitioner" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->practitioner_parser_)
            {
              this->practitioner_parser_->pre ();
              ctx.nested_parser (this->practitioner_parser_);
            }
          }
          else
          {
            if (this->practitioner_parser_ != 0)
            {
              this->practitioner_parser_->post_Reference ();
              this->practitioner ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "organization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organization_parser_)
            {
              this->organization_parser_->pre ();
              ctx.nested_parser (this->organization_parser_);
            }
          }
          else
          {
            if (this->organization_parser_ != 0)
            {
              this->organization_parser_->post_Reference ();
              this->organization ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "specialty" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specialty_parser_)
            {
              this->specialty_parser_->pre ();
              ctx.nested_parser (this->specialty_parser_);
            }
          }
          else
          {
            if (this->specialty_parser_ != 0)
            {
              this->specialty_parser_->post_CodeableConcept ();
              this->specialty ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "healthcareService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->healthcareService_parser_)
            {
              this->healthcareService_parser_->pre ();
              ctx.nested_parser (this->healthcareService_parser_);
            }
          }
          else
          {
            if (this->healthcareService_parser_ != 0)
            {
              this->healthcareService_parser_->post_Reference ();
              this->healthcareService ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "telecom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->telecom_parser_)
            {
              this->telecom_parser_->pre ();
              ctx.nested_parser (this->telecom_parser_);
            }
          }
          else
          {
            if (this->telecom_parser_ != 0)
            {
              this->telecom_parser_->post_ContactPoint ();
              this->telecom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "availableTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availableTime_parser_)
            {
              this->availableTime_parser_->pre ();
              ctx.nested_parser (this->availableTime_parser_);
            }
          }
          else
          {
            if (this->availableTime_parser_ != 0)
            {
              this->availableTime_parser_->post_PractitionerRole_AvailableTime ();
              this->availableTime ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "notAvailable" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->notAvailable_parser_)
            {
              this->notAvailable_parser_->pre ();
              ctx.nested_parser (this->notAvailable_parser_);
            }
          }
          else
          {
            if (this->notAvailable_parser_ != 0)
            {
              this->notAvailable_parser_->post_PractitionerRole_NotAvailable ();
              this->notAvailable ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "availabilityExceptions" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availabilityExceptions_parser_)
            {
              this->availabilityExceptions_parser_->pre ();
              ctx.nested_parser (this->availabilityExceptions_parser_);
            }
          }
          else
          {
            if (this->availabilityExceptions_parser_ != 0)
            {
              this->availabilityExceptions_parser_->post_string ();
              this->availabilityExceptions ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_Reference ();
              this->endpoint ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PractitionerRole_AvailableTime_pskel.
  //
  bool PractitionerRole_AvailableTime_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "daysOfWeek" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "allDay" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "availableStartTime" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "availableEndTime" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PractitionerRole_AvailableTime_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PractitionerRole_AvailableTime_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PractitionerRole_AvailableTime_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PractitionerRole_AvailableTime_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void PractitionerRole_AvailableTime_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "daysOfWeek" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->daysOfWeek_parser_)
            {
              this->daysOfWeek_parser_->pre ();
              ctx.nested_parser (this->daysOfWeek_parser_);
            }
          }
          else
          {
            if (this->daysOfWeek_parser_ != 0)
            {
              this->daysOfWeek_parser_->post_DaysOfWeek ();
              this->daysOfWeek ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "allDay" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allDay_parser_)
            {
              this->allDay_parser_->pre ();
              ctx.nested_parser (this->allDay_parser_);
            }
          }
          else
          {
            if (this->allDay_parser_ != 0)
            {
              this->allDay_parser_->post_boolean ();
              this->allDay ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "availableStartTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availableStartTime_parser_)
            {
              this->availableStartTime_parser_->pre ();
              ctx.nested_parser (this->availableStartTime_parser_);
            }
          }
          else
          {
            if (this->availableStartTime_parser_ != 0)
            {
              this->availableStartTime_parser_->post_time ();
              this->availableStartTime ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "availableEndTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->availableEndTime_parser_)
            {
              this->availableEndTime_parser_->pre ();
              ctx.nested_parser (this->availableEndTime_parser_);
            }
          }
          else
          {
            if (this->availableEndTime_parser_ != 0)
            {
              this->availableEndTime_parser_->post_time ();
              this->availableEndTime ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PractitionerRole_NotAvailable_pskel.
  //
  bool PractitionerRole_NotAvailable_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PractitionerRole_NotAvailable_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PractitionerRole_NotAvailable_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PractitionerRole_NotAvailable_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void PractitionerRole_NotAvailable_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void PractitionerRole_NotAvailable_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "during" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->during_parser_)
            {
              this->during_parser_->pre ();
              ctx.nested_parser (this->during_parser_);
            }
          }
          else
          {
            if (this->during_parser_ != 0)
            {
              this->during_parser_->post_Period ();
              this->during ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

