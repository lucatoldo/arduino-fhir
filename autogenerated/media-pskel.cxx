// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "media-pskel.hxx"

namespace fhir
{
  // Media_pskel
  //

  void Media_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Media_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void Media_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void Media_pskel::
  status_parser (::fhir::EventStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Media_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Media_pskel::
  modality_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modality_parser_ = &p;
  }

  void Media_pskel::
  view_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->view_parser_ = &p;
  }

  void Media_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Media_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void Media_pskel::
  createdDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->createdDateTime_parser_ = &p;
  }

  void Media_pskel::
  createdPeriod_parser (::fhir::Period_pskel& p)
  {
    this->createdPeriod_parser_ = &p;
  }

  void Media_pskel::
  issued_parser (::fhir::instant_pskel& p)
  {
    this->issued_parser_ = &p;
  }

  void Media_pskel::
  operator__parser (::fhir::Reference_pskel& p)
  {
    this->operator__parser_ = &p;
  }

  void Media_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Media_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void Media_pskel::
  deviceName_parser (::fhir::string_pskel& p)
  {
    this->deviceName_parser_ = &p;
  }

  void Media_pskel::
  device_parser (::fhir::Reference_pskel& p)
  {
    this->device_parser_ = &p;
  }

  void Media_pskel::
  height_parser (::fhir::positiveInt_pskel& p)
  {
    this->height_parser_ = &p;
  }

  void Media_pskel::
  width_parser (::fhir::positiveInt_pskel& p)
  {
    this->width_parser_ = &p;
  }

  void Media_pskel::
  frames_parser (::fhir::positiveInt_pskel& p)
  {
    this->frames_parser_ = &p;
  }

  void Media_pskel::
  duration_parser (::fhir::decimal_pskel& p)
  {
    this->duration_parser_ = &p;
  }

  void Media_pskel::
  content_parser (::fhir::Attachment_pskel& p)
  {
    this->content_parser_ = &p;
  }

  void Media_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Media_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& partOf,
           ::fhir::EventStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& modality,
           ::fhir::CodeableConcept_pskel& view,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& createdDateTime,
           ::fhir::Period_pskel& createdPeriod,
           ::fhir::instant_pskel& issued,
           ::fhir::Reference_pskel& operator_,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::string_pskel& deviceName,
           ::fhir::Reference_pskel& device,
           ::fhir::positiveInt_pskel& height,
           ::fhir::positiveInt_pskel& width,
           ::fhir::positiveInt_pskel& frames,
           ::fhir::decimal_pskel& duration,
           ::fhir::Attachment_pskel& content,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->basedOn_parser_ = &basedOn;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->modality_parser_ = &modality;
    this->view_parser_ = &view;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->createdDateTime_parser_ = &createdDateTime;
    this->createdPeriod_parser_ = &createdPeriod;
    this->issued_parser_ = &issued;
    this->operator__parser_ = &operator_;
    this->reasonCode_parser_ = &reasonCode;
    this->bodySite_parser_ = &bodySite;
    this->deviceName_parser_ = &deviceName;
    this->device_parser_ = &device;
    this->height_parser_ = &height;
    this->width_parser_ = &width;
    this->frames_parser_ = &frames;
    this->duration_parser_ = &duration;
    this->content_parser_ = &content;
    this->note_parser_ = &note;
  }

  Media_pskel::
  Media_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Media_impl_ (0),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    modality_parser_ (0),
    view_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    createdDateTime_parser_ (0),
    createdPeriod_parser_ (0),
    issued_parser_ (0),
    operator__parser_ (0),
    reasonCode_parser_ (0),
    bodySite_parser_ (0),
    deviceName_parser_ (0),
    device_parser_ (0),
    height_parser_ (0),
    width_parser_ (0),
    frames_parser_ (0),
    duration_parser_ (0),
    content_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Media_pskel::
  Media_pskel (Media_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Media_impl_ (impl),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    modality_parser_ (0),
    view_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    createdDateTime_parser_ (0),
    createdPeriod_parser_ (0),
    issued_parser_ (0),
    operator__parser_ (0),
    reasonCode_parser_ (0),
    bodySite_parser_ (0),
    deviceName_parser_ (0),
    device_parser_ (0),
    height_parser_ (0),
    width_parser_ (0),
    frames_parser_ (0),
    duration_parser_ (0),
    content_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Media_pskel
  //

  void Media_pskel::
  identifier ()
  {
    if (this->Media_impl_)
      this->Media_impl_->identifier ();
  }

  void Media_pskel::
  basedOn ()
  {
    if (this->Media_impl_)
      this->Media_impl_->basedOn ();
  }

  void Media_pskel::
  partOf ()
  {
    if (this->Media_impl_)
      this->Media_impl_->partOf ();
  }

  void Media_pskel::
  status ()
  {
    if (this->Media_impl_)
      this->Media_impl_->status ();
  }

  void Media_pskel::
  type ()
  {
    if (this->Media_impl_)
      this->Media_impl_->type ();
  }

  void Media_pskel::
  modality ()
  {
    if (this->Media_impl_)
      this->Media_impl_->modality ();
  }

  void Media_pskel::
  view ()
  {
    if (this->Media_impl_)
      this->Media_impl_->view ();
  }

  void Media_pskel::
  subject ()
  {
    if (this->Media_impl_)
      this->Media_impl_->subject ();
  }

  void Media_pskel::
  encounter ()
  {
    if (this->Media_impl_)
      this->Media_impl_->encounter ();
  }

  void Media_pskel::
  createdDateTime ()
  {
    if (this->Media_impl_)
      this->Media_impl_->createdDateTime ();
  }

  void Media_pskel::
  createdPeriod ()
  {
    if (this->Media_impl_)
      this->Media_impl_->createdPeriod ();
  }

  void Media_pskel::
  issued ()
  {
    if (this->Media_impl_)
      this->Media_impl_->issued ();
  }

  void Media_pskel::
  operator_ ()
  {
    if (this->Media_impl_)
      this->Media_impl_->operator_ ();
  }

  void Media_pskel::
  reasonCode ()
  {
    if (this->Media_impl_)
      this->Media_impl_->reasonCode ();
  }

  void Media_pskel::
  bodySite ()
  {
    if (this->Media_impl_)
      this->Media_impl_->bodySite ();
  }

  void Media_pskel::
  deviceName ()
  {
    if (this->Media_impl_)
      this->Media_impl_->deviceName ();
  }

  void Media_pskel::
  device ()
  {
    if (this->Media_impl_)
      this->Media_impl_->device ();
  }

  void Media_pskel::
  height ()
  {
    if (this->Media_impl_)
      this->Media_impl_->height ();
  }

  void Media_pskel::
  width ()
  {
    if (this->Media_impl_)
      this->Media_impl_->width ();
  }

  void Media_pskel::
  frames ()
  {
    if (this->Media_impl_)
      this->Media_impl_->frames ();
  }

  void Media_pskel::
  duration ()
  {
    if (this->Media_impl_)
      this->Media_impl_->duration ();
  }

  void Media_pskel::
  content ()
  {
    if (this->Media_impl_)
      this->Media_impl_->content ();
  }

  void Media_pskel::
  note ()
  {
    if (this->Media_impl_)
      this->Media_impl_->note ();
  }

  void Media_pskel::
  post_Media ()
  {
    if (this->Media_impl_)
      this->Media_impl_->post_Media ();
    else
      post_DomainResource ();
  }

  void Media_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->modality_parser_)
      this->modality_parser_->_reset ();

    if (this->view_parser_)
      this->view_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->createdDateTime_parser_)
      this->createdDateTime_parser_->_reset ();

    if (this->createdPeriod_parser_)
      this->createdPeriod_parser_->_reset ();

    if (this->issued_parser_)
      this->issued_parser_->_reset ();

    if (this->operator__parser_)
      this->operator__parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->deviceName_parser_)
      this->deviceName_parser_->_reset ();

    if (this->device_parser_)
      this->device_parser_->_reset ();

    if (this->height_parser_)
      this->height_parser_->_reset ();

    if (this->width_parser_)
      this->width_parser_->_reset ();

    if (this->frames_parser_)
      this->frames_parser_->_reset ();

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    if (this->content_parser_)
      this->content_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Media_pskel.
  //
  bool Media_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Media_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Media_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Media_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Media_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Media_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EventStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "modality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modality_parser_)
            {
              this->modality_parser_->pre ();
              ctx.nested_parser (this->modality_parser_);
            }
          }
          else
          {
            if (this->modality_parser_ != 0)
            {
              this->modality_parser_->post_CodeableConcept ();
              this->modality ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "view" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->view_parser_)
            {
              this->view_parser_->pre ();
              ctx.nested_parser (this->view_parser_);
            }
          }
          else
          {
            if (this->view_parser_ != 0)
            {
              this->view_parser_->post_CodeableConcept ();
              this->view ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "createdDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->createdDateTime_parser_)
            {
              this->createdDateTime_parser_->pre ();
              ctx.nested_parser (this->createdDateTime_parser_);
            }
          }
          else
          {
            if (this->createdDateTime_parser_ != 0)
            {
              this->createdDateTime_parser_->post_dateTime ();
              this->createdDateTime ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "createdPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->createdPeriod_parser_)
            {
              this->createdPeriod_parser_->pre ();
              ctx.nested_parser (this->createdPeriod_parser_);
            }
          }
          else
          {
            if (this->createdPeriod_parser_ != 0)
            {
              this->createdPeriod_parser_->post_Period ();
              this->createdPeriod ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "issued" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issued_parser_)
            {
              this->issued_parser_->pre ();
              ctx.nested_parser (this->issued_parser_);
            }
          }
          else
          {
            if (this->issued_parser_ != 0)
            {
              this->issued_parser_->post_instant ();
              this->issued ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "operator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->operator__parser_)
            {
              this->operator__parser_->pre ();
              ctx.nested_parser (this->operator__parser_);
            }
          }
          else
          {
            if (this->operator__parser_ != 0)
            {
              this->operator__parser_->post_Reference ();
              this->operator_ ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "deviceName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deviceName_parser_)
            {
              this->deviceName_parser_->pre ();
              ctx.nested_parser (this->deviceName_parser_);
            }
          }
          else
          {
            if (this->deviceName_parser_ != 0)
            {
              this->deviceName_parser_->post_string ();
              this->deviceName ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "device" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->device_parser_)
            {
              this->device_parser_->pre ();
              ctx.nested_parser (this->device_parser_);
            }
          }
          else
          {
            if (this->device_parser_ != 0)
            {
              this->device_parser_->post_Reference ();
              this->device ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "height" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->height_parser_)
            {
              this->height_parser_->pre ();
              ctx.nested_parser (this->height_parser_);
            }
          }
          else
          {
            if (this->height_parser_ != 0)
            {
              this->height_parser_->post_positiveInt ();
              this->height ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "width" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->width_parser_)
            {
              this->width_parser_->pre ();
              ctx.nested_parser (this->width_parser_);
            }
          }
          else
          {
            if (this->width_parser_ != 0)
            {
              this->width_parser_->post_positiveInt ();
              this->width ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "frames" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->frames_parser_)
            {
              this->frames_parser_->pre ();
              ctx.nested_parser (this->frames_parser_);
            }
          }
          else
          {
            if (this->frames_parser_ != 0)
            {
              this->frames_parser_->post_positiveInt ();
              this->frames ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "duration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->duration_parser_)
            {
              this->duration_parser_->pre ();
              ctx.nested_parser (this->duration_parser_);
            }
          }
          else
          {
            if (this->duration_parser_ != 0)
            {
              this->duration_parser_->post_decimal ();
              this->duration ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "content" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->content_parser_)
            {
              this->content_parser_->pre ();
              ctx.nested_parser (this->content_parser_);
            }
          }
          else
          {
            if (this->content_parser_ != 0)
            {
              this->content_parser_->post_Attachment ();
              this->content ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

