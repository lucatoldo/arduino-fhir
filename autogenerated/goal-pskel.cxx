// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "goal-pskel.hxx"

namespace fhir
{
  // Goal_pskel
  //

  void Goal_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Goal_pskel::
  lifecycleStatus_parser (::fhir::GoalLifecycleStatus_pskel& p)
  {
    this->lifecycleStatus_parser_ = &p;
  }

  void Goal_pskel::
  achievementStatus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->achievementStatus_parser_ = &p;
  }

  void Goal_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void Goal_pskel::
  priority_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void Goal_pskel::
  description_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Goal_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Goal_pskel::
  startDate_parser (::fhir::date_pskel& p)
  {
    this->startDate_parser_ = &p;
  }

  void Goal_pskel::
  startCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->startCodeableConcept_parser_ = &p;
  }

  void Goal_pskel::
  target_parser (::fhir::Goal_Target_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void Goal_pskel::
  statusDate_parser (::fhir::date_pskel& p)
  {
    this->statusDate_parser_ = &p;
  }

  void Goal_pskel::
  statusReason_parser (::fhir::string_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void Goal_pskel::
  expressedBy_parser (::fhir::Reference_pskel& p)
  {
    this->expressedBy_parser_ = &p;
  }

  void Goal_pskel::
  addresses_parser (::fhir::Reference_pskel& p)
  {
    this->addresses_parser_ = &p;
  }

  void Goal_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Goal_pskel::
  outcomeCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->outcomeCode_parser_ = &p;
  }

  void Goal_pskel::
  outcomeReference_parser (::fhir::Reference_pskel& p)
  {
    this->outcomeReference_parser_ = &p;
  }

  void Goal_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::GoalLifecycleStatus_pskel& lifecycleStatus,
           ::fhir::CodeableConcept_pskel& achievementStatus,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& priority,
           ::fhir::CodeableConcept_pskel& description,
           ::fhir::Reference_pskel& subject,
           ::fhir::date_pskel& startDate,
           ::fhir::CodeableConcept_pskel& startCodeableConcept,
           ::fhir::Goal_Target_pskel& target,
           ::fhir::date_pskel& statusDate,
           ::fhir::string_pskel& statusReason,
           ::fhir::Reference_pskel& expressedBy,
           ::fhir::Reference_pskel& addresses,
           ::fhir::Annotation_pskel& note,
           ::fhir::CodeableConcept_pskel& outcomeCode,
           ::fhir::Reference_pskel& outcomeReference)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->lifecycleStatus_parser_ = &lifecycleStatus;
    this->achievementStatus_parser_ = &achievementStatus;
    this->category_parser_ = &category;
    this->priority_parser_ = &priority;
    this->description_parser_ = &description;
    this->subject_parser_ = &subject;
    this->startDate_parser_ = &startDate;
    this->startCodeableConcept_parser_ = &startCodeableConcept;
    this->target_parser_ = &target;
    this->statusDate_parser_ = &statusDate;
    this->statusReason_parser_ = &statusReason;
    this->expressedBy_parser_ = &expressedBy;
    this->addresses_parser_ = &addresses;
    this->note_parser_ = &note;
    this->outcomeCode_parser_ = &outcomeCode;
    this->outcomeReference_parser_ = &outcomeReference;
  }

  Goal_pskel::
  Goal_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Goal_impl_ (0),
    identifier_parser_ (0),
    lifecycleStatus_parser_ (0),
    achievementStatus_parser_ (0),
    category_parser_ (0),
    priority_parser_ (0),
    description_parser_ (0),
    subject_parser_ (0),
    startDate_parser_ (0),
    startCodeableConcept_parser_ (0),
    target_parser_ (0),
    statusDate_parser_ (0),
    statusReason_parser_ (0),
    expressedBy_parser_ (0),
    addresses_parser_ (0),
    note_parser_ (0),
    outcomeCode_parser_ (0),
    outcomeReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Goal_pskel::
  Goal_pskel (Goal_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Goal_impl_ (impl),
    identifier_parser_ (0),
    lifecycleStatus_parser_ (0),
    achievementStatus_parser_ (0),
    category_parser_ (0),
    priority_parser_ (0),
    description_parser_ (0),
    subject_parser_ (0),
    startDate_parser_ (0),
    startCodeableConcept_parser_ (0),
    target_parser_ (0),
    statusDate_parser_ (0),
    statusReason_parser_ (0),
    expressedBy_parser_ (0),
    addresses_parser_ (0),
    note_parser_ (0),
    outcomeCode_parser_ (0),
    outcomeReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Goal_Target_pskel
  //

  void Goal_Target_pskel::
  measure_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->measure_parser_ = &p;
  }

  void Goal_Target_pskel::
  detailQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->detailQuantity_parser_ = &p;
  }

  void Goal_Target_pskel::
  detailRange_parser (::fhir::Range_pskel& p)
  {
    this->detailRange_parser_ = &p;
  }

  void Goal_Target_pskel::
  detailCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->detailCodeableConcept_parser_ = &p;
  }

  void Goal_Target_pskel::
  detailString_parser (::fhir::string_pskel& p)
  {
    this->detailString_parser_ = &p;
  }

  void Goal_Target_pskel::
  detailBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->detailBoolean_parser_ = &p;
  }

  void Goal_Target_pskel::
  detailInteger_parser (::fhir::integer_pskel& p)
  {
    this->detailInteger_parser_ = &p;
  }

  void Goal_Target_pskel::
  detailRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->detailRatio_parser_ = &p;
  }

  void Goal_Target_pskel::
  dueDate_parser (::fhir::date_pskel& p)
  {
    this->dueDate_parser_ = &p;
  }

  void Goal_Target_pskel::
  dueDuration_parser (::fhir::Duration_pskel& p)
  {
    this->dueDuration_parser_ = &p;
  }

  void Goal_Target_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& measure,
           ::fhir::Quantity_pskel& detailQuantity,
           ::fhir::Range_pskel& detailRange,
           ::fhir::CodeableConcept_pskel& detailCodeableConcept,
           ::fhir::string_pskel& detailString,
           ::fhir::boolean_pskel& detailBoolean,
           ::fhir::integer_pskel& detailInteger,
           ::fhir::Ratio_pskel& detailRatio,
           ::fhir::date_pskel& dueDate,
           ::fhir::Duration_pskel& dueDuration)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->measure_parser_ = &measure;
    this->detailQuantity_parser_ = &detailQuantity;
    this->detailRange_parser_ = &detailRange;
    this->detailCodeableConcept_parser_ = &detailCodeableConcept;
    this->detailString_parser_ = &detailString;
    this->detailBoolean_parser_ = &detailBoolean;
    this->detailInteger_parser_ = &detailInteger;
    this->detailRatio_parser_ = &detailRatio;
    this->dueDate_parser_ = &dueDate;
    this->dueDuration_parser_ = &dueDuration;
  }

  Goal_Target_pskel::
  Goal_Target_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Goal_Target_impl_ (0),
    measure_parser_ (0),
    detailQuantity_parser_ (0),
    detailRange_parser_ (0),
    detailCodeableConcept_parser_ (0),
    detailString_parser_ (0),
    detailBoolean_parser_ (0),
    detailInteger_parser_ (0),
    detailRatio_parser_ (0),
    dueDate_parser_ (0),
    dueDuration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Goal_Target_pskel::
  Goal_Target_pskel (Goal_Target_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Goal_Target_impl_ (impl),
    measure_parser_ (0),
    detailQuantity_parser_ (0),
    detailRange_parser_ (0),
    detailCodeableConcept_parser_ (0),
    detailString_parser_ (0),
    detailBoolean_parser_ (0),
    detailInteger_parser_ (0),
    detailRatio_parser_ (0),
    dueDate_parser_ (0),
    dueDuration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // GoalLifecycleStatus_list_pskel
  //

  GoalLifecycleStatus_list_pskel::
  GoalLifecycleStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    GoalLifecycleStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_GoalLifecycleStatus_list_pskel_enums_, 9UL);
  }

  GoalLifecycleStatus_list_pskel::
  GoalLifecycleStatus_list_pskel (GoalLifecycleStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    GoalLifecycleStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_GoalLifecycleStatus_list_pskel_enums_, 9UL);
  }

  // GoalLifecycleStatus_pskel
  //

  void GoalLifecycleStatus_pskel::
  value_parser (::fhir::GoalLifecycleStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void GoalLifecycleStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::GoalLifecycleStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  GoalLifecycleStatus_pskel::
  GoalLifecycleStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    GoalLifecycleStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  GoalLifecycleStatus_pskel::
  GoalLifecycleStatus_pskel (GoalLifecycleStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    GoalLifecycleStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Goal_pskel
  //

  void Goal_pskel::
  identifier ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->identifier ();
  }

  void Goal_pskel::
  lifecycleStatus ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->lifecycleStatus ();
  }

  void Goal_pskel::
  achievementStatus ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->achievementStatus ();
  }

  void Goal_pskel::
  category ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->category ();
  }

  void Goal_pskel::
  priority ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->priority ();
  }

  void Goal_pskel::
  description ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->description ();
  }

  void Goal_pskel::
  subject ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->subject ();
  }

  void Goal_pskel::
  startDate ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->startDate ();
  }

  void Goal_pskel::
  startCodeableConcept ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->startCodeableConcept ();
  }

  void Goal_pskel::
  target ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->target ();
  }

  void Goal_pskel::
  statusDate ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->statusDate ();
  }

  void Goal_pskel::
  statusReason ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->statusReason ();
  }

  void Goal_pskel::
  expressedBy ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->expressedBy ();
  }

  void Goal_pskel::
  addresses ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->addresses ();
  }

  void Goal_pskel::
  note ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->note ();
  }

  void Goal_pskel::
  outcomeCode ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->outcomeCode ();
  }

  void Goal_pskel::
  outcomeReference ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->outcomeReference ();
  }

  void Goal_pskel::
  post_Goal ()
  {
    if (this->Goal_impl_)
      this->Goal_impl_->post_Goal ();
    else
      post_DomainResource ();
  }

  void Goal_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->lifecycleStatus_parser_)
      this->lifecycleStatus_parser_->_reset ();

    if (this->achievementStatus_parser_)
      this->achievementStatus_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->startDate_parser_)
      this->startDate_parser_->_reset ();

    if (this->startCodeableConcept_parser_)
      this->startCodeableConcept_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    if (this->statusDate_parser_)
      this->statusDate_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->expressedBy_parser_)
      this->expressedBy_parser_->_reset ();

    if (this->addresses_parser_)
      this->addresses_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->outcomeCode_parser_)
      this->outcomeCode_parser_->_reset ();

    if (this->outcomeReference_parser_)
      this->outcomeReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // Goal_Target_pskel
  //

  void Goal_Target_pskel::
  measure ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->measure ();
  }

  void Goal_Target_pskel::
  detailQuantity ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->detailQuantity ();
  }

  void Goal_Target_pskel::
  detailRange ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->detailRange ();
  }

  void Goal_Target_pskel::
  detailCodeableConcept ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->detailCodeableConcept ();
  }

  void Goal_Target_pskel::
  detailString ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->detailString ();
  }

  void Goal_Target_pskel::
  detailBoolean ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->detailBoolean ();
  }

  void Goal_Target_pskel::
  detailInteger ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->detailInteger ();
  }

  void Goal_Target_pskel::
  detailRatio ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->detailRatio ();
  }

  void Goal_Target_pskel::
  dueDate ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->dueDate ();
  }

  void Goal_Target_pskel::
  dueDuration ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->dueDuration ();
  }

  void Goal_Target_pskel::
  post_Goal_Target ()
  {
    if (this->Goal_Target_impl_)
      this->Goal_Target_impl_->post_Goal_Target ();
    else
      post_BackboneElement ();
  }

  void Goal_Target_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->measure_parser_)
      this->measure_parser_->_reset ();

    if (this->detailQuantity_parser_)
      this->detailQuantity_parser_->_reset ();

    if (this->detailRange_parser_)
      this->detailRange_parser_->_reset ();

    if (this->detailCodeableConcept_parser_)
      this->detailCodeableConcept_parser_->_reset ();

    if (this->detailString_parser_)
      this->detailString_parser_->_reset ();

    if (this->detailBoolean_parser_)
      this->detailBoolean_parser_->_reset ();

    if (this->detailInteger_parser_)
      this->detailInteger_parser_->_reset ();

    if (this->detailRatio_parser_)
      this->detailRatio_parser_->_reset ();

    if (this->dueDate_parser_)
      this->dueDate_parser_->_reset ();

    if (this->dueDuration_parser_)
      this->dueDuration_parser_->_reset ();

    this->resetting_ = false;
  }

  // GoalLifecycleStatus_list_pskel
  //

  void GoalLifecycleStatus_list_pskel::
  post_GoalLifecycleStatus_list ()
  {
    if (this->GoalLifecycleStatus_list_impl_)
      this->GoalLifecycleStatus_list_impl_->post_GoalLifecycleStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const GoalLifecycleStatus_list_pskel::_xsde_GoalLifecycleStatus_list_pskel_enums_[9UL] = 
  {
    "accepted",
    "active",
    "cancelled",
    "completed",
    "entered-in-error",
    "on-hold",
    "planned",
    "proposed",
    "rejected"
  };

  // GoalLifecycleStatus_pskel
  //

  void GoalLifecycleStatus_pskel::
  value ()
  {
    if (this->GoalLifecycleStatus_impl_)
      this->GoalLifecycleStatus_impl_->value ();
  }

  void GoalLifecycleStatus_pskel::
  post_GoalLifecycleStatus ()
  {
    if (this->GoalLifecycleStatus_impl_)
      this->GoalLifecycleStatus_impl_->post_GoalLifecycleStatus ();
    else
      post_Element ();
  }

  void GoalLifecycleStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Goal_pskel.
  //
  bool Goal_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "lifecycleStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Goal_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Goal_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Goal_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Goal_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Goal_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "lifecycleStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lifecycleStatus_parser_)
            {
              this->lifecycleStatus_parser_->pre ();
              ctx.nested_parser (this->lifecycleStatus_parser_);
            }
          }
          else
          {
            if (this->lifecycleStatus_parser_ != 0)
            {
              this->lifecycleStatus_parser_->post_GoalLifecycleStatus ();
              this->lifecycleStatus ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "achievementStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->achievementStatus_parser_)
            {
              this->achievementStatus_parser_->pre ();
              ctx.nested_parser (this->achievementStatus_parser_);
            }
          }
          else
          {
            if (this->achievementStatus_parser_ != 0)
            {
              this->achievementStatus_parser_->post_CodeableConcept ();
              this->achievementStatus ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_CodeableConcept ();
              this->priority ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_CodeableConcept ();
              this->description ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "startDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->startDate_parser_)
            {
              this->startDate_parser_->pre ();
              ctx.nested_parser (this->startDate_parser_);
            }
          }
          else
          {
            if (this->startDate_parser_ != 0)
            {
              this->startDate_parser_->post_date ();
              this->startDate ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "startCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->startCodeableConcept_parser_)
            {
              this->startCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->startCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->startCodeableConcept_parser_ != 0)
            {
              this->startCodeableConcept_parser_->post_CodeableConcept ();
              this->startCodeableConcept ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_Goal_Target ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "statusDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusDate_parser_)
            {
              this->statusDate_parser_->pre ();
              ctx.nested_parser (this->statusDate_parser_);
            }
          }
          else
          {
            if (this->statusDate_parser_ != 0)
            {
              this->statusDate_parser_->post_date ();
              this->statusDate ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_string ();
              this->statusReason ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "expressedBy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expressedBy_parser_)
            {
              this->expressedBy_parser_->pre ();
              ctx.nested_parser (this->expressedBy_parser_);
            }
          }
          else
          {
            if (this->expressedBy_parser_ != 0)
            {
              this->expressedBy_parser_->post_Reference ();
              this->expressedBy ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "addresses" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->addresses_parser_)
            {
              this->addresses_parser_->pre ();
              ctx.nested_parser (this->addresses_parser_);
            }
          }
          else
          {
            if (this->addresses_parser_ != 0)
            {
              this->addresses_parser_->post_Reference ();
              this->addresses ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "outcomeCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcomeCode_parser_)
            {
              this->outcomeCode_parser_->pre ();
              ctx.nested_parser (this->outcomeCode_parser_);
            }
          }
          else
          {
            if (this->outcomeCode_parser_ != 0)
            {
              this->outcomeCode_parser_->post_CodeableConcept ();
              this->outcomeCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "outcomeReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcomeReference_parser_)
            {
              this->outcomeReference_parser_->pre ();
              ctx.nested_parser (this->outcomeReference_parser_);
            }
          }
          else
          {
            if (this->outcomeReference_parser_ != 0)
            {
              this->outcomeReference_parser_->post_Reference ();
              this->outcomeReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Goal_Target_pskel.
  //
  bool Goal_Target_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "measure" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "detailQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "detailRange" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "detailCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "detailString" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "detailBoolean" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "detailInteger" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "detailRatio" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "dueDate" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "dueDuration" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Goal_Target_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Goal_Target_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Goal_Target_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Goal_Target_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Goal_Target_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "measure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measure_parser_)
            {
              this->measure_parser_->pre ();
              ctx.nested_parser (this->measure_parser_);
            }
          }
          else
          {
            if (this->measure_parser_ != 0)
            {
              this->measure_parser_->post_CodeableConcept ();
              this->measure ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "detailQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailQuantity_parser_)
            {
              this->detailQuantity_parser_->pre ();
              ctx.nested_parser (this->detailQuantity_parser_);
            }
          }
          else
          {
            if (this->detailQuantity_parser_ != 0)
            {
              this->detailQuantity_parser_->post_Quantity ();
              this->detailQuantity ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "detailRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailRange_parser_)
            {
              this->detailRange_parser_->pre ();
              ctx.nested_parser (this->detailRange_parser_);
            }
          }
          else
          {
            if (this->detailRange_parser_ != 0)
            {
              this->detailRange_parser_->post_Range ();
              this->detailRange ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "detailCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailCodeableConcept_parser_)
            {
              this->detailCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->detailCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->detailCodeableConcept_parser_ != 0)
            {
              this->detailCodeableConcept_parser_->post_CodeableConcept ();
              this->detailCodeableConcept ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "detailString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailString_parser_)
            {
              this->detailString_parser_->pre ();
              ctx.nested_parser (this->detailString_parser_);
            }
          }
          else
          {
            if (this->detailString_parser_ != 0)
            {
              this->detailString_parser_->post_string ();
              this->detailString ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "detailBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailBoolean_parser_)
            {
              this->detailBoolean_parser_->pre ();
              ctx.nested_parser (this->detailBoolean_parser_);
            }
          }
          else
          {
            if (this->detailBoolean_parser_ != 0)
            {
              this->detailBoolean_parser_->post_boolean ();
              this->detailBoolean ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "detailInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailInteger_parser_)
            {
              this->detailInteger_parser_->pre ();
              ctx.nested_parser (this->detailInteger_parser_);
            }
          }
          else
          {
            if (this->detailInteger_parser_ != 0)
            {
              this->detailInteger_parser_->post_integer ();
              this->detailInteger ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "detailRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailRatio_parser_)
            {
              this->detailRatio_parser_->pre ();
              ctx.nested_parser (this->detailRatio_parser_);
            }
          }
          else
          {
            if (this->detailRatio_parser_ != 0)
            {
              this->detailRatio_parser_->post_Ratio ();
              this->detailRatio ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "dueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dueDate_parser_)
            {
              this->dueDate_parser_->pre ();
              ctx.nested_parser (this->dueDate_parser_);
            }
          }
          else
          {
            if (this->dueDate_parser_ != 0)
            {
              this->dueDate_parser_->post_date ();
              this->dueDate ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "dueDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dueDuration_parser_)
            {
              this->dueDuration_parser_->pre ();
              ctx.nested_parser (this->dueDuration_parser_);
            }
          }
          else
          {
            if (this->dueDuration_parser_ != 0)
            {
              this->dueDuration_parser_->post_Duration ();
              this->dueDuration ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for GoalLifecycleStatus_pskel.
  //
  bool GoalLifecycleStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_GoalLifecycleStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

