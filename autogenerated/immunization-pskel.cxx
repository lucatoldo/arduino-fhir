// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "immunization-pskel.hxx"

namespace fhir
{
  // Immunization_pskel
  //

  void Immunization_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Immunization_pskel::
  status_parser (::fhir::ImmunizationStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Immunization_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void Immunization_pskel::
  vaccineCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->vaccineCode_parser_ = &p;
  }

  void Immunization_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void Immunization_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void Immunization_pskel::
  occurrenceDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->occurrenceDateTime_parser_ = &p;
  }

  void Immunization_pskel::
  occurrenceString_parser (::fhir::string_pskel& p)
  {
    this->occurrenceString_parser_ = &p;
  }

  void Immunization_pskel::
  recorded_parser (::fhir::dateTime_pskel& p)
  {
    this->recorded_parser_ = &p;
  }

  void Immunization_pskel::
  primarySource_parser (::fhir::boolean_pskel& p)
  {
    this->primarySource_parser_ = &p;
  }

  void Immunization_pskel::
  reportOrigin_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reportOrigin_parser_ = &p;
  }

  void Immunization_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Immunization_pskel::
  manufacturer_parser (::fhir::Reference_pskel& p)
  {
    this->manufacturer_parser_ = &p;
  }

  void Immunization_pskel::
  lotNumber_parser (::fhir::string_pskel& p)
  {
    this->lotNumber_parser_ = &p;
  }

  void Immunization_pskel::
  expirationDate_parser (::fhir::date_pskel& p)
  {
    this->expirationDate_parser_ = &p;
  }

  void Immunization_pskel::
  site_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->site_parser_ = &p;
  }

  void Immunization_pskel::
  route_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->route_parser_ = &p;
  }

  void Immunization_pskel::
  doseQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->doseQuantity_parser_ = &p;
  }

  void Immunization_pskel::
  performer_parser (::fhir::Immunization_Performer_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void Immunization_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Immunization_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Immunization_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void Immunization_pskel::
  isSubpotent_parser (::fhir::boolean_pskel& p)
  {
    this->isSubpotent_parser_ = &p;
  }

  void Immunization_pskel::
  subpotentReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subpotentReason_parser_ = &p;
  }

  void Immunization_pskel::
  education_parser (::fhir::Immunization_Education_pskel& p)
  {
    this->education_parser_ = &p;
  }

  void Immunization_pskel::
  programEligibility_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->programEligibility_parser_ = &p;
  }

  void Immunization_pskel::
  fundingSource_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->fundingSource_parser_ = &p;
  }

  void Immunization_pskel::
  reaction_parser (::fhir::Immunization_Reaction_pskel& p)
  {
    this->reaction_parser_ = &p;
  }

  void Immunization_pskel::
  protocolApplied_parser (::fhir::Immunization_ProtocolApplied_pskel& p)
  {
    this->protocolApplied_parser_ = &p;
  }

  void Immunization_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::ImmunizationStatusCodes_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::CodeableConcept_pskel& vaccineCode,
           ::fhir::Reference_pskel& patient,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& occurrenceDateTime,
           ::fhir::string_pskel& occurrenceString,
           ::fhir::dateTime_pskel& recorded,
           ::fhir::boolean_pskel& primarySource,
           ::fhir::CodeableConcept_pskel& reportOrigin,
           ::fhir::Reference_pskel& location,
           ::fhir::Reference_pskel& manufacturer,
           ::fhir::string_pskel& lotNumber,
           ::fhir::date_pskel& expirationDate,
           ::fhir::CodeableConcept_pskel& site,
           ::fhir::CodeableConcept_pskel& route,
           ::fhir::Quantity_pskel& doseQuantity,
           ::fhir::Immunization_Performer_pskel& performer,
           ::fhir::Annotation_pskel& note,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::boolean_pskel& isSubpotent,
           ::fhir::CodeableConcept_pskel& subpotentReason,
           ::fhir::Immunization_Education_pskel& education,
           ::fhir::CodeableConcept_pskel& programEligibility,
           ::fhir::CodeableConcept_pskel& fundingSource,
           ::fhir::Immunization_Reaction_pskel& reaction,
           ::fhir::Immunization_ProtocolApplied_pskel& protocolApplied)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->vaccineCode_parser_ = &vaccineCode;
    this->patient_parser_ = &patient;
    this->encounter_parser_ = &encounter;
    this->occurrenceDateTime_parser_ = &occurrenceDateTime;
    this->occurrenceString_parser_ = &occurrenceString;
    this->recorded_parser_ = &recorded;
    this->primarySource_parser_ = &primarySource;
    this->reportOrigin_parser_ = &reportOrigin;
    this->location_parser_ = &location;
    this->manufacturer_parser_ = &manufacturer;
    this->lotNumber_parser_ = &lotNumber;
    this->expirationDate_parser_ = &expirationDate;
    this->site_parser_ = &site;
    this->route_parser_ = &route;
    this->doseQuantity_parser_ = &doseQuantity;
    this->performer_parser_ = &performer;
    this->note_parser_ = &note;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->isSubpotent_parser_ = &isSubpotent;
    this->subpotentReason_parser_ = &subpotentReason;
    this->education_parser_ = &education;
    this->programEligibility_parser_ = &programEligibility;
    this->fundingSource_parser_ = &fundingSource;
    this->reaction_parser_ = &reaction;
    this->protocolApplied_parser_ = &protocolApplied;
  }

  Immunization_pskel::
  Immunization_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Immunization_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    vaccineCode_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrenceString_parser_ (0),
    recorded_parser_ (0),
    primarySource_parser_ (0),
    reportOrigin_parser_ (0),
    location_parser_ (0),
    manufacturer_parser_ (0),
    lotNumber_parser_ (0),
    expirationDate_parser_ (0),
    site_parser_ (0),
    route_parser_ (0),
    doseQuantity_parser_ (0),
    performer_parser_ (0),
    note_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    isSubpotent_parser_ (0),
    subpotentReason_parser_ (0),
    education_parser_ (0),
    programEligibility_parser_ (0),
    fundingSource_parser_ (0),
    reaction_parser_ (0),
    protocolApplied_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Immunization_pskel::
  Immunization_pskel (Immunization_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Immunization_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    vaccineCode_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrenceString_parser_ (0),
    recorded_parser_ (0),
    primarySource_parser_ (0),
    reportOrigin_parser_ (0),
    location_parser_ (0),
    manufacturer_parser_ (0),
    lotNumber_parser_ (0),
    expirationDate_parser_ (0),
    site_parser_ (0),
    route_parser_ (0),
    doseQuantity_parser_ (0),
    performer_parser_ (0),
    note_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    isSubpotent_parser_ (0),
    subpotentReason_parser_ (0),
    education_parser_ (0),
    programEligibility_parser_ (0),
    fundingSource_parser_ (0),
    reaction_parser_ (0),
    protocolApplied_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Immunization_Performer_pskel
  //

  void Immunization_Performer_pskel::
  function_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->function_parser_ = &p;
  }

  void Immunization_Performer_pskel::
  actor_parser (::fhir::Reference_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void Immunization_Performer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& function,
           ::fhir::Reference_pskel& actor)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->function_parser_ = &function;
    this->actor_parser_ = &actor;
  }

  Immunization_Performer_pskel::
  Immunization_Performer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Immunization_Performer_impl_ (0),
    function_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Immunization_Performer_pskel::
  Immunization_Performer_pskel (Immunization_Performer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Immunization_Performer_impl_ (impl),
    function_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Immunization_Education_pskel
  //

  void Immunization_Education_pskel::
  documentType_parser (::fhir::string_pskel& p)
  {
    this->documentType_parser_ = &p;
  }

  void Immunization_Education_pskel::
  reference_parser (::fhir::uri_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void Immunization_Education_pskel::
  publicationDate_parser (::fhir::dateTime_pskel& p)
  {
    this->publicationDate_parser_ = &p;
  }

  void Immunization_Education_pskel::
  presentationDate_parser (::fhir::dateTime_pskel& p)
  {
    this->presentationDate_parser_ = &p;
  }

  void Immunization_Education_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& documentType,
           ::fhir::uri_pskel& reference,
           ::fhir::dateTime_pskel& publicationDate,
           ::fhir::dateTime_pskel& presentationDate)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->documentType_parser_ = &documentType;
    this->reference_parser_ = &reference;
    this->publicationDate_parser_ = &publicationDate;
    this->presentationDate_parser_ = &presentationDate;
  }

  Immunization_Education_pskel::
  Immunization_Education_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Immunization_Education_impl_ (0),
    documentType_parser_ (0),
    reference_parser_ (0),
    publicationDate_parser_ (0),
    presentationDate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Immunization_Education_pskel::
  Immunization_Education_pskel (Immunization_Education_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Immunization_Education_impl_ (impl),
    documentType_parser_ (0),
    reference_parser_ (0),
    publicationDate_parser_ (0),
    presentationDate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Immunization_Reaction_pskel
  //

  void Immunization_Reaction_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void Immunization_Reaction_pskel::
  detail_parser (::fhir::Reference_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void Immunization_Reaction_pskel::
  reported_parser (::fhir::boolean_pskel& p)
  {
    this->reported_parser_ = &p;
  }

  void Immunization_Reaction_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::dateTime_pskel& date,
           ::fhir::Reference_pskel& detail,
           ::fhir::boolean_pskel& reported)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->date_parser_ = &date;
    this->detail_parser_ = &detail;
    this->reported_parser_ = &reported;
  }

  Immunization_Reaction_pskel::
  Immunization_Reaction_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Immunization_Reaction_impl_ (0),
    date_parser_ (0),
    detail_parser_ (0),
    reported_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Immunization_Reaction_pskel::
  Immunization_Reaction_pskel (Immunization_Reaction_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Immunization_Reaction_impl_ (impl),
    date_parser_ (0),
    detail_parser_ (0),
    reported_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Immunization_ProtocolApplied_pskel
  //

  void Immunization_ProtocolApplied_pskel::
  series_parser (::fhir::string_pskel& p)
  {
    this->series_parser_ = &p;
  }

  void Immunization_ProtocolApplied_pskel::
  authority_parser (::fhir::Reference_pskel& p)
  {
    this->authority_parser_ = &p;
  }

  void Immunization_ProtocolApplied_pskel::
  targetDisease_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->targetDisease_parser_ = &p;
  }

  void Immunization_ProtocolApplied_pskel::
  doseNumberPositiveInt_parser (::fhir::positiveInt_pskel& p)
  {
    this->doseNumberPositiveInt_parser_ = &p;
  }

  void Immunization_ProtocolApplied_pskel::
  doseNumberString_parser (::fhir::string_pskel& p)
  {
    this->doseNumberString_parser_ = &p;
  }

  void Immunization_ProtocolApplied_pskel::
  seriesDosesPositiveInt_parser (::fhir::positiveInt_pskel& p)
  {
    this->seriesDosesPositiveInt_parser_ = &p;
  }

  void Immunization_ProtocolApplied_pskel::
  seriesDosesString_parser (::fhir::string_pskel& p)
  {
    this->seriesDosesString_parser_ = &p;
  }

  void Immunization_ProtocolApplied_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& series,
           ::fhir::Reference_pskel& authority,
           ::fhir::CodeableConcept_pskel& targetDisease,
           ::fhir::positiveInt_pskel& doseNumberPositiveInt,
           ::fhir::string_pskel& doseNumberString,
           ::fhir::positiveInt_pskel& seriesDosesPositiveInt,
           ::fhir::string_pskel& seriesDosesString)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->series_parser_ = &series;
    this->authority_parser_ = &authority;
    this->targetDisease_parser_ = &targetDisease;
    this->doseNumberPositiveInt_parser_ = &doseNumberPositiveInt;
    this->doseNumberString_parser_ = &doseNumberString;
    this->seriesDosesPositiveInt_parser_ = &seriesDosesPositiveInt;
    this->seriesDosesString_parser_ = &seriesDosesString;
  }

  Immunization_ProtocolApplied_pskel::
  Immunization_ProtocolApplied_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Immunization_ProtocolApplied_impl_ (0),
    series_parser_ (0),
    authority_parser_ (0),
    targetDisease_parser_ (0),
    doseNumberPositiveInt_parser_ (0),
    doseNumberString_parser_ (0),
    seriesDosesPositiveInt_parser_ (0),
    seriesDosesString_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Immunization_ProtocolApplied_pskel::
  Immunization_ProtocolApplied_pskel (Immunization_ProtocolApplied_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Immunization_ProtocolApplied_impl_ (impl),
    series_parser_ (0),
    authority_parser_ (0),
    targetDisease_parser_ (0),
    doseNumberPositiveInt_parser_ (0),
    doseNumberString_parser_ (0),
    seriesDosesPositiveInt_parser_ (0),
    seriesDosesString_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImmunizationStatusCodes_list_pskel
  //

  ImmunizationStatusCodes_list_pskel::
  ImmunizationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ImmunizationStatusCodes_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ImmunizationStatusCodes_list_pskel_enums_, 3UL);
  }

  ImmunizationStatusCodes_list_pskel::
  ImmunizationStatusCodes_list_pskel (ImmunizationStatusCodes_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ImmunizationStatusCodes_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ImmunizationStatusCodes_list_pskel_enums_, 3UL);
  }

  // ImmunizationStatusCodes_pskel
  //

  void ImmunizationStatusCodes_pskel::
  value_parser (::fhir::ImmunizationStatusCodes_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ImmunizationStatusCodes_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ImmunizationStatusCodes_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ImmunizationStatusCodes_pskel::
  ImmunizationStatusCodes_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ImmunizationStatusCodes_impl_ (0),
    value_parser_ (0)
  {
  }

  ImmunizationStatusCodes_pskel::
  ImmunizationStatusCodes_pskel (ImmunizationStatusCodes_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ImmunizationStatusCodes_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Immunization_pskel
  //

  void Immunization_pskel::
  identifier ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->identifier ();
  }

  void Immunization_pskel::
  status ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->status ();
  }

  void Immunization_pskel::
  statusReason ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->statusReason ();
  }

  void Immunization_pskel::
  vaccineCode ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->vaccineCode ();
  }

  void Immunization_pskel::
  patient ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->patient ();
  }

  void Immunization_pskel::
  encounter ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->encounter ();
  }

  void Immunization_pskel::
  occurrenceDateTime ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->occurrenceDateTime ();
  }

  void Immunization_pskel::
  occurrenceString ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->occurrenceString ();
  }

  void Immunization_pskel::
  recorded ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->recorded ();
  }

  void Immunization_pskel::
  primarySource ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->primarySource ();
  }

  void Immunization_pskel::
  reportOrigin ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->reportOrigin ();
  }

  void Immunization_pskel::
  location ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->location ();
  }

  void Immunization_pskel::
  manufacturer ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->manufacturer ();
  }

  void Immunization_pskel::
  lotNumber ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->lotNumber ();
  }

  void Immunization_pskel::
  expirationDate ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->expirationDate ();
  }

  void Immunization_pskel::
  site ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->site ();
  }

  void Immunization_pskel::
  route ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->route ();
  }

  void Immunization_pskel::
  doseQuantity ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->doseQuantity ();
  }

  void Immunization_pskel::
  performer ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->performer ();
  }

  void Immunization_pskel::
  note ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->note ();
  }

  void Immunization_pskel::
  reasonCode ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->reasonCode ();
  }

  void Immunization_pskel::
  reasonReference ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->reasonReference ();
  }

  void Immunization_pskel::
  isSubpotent ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->isSubpotent ();
  }

  void Immunization_pskel::
  subpotentReason ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->subpotentReason ();
  }

  void Immunization_pskel::
  education ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->education ();
  }

  void Immunization_pskel::
  programEligibility ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->programEligibility ();
  }

  void Immunization_pskel::
  fundingSource ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->fundingSource ();
  }

  void Immunization_pskel::
  reaction ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->reaction ();
  }

  void Immunization_pskel::
  protocolApplied ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->protocolApplied ();
  }

  void Immunization_pskel::
  post_Immunization ()
  {
    if (this->Immunization_impl_)
      this->Immunization_impl_->post_Immunization ();
    else
      post_DomainResource ();
  }

  void Immunization_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->vaccineCode_parser_)
      this->vaccineCode_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->occurrenceDateTime_parser_)
      this->occurrenceDateTime_parser_->_reset ();

    if (this->occurrenceString_parser_)
      this->occurrenceString_parser_->_reset ();

    if (this->recorded_parser_)
      this->recorded_parser_->_reset ();

    if (this->primarySource_parser_)
      this->primarySource_parser_->_reset ();

    if (this->reportOrigin_parser_)
      this->reportOrigin_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->manufacturer_parser_)
      this->manufacturer_parser_->_reset ();

    if (this->lotNumber_parser_)
      this->lotNumber_parser_->_reset ();

    if (this->expirationDate_parser_)
      this->expirationDate_parser_->_reset ();

    if (this->site_parser_)
      this->site_parser_->_reset ();

    if (this->route_parser_)
      this->route_parser_->_reset ();

    if (this->doseQuantity_parser_)
      this->doseQuantity_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->isSubpotent_parser_)
      this->isSubpotent_parser_->_reset ();

    if (this->subpotentReason_parser_)
      this->subpotentReason_parser_->_reset ();

    if (this->education_parser_)
      this->education_parser_->_reset ();

    if (this->programEligibility_parser_)
      this->programEligibility_parser_->_reset ();

    if (this->fundingSource_parser_)
      this->fundingSource_parser_->_reset ();

    if (this->reaction_parser_)
      this->reaction_parser_->_reset ();

    if (this->protocolApplied_parser_)
      this->protocolApplied_parser_->_reset ();

    this->resetting_ = false;
  }

  // Immunization_Performer_pskel
  //

  void Immunization_Performer_pskel::
  function ()
  {
    if (this->Immunization_Performer_impl_)
      this->Immunization_Performer_impl_->function ();
  }

  void Immunization_Performer_pskel::
  actor ()
  {
    if (this->Immunization_Performer_impl_)
      this->Immunization_Performer_impl_->actor ();
  }

  void Immunization_Performer_pskel::
  post_Immunization_Performer ()
  {
    if (this->Immunization_Performer_impl_)
      this->Immunization_Performer_impl_->post_Immunization_Performer ();
    else
      post_BackboneElement ();
  }

  void Immunization_Performer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->function_parser_)
      this->function_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    this->resetting_ = false;
  }

  // Immunization_Education_pskel
  //

  void Immunization_Education_pskel::
  documentType ()
  {
    if (this->Immunization_Education_impl_)
      this->Immunization_Education_impl_->documentType ();
  }

  void Immunization_Education_pskel::
  reference ()
  {
    if (this->Immunization_Education_impl_)
      this->Immunization_Education_impl_->reference ();
  }

  void Immunization_Education_pskel::
  publicationDate ()
  {
    if (this->Immunization_Education_impl_)
      this->Immunization_Education_impl_->publicationDate ();
  }

  void Immunization_Education_pskel::
  presentationDate ()
  {
    if (this->Immunization_Education_impl_)
      this->Immunization_Education_impl_->presentationDate ();
  }

  void Immunization_Education_pskel::
  post_Immunization_Education ()
  {
    if (this->Immunization_Education_impl_)
      this->Immunization_Education_impl_->post_Immunization_Education ();
    else
      post_BackboneElement ();
  }

  void Immunization_Education_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->documentType_parser_)
      this->documentType_parser_->_reset ();

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    if (this->publicationDate_parser_)
      this->publicationDate_parser_->_reset ();

    if (this->presentationDate_parser_)
      this->presentationDate_parser_->_reset ();

    this->resetting_ = false;
  }

  // Immunization_Reaction_pskel
  //

  void Immunization_Reaction_pskel::
  date ()
  {
    if (this->Immunization_Reaction_impl_)
      this->Immunization_Reaction_impl_->date ();
  }

  void Immunization_Reaction_pskel::
  detail ()
  {
    if (this->Immunization_Reaction_impl_)
      this->Immunization_Reaction_impl_->detail ();
  }

  void Immunization_Reaction_pskel::
  reported ()
  {
    if (this->Immunization_Reaction_impl_)
      this->Immunization_Reaction_impl_->reported ();
  }

  void Immunization_Reaction_pskel::
  post_Immunization_Reaction ()
  {
    if (this->Immunization_Reaction_impl_)
      this->Immunization_Reaction_impl_->post_Immunization_Reaction ();
    else
      post_BackboneElement ();
  }

  void Immunization_Reaction_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    if (this->reported_parser_)
      this->reported_parser_->_reset ();

    this->resetting_ = false;
  }

  // Immunization_ProtocolApplied_pskel
  //

  void Immunization_ProtocolApplied_pskel::
  series ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->series ();
  }

  void Immunization_ProtocolApplied_pskel::
  authority ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->authority ();
  }

  void Immunization_ProtocolApplied_pskel::
  targetDisease ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->targetDisease ();
  }

  void Immunization_ProtocolApplied_pskel::
  doseNumberPositiveInt ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->doseNumberPositiveInt ();
  }

  void Immunization_ProtocolApplied_pskel::
  doseNumberString ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->doseNumberString ();
  }

  void Immunization_ProtocolApplied_pskel::
  seriesDosesPositiveInt ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->seriesDosesPositiveInt ();
  }

  void Immunization_ProtocolApplied_pskel::
  seriesDosesString ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->seriesDosesString ();
  }

  void Immunization_ProtocolApplied_pskel::
  post_Immunization_ProtocolApplied ()
  {
    if (this->Immunization_ProtocolApplied_impl_)
      this->Immunization_ProtocolApplied_impl_->post_Immunization_ProtocolApplied ();
    else
      post_BackboneElement ();
  }

  void Immunization_ProtocolApplied_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->series_parser_)
      this->series_parser_->_reset ();

    if (this->authority_parser_)
      this->authority_parser_->_reset ();

    if (this->targetDisease_parser_)
      this->targetDisease_parser_->_reset ();

    if (this->doseNumberPositiveInt_parser_)
      this->doseNumberPositiveInt_parser_->_reset ();

    if (this->doseNumberString_parser_)
      this->doseNumberString_parser_->_reset ();

    if (this->seriesDosesPositiveInt_parser_)
      this->seriesDosesPositiveInt_parser_->_reset ();

    if (this->seriesDosesString_parser_)
      this->seriesDosesString_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImmunizationStatusCodes_list_pskel
  //

  void ImmunizationStatusCodes_list_pskel::
  post_ImmunizationStatusCodes_list ()
  {
    if (this->ImmunizationStatusCodes_list_impl_)
      this->ImmunizationStatusCodes_list_impl_->post_ImmunizationStatusCodes_list ();
    else
      post_code_primitive ();
  }

  const char* const ImmunizationStatusCodes_list_pskel::_xsde_ImmunizationStatusCodes_list_pskel_enums_[3UL] = 
  {
    "completed",
    "entered-in-error",
    "not-done"
  };

  // ImmunizationStatusCodes_pskel
  //

  void ImmunizationStatusCodes_pskel::
  value ()
  {
    if (this->ImmunizationStatusCodes_impl_)
      this->ImmunizationStatusCodes_impl_->value ();
  }

  void ImmunizationStatusCodes_pskel::
  post_ImmunizationStatusCodes ()
  {
    if (this->ImmunizationStatusCodes_impl_)
      this->ImmunizationStatusCodes_impl_->post_ImmunizationStatusCodes ();
    else
      post_Element ();
  }

  void ImmunizationStatusCodes_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Immunization_pskel.
  //
  bool Immunization_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Immunization_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Immunization_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Immunization_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Immunization_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Immunization_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ImmunizationStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "vaccineCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->vaccineCode_parser_)
            {
              this->vaccineCode_parser_->pre ();
              ctx.nested_parser (this->vaccineCode_parser_);
            }
          }
          else
          {
            if (this->vaccineCode_parser_ != 0)
            {
              this->vaccineCode_parser_->post_CodeableConcept ();
              this->vaccineCode ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "occurrenceDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceDateTime_parser_)
            {
              this->occurrenceDateTime_parser_->pre ();
              ctx.nested_parser (this->occurrenceDateTime_parser_);
            }
          }
          else
          {
            if (this->occurrenceDateTime_parser_ != 0)
            {
              this->occurrenceDateTime_parser_->post_dateTime ();
              this->occurrenceDateTime ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "occurrenceString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceString_parser_)
            {
              this->occurrenceString_parser_->pre ();
              ctx.nested_parser (this->occurrenceString_parser_);
            }
          }
          else
          {
            if (this->occurrenceString_parser_ != 0)
            {
              this->occurrenceString_parser_->post_string ();
              this->occurrenceString ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "recorded" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recorded_parser_)
            {
              this->recorded_parser_->pre ();
              ctx.nested_parser (this->recorded_parser_);
            }
          }
          else
          {
            if (this->recorded_parser_ != 0)
            {
              this->recorded_parser_->post_dateTime ();
              this->recorded ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "primarySource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->primarySource_parser_)
            {
              this->primarySource_parser_->pre ();
              ctx.nested_parser (this->primarySource_parser_);
            }
          }
          else
          {
            if (this->primarySource_parser_ != 0)
            {
              this->primarySource_parser_->post_boolean ();
              this->primarySource ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "reportOrigin" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reportOrigin_parser_)
            {
              this->reportOrigin_parser_->pre ();
              ctx.nested_parser (this->reportOrigin_parser_);
            }
          }
          else
          {
            if (this->reportOrigin_parser_ != 0)
            {
              this->reportOrigin_parser_->post_CodeableConcept ();
              this->reportOrigin ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "manufacturer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturer_parser_)
            {
              this->manufacturer_parser_->pre ();
              ctx.nested_parser (this->manufacturer_parser_);
            }
          }
          else
          {
            if (this->manufacturer_parser_ != 0)
            {
              this->manufacturer_parser_->post_Reference ();
              this->manufacturer ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "lotNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lotNumber_parser_)
            {
              this->lotNumber_parser_->pre ();
              ctx.nested_parser (this->lotNumber_parser_);
            }
          }
          else
          {
            if (this->lotNumber_parser_ != 0)
            {
              this->lotNumber_parser_->post_string ();
              this->lotNumber ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "expirationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expirationDate_parser_)
            {
              this->expirationDate_parser_->pre ();
              ctx.nested_parser (this->expirationDate_parser_);
            }
          }
          else
          {
            if (this->expirationDate_parser_ != 0)
            {
              this->expirationDate_parser_->post_date ();
              this->expirationDate ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "site" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->site_parser_)
            {
              this->site_parser_->pre ();
              ctx.nested_parser (this->site_parser_);
            }
          }
          else
          {
            if (this->site_parser_ != 0)
            {
              this->site_parser_->post_CodeableConcept ();
              this->site ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "route" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->route_parser_)
            {
              this->route_parser_->pre ();
              ctx.nested_parser (this->route_parser_);
            }
          }
          else
          {
            if (this->route_parser_ != 0)
            {
              this->route_parser_->post_CodeableConcept ();
              this->route ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "doseQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doseQuantity_parser_)
            {
              this->doseQuantity_parser_->pre ();
              ctx.nested_parser (this->doseQuantity_parser_);
            }
          }
          else
          {
            if (this->doseQuantity_parser_ != 0)
            {
              this->doseQuantity_parser_->post_Quantity ();
              this->doseQuantity ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Immunization_Performer ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "isSubpotent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->isSubpotent_parser_)
            {
              this->isSubpotent_parser_->pre ();
              ctx.nested_parser (this->isSubpotent_parser_);
            }
          }
          else
          {
            if (this->isSubpotent_parser_ != 0)
            {
              this->isSubpotent_parser_->post_boolean ();
              this->isSubpotent ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "subpotentReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subpotentReason_parser_)
            {
              this->subpotentReason_parser_->pre ();
              ctx.nested_parser (this->subpotentReason_parser_);
            }
          }
          else
          {
            if (this->subpotentReason_parser_ != 0)
            {
              this->subpotentReason_parser_->post_CodeableConcept ();
              this->subpotentReason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "education" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->education_parser_)
            {
              this->education_parser_->pre ();
              ctx.nested_parser (this->education_parser_);
            }
          }
          else
          {
            if (this->education_parser_ != 0)
            {
              this->education_parser_->post_Immunization_Education ();
              this->education ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "programEligibility" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->programEligibility_parser_)
            {
              this->programEligibility_parser_->pre ();
              ctx.nested_parser (this->programEligibility_parser_);
            }
          }
          else
          {
            if (this->programEligibility_parser_ != 0)
            {
              this->programEligibility_parser_->post_CodeableConcept ();
              this->programEligibility ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "fundingSource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fundingSource_parser_)
            {
              this->fundingSource_parser_->pre ();
              ctx.nested_parser (this->fundingSource_parser_);
            }
          }
          else
          {
            if (this->fundingSource_parser_ != 0)
            {
              this->fundingSource_parser_->post_CodeableConcept ();
              this->fundingSource ();
            }

            count = 0;
            state = 27UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "reaction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reaction_parser_)
            {
              this->reaction_parser_->pre ();
              ctx.nested_parser (this->reaction_parser_);
            }
          }
          else
          {
            if (this->reaction_parser_ != 0)
            {
              this->reaction_parser_->post_Immunization_Reaction ();
              this->reaction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "protocolApplied" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->protocolApplied_parser_)
            {
              this->protocolApplied_parser_->pre ();
              ctx.nested_parser (this->protocolApplied_parser_);
            }
          }
          else
          {
            if (this->protocolApplied_parser_ != 0)
            {
              this->protocolApplied_parser_->post_Immunization_ProtocolApplied ();
              this->protocolApplied ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Immunization_Performer_pskel.
  //
  bool Immunization_Performer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "function" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "actor" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Immunization_Performer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Immunization_Performer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Immunization_Performer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Immunization_Performer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Immunization_Performer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "function" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->function_parser_)
            {
              this->function_parser_->pre ();
              ctx.nested_parser (this->function_parser_);
            }
          }
          else
          {
            if (this->function_parser_ != 0)
            {
              this->function_parser_->post_CodeableConcept ();
              this->function ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_Reference ();
              this->actor ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Immunization_Education_pskel.
  //
  bool Immunization_Education_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "documentType" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "reference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "publicationDate" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "presentationDate" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Immunization_Education_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Immunization_Education_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Immunization_Education_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Immunization_Education_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Immunization_Education_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "documentType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentType_parser_)
            {
              this->documentType_parser_->pre ();
              ctx.nested_parser (this->documentType_parser_);
            }
          }
          else
          {
            if (this->documentType_parser_ != 0)
            {
              this->documentType_parser_->post_string ();
              this->documentType ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_uri ();
              this->reference ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "publicationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publicationDate_parser_)
            {
              this->publicationDate_parser_->pre ();
              ctx.nested_parser (this->publicationDate_parser_);
            }
          }
          else
          {
            if (this->publicationDate_parser_ != 0)
            {
              this->publicationDate_parser_->post_dateTime ();
              this->publicationDate ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "presentationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->presentationDate_parser_)
            {
              this->presentationDate_parser_->pre ();
              ctx.nested_parser (this->presentationDate_parser_);
            }
          }
          else
          {
            if (this->presentationDate_parser_ != 0)
            {
              this->presentationDate_parser_->post_dateTime ();
              this->presentationDate ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Immunization_Reaction_pskel.
  //
  bool Immunization_Reaction_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "date" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "detail" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "reported" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Immunization_Reaction_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Immunization_Reaction_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Immunization_Reaction_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Immunization_Reaction_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Immunization_Reaction_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_Reference ();
              this->detail ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "reported" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reported_parser_)
            {
              this->reported_parser_->pre ();
              ctx.nested_parser (this->reported_parser_);
            }
          }
          else
          {
            if (this->reported_parser_ != 0)
            {
              this->reported_parser_->post_boolean ();
              this->reported ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Immunization_ProtocolApplied_pskel.
  //
  bool Immunization_ProtocolApplied_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "series" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "authority" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "targetDisease" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "doseNumberPositiveInt" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "doseNumberString" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "seriesDosesPositiveInt" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "seriesDosesString" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Immunization_ProtocolApplied_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Immunization_ProtocolApplied_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Immunization_ProtocolApplied_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Immunization_ProtocolApplied_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Immunization_ProtocolApplied_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "series" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->series_parser_)
            {
              this->series_parser_->pre ();
              ctx.nested_parser (this->series_parser_);
            }
          }
          else
          {
            if (this->series_parser_ != 0)
            {
              this->series_parser_->post_string ();
              this->series ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "authority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authority_parser_)
            {
              this->authority_parser_->pre ();
              ctx.nested_parser (this->authority_parser_);
            }
          }
          else
          {
            if (this->authority_parser_ != 0)
            {
              this->authority_parser_->post_Reference ();
              this->authority ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "targetDisease" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetDisease_parser_)
            {
              this->targetDisease_parser_->pre ();
              ctx.nested_parser (this->targetDisease_parser_);
            }
          }
          else
          {
            if (this->targetDisease_parser_ != 0)
            {
              this->targetDisease_parser_->post_CodeableConcept ();
              this->targetDisease ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "doseNumberPositiveInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doseNumberPositiveInt_parser_)
            {
              this->doseNumberPositiveInt_parser_->pre ();
              ctx.nested_parser (this->doseNumberPositiveInt_parser_);
            }
          }
          else
          {
            if (this->doseNumberPositiveInt_parser_ != 0)
            {
              this->doseNumberPositiveInt_parser_->post_positiveInt ();
              this->doseNumberPositiveInt ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "doseNumberString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doseNumberString_parser_)
            {
              this->doseNumberString_parser_->pre ();
              ctx.nested_parser (this->doseNumberString_parser_);
            }
          }
          else
          {
            if (this->doseNumberString_parser_ != 0)
            {
              this->doseNumberString_parser_->post_string ();
              this->doseNumberString ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "seriesDosesPositiveInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->seriesDosesPositiveInt_parser_)
            {
              this->seriesDosesPositiveInt_parser_->pre ();
              ctx.nested_parser (this->seriesDosesPositiveInt_parser_);
            }
          }
          else
          {
            if (this->seriesDosesPositiveInt_parser_ != 0)
            {
              this->seriesDosesPositiveInt_parser_->post_positiveInt ();
              this->seriesDosesPositiveInt ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "seriesDosesString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->seriesDosesString_parser_)
            {
              this->seriesDosesString_parser_->pre ();
              ctx.nested_parser (this->seriesDosesString_parser_);
            }
          }
          else
          {
            if (this->seriesDosesString_parser_ != 0)
            {
              this->seriesDosesString_parser_->post_string ();
              this->seriesDosesString ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ImmunizationStatusCodes_pskel.
  //
  bool ImmunizationStatusCodes_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ImmunizationStatusCodes_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

