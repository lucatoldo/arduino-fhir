// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "medicinalproductpharmaceutical-pskel.hxx"

namespace fhir
{
  // MedicinalProductPharmaceutical_pskel
  //

  void MedicinalProductPharmaceutical_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_pskel::
  administrableDoseForm_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->administrableDoseForm_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_pskel::
  unitOfPresentation_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->unitOfPresentation_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_pskel::
  ingredient_parser (::fhir::Reference_pskel& p)
  {
    this->ingredient_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_pskel::
  device_parser (::fhir::Reference_pskel& p)
  {
    this->device_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_pskel::
  characteristics_parser (::fhir::MedicinalProductPharmaceutical_Characteristics_pskel& p)
  {
    this->characteristics_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_pskel::
  routeOfAdministration_parser (::fhir::MedicinalProductPharmaceutical_RouteOfAdministration_pskel& p)
  {
    this->routeOfAdministration_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& administrableDoseForm,
           ::fhir::CodeableConcept_pskel& unitOfPresentation,
           ::fhir::Reference_pskel& ingredient,
           ::fhir::Reference_pskel& device,
           ::fhir::MedicinalProductPharmaceutical_Characteristics_pskel& characteristics,
           ::fhir::MedicinalProductPharmaceutical_RouteOfAdministration_pskel& routeOfAdministration)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->administrableDoseForm_parser_ = &administrableDoseForm;
    this->unitOfPresentation_parser_ = &unitOfPresentation;
    this->ingredient_parser_ = &ingredient;
    this->device_parser_ = &device;
    this->characteristics_parser_ = &characteristics;
    this->routeOfAdministration_parser_ = &routeOfAdministration;
  }

  MedicinalProductPharmaceutical_pskel::
  MedicinalProductPharmaceutical_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MedicinalProductPharmaceutical_impl_ (0),
    identifier_parser_ (0),
    administrableDoseForm_parser_ (0),
    unitOfPresentation_parser_ (0),
    ingredient_parser_ (0),
    device_parser_ (0),
    characteristics_parser_ (0),
    routeOfAdministration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPharmaceutical_pskel::
  MedicinalProductPharmaceutical_pskel (MedicinalProductPharmaceutical_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MedicinalProductPharmaceutical_impl_ (impl),
    identifier_parser_ (0),
    administrableDoseForm_parser_ (0),
    unitOfPresentation_parser_ (0),
    ingredient_parser_ (0),
    device_parser_ (0),
    characteristics_parser_ (0),
    routeOfAdministration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductPharmaceutical_Characteristics_pskel
  //

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  status_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& status)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->status_parser_ = &status;
  }

  MedicinalProductPharmaceutical_Characteristics_pskel::
  MedicinalProductPharmaceutical_Characteristics_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductPharmaceutical_Characteristics_impl_ (0),
    code_parser_ (0),
    status_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPharmaceutical_Characteristics_pskel::
  MedicinalProductPharmaceutical_Characteristics_pskel (MedicinalProductPharmaceutical_Characteristics_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductPharmaceutical_Characteristics_impl_ (impl),
    code_parser_ (0),
    status_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductPharmaceutical_RouteOfAdministration_pskel
  //

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  firstDose_parser (::fhir::Quantity_pskel& p)
  {
    this->firstDose_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxSingleDose_parser (::fhir::Quantity_pskel& p)
  {
    this->maxSingleDose_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxDosePerDay_parser (::fhir::Quantity_pskel& p)
  {
    this->maxDosePerDay_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxDosePerTreatmentPeriod_parser (::fhir::Ratio_pskel& p)
  {
    this->maxDosePerTreatmentPeriod_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxTreatmentPeriod_parser (::fhir::Duration_pskel& p)
  {
    this->maxTreatmentPeriod_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  targetSpecies_parser (::fhir::MedicinalProductPharmaceutical_TargetSpecies_pskel& p)
  {
    this->targetSpecies_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Quantity_pskel& firstDose,
           ::fhir::Quantity_pskel& maxSingleDose,
           ::fhir::Quantity_pskel& maxDosePerDay,
           ::fhir::Ratio_pskel& maxDosePerTreatmentPeriod,
           ::fhir::Duration_pskel& maxTreatmentPeriod,
           ::fhir::MedicinalProductPharmaceutical_TargetSpecies_pskel& targetSpecies)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->firstDose_parser_ = &firstDose;
    this->maxSingleDose_parser_ = &maxSingleDose;
    this->maxDosePerDay_parser_ = &maxDosePerDay;
    this->maxDosePerTreatmentPeriod_parser_ = &maxDosePerTreatmentPeriod;
    this->maxTreatmentPeriod_parser_ = &maxTreatmentPeriod;
    this->targetSpecies_parser_ = &targetSpecies;
  }

  MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  MedicinalProductPharmaceutical_RouteOfAdministration_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductPharmaceutical_RouteOfAdministration_impl_ (0),
    code_parser_ (0),
    firstDose_parser_ (0),
    maxSingleDose_parser_ (0),
    maxDosePerDay_parser_ (0),
    maxDosePerTreatmentPeriod_parser_ (0),
    maxTreatmentPeriod_parser_ (0),
    targetSpecies_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  MedicinalProductPharmaceutical_RouteOfAdministration_pskel (MedicinalProductPharmaceutical_RouteOfAdministration_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductPharmaceutical_RouteOfAdministration_impl_ (impl),
    code_parser_ (0),
    firstDose_parser_ (0),
    maxSingleDose_parser_ (0),
    maxDosePerDay_parser_ (0),
    maxDosePerTreatmentPeriod_parser_ (0),
    maxTreatmentPeriod_parser_ (0),
    targetSpecies_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductPharmaceutical_TargetSpecies_pskel
  //

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  withdrawalPeriod_parser (::fhir::MedicinalProductPharmaceutical_WithdrawalPeriod_pskel& p)
  {
    this->withdrawalPeriod_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::MedicinalProductPharmaceutical_WithdrawalPeriod_pskel& withdrawalPeriod)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->withdrawalPeriod_parser_ = &withdrawalPeriod;
  }

  MedicinalProductPharmaceutical_TargetSpecies_pskel::
  MedicinalProductPharmaceutical_TargetSpecies_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductPharmaceutical_TargetSpecies_impl_ (0),
    code_parser_ (0),
    withdrawalPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPharmaceutical_TargetSpecies_pskel::
  MedicinalProductPharmaceutical_TargetSpecies_pskel (MedicinalProductPharmaceutical_TargetSpecies_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductPharmaceutical_TargetSpecies_impl_ (impl),
    code_parser_ (0),
    withdrawalPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductPharmaceutical_WithdrawalPeriod_pskel
  //

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  tissue_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->tissue_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  value_parser (::fhir::Quantity_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  supportingInformation_parser (::fhir::string_pskel& p)
  {
    this->supportingInformation_parser_ = &p;
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& tissue,
           ::fhir::Quantity_pskel& value,
           ::fhir::string_pskel& supportingInformation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->tissue_parser_ = &tissue;
    this->value_parser_ = &value;
    this->supportingInformation_parser_ = &supportingInformation;
  }

  MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  MedicinalProductPharmaceutical_WithdrawalPeriod_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductPharmaceutical_WithdrawalPeriod_impl_ (0),
    tissue_parser_ (0),
    value_parser_ (0),
    supportingInformation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  MedicinalProductPharmaceutical_WithdrawalPeriod_pskel (MedicinalProductPharmaceutical_WithdrawalPeriod_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductPharmaceutical_WithdrawalPeriod_impl_ (impl),
    tissue_parser_ (0),
    value_parser_ (0),
    supportingInformation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MedicinalProductPharmaceutical_pskel
  //

  void MedicinalProductPharmaceutical_pskel::
  identifier ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->identifier ();
  }

  void MedicinalProductPharmaceutical_pskel::
  administrableDoseForm ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->administrableDoseForm ();
  }

  void MedicinalProductPharmaceutical_pskel::
  unitOfPresentation ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->unitOfPresentation ();
  }

  void MedicinalProductPharmaceutical_pskel::
  ingredient ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->ingredient ();
  }

  void MedicinalProductPharmaceutical_pskel::
  device ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->device ();
  }

  void MedicinalProductPharmaceutical_pskel::
  characteristics ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->characteristics ();
  }

  void MedicinalProductPharmaceutical_pskel::
  routeOfAdministration ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->routeOfAdministration ();
  }

  void MedicinalProductPharmaceutical_pskel::
  post_MedicinalProductPharmaceutical ()
  {
    if (this->MedicinalProductPharmaceutical_impl_)
      this->MedicinalProductPharmaceutical_impl_->post_MedicinalProductPharmaceutical ();
    else
      post_DomainResource ();
  }

  void MedicinalProductPharmaceutical_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->administrableDoseForm_parser_)
      this->administrableDoseForm_parser_->_reset ();

    if (this->unitOfPresentation_parser_)
      this->unitOfPresentation_parser_->_reset ();

    if (this->ingredient_parser_)
      this->ingredient_parser_->_reset ();

    if (this->device_parser_)
      this->device_parser_->_reset ();

    if (this->characteristics_parser_)
      this->characteristics_parser_->_reset ();

    if (this->routeOfAdministration_parser_)
      this->routeOfAdministration_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductPharmaceutical_Characteristics_pskel
  //

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  code ()
  {
    if (this->MedicinalProductPharmaceutical_Characteristics_impl_)
      this->MedicinalProductPharmaceutical_Characteristics_impl_->code ();
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  status ()
  {
    if (this->MedicinalProductPharmaceutical_Characteristics_impl_)
      this->MedicinalProductPharmaceutical_Characteristics_impl_->status ();
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  post_MedicinalProductPharmaceutical_Characteristics ()
  {
    if (this->MedicinalProductPharmaceutical_Characteristics_impl_)
      this->MedicinalProductPharmaceutical_Characteristics_impl_->post_MedicinalProductPharmaceutical_Characteristics ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductPharmaceutical_RouteOfAdministration_pskel
  //

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  code ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->code ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  firstDose ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->firstDose ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxSingleDose ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->maxSingleDose ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxDosePerDay ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->maxDosePerDay ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxDosePerTreatmentPeriod ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->maxDosePerTreatmentPeriod ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  maxTreatmentPeriod ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->maxTreatmentPeriod ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  targetSpecies ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->targetSpecies ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  post_MedicinalProductPharmaceutical_RouteOfAdministration ()
  {
    if (this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_)
      this->MedicinalProductPharmaceutical_RouteOfAdministration_impl_->post_MedicinalProductPharmaceutical_RouteOfAdministration ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->firstDose_parser_)
      this->firstDose_parser_->_reset ();

    if (this->maxSingleDose_parser_)
      this->maxSingleDose_parser_->_reset ();

    if (this->maxDosePerDay_parser_)
      this->maxDosePerDay_parser_->_reset ();

    if (this->maxDosePerTreatmentPeriod_parser_)
      this->maxDosePerTreatmentPeriod_parser_->_reset ();

    if (this->maxTreatmentPeriod_parser_)
      this->maxTreatmentPeriod_parser_->_reset ();

    if (this->targetSpecies_parser_)
      this->targetSpecies_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductPharmaceutical_TargetSpecies_pskel
  //

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  code ()
  {
    if (this->MedicinalProductPharmaceutical_TargetSpecies_impl_)
      this->MedicinalProductPharmaceutical_TargetSpecies_impl_->code ();
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  withdrawalPeriod ()
  {
    if (this->MedicinalProductPharmaceutical_TargetSpecies_impl_)
      this->MedicinalProductPharmaceutical_TargetSpecies_impl_->withdrawalPeriod ();
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  post_MedicinalProductPharmaceutical_TargetSpecies ()
  {
    if (this->MedicinalProductPharmaceutical_TargetSpecies_impl_)
      this->MedicinalProductPharmaceutical_TargetSpecies_impl_->post_MedicinalProductPharmaceutical_TargetSpecies ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->withdrawalPeriod_parser_)
      this->withdrawalPeriod_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductPharmaceutical_WithdrawalPeriod_pskel
  //

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  tissue ()
  {
    if (this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_)
      this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_->tissue ();
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  value ()
  {
    if (this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_)
      this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_->value ();
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  supportingInformation ()
  {
    if (this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_)
      this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_->supportingInformation ();
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  post_MedicinalProductPharmaceutical_WithdrawalPeriod ()
  {
    if (this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_)
      this->MedicinalProductPharmaceutical_WithdrawalPeriod_impl_->post_MedicinalProductPharmaceutical_WithdrawalPeriod ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->tissue_parser_)
      this->tissue_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->supportingInformation_parser_)
      this->supportingInformation_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MedicinalProductPharmaceutical_pskel.
  //
  bool MedicinalProductPharmaceutical_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "administrableDoseForm" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPharmaceutical_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPharmaceutical_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPharmaceutical_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPharmaceutical_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPharmaceutical_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "administrableDoseForm" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->administrableDoseForm_parser_)
            {
              this->administrableDoseForm_parser_->pre ();
              ctx.nested_parser (this->administrableDoseForm_parser_);
            }
          }
          else
          {
            if (this->administrableDoseForm_parser_ != 0)
            {
              this->administrableDoseForm_parser_->post_CodeableConcept ();
              this->administrableDoseForm ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "unitOfPresentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitOfPresentation_parser_)
            {
              this->unitOfPresentation_parser_->pre ();
              ctx.nested_parser (this->unitOfPresentation_parser_);
            }
          }
          else
          {
            if (this->unitOfPresentation_parser_ != 0)
            {
              this->unitOfPresentation_parser_->post_CodeableConcept ();
              this->unitOfPresentation ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "ingredient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ingredient_parser_)
            {
              this->ingredient_parser_->pre ();
              ctx.nested_parser (this->ingredient_parser_);
            }
          }
          else
          {
            if (this->ingredient_parser_ != 0)
            {
              this->ingredient_parser_->post_Reference ();
              this->ingredient ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "device" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->device_parser_)
            {
              this->device_parser_->pre ();
              ctx.nested_parser (this->device_parser_);
            }
          }
          else
          {
            if (this->device_parser_ != 0)
            {
              this->device_parser_->post_Reference ();
              this->device ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "characteristics" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->characteristics_parser_)
            {
              this->characteristics_parser_->pre ();
              ctx.nested_parser (this->characteristics_parser_);
            }
          }
          else
          {
            if (this->characteristics_parser_ != 0)
            {
              this->characteristics_parser_->post_MedicinalProductPharmaceutical_Characteristics ();
              this->characteristics ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "routeOfAdministration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->routeOfAdministration_parser_)
            {
              this->routeOfAdministration_parser_->pre ();
              ctx.nested_parser (this->routeOfAdministration_parser_);
            }
          }
          else
          {
            if (this->routeOfAdministration_parser_ != 0)
            {
              this->routeOfAdministration_parser_->post_MedicinalProductPharmaceutical_RouteOfAdministration ();
              this->routeOfAdministration ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductPharmaceutical_Characteristics_pskel.
  //
  bool MedicinalProductPharmaceutical_Characteristics_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPharmaceutical_Characteristics_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPharmaceutical_Characteristics_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPharmaceutical_Characteristics_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CodeableConcept ();
              this->status ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductPharmaceutical_RouteOfAdministration_pskel.
  //
  bool MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPharmaceutical_RouteOfAdministration_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPharmaceutical_RouteOfAdministration_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "firstDose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->firstDose_parser_)
            {
              this->firstDose_parser_->pre ();
              ctx.nested_parser (this->firstDose_parser_);
            }
          }
          else
          {
            if (this->firstDose_parser_ != 0)
            {
              this->firstDose_parser_->post_Quantity ();
              this->firstDose ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "maxSingleDose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maxSingleDose_parser_)
            {
              this->maxSingleDose_parser_->pre ();
              ctx.nested_parser (this->maxSingleDose_parser_);
            }
          }
          else
          {
            if (this->maxSingleDose_parser_ != 0)
            {
              this->maxSingleDose_parser_->post_Quantity ();
              this->maxSingleDose ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "maxDosePerDay" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maxDosePerDay_parser_)
            {
              this->maxDosePerDay_parser_->pre ();
              ctx.nested_parser (this->maxDosePerDay_parser_);
            }
          }
          else
          {
            if (this->maxDosePerDay_parser_ != 0)
            {
              this->maxDosePerDay_parser_->post_Quantity ();
              this->maxDosePerDay ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "maxDosePerTreatmentPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maxDosePerTreatmentPeriod_parser_)
            {
              this->maxDosePerTreatmentPeriod_parser_->pre ();
              ctx.nested_parser (this->maxDosePerTreatmentPeriod_parser_);
            }
          }
          else
          {
            if (this->maxDosePerTreatmentPeriod_parser_ != 0)
            {
              this->maxDosePerTreatmentPeriod_parser_->post_Ratio ();
              this->maxDosePerTreatmentPeriod ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "maxTreatmentPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maxTreatmentPeriod_parser_)
            {
              this->maxTreatmentPeriod_parser_->pre ();
              ctx.nested_parser (this->maxTreatmentPeriod_parser_);
            }
          }
          else
          {
            if (this->maxTreatmentPeriod_parser_ != 0)
            {
              this->maxTreatmentPeriod_parser_->post_Duration ();
              this->maxTreatmentPeriod ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "targetSpecies" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetSpecies_parser_)
            {
              this->targetSpecies_parser_->pre ();
              ctx.nested_parser (this->targetSpecies_parser_);
            }
          }
          else
          {
            if (this->targetSpecies_parser_ != 0)
            {
              this->targetSpecies_parser_->post_MedicinalProductPharmaceutical_TargetSpecies ();
              this->targetSpecies ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductPharmaceutical_TargetSpecies_pskel.
  //
  bool MedicinalProductPharmaceutical_TargetSpecies_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPharmaceutical_TargetSpecies_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPharmaceutical_TargetSpecies_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPharmaceutical_TargetSpecies_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "withdrawalPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->withdrawalPeriod_parser_)
            {
              this->withdrawalPeriod_parser_->pre ();
              ctx.nested_parser (this->withdrawalPeriod_parser_);
            }
          }
          else
          {
            if (this->withdrawalPeriod_parser_ != 0)
            {
              this->withdrawalPeriod_parser_->post_MedicinalProductPharmaceutical_WithdrawalPeriod ();
              this->withdrawalPeriod ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductPharmaceutical_WithdrawalPeriod_pskel.
  //
  bool MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "tissue" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "tissue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->tissue_parser_)
            {
              this->tissue_parser_->pre ();
              ctx.nested_parser (this->tissue_parser_);
            }
          }
          else
          {
            if (this->tissue_parser_ != 0)
            {
              this->tissue_parser_->post_CodeableConcept ();
              this->tissue ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_Quantity ();
              this->value ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "supportingInformation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInformation_parser_)
            {
              this->supportingInformation_parser_->pre ();
              ctx.nested_parser (this->supportingInformation_parser_);
            }
          }
          else
          {
            if (this->supportingInformation_parser_ != 0)
            {
              this->supportingInformation_parser_->post_string ();
              this->supportingInformation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

