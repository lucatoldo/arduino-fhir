// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "auditevent-pskel.hxx"

namespace fhir
{
  // AuditEvent_pskel
  //

  void AuditEvent_pskel::
  type_parser (::fhir::Coding_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void AuditEvent_pskel::
  subtype_parser (::fhir::Coding_pskel& p)
  {
    this->subtype_parser_ = &p;
  }

  void AuditEvent_pskel::
  action_parser (::fhir::AuditEventAction_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void AuditEvent_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void AuditEvent_pskel::
  recorded_parser (::fhir::instant_pskel& p)
  {
    this->recorded_parser_ = &p;
  }

  void AuditEvent_pskel::
  outcome_parser (::fhir::AuditEventOutcome_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void AuditEvent_pskel::
  outcomeDesc_parser (::fhir::string_pskel& p)
  {
    this->outcomeDesc_parser_ = &p;
  }

  void AuditEvent_pskel::
  purposeOfEvent_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->purposeOfEvent_parser_ = &p;
  }

  void AuditEvent_pskel::
  agent_parser (::fhir::AuditEvent_Agent_pskel& p)
  {
    this->agent_parser_ = &p;
  }

  void AuditEvent_pskel::
  source_parser (::fhir::AuditEvent_Source_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void AuditEvent_pskel::
  entity_parser (::fhir::AuditEvent_Entity_pskel& p)
  {
    this->entity_parser_ = &p;
  }

  void AuditEvent_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Coding_pskel& type,
           ::fhir::Coding_pskel& subtype,
           ::fhir::AuditEventAction_pskel& action,
           ::fhir::Period_pskel& period,
           ::fhir::instant_pskel& recorded,
           ::fhir::AuditEventOutcome_pskel& outcome,
           ::fhir::string_pskel& outcomeDesc,
           ::fhir::CodeableConcept_pskel& purposeOfEvent,
           ::fhir::AuditEvent_Agent_pskel& agent,
           ::fhir::AuditEvent_Source_pskel& source,
           ::fhir::AuditEvent_Entity_pskel& entity)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->subtype_parser_ = &subtype;
    this->action_parser_ = &action;
    this->period_parser_ = &period;
    this->recorded_parser_ = &recorded;
    this->outcome_parser_ = &outcome;
    this->outcomeDesc_parser_ = &outcomeDesc;
    this->purposeOfEvent_parser_ = &purposeOfEvent;
    this->agent_parser_ = &agent;
    this->source_parser_ = &source;
    this->entity_parser_ = &entity;
  }

  AuditEvent_pskel::
  AuditEvent_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    AuditEvent_impl_ (0),
    type_parser_ (0),
    subtype_parser_ (0),
    action_parser_ (0),
    period_parser_ (0),
    recorded_parser_ (0),
    outcome_parser_ (0),
    outcomeDesc_parser_ (0),
    purposeOfEvent_parser_ (0),
    agent_parser_ (0),
    source_parser_ (0),
    entity_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AuditEvent_pskel::
  AuditEvent_pskel (AuditEvent_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    AuditEvent_impl_ (impl),
    type_parser_ (0),
    subtype_parser_ (0),
    action_parser_ (0),
    period_parser_ (0),
    recorded_parser_ (0),
    outcome_parser_ (0),
    outcomeDesc_parser_ (0),
    purposeOfEvent_parser_ (0),
    agent_parser_ (0),
    source_parser_ (0),
    entity_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AuditEvent_Agent_pskel
  //

  void AuditEvent_Agent_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  who_parser (::fhir::Reference_pskel& p)
  {
    this->who_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  altId_parser (::fhir::string_pskel& p)
  {
    this->altId_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  requestor_parser (::fhir::boolean_pskel& p)
  {
    this->requestor_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  policy_parser (::fhir::uri_pskel& p)
  {
    this->policy_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  media_parser (::fhir::Coding_pskel& p)
  {
    this->media_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  network_parser (::fhir::AuditEvent_Network_pskel& p)
  {
    this->network_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  purposeOfUse_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->purposeOfUse_parser_ = &p;
  }

  void AuditEvent_Agent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::Reference_pskel& who,
           ::fhir::string_pskel& altId,
           ::fhir::string_pskel& name,
           ::fhir::boolean_pskel& requestor,
           ::fhir::Reference_pskel& location,
           ::fhir::uri_pskel& policy,
           ::fhir::Coding_pskel& media,
           ::fhir::AuditEvent_Network_pskel& network,
           ::fhir::CodeableConcept_pskel& purposeOfUse)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->role_parser_ = &role;
    this->who_parser_ = &who;
    this->altId_parser_ = &altId;
    this->name_parser_ = &name;
    this->requestor_parser_ = &requestor;
    this->location_parser_ = &location;
    this->policy_parser_ = &policy;
    this->media_parser_ = &media;
    this->network_parser_ = &network;
    this->purposeOfUse_parser_ = &purposeOfUse;
  }

  AuditEvent_Agent_pskel::
  AuditEvent_Agent_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AuditEvent_Agent_impl_ (0),
    type_parser_ (0),
    role_parser_ (0),
    who_parser_ (0),
    altId_parser_ (0),
    name_parser_ (0),
    requestor_parser_ (0),
    location_parser_ (0),
    policy_parser_ (0),
    media_parser_ (0),
    network_parser_ (0),
    purposeOfUse_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AuditEvent_Agent_pskel::
  AuditEvent_Agent_pskel (AuditEvent_Agent_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AuditEvent_Agent_impl_ (impl),
    type_parser_ (0),
    role_parser_ (0),
    who_parser_ (0),
    altId_parser_ (0),
    name_parser_ (0),
    requestor_parser_ (0),
    location_parser_ (0),
    policy_parser_ (0),
    media_parser_ (0),
    network_parser_ (0),
    purposeOfUse_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AuditEvent_Network_pskel
  //

  void AuditEvent_Network_pskel::
  address_parser (::fhir::string_pskel& p)
  {
    this->address_parser_ = &p;
  }

  void AuditEvent_Network_pskel::
  type_parser (::fhir::AuditEventAgentNetworkType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void AuditEvent_Network_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& address,
           ::fhir::AuditEventAgentNetworkType_pskel& type)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->address_parser_ = &address;
    this->type_parser_ = &type;
  }

  AuditEvent_Network_pskel::
  AuditEvent_Network_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AuditEvent_Network_impl_ (0),
    address_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AuditEvent_Network_pskel::
  AuditEvent_Network_pskel (AuditEvent_Network_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AuditEvent_Network_impl_ (impl),
    address_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AuditEvent_Source_pskel
  //

  void AuditEvent_Source_pskel::
  site_parser (::fhir::string_pskel& p)
  {
    this->site_parser_ = &p;
  }

  void AuditEvent_Source_pskel::
  observer_parser (::fhir::Reference_pskel& p)
  {
    this->observer_parser_ = &p;
  }

  void AuditEvent_Source_pskel::
  type_parser (::fhir::Coding_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void AuditEvent_Source_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& site,
           ::fhir::Reference_pskel& observer,
           ::fhir::Coding_pskel& type)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->site_parser_ = &site;
    this->observer_parser_ = &observer;
    this->type_parser_ = &type;
  }

  AuditEvent_Source_pskel::
  AuditEvent_Source_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AuditEvent_Source_impl_ (0),
    site_parser_ (0),
    observer_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AuditEvent_Source_pskel::
  AuditEvent_Source_pskel (AuditEvent_Source_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AuditEvent_Source_impl_ (impl),
    site_parser_ (0),
    observer_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AuditEvent_Entity_pskel
  //

  void AuditEvent_Entity_pskel::
  what_parser (::fhir::Reference_pskel& p)
  {
    this->what_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  type_parser (::fhir::Coding_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  role_parser (::fhir::Coding_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  lifecycle_parser (::fhir::Coding_pskel& p)
  {
    this->lifecycle_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  securityLabel_parser (::fhir::Coding_pskel& p)
  {
    this->securityLabel_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  query_parser (::fhir::base64Binary_pskel& p)
  {
    this->query_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  detail_parser (::fhir::AuditEvent_Detail_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void AuditEvent_Entity_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& what,
           ::fhir::Coding_pskel& type,
           ::fhir::Coding_pskel& role,
           ::fhir::Coding_pskel& lifecycle,
           ::fhir::Coding_pskel& securityLabel,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& description,
           ::fhir::base64Binary_pskel& query,
           ::fhir::AuditEvent_Detail_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->what_parser_ = &what;
    this->type_parser_ = &type;
    this->role_parser_ = &role;
    this->lifecycle_parser_ = &lifecycle;
    this->securityLabel_parser_ = &securityLabel;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
    this->query_parser_ = &query;
    this->detail_parser_ = &detail;
  }

  AuditEvent_Entity_pskel::
  AuditEvent_Entity_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AuditEvent_Entity_impl_ (0),
    what_parser_ (0),
    type_parser_ (0),
    role_parser_ (0),
    lifecycle_parser_ (0),
    securityLabel_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    query_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AuditEvent_Entity_pskel::
  AuditEvent_Entity_pskel (AuditEvent_Entity_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AuditEvent_Entity_impl_ (impl),
    what_parser_ (0),
    type_parser_ (0),
    role_parser_ (0),
    lifecycle_parser_ (0),
    securityLabel_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    query_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AuditEvent_Detail_pskel
  //

  void AuditEvent_Detail_pskel::
  type_parser (::fhir::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void AuditEvent_Detail_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void AuditEvent_Detail_pskel::
  valueBase64Binary_parser (::fhir::base64Binary_pskel& p)
  {
    this->valueBase64Binary_parser_ = &p;
  }

  void AuditEvent_Detail_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& type,
           ::fhir::string_pskel& valueString,
           ::fhir::base64Binary_pskel& valueBase64Binary)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->valueString_parser_ = &valueString;
    this->valueBase64Binary_parser_ = &valueBase64Binary;
  }

  AuditEvent_Detail_pskel::
  AuditEvent_Detail_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AuditEvent_Detail_impl_ (0),
    type_parser_ (0),
    valueString_parser_ (0),
    valueBase64Binary_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AuditEvent_Detail_pskel::
  AuditEvent_Detail_pskel (AuditEvent_Detail_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AuditEvent_Detail_impl_ (impl),
    type_parser_ (0),
    valueString_parser_ (0),
    valueBase64Binary_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AuditEventOutcome_list_pskel
  //

  AuditEventOutcome_list_pskel::
  AuditEventOutcome_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AuditEventOutcome_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AuditEventOutcome_list_pskel_enums_, 4UL);
  }

  AuditEventOutcome_list_pskel::
  AuditEventOutcome_list_pskel (AuditEventOutcome_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AuditEventOutcome_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AuditEventOutcome_list_pskel_enums_, 4UL);
  }

  // AuditEventOutcome_pskel
  //

  void AuditEventOutcome_pskel::
  value_parser (::fhir::AuditEventOutcome_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AuditEventOutcome_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AuditEventOutcome_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AuditEventOutcome_pskel::
  AuditEventOutcome_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AuditEventOutcome_impl_ (0),
    value_parser_ (0)
  {
  }

  AuditEventOutcome_pskel::
  AuditEventOutcome_pskel (AuditEventOutcome_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AuditEventOutcome_impl_ (impl),
    value_parser_ (0)
  {
  }

  // AuditEventAction_list_pskel
  //

  AuditEventAction_list_pskel::
  AuditEventAction_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AuditEventAction_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AuditEventAction_list_pskel_enums_, 5UL);
  }

  AuditEventAction_list_pskel::
  AuditEventAction_list_pskel (AuditEventAction_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AuditEventAction_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AuditEventAction_list_pskel_enums_, 5UL);
  }

  // AuditEventAction_pskel
  //

  void AuditEventAction_pskel::
  value_parser (::fhir::AuditEventAction_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AuditEventAction_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AuditEventAction_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AuditEventAction_pskel::
  AuditEventAction_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AuditEventAction_impl_ (0),
    value_parser_ (0)
  {
  }

  AuditEventAction_pskel::
  AuditEventAction_pskel (AuditEventAction_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AuditEventAction_impl_ (impl),
    value_parser_ (0)
  {
  }

  // AuditEventAgentNetworkType_list_pskel
  //

  AuditEventAgentNetworkType_list_pskel::
  AuditEventAgentNetworkType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AuditEventAgentNetworkType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AuditEventAgentNetworkType_list_pskel_enums_, 5UL);
  }

  AuditEventAgentNetworkType_list_pskel::
  AuditEventAgentNetworkType_list_pskel (AuditEventAgentNetworkType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AuditEventAgentNetworkType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AuditEventAgentNetworkType_list_pskel_enums_, 5UL);
  }

  // AuditEventAgentNetworkType_pskel
  //

  void AuditEventAgentNetworkType_pskel::
  value_parser (::fhir::AuditEventAgentNetworkType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AuditEventAgentNetworkType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AuditEventAgentNetworkType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AuditEventAgentNetworkType_pskel::
  AuditEventAgentNetworkType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AuditEventAgentNetworkType_impl_ (0),
    value_parser_ (0)
  {
  }

  AuditEventAgentNetworkType_pskel::
  AuditEventAgentNetworkType_pskel (AuditEventAgentNetworkType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AuditEventAgentNetworkType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // AuditEvent_pskel
  //

  void AuditEvent_pskel::
  type ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->type ();
  }

  void AuditEvent_pskel::
  subtype ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->subtype ();
  }

  void AuditEvent_pskel::
  action ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->action ();
  }

  void AuditEvent_pskel::
  period ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->period ();
  }

  void AuditEvent_pskel::
  recorded ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->recorded ();
  }

  void AuditEvent_pskel::
  outcome ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->outcome ();
  }

  void AuditEvent_pskel::
  outcomeDesc ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->outcomeDesc ();
  }

  void AuditEvent_pskel::
  purposeOfEvent ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->purposeOfEvent ();
  }

  void AuditEvent_pskel::
  agent ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->agent ();
  }

  void AuditEvent_pskel::
  source ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->source ();
  }

  void AuditEvent_pskel::
  entity ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->entity ();
  }

  void AuditEvent_pskel::
  post_AuditEvent ()
  {
    if (this->AuditEvent_impl_)
      this->AuditEvent_impl_->post_AuditEvent ();
    else
      post_DomainResource ();
  }

  void AuditEvent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subtype_parser_)
      this->subtype_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->recorded_parser_)
      this->recorded_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->outcomeDesc_parser_)
      this->outcomeDesc_parser_->_reset ();

    if (this->purposeOfEvent_parser_)
      this->purposeOfEvent_parser_->_reset ();

    if (this->agent_parser_)
      this->agent_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->entity_parser_)
      this->entity_parser_->_reset ();

    this->resetting_ = false;
  }

  // AuditEvent_Agent_pskel
  //

  void AuditEvent_Agent_pskel::
  type ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->type ();
  }

  void AuditEvent_Agent_pskel::
  role ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->role ();
  }

  void AuditEvent_Agent_pskel::
  who ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->who ();
  }

  void AuditEvent_Agent_pskel::
  altId ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->altId ();
  }

  void AuditEvent_Agent_pskel::
  name ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->name ();
  }

  void AuditEvent_Agent_pskel::
  requestor ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->requestor ();
  }

  void AuditEvent_Agent_pskel::
  location ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->location ();
  }

  void AuditEvent_Agent_pskel::
  policy ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->policy ();
  }

  void AuditEvent_Agent_pskel::
  media ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->media ();
  }

  void AuditEvent_Agent_pskel::
  network ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->network ();
  }

  void AuditEvent_Agent_pskel::
  purposeOfUse ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->purposeOfUse ();
  }

  void AuditEvent_Agent_pskel::
  post_AuditEvent_Agent ()
  {
    if (this->AuditEvent_Agent_impl_)
      this->AuditEvent_Agent_impl_->post_AuditEvent_Agent ();
    else
      post_BackboneElement ();
  }

  void AuditEvent_Agent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->who_parser_)
      this->who_parser_->_reset ();

    if (this->altId_parser_)
      this->altId_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->requestor_parser_)
      this->requestor_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->policy_parser_)
      this->policy_parser_->_reset ();

    if (this->media_parser_)
      this->media_parser_->_reset ();

    if (this->network_parser_)
      this->network_parser_->_reset ();

    if (this->purposeOfUse_parser_)
      this->purposeOfUse_parser_->_reset ();

    this->resetting_ = false;
  }

  // AuditEvent_Network_pskel
  //

  void AuditEvent_Network_pskel::
  address ()
  {
    if (this->AuditEvent_Network_impl_)
      this->AuditEvent_Network_impl_->address ();
  }

  void AuditEvent_Network_pskel::
  type ()
  {
    if (this->AuditEvent_Network_impl_)
      this->AuditEvent_Network_impl_->type ();
  }

  void AuditEvent_Network_pskel::
  post_AuditEvent_Network ()
  {
    if (this->AuditEvent_Network_impl_)
      this->AuditEvent_Network_impl_->post_AuditEvent_Network ();
    else
      post_BackboneElement ();
  }

  void AuditEvent_Network_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->address_parser_)
      this->address_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = false;
  }

  // AuditEvent_Source_pskel
  //

  void AuditEvent_Source_pskel::
  site ()
  {
    if (this->AuditEvent_Source_impl_)
      this->AuditEvent_Source_impl_->site ();
  }

  void AuditEvent_Source_pskel::
  observer ()
  {
    if (this->AuditEvent_Source_impl_)
      this->AuditEvent_Source_impl_->observer ();
  }

  void AuditEvent_Source_pskel::
  type ()
  {
    if (this->AuditEvent_Source_impl_)
      this->AuditEvent_Source_impl_->type ();
  }

  void AuditEvent_Source_pskel::
  post_AuditEvent_Source ()
  {
    if (this->AuditEvent_Source_impl_)
      this->AuditEvent_Source_impl_->post_AuditEvent_Source ();
    else
      post_BackboneElement ();
  }

  void AuditEvent_Source_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->site_parser_)
      this->site_parser_->_reset ();

    if (this->observer_parser_)
      this->observer_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = false;
  }

  // AuditEvent_Entity_pskel
  //

  void AuditEvent_Entity_pskel::
  what ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->what ();
  }

  void AuditEvent_Entity_pskel::
  type ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->type ();
  }

  void AuditEvent_Entity_pskel::
  role ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->role ();
  }

  void AuditEvent_Entity_pskel::
  lifecycle ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->lifecycle ();
  }

  void AuditEvent_Entity_pskel::
  securityLabel ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->securityLabel ();
  }

  void AuditEvent_Entity_pskel::
  name ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->name ();
  }

  void AuditEvent_Entity_pskel::
  description ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->description ();
  }

  void AuditEvent_Entity_pskel::
  query ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->query ();
  }

  void AuditEvent_Entity_pskel::
  detail ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->detail ();
  }

  void AuditEvent_Entity_pskel::
  post_AuditEvent_Entity ()
  {
    if (this->AuditEvent_Entity_impl_)
      this->AuditEvent_Entity_impl_->post_AuditEvent_Entity ();
    else
      post_BackboneElement ();
  }

  void AuditEvent_Entity_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->what_parser_)
      this->what_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->lifecycle_parser_)
      this->lifecycle_parser_->_reset ();

    if (this->securityLabel_parser_)
      this->securityLabel_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->query_parser_)
      this->query_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // AuditEvent_Detail_pskel
  //

  void AuditEvent_Detail_pskel::
  type ()
  {
    if (this->AuditEvent_Detail_impl_)
      this->AuditEvent_Detail_impl_->type ();
  }

  void AuditEvent_Detail_pskel::
  valueString ()
  {
    if (this->AuditEvent_Detail_impl_)
      this->AuditEvent_Detail_impl_->valueString ();
  }

  void AuditEvent_Detail_pskel::
  valueBase64Binary ()
  {
    if (this->AuditEvent_Detail_impl_)
      this->AuditEvent_Detail_impl_->valueBase64Binary ();
  }

  void AuditEvent_Detail_pskel::
  post_AuditEvent_Detail ()
  {
    if (this->AuditEvent_Detail_impl_)
      this->AuditEvent_Detail_impl_->post_AuditEvent_Detail ();
    else
      post_BackboneElement ();
  }

  void AuditEvent_Detail_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueBase64Binary_parser_)
      this->valueBase64Binary_parser_->_reset ();

    this->resetting_ = false;
  }

  // AuditEventOutcome_list_pskel
  //

  void AuditEventOutcome_list_pskel::
  post_AuditEventOutcome_list ()
  {
    if (this->AuditEventOutcome_list_impl_)
      this->AuditEventOutcome_list_impl_->post_AuditEventOutcome_list ();
    else
      post_code_primitive ();
  }

  const char* const AuditEventOutcome_list_pskel::_xsde_AuditEventOutcome_list_pskel_enums_[4UL] = 
  {
    "0",
    "12",
    "4",
    "8"
  };

  // AuditEventOutcome_pskel
  //

  void AuditEventOutcome_pskel::
  value ()
  {
    if (this->AuditEventOutcome_impl_)
      this->AuditEventOutcome_impl_->value ();
  }

  void AuditEventOutcome_pskel::
  post_AuditEventOutcome ()
  {
    if (this->AuditEventOutcome_impl_)
      this->AuditEventOutcome_impl_->post_AuditEventOutcome ();
    else
      post_Element ();
  }

  void AuditEventOutcome_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // AuditEventAction_list_pskel
  //

  void AuditEventAction_list_pskel::
  post_AuditEventAction_list ()
  {
    if (this->AuditEventAction_list_impl_)
      this->AuditEventAction_list_impl_->post_AuditEventAction_list ();
    else
      post_code_primitive ();
  }

  const char* const AuditEventAction_list_pskel::_xsde_AuditEventAction_list_pskel_enums_[5UL] = 
  {
    "C",
    "D",
    "E",
    "R",
    "U"
  };

  // AuditEventAction_pskel
  //

  void AuditEventAction_pskel::
  value ()
  {
    if (this->AuditEventAction_impl_)
      this->AuditEventAction_impl_->value ();
  }

  void AuditEventAction_pskel::
  post_AuditEventAction ()
  {
    if (this->AuditEventAction_impl_)
      this->AuditEventAction_impl_->post_AuditEventAction ();
    else
      post_Element ();
  }

  void AuditEventAction_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // AuditEventAgentNetworkType_list_pskel
  //

  void AuditEventAgentNetworkType_list_pskel::
  post_AuditEventAgentNetworkType_list ()
  {
    if (this->AuditEventAgentNetworkType_list_impl_)
      this->AuditEventAgentNetworkType_list_impl_->post_AuditEventAgentNetworkType_list ();
    else
      post_code_primitive ();
  }

  const char* const AuditEventAgentNetworkType_list_pskel::_xsde_AuditEventAgentNetworkType_list_pskel_enums_[5UL] = 
  {
    "1",
    "2",
    "3",
    "4",
    "5"
  };

  // AuditEventAgentNetworkType_pskel
  //

  void AuditEventAgentNetworkType_pskel::
  value ()
  {
    if (this->AuditEventAgentNetworkType_impl_)
      this->AuditEventAgentNetworkType_impl_->value ();
  }

  void AuditEventAgentNetworkType_pskel::
  post_AuditEventAgentNetworkType ()
  {
    if (this->AuditEventAgentNetworkType_impl_)
      this->AuditEventAgentNetworkType_impl_->post_AuditEventAgentNetworkType ();
    else
      post_Element ();
  }

  void AuditEventAgentNetworkType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for AuditEvent_pskel.
  //
  bool AuditEvent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AuditEvent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AuditEvent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AuditEvent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void AuditEvent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AuditEvent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_Coding ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "subtype" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subtype_parser_)
            {
              this->subtype_parser_->pre ();
              ctx.nested_parser (this->subtype_parser_);
            }
          }
          else
          {
            if (this->subtype_parser_ != 0)
            {
              this->subtype_parser_->post_Coding ();
              this->subtype ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_AuditEventAction ();
              this->action ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "recorded" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recorded_parser_)
            {
              this->recorded_parser_->pre ();
              ctx.nested_parser (this->recorded_parser_);
            }
          }
          else
          {
            if (this->recorded_parser_ != 0)
            {
              this->recorded_parser_->post_instant ();
              this->recorded ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_AuditEventOutcome ();
              this->outcome ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "outcomeDesc" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcomeDesc_parser_)
            {
              this->outcomeDesc_parser_->pre ();
              ctx.nested_parser (this->outcomeDesc_parser_);
            }
          }
          else
          {
            if (this->outcomeDesc_parser_ != 0)
            {
              this->outcomeDesc_parser_->post_string ();
              this->outcomeDesc ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "purposeOfEvent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purposeOfEvent_parser_)
            {
              this->purposeOfEvent_parser_->pre ();
              ctx.nested_parser (this->purposeOfEvent_parser_);
            }
          }
          else
          {
            if (this->purposeOfEvent_parser_ != 0)
            {
              this->purposeOfEvent_parser_->post_CodeableConcept ();
              this->purposeOfEvent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "agent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->agent_parser_)
            {
              this->agent_parser_->pre ();
              ctx.nested_parser (this->agent_parser_);
            }
          }
          else
          {
            if (this->agent_parser_ != 0)
            {
              this->agent_parser_->post_AuditEvent_Agent ();
              this->agent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_AuditEvent_Source ();
              this->source ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "entity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entity_parser_)
            {
              this->entity_parser_->pre ();
              ctx.nested_parser (this->entity_parser_);
            }
          }
          else
          {
            if (this->entity_parser_ != 0)
            {
              this->entity_parser_->post_AuditEvent_Entity ();
              this->entity ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AuditEvent_Agent_pskel.
  //
  bool AuditEvent_Agent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "role" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "who" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "altId" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "requestor" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AuditEvent_Agent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AuditEvent_Agent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AuditEvent_Agent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AuditEvent_Agent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AuditEvent_Agent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "who" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->who_parser_)
            {
              this->who_parser_->pre ();
              ctx.nested_parser (this->who_parser_);
            }
          }
          else
          {
            if (this->who_parser_ != 0)
            {
              this->who_parser_->post_Reference ();
              this->who ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "altId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->altId_parser_)
            {
              this->altId_parser_->pre ();
              ctx.nested_parser (this->altId_parser_);
            }
          }
          else
          {
            if (this->altId_parser_ != 0)
            {
              this->altId_parser_->post_string ();
              this->altId ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "requestor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requestor_parser_)
            {
              this->requestor_parser_->pre ();
              ctx.nested_parser (this->requestor_parser_);
            }
          }
          else
          {
            if (this->requestor_parser_ != 0)
            {
              this->requestor_parser_->post_boolean ();
              this->requestor ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "policy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->policy_parser_)
            {
              this->policy_parser_->pre ();
              ctx.nested_parser (this->policy_parser_);
            }
          }
          else
          {
            if (this->policy_parser_ != 0)
            {
              this->policy_parser_->post_uri ();
              this->policy ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "media" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->media_parser_)
            {
              this->media_parser_->pre ();
              ctx.nested_parser (this->media_parser_);
            }
          }
          else
          {
            if (this->media_parser_ != 0)
            {
              this->media_parser_->post_Coding ();
              this->media ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "network" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->network_parser_)
            {
              this->network_parser_->pre ();
              ctx.nested_parser (this->network_parser_);
            }
          }
          else
          {
            if (this->network_parser_ != 0)
            {
              this->network_parser_->post_AuditEvent_Network ();
              this->network ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "purposeOfUse" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purposeOfUse_parser_)
            {
              this->purposeOfUse_parser_->pre ();
              ctx.nested_parser (this->purposeOfUse_parser_);
            }
          }
          else
          {
            if (this->purposeOfUse_parser_ != 0)
            {
              this->purposeOfUse_parser_->post_CodeableConcept ();
              this->purposeOfUse ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AuditEvent_Network_pskel.
  //
  bool AuditEvent_Network_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "address" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AuditEvent_Network_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AuditEvent_Network_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AuditEvent_Network_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AuditEvent_Network_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void AuditEvent_Network_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "address" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->address_parser_)
            {
              this->address_parser_->pre ();
              ctx.nested_parser (this->address_parser_);
            }
          }
          else
          {
            if (this->address_parser_ != 0)
            {
              this->address_parser_->post_string ();
              this->address ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_AuditEventAgentNetworkType ();
              this->type ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AuditEvent_Source_pskel.
  //
  bool AuditEvent_Source_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "site" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "observer" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AuditEvent_Source_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AuditEvent_Source_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AuditEvent_Source_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AuditEvent_Source_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AuditEvent_Source_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "site" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->site_parser_)
            {
              this->site_parser_->pre ();
              ctx.nested_parser (this->site_parser_);
            }
          }
          else
          {
            if (this->site_parser_ != 0)
            {
              this->site_parser_->post_string ();
              this->site ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "observer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->observer_parser_)
            {
              this->observer_parser_->pre ();
              ctx.nested_parser (this->observer_parser_);
            }
          }
          else
          {
            if (this->observer_parser_ != 0)
            {
              this->observer_parser_->post_Reference ();
              this->observer ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_Coding ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AuditEvent_Entity_pskel.
  //
  bool AuditEvent_Entity_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "what" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "role" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "lifecycle" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "securityLabel" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "query" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "detail" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AuditEvent_Entity_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AuditEvent_Entity_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AuditEvent_Entity_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AuditEvent_Entity_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void AuditEvent_Entity_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "what" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->what_parser_)
            {
              this->what_parser_->pre ();
              ctx.nested_parser (this->what_parser_);
            }
          }
          else
          {
            if (this->what_parser_ != 0)
            {
              this->what_parser_->post_Reference ();
              this->what ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_Coding ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_Coding ();
              this->role ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "lifecycle" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lifecycle_parser_)
            {
              this->lifecycle_parser_->pre ();
              ctx.nested_parser (this->lifecycle_parser_);
            }
          }
          else
          {
            if (this->lifecycle_parser_ != 0)
            {
              this->lifecycle_parser_->post_Coding ();
              this->lifecycle ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "securityLabel" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabel_parser_)
            {
              this->securityLabel_parser_->pre ();
              ctx.nested_parser (this->securityLabel_parser_);
            }
          }
          else
          {
            if (this->securityLabel_parser_ != 0)
            {
              this->securityLabel_parser_->post_Coding ();
              this->securityLabel ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "query" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->query_parser_)
            {
              this->query_parser_->pre ();
              ctx.nested_parser (this->query_parser_);
            }
          }
          else
          {
            if (this->query_parser_ != 0)
            {
              this->query_parser_->post_base64Binary ();
              this->query ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_AuditEvent_Detail ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AuditEvent_Detail_pskel.
  //
  bool AuditEvent_Detail_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AuditEvent_Detail_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AuditEvent_Detail_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AuditEvent_Detail_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AuditEvent_Detail_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AuditEvent_Detail_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_string ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueBase64Binary" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBase64Binary_parser_)
            {
              this->valueBase64Binary_parser_->pre ();
              ctx.nested_parser (this->valueBase64Binary_parser_);
            }
          }
          else
          {
            if (this->valueBase64Binary_parser_ != 0)
            {
              this->valueBase64Binary_parser_->post_base64Binary ();
              this->valueBase64Binary ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for AuditEventOutcome_pskel.
  //
  bool AuditEventOutcome_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AuditEventOutcome_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for AuditEventAction_pskel.
  //
  bool AuditEventAction_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AuditEventAction_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for AuditEventAgentNetworkType_pskel.
  //
  bool AuditEventAgentNetworkType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AuditEventAgentNetworkType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

