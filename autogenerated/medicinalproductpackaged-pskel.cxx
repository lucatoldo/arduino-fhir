// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "medicinalproductpackaged-pskel.hxx"

namespace fhir
{
  // MedicinalProductPackaged_pskel
  //

  void MedicinalProductPackaged_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  legalStatusOfSupply_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->legalStatusOfSupply_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  marketingStatus_parser (::fhir::MarketingStatus_pskel& p)
  {
    this->marketingStatus_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  marketingAuthorization_parser (::fhir::Reference_pskel& p)
  {
    this->marketingAuthorization_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  manufacturer_parser (::fhir::Reference_pskel& p)
  {
    this->manufacturer_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  batchIdentifier_parser (::fhir::MedicinalProductPackaged_BatchIdentifier_pskel& p)
  {
    this->batchIdentifier_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  packageItem_parser (::fhir::MedicinalProductPackaged_PackageItem_pskel& p)
  {
    this->packageItem_parser_ = &p;
  }

  void MedicinalProductPackaged_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& subject,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& legalStatusOfSupply,
           ::fhir::MarketingStatus_pskel& marketingStatus,
           ::fhir::Reference_pskel& marketingAuthorization,
           ::fhir::Reference_pskel& manufacturer,
           ::fhir::MedicinalProductPackaged_BatchIdentifier_pskel& batchIdentifier,
           ::fhir::MedicinalProductPackaged_PackageItem_pskel& packageItem)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->subject_parser_ = &subject;
    this->description_parser_ = &description;
    this->legalStatusOfSupply_parser_ = &legalStatusOfSupply;
    this->marketingStatus_parser_ = &marketingStatus;
    this->marketingAuthorization_parser_ = &marketingAuthorization;
    this->manufacturer_parser_ = &manufacturer;
    this->batchIdentifier_parser_ = &batchIdentifier;
    this->packageItem_parser_ = &packageItem;
  }

  MedicinalProductPackaged_pskel::
  MedicinalProductPackaged_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MedicinalProductPackaged_impl_ (0),
    identifier_parser_ (0),
    subject_parser_ (0),
    description_parser_ (0),
    legalStatusOfSupply_parser_ (0),
    marketingStatus_parser_ (0),
    marketingAuthorization_parser_ (0),
    manufacturer_parser_ (0),
    batchIdentifier_parser_ (0),
    packageItem_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPackaged_pskel::
  MedicinalProductPackaged_pskel (MedicinalProductPackaged_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MedicinalProductPackaged_impl_ (impl),
    identifier_parser_ (0),
    subject_parser_ (0),
    description_parser_ (0),
    legalStatusOfSupply_parser_ (0),
    marketingStatus_parser_ (0),
    marketingAuthorization_parser_ (0),
    manufacturer_parser_ (0),
    batchIdentifier_parser_ (0),
    packageItem_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductPackaged_BatchIdentifier_pskel
  //

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  outerPackaging_parser (::fhir::Identifier_pskel& p)
  {
    this->outerPackaging_parser_ = &p;
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  immediatePackaging_parser (::fhir::Identifier_pskel& p)
  {
    this->immediatePackaging_parser_ = &p;
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& outerPackaging,
           ::fhir::Identifier_pskel& immediatePackaging)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->outerPackaging_parser_ = &outerPackaging;
    this->immediatePackaging_parser_ = &immediatePackaging;
  }

  MedicinalProductPackaged_BatchIdentifier_pskel::
  MedicinalProductPackaged_BatchIdentifier_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductPackaged_BatchIdentifier_impl_ (0),
    outerPackaging_parser_ (0),
    immediatePackaging_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPackaged_BatchIdentifier_pskel::
  MedicinalProductPackaged_BatchIdentifier_pskel (MedicinalProductPackaged_BatchIdentifier_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductPackaged_BatchIdentifier_impl_ (impl),
    outerPackaging_parser_ (0),
    immediatePackaging_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductPackaged_PackageItem_pskel
  //

  void MedicinalProductPackaged_PackageItem_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  material_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->material_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  alternateMaterial_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->alternateMaterial_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  device_parser (::fhir::Reference_pskel& p)
  {
    this->device_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  manufacturedItem_parser (::fhir::Reference_pskel& p)
  {
    this->manufacturedItem_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  packageItem_parser (::fhir::MedicinalProductPackaged_PackageItem_pskel& p)
  {
    this->packageItem_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  physicalCharacteristics_parser (::fhir::ProdCharacteristic_pskel& p)
  {
    this->physicalCharacteristics_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  otherCharacteristics_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->otherCharacteristics_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  shelfLifeStorage_parser (::fhir::ProductShelfLife_pskel& p)
  {
    this->shelfLifeStorage_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  manufacturer_parser (::fhir::Reference_pskel& p)
  {
    this->manufacturer_parser_ = &p;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::CodeableConcept_pskel& material,
           ::fhir::CodeableConcept_pskel& alternateMaterial,
           ::fhir::Reference_pskel& device,
           ::fhir::Reference_pskel& manufacturedItem,
           ::fhir::MedicinalProductPackaged_PackageItem_pskel& packageItem,
           ::fhir::ProdCharacteristic_pskel& physicalCharacteristics,
           ::fhir::CodeableConcept_pskel& otherCharacteristics,
           ::fhir::ProductShelfLife_pskel& shelfLifeStorage,
           ::fhir::Reference_pskel& manufacturer)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->type_parser_ = &type;
    this->quantity_parser_ = &quantity;
    this->material_parser_ = &material;
    this->alternateMaterial_parser_ = &alternateMaterial;
    this->device_parser_ = &device;
    this->manufacturedItem_parser_ = &manufacturedItem;
    this->packageItem_parser_ = &packageItem;
    this->physicalCharacteristics_parser_ = &physicalCharacteristics;
    this->otherCharacteristics_parser_ = &otherCharacteristics;
    this->shelfLifeStorage_parser_ = &shelfLifeStorage;
    this->manufacturer_parser_ = &manufacturer;
  }

  MedicinalProductPackaged_PackageItem_pskel::
  MedicinalProductPackaged_PackageItem_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductPackaged_PackageItem_impl_ (0),
    identifier_parser_ (0),
    type_parser_ (0),
    quantity_parser_ (0),
    material_parser_ (0),
    alternateMaterial_parser_ (0),
    device_parser_ (0),
    manufacturedItem_parser_ (0),
    packageItem_parser_ (0),
    physicalCharacteristics_parser_ (0),
    otherCharacteristics_parser_ (0),
    shelfLifeStorage_parser_ (0),
    manufacturer_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductPackaged_PackageItem_pskel::
  MedicinalProductPackaged_PackageItem_pskel (MedicinalProductPackaged_PackageItem_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductPackaged_PackageItem_impl_ (impl),
    identifier_parser_ (0),
    type_parser_ (0),
    quantity_parser_ (0),
    material_parser_ (0),
    alternateMaterial_parser_ (0),
    device_parser_ (0),
    manufacturedItem_parser_ (0),
    packageItem_parser_ (0),
    physicalCharacteristics_parser_ (0),
    otherCharacteristics_parser_ (0),
    shelfLifeStorage_parser_ (0),
    manufacturer_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MedicinalProductPackaged_pskel
  //

  void MedicinalProductPackaged_pskel::
  identifier ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->identifier ();
  }

  void MedicinalProductPackaged_pskel::
  subject ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->subject ();
  }

  void MedicinalProductPackaged_pskel::
  description ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->description ();
  }

  void MedicinalProductPackaged_pskel::
  legalStatusOfSupply ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->legalStatusOfSupply ();
  }

  void MedicinalProductPackaged_pskel::
  marketingStatus ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->marketingStatus ();
  }

  void MedicinalProductPackaged_pskel::
  marketingAuthorization ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->marketingAuthorization ();
  }

  void MedicinalProductPackaged_pskel::
  manufacturer ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->manufacturer ();
  }

  void MedicinalProductPackaged_pskel::
  batchIdentifier ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->batchIdentifier ();
  }

  void MedicinalProductPackaged_pskel::
  packageItem ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->packageItem ();
  }

  void MedicinalProductPackaged_pskel::
  post_MedicinalProductPackaged ()
  {
    if (this->MedicinalProductPackaged_impl_)
      this->MedicinalProductPackaged_impl_->post_MedicinalProductPackaged ();
    else
      post_DomainResource ();
  }

  void MedicinalProductPackaged_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->legalStatusOfSupply_parser_)
      this->legalStatusOfSupply_parser_->_reset ();

    if (this->marketingStatus_parser_)
      this->marketingStatus_parser_->_reset ();

    if (this->marketingAuthorization_parser_)
      this->marketingAuthorization_parser_->_reset ();

    if (this->manufacturer_parser_)
      this->manufacturer_parser_->_reset ();

    if (this->batchIdentifier_parser_)
      this->batchIdentifier_parser_->_reset ();

    if (this->packageItem_parser_)
      this->packageItem_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductPackaged_BatchIdentifier_pskel
  //

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  outerPackaging ()
  {
    if (this->MedicinalProductPackaged_BatchIdentifier_impl_)
      this->MedicinalProductPackaged_BatchIdentifier_impl_->outerPackaging ();
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  immediatePackaging ()
  {
    if (this->MedicinalProductPackaged_BatchIdentifier_impl_)
      this->MedicinalProductPackaged_BatchIdentifier_impl_->immediatePackaging ();
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  post_MedicinalProductPackaged_BatchIdentifier ()
  {
    if (this->MedicinalProductPackaged_BatchIdentifier_impl_)
      this->MedicinalProductPackaged_BatchIdentifier_impl_->post_MedicinalProductPackaged_BatchIdentifier ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->outerPackaging_parser_)
      this->outerPackaging_parser_->_reset ();

    if (this->immediatePackaging_parser_)
      this->immediatePackaging_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductPackaged_PackageItem_pskel
  //

  void MedicinalProductPackaged_PackageItem_pskel::
  identifier ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->identifier ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  type ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->type ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  quantity ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->quantity ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  material ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->material ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  alternateMaterial ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->alternateMaterial ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  device ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->device ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  manufacturedItem ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->manufacturedItem ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  packageItem ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->packageItem ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  physicalCharacteristics ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->physicalCharacteristics ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  otherCharacteristics ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->otherCharacteristics ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  shelfLifeStorage ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->shelfLifeStorage ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  manufacturer ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->manufacturer ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  post_MedicinalProductPackaged_PackageItem ()
  {
    if (this->MedicinalProductPackaged_PackageItem_impl_)
      this->MedicinalProductPackaged_PackageItem_impl_->post_MedicinalProductPackaged_PackageItem ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->material_parser_)
      this->material_parser_->_reset ();

    if (this->alternateMaterial_parser_)
      this->alternateMaterial_parser_->_reset ();

    if (this->device_parser_)
      this->device_parser_->_reset ();

    if (this->manufacturedItem_parser_)
      this->manufacturedItem_parser_->_reset ();

    if (this->packageItem_parser_)
      this->packageItem_parser_->_reset ();

    if (this->physicalCharacteristics_parser_)
      this->physicalCharacteristics_parser_->_reset ();

    if (this->otherCharacteristics_parser_)
      this->otherCharacteristics_parser_->_reset ();

    if (this->shelfLifeStorage_parser_)
      this->shelfLifeStorage_parser_->_reset ();

    if (this->manufacturer_parser_)
      this->manufacturer_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MedicinalProductPackaged_pskel.
  //
  bool MedicinalProductPackaged_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "subject" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "legalStatusOfSupply" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "marketingStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "marketingAuthorization" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "manufacturer" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "batchIdentifier" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "packageItem" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPackaged_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPackaged_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPackaged_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPackaged_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPackaged_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "legalStatusOfSupply" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->legalStatusOfSupply_parser_)
            {
              this->legalStatusOfSupply_parser_->pre ();
              ctx.nested_parser (this->legalStatusOfSupply_parser_);
            }
          }
          else
          {
            if (this->legalStatusOfSupply_parser_ != 0)
            {
              this->legalStatusOfSupply_parser_->post_CodeableConcept ();
              this->legalStatusOfSupply ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "marketingStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->marketingStatus_parser_)
            {
              this->marketingStatus_parser_->pre ();
              ctx.nested_parser (this->marketingStatus_parser_);
            }
          }
          else
          {
            if (this->marketingStatus_parser_ != 0)
            {
              this->marketingStatus_parser_->post_MarketingStatus ();
              this->marketingStatus ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "marketingAuthorization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->marketingAuthorization_parser_)
            {
              this->marketingAuthorization_parser_->pre ();
              ctx.nested_parser (this->marketingAuthorization_parser_);
            }
          }
          else
          {
            if (this->marketingAuthorization_parser_ != 0)
            {
              this->marketingAuthorization_parser_->post_Reference ();
              this->marketingAuthorization ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "manufacturer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturer_parser_)
            {
              this->manufacturer_parser_->pre ();
              ctx.nested_parser (this->manufacturer_parser_);
            }
          }
          else
          {
            if (this->manufacturer_parser_ != 0)
            {
              this->manufacturer_parser_->post_Reference ();
              this->manufacturer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "batchIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->batchIdentifier_parser_)
            {
              this->batchIdentifier_parser_->pre ();
              ctx.nested_parser (this->batchIdentifier_parser_);
            }
          }
          else
          {
            if (this->batchIdentifier_parser_ != 0)
            {
              this->batchIdentifier_parser_->post_MedicinalProductPackaged_BatchIdentifier ();
              this->batchIdentifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "packageItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->packageItem_parser_)
            {
              this->packageItem_parser_->pre ();
              ctx.nested_parser (this->packageItem_parser_);
            }
          }
          else
          {
            if (this->packageItem_parser_ != 0)
            {
              this->packageItem_parser_->post_MedicinalProductPackaged_PackageItem ();
              this->packageItem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductPackaged_BatchIdentifier_pskel.
  //
  bool MedicinalProductPackaged_BatchIdentifier_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "outerPackaging" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPackaged_BatchIdentifier_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPackaged_BatchIdentifier_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPackaged_BatchIdentifier_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "outerPackaging" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outerPackaging_parser_)
            {
              this->outerPackaging_parser_->pre ();
              ctx.nested_parser (this->outerPackaging_parser_);
            }
          }
          else
          {
            if (this->outerPackaging_parser_ != 0)
            {
              this->outerPackaging_parser_->post_Identifier ();
              this->outerPackaging ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "immediatePackaging" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->immediatePackaging_parser_)
            {
              this->immediatePackaging_parser_->pre ();
              ctx.nested_parser (this->immediatePackaging_parser_);
            }
          }
          else
          {
            if (this->immediatePackaging_parser_ != 0)
            {
              this->immediatePackaging_parser_->post_Identifier ();
              this->immediatePackaging ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductPackaged_PackageItem_pskel.
  //
  bool MedicinalProductPackaged_PackageItem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductPackaged_PackageItem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductPackaged_PackageItem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductPackaged_PackageItem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "material" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->material_parser_)
            {
              this->material_parser_->pre ();
              ctx.nested_parser (this->material_parser_);
            }
          }
          else
          {
            if (this->material_parser_ != 0)
            {
              this->material_parser_->post_CodeableConcept ();
              this->material ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "alternateMaterial" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->alternateMaterial_parser_)
            {
              this->alternateMaterial_parser_->pre ();
              ctx.nested_parser (this->alternateMaterial_parser_);
            }
          }
          else
          {
            if (this->alternateMaterial_parser_ != 0)
            {
              this->alternateMaterial_parser_->post_CodeableConcept ();
              this->alternateMaterial ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "device" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->device_parser_)
            {
              this->device_parser_->pre ();
              ctx.nested_parser (this->device_parser_);
            }
          }
          else
          {
            if (this->device_parser_ != 0)
            {
              this->device_parser_->post_Reference ();
              this->device ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "manufacturedItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturedItem_parser_)
            {
              this->manufacturedItem_parser_->pre ();
              ctx.nested_parser (this->manufacturedItem_parser_);
            }
          }
          else
          {
            if (this->manufacturedItem_parser_ != 0)
            {
              this->manufacturedItem_parser_->post_Reference ();
              this->manufacturedItem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "packageItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->packageItem_parser_)
            {
              this->packageItem_parser_->pre ();
              ctx.nested_parser (this->packageItem_parser_);
            }
          }
          else
          {
            if (this->packageItem_parser_ != 0)
            {
              this->packageItem_parser_->post_MedicinalProductPackaged_PackageItem ();
              this->packageItem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "physicalCharacteristics" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->physicalCharacteristics_parser_)
            {
              this->physicalCharacteristics_parser_->pre ();
              ctx.nested_parser (this->physicalCharacteristics_parser_);
            }
          }
          else
          {
            if (this->physicalCharacteristics_parser_ != 0)
            {
              this->physicalCharacteristics_parser_->post_ProdCharacteristic ();
              this->physicalCharacteristics ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "otherCharacteristics" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->otherCharacteristics_parser_)
            {
              this->otherCharacteristics_parser_->pre ();
              ctx.nested_parser (this->otherCharacteristics_parser_);
            }
          }
          else
          {
            if (this->otherCharacteristics_parser_ != 0)
            {
              this->otherCharacteristics_parser_->post_CodeableConcept ();
              this->otherCharacteristics ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "shelfLifeStorage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->shelfLifeStorage_parser_)
            {
              this->shelfLifeStorage_parser_->pre ();
              ctx.nested_parser (this->shelfLifeStorage_parser_);
            }
          }
          else
          {
            if (this->shelfLifeStorage_parser_ != 0)
            {
              this->shelfLifeStorage_parser_->post_ProductShelfLife ();
              this->shelfLifeStorage ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "manufacturer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturer_parser_)
            {
              this->manufacturer_parser_->pre ();
              ctx.nested_parser (this->manufacturer_parser_);
            }
          }
          else
          {
            if (this->manufacturer_parser_ != 0)
            {
              this->manufacturer_parser_->post_Reference ();
              this->manufacturer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

