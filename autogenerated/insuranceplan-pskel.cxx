// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "insuranceplan-pskel.hxx"

namespace fhir
{
  // InsurancePlan_pskel
  //

  void InsurancePlan_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void InsurancePlan_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void InsurancePlan_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void InsurancePlan_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void InsurancePlan_pskel::
  alias_parser (::fhir::string_pskel& p)
  {
    this->alias_parser_ = &p;
  }

  void InsurancePlan_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void InsurancePlan_pskel::
  ownedBy_parser (::fhir::Reference_pskel& p)
  {
    this->ownedBy_parser_ = &p;
  }

  void InsurancePlan_pskel::
  administeredBy_parser (::fhir::Reference_pskel& p)
  {
    this->administeredBy_parser_ = &p;
  }

  void InsurancePlan_pskel::
  coverageArea_parser (::fhir::Reference_pskel& p)
  {
    this->coverageArea_parser_ = &p;
  }

  void InsurancePlan_pskel::
  contact_parser (::fhir::InsurancePlan_Contact_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void InsurancePlan_pskel::
  endpoint_parser (::fhir::Reference_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void InsurancePlan_pskel::
  network_parser (::fhir::Reference_pskel& p)
  {
    this->network_parser_ = &p;
  }

  void InsurancePlan_pskel::
  coverage_parser (::fhir::InsurancePlan_Coverage_pskel& p)
  {
    this->coverage_parser_ = &p;
  }

  void InsurancePlan_pskel::
  plan_parser (::fhir::InsurancePlan_Plan_pskel& p)
  {
    this->plan_parser_ = &p;
  }

  void InsurancePlan_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& alias,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& ownedBy,
           ::fhir::Reference_pskel& administeredBy,
           ::fhir::Reference_pskel& coverageArea,
           ::fhir::InsurancePlan_Contact_pskel& contact,
           ::fhir::Reference_pskel& endpoint,
           ::fhir::Reference_pskel& network,
           ::fhir::InsurancePlan_Coverage_pskel& coverage,
           ::fhir::InsurancePlan_Plan_pskel& plan)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->name_parser_ = &name;
    this->alias_parser_ = &alias;
    this->period_parser_ = &period;
    this->ownedBy_parser_ = &ownedBy;
    this->administeredBy_parser_ = &administeredBy;
    this->coverageArea_parser_ = &coverageArea;
    this->contact_parser_ = &contact;
    this->endpoint_parser_ = &endpoint;
    this->network_parser_ = &network;
    this->coverage_parser_ = &coverage;
    this->plan_parser_ = &plan;
  }

  InsurancePlan_pskel::
  InsurancePlan_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    InsurancePlan_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    name_parser_ (0),
    alias_parser_ (0),
    period_parser_ (0),
    ownedBy_parser_ (0),
    administeredBy_parser_ (0),
    coverageArea_parser_ (0),
    contact_parser_ (0),
    endpoint_parser_ (0),
    network_parser_ (0),
    coverage_parser_ (0),
    plan_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_pskel::
  InsurancePlan_pskel (InsurancePlan_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    InsurancePlan_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    name_parser_ (0),
    alias_parser_ (0),
    period_parser_ (0),
    ownedBy_parser_ (0),
    administeredBy_parser_ (0),
    coverageArea_parser_ (0),
    contact_parser_ (0),
    endpoint_parser_ (0),
    network_parser_ (0),
    coverage_parser_ (0),
    plan_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_Contact_pskel
  //

  void InsurancePlan_Contact_pskel::
  purpose_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void InsurancePlan_Contact_pskel::
  name_parser (::fhir::HumanName_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void InsurancePlan_Contact_pskel::
  telecom_parser (::fhir::ContactPoint_pskel& p)
  {
    this->telecom_parser_ = &p;
  }

  void InsurancePlan_Contact_pskel::
  address_parser (::fhir::Address_pskel& p)
  {
    this->address_parser_ = &p;
  }

  void InsurancePlan_Contact_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& purpose,
           ::fhir::HumanName_pskel& name,
           ::fhir::ContactPoint_pskel& telecom,
           ::fhir::Address_pskel& address)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->purpose_parser_ = &purpose;
    this->name_parser_ = &name;
    this->telecom_parser_ = &telecom;
    this->address_parser_ = &address;
  }

  InsurancePlan_Contact_pskel::
  InsurancePlan_Contact_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_Contact_impl_ (0),
    purpose_parser_ (0),
    name_parser_ (0),
    telecom_parser_ (0),
    address_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_Contact_pskel::
  InsurancePlan_Contact_pskel (InsurancePlan_Contact_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_Contact_impl_ (impl),
    purpose_parser_ (0),
    name_parser_ (0),
    telecom_parser_ (0),
    address_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_Coverage_pskel
  //

  void InsurancePlan_Coverage_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void InsurancePlan_Coverage_pskel::
  network_parser (::fhir::Reference_pskel& p)
  {
    this->network_parser_ = &p;
  }

  void InsurancePlan_Coverage_pskel::
  benefit_parser (::fhir::InsurancePlan_Benefit_pskel& p)
  {
    this->benefit_parser_ = &p;
  }

  void InsurancePlan_Coverage_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& network,
           ::fhir::InsurancePlan_Benefit_pskel& benefit)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->network_parser_ = &network;
    this->benefit_parser_ = &benefit;
  }

  InsurancePlan_Coverage_pskel::
  InsurancePlan_Coverage_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_Coverage_impl_ (0),
    type_parser_ (0),
    network_parser_ (0),
    benefit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_Coverage_pskel::
  InsurancePlan_Coverage_pskel (InsurancePlan_Coverage_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_Coverage_impl_ (impl),
    type_parser_ (0),
    network_parser_ (0),
    benefit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_Benefit_pskel
  //

  void InsurancePlan_Benefit_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void InsurancePlan_Benefit_pskel::
  requirement_parser (::fhir::string_pskel& p)
  {
    this->requirement_parser_ = &p;
  }

  void InsurancePlan_Benefit_pskel::
  limit_parser (::fhir::InsurancePlan_Limit_pskel& p)
  {
    this->limit_parser_ = &p;
  }

  void InsurancePlan_Benefit_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::string_pskel& requirement,
           ::fhir::InsurancePlan_Limit_pskel& limit)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->requirement_parser_ = &requirement;
    this->limit_parser_ = &limit;
  }

  InsurancePlan_Benefit_pskel::
  InsurancePlan_Benefit_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_Benefit_impl_ (0),
    type_parser_ (0),
    requirement_parser_ (0),
    limit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_Benefit_pskel::
  InsurancePlan_Benefit_pskel (InsurancePlan_Benefit_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_Benefit_impl_ (impl),
    type_parser_ (0),
    requirement_parser_ (0),
    limit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_Limit_pskel
  //

  void InsurancePlan_Limit_pskel::
  value_parser (::fhir::Quantity_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void InsurancePlan_Limit_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void InsurancePlan_Limit_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Quantity_pskel& value,
           ::fhir::CodeableConcept_pskel& code)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->value_parser_ = &value;
    this->code_parser_ = &code;
  }

  InsurancePlan_Limit_pskel::
  InsurancePlan_Limit_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_Limit_impl_ (0),
    value_parser_ (0),
    code_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_Limit_pskel::
  InsurancePlan_Limit_pskel (InsurancePlan_Limit_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_Limit_impl_ (impl),
    value_parser_ (0),
    code_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_Plan_pskel
  //

  void InsurancePlan_Plan_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void InsurancePlan_Plan_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void InsurancePlan_Plan_pskel::
  coverageArea_parser (::fhir::Reference_pskel& p)
  {
    this->coverageArea_parser_ = &p;
  }

  void InsurancePlan_Plan_pskel::
  network_parser (::fhir::Reference_pskel& p)
  {
    this->network_parser_ = &p;
  }

  void InsurancePlan_Plan_pskel::
  generalCost_parser (::fhir::InsurancePlan_GeneralCost_pskel& p)
  {
    this->generalCost_parser_ = &p;
  }

  void InsurancePlan_Plan_pskel::
  specificCost_parser (::fhir::InsurancePlan_SpecificCost_pskel& p)
  {
    this->specificCost_parser_ = &p;
  }

  void InsurancePlan_Plan_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& coverageArea,
           ::fhir::Reference_pskel& network,
           ::fhir::InsurancePlan_GeneralCost_pskel& generalCost,
           ::fhir::InsurancePlan_SpecificCost_pskel& specificCost)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->type_parser_ = &type;
    this->coverageArea_parser_ = &coverageArea;
    this->network_parser_ = &network;
    this->generalCost_parser_ = &generalCost;
    this->specificCost_parser_ = &specificCost;
  }

  InsurancePlan_Plan_pskel::
  InsurancePlan_Plan_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_Plan_impl_ (0),
    identifier_parser_ (0),
    type_parser_ (0),
    coverageArea_parser_ (0),
    network_parser_ (0),
    generalCost_parser_ (0),
    specificCost_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_Plan_pskel::
  InsurancePlan_Plan_pskel (InsurancePlan_Plan_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_Plan_impl_ (impl),
    identifier_parser_ (0),
    type_parser_ (0),
    coverageArea_parser_ (0),
    network_parser_ (0),
    generalCost_parser_ (0),
    specificCost_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_GeneralCost_pskel
  //

  void InsurancePlan_GeneralCost_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void InsurancePlan_GeneralCost_pskel::
  groupSize_parser (::fhir::positiveInt_pskel& p)
  {
    this->groupSize_parser_ = &p;
  }

  void InsurancePlan_GeneralCost_pskel::
  cost_parser (::fhir::Money_pskel& p)
  {
    this->cost_parser_ = &p;
  }

  void InsurancePlan_GeneralCost_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void InsurancePlan_GeneralCost_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::positiveInt_pskel& groupSize,
           ::fhir::Money_pskel& cost,
           ::fhir::string_pskel& comment)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->groupSize_parser_ = &groupSize;
    this->cost_parser_ = &cost;
    this->comment_parser_ = &comment;
  }

  InsurancePlan_GeneralCost_pskel::
  InsurancePlan_GeneralCost_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_GeneralCost_impl_ (0),
    type_parser_ (0),
    groupSize_parser_ (0),
    cost_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_GeneralCost_pskel::
  InsurancePlan_GeneralCost_pskel (InsurancePlan_GeneralCost_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_GeneralCost_impl_ (impl),
    type_parser_ (0),
    groupSize_parser_ (0),
    cost_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_SpecificCost_pskel
  //

  void InsurancePlan_SpecificCost_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void InsurancePlan_SpecificCost_pskel::
  benefit_parser (::fhir::InsurancePlan_Benefit1_pskel& p)
  {
    this->benefit_parser_ = &p;
  }

  void InsurancePlan_SpecificCost_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::InsurancePlan_Benefit1_pskel& benefit)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->benefit_parser_ = &benefit;
  }

  InsurancePlan_SpecificCost_pskel::
  InsurancePlan_SpecificCost_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_SpecificCost_impl_ (0),
    category_parser_ (0),
    benefit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_SpecificCost_pskel::
  InsurancePlan_SpecificCost_pskel (InsurancePlan_SpecificCost_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_SpecificCost_impl_ (impl),
    category_parser_ (0),
    benefit_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_Benefit1_pskel
  //

  void InsurancePlan_Benefit1_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void InsurancePlan_Benefit1_pskel::
  cost_parser (::fhir::InsurancePlan_Cost_pskel& p)
  {
    this->cost_parser_ = &p;
  }

  void InsurancePlan_Benefit1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::InsurancePlan_Cost_pskel& cost)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->cost_parser_ = &cost;
  }

  InsurancePlan_Benefit1_pskel::
  InsurancePlan_Benefit1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_Benefit1_impl_ (0),
    type_parser_ (0),
    cost_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_Benefit1_pskel::
  InsurancePlan_Benefit1_pskel (InsurancePlan_Benefit1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_Benefit1_impl_ (impl),
    type_parser_ (0),
    cost_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InsurancePlan_Cost_pskel
  //

  void InsurancePlan_Cost_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void InsurancePlan_Cost_pskel::
  applicability_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->applicability_parser_ = &p;
  }

  void InsurancePlan_Cost_pskel::
  qualifiers_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->qualifiers_parser_ = &p;
  }

  void InsurancePlan_Cost_pskel::
  value_parser (::fhir::Quantity_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void InsurancePlan_Cost_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& applicability,
           ::fhir::CodeableConcept_pskel& qualifiers,
           ::fhir::Quantity_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->applicability_parser_ = &applicability;
    this->qualifiers_parser_ = &qualifiers;
    this->value_parser_ = &value;
  }

  InsurancePlan_Cost_pskel::
  InsurancePlan_Cost_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    InsurancePlan_Cost_impl_ (0),
    type_parser_ (0),
    applicability_parser_ (0),
    qualifiers_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  InsurancePlan_Cost_pskel::
  InsurancePlan_Cost_pskel (InsurancePlan_Cost_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    InsurancePlan_Cost_impl_ (impl),
    type_parser_ (0),
    applicability_parser_ (0),
    qualifiers_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // InsurancePlan_pskel
  //

  void InsurancePlan_pskel::
  identifier ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->identifier ();
  }

  void InsurancePlan_pskel::
  status ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->status ();
  }

  void InsurancePlan_pskel::
  type ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->type ();
  }

  void InsurancePlan_pskel::
  name ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->name ();
  }

  void InsurancePlan_pskel::
  alias ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->alias ();
  }

  void InsurancePlan_pskel::
  period ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->period ();
  }

  void InsurancePlan_pskel::
  ownedBy ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->ownedBy ();
  }

  void InsurancePlan_pskel::
  administeredBy ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->administeredBy ();
  }

  void InsurancePlan_pskel::
  coverageArea ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->coverageArea ();
  }

  void InsurancePlan_pskel::
  contact ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->contact ();
  }

  void InsurancePlan_pskel::
  endpoint ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->endpoint ();
  }

  void InsurancePlan_pskel::
  network ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->network ();
  }

  void InsurancePlan_pskel::
  coverage ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->coverage ();
  }

  void InsurancePlan_pskel::
  plan ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->plan ();
  }

  void InsurancePlan_pskel::
  post_InsurancePlan ()
  {
    if (this->InsurancePlan_impl_)
      this->InsurancePlan_impl_->post_InsurancePlan ();
    else
      post_DomainResource ();
  }

  void InsurancePlan_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->alias_parser_)
      this->alias_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->ownedBy_parser_)
      this->ownedBy_parser_->_reset ();

    if (this->administeredBy_parser_)
      this->administeredBy_parser_->_reset ();

    if (this->coverageArea_parser_)
      this->coverageArea_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    if (this->network_parser_)
      this->network_parser_->_reset ();

    if (this->coverage_parser_)
      this->coverage_parser_->_reset ();

    if (this->plan_parser_)
      this->plan_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_Contact_pskel
  //

  void InsurancePlan_Contact_pskel::
  purpose ()
  {
    if (this->InsurancePlan_Contact_impl_)
      this->InsurancePlan_Contact_impl_->purpose ();
  }

  void InsurancePlan_Contact_pskel::
  name ()
  {
    if (this->InsurancePlan_Contact_impl_)
      this->InsurancePlan_Contact_impl_->name ();
  }

  void InsurancePlan_Contact_pskel::
  telecom ()
  {
    if (this->InsurancePlan_Contact_impl_)
      this->InsurancePlan_Contact_impl_->telecom ();
  }

  void InsurancePlan_Contact_pskel::
  address ()
  {
    if (this->InsurancePlan_Contact_impl_)
      this->InsurancePlan_Contact_impl_->address ();
  }

  void InsurancePlan_Contact_pskel::
  post_InsurancePlan_Contact ()
  {
    if (this->InsurancePlan_Contact_impl_)
      this->InsurancePlan_Contact_impl_->post_InsurancePlan_Contact ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_Contact_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->telecom_parser_)
      this->telecom_parser_->_reset ();

    if (this->address_parser_)
      this->address_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_Coverage_pskel
  //

  void InsurancePlan_Coverage_pskel::
  type ()
  {
    if (this->InsurancePlan_Coverage_impl_)
      this->InsurancePlan_Coverage_impl_->type ();
  }

  void InsurancePlan_Coverage_pskel::
  network ()
  {
    if (this->InsurancePlan_Coverage_impl_)
      this->InsurancePlan_Coverage_impl_->network ();
  }

  void InsurancePlan_Coverage_pskel::
  benefit ()
  {
    if (this->InsurancePlan_Coverage_impl_)
      this->InsurancePlan_Coverage_impl_->benefit ();
  }

  void InsurancePlan_Coverage_pskel::
  post_InsurancePlan_Coverage ()
  {
    if (this->InsurancePlan_Coverage_impl_)
      this->InsurancePlan_Coverage_impl_->post_InsurancePlan_Coverage ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_Coverage_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->network_parser_)
      this->network_parser_->_reset ();

    if (this->benefit_parser_)
      this->benefit_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_Benefit_pskel
  //

  void InsurancePlan_Benefit_pskel::
  type ()
  {
    if (this->InsurancePlan_Benefit_impl_)
      this->InsurancePlan_Benefit_impl_->type ();
  }

  void InsurancePlan_Benefit_pskel::
  requirement ()
  {
    if (this->InsurancePlan_Benefit_impl_)
      this->InsurancePlan_Benefit_impl_->requirement ();
  }

  void InsurancePlan_Benefit_pskel::
  limit ()
  {
    if (this->InsurancePlan_Benefit_impl_)
      this->InsurancePlan_Benefit_impl_->limit ();
  }

  void InsurancePlan_Benefit_pskel::
  post_InsurancePlan_Benefit ()
  {
    if (this->InsurancePlan_Benefit_impl_)
      this->InsurancePlan_Benefit_impl_->post_InsurancePlan_Benefit ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_Benefit_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->requirement_parser_)
      this->requirement_parser_->_reset ();

    if (this->limit_parser_)
      this->limit_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_Limit_pskel
  //

  void InsurancePlan_Limit_pskel::
  value ()
  {
    if (this->InsurancePlan_Limit_impl_)
      this->InsurancePlan_Limit_impl_->value ();
  }

  void InsurancePlan_Limit_pskel::
  code ()
  {
    if (this->InsurancePlan_Limit_impl_)
      this->InsurancePlan_Limit_impl_->code ();
  }

  void InsurancePlan_Limit_pskel::
  post_InsurancePlan_Limit ()
  {
    if (this->InsurancePlan_Limit_impl_)
      this->InsurancePlan_Limit_impl_->post_InsurancePlan_Limit ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_Limit_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_Plan_pskel
  //

  void InsurancePlan_Plan_pskel::
  identifier ()
  {
    if (this->InsurancePlan_Plan_impl_)
      this->InsurancePlan_Plan_impl_->identifier ();
  }

  void InsurancePlan_Plan_pskel::
  type ()
  {
    if (this->InsurancePlan_Plan_impl_)
      this->InsurancePlan_Plan_impl_->type ();
  }

  void InsurancePlan_Plan_pskel::
  coverageArea ()
  {
    if (this->InsurancePlan_Plan_impl_)
      this->InsurancePlan_Plan_impl_->coverageArea ();
  }

  void InsurancePlan_Plan_pskel::
  network ()
  {
    if (this->InsurancePlan_Plan_impl_)
      this->InsurancePlan_Plan_impl_->network ();
  }

  void InsurancePlan_Plan_pskel::
  generalCost ()
  {
    if (this->InsurancePlan_Plan_impl_)
      this->InsurancePlan_Plan_impl_->generalCost ();
  }

  void InsurancePlan_Plan_pskel::
  specificCost ()
  {
    if (this->InsurancePlan_Plan_impl_)
      this->InsurancePlan_Plan_impl_->specificCost ();
  }

  void InsurancePlan_Plan_pskel::
  post_InsurancePlan_Plan ()
  {
    if (this->InsurancePlan_Plan_impl_)
      this->InsurancePlan_Plan_impl_->post_InsurancePlan_Plan ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_Plan_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->coverageArea_parser_)
      this->coverageArea_parser_->_reset ();

    if (this->network_parser_)
      this->network_parser_->_reset ();

    if (this->generalCost_parser_)
      this->generalCost_parser_->_reset ();

    if (this->specificCost_parser_)
      this->specificCost_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_GeneralCost_pskel
  //

  void InsurancePlan_GeneralCost_pskel::
  type ()
  {
    if (this->InsurancePlan_GeneralCost_impl_)
      this->InsurancePlan_GeneralCost_impl_->type ();
  }

  void InsurancePlan_GeneralCost_pskel::
  groupSize ()
  {
    if (this->InsurancePlan_GeneralCost_impl_)
      this->InsurancePlan_GeneralCost_impl_->groupSize ();
  }

  void InsurancePlan_GeneralCost_pskel::
  cost ()
  {
    if (this->InsurancePlan_GeneralCost_impl_)
      this->InsurancePlan_GeneralCost_impl_->cost ();
  }

  void InsurancePlan_GeneralCost_pskel::
  comment ()
  {
    if (this->InsurancePlan_GeneralCost_impl_)
      this->InsurancePlan_GeneralCost_impl_->comment ();
  }

  void InsurancePlan_GeneralCost_pskel::
  post_InsurancePlan_GeneralCost ()
  {
    if (this->InsurancePlan_GeneralCost_impl_)
      this->InsurancePlan_GeneralCost_impl_->post_InsurancePlan_GeneralCost ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_GeneralCost_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->groupSize_parser_)
      this->groupSize_parser_->_reset ();

    if (this->cost_parser_)
      this->cost_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_SpecificCost_pskel
  //

  void InsurancePlan_SpecificCost_pskel::
  category ()
  {
    if (this->InsurancePlan_SpecificCost_impl_)
      this->InsurancePlan_SpecificCost_impl_->category ();
  }

  void InsurancePlan_SpecificCost_pskel::
  benefit ()
  {
    if (this->InsurancePlan_SpecificCost_impl_)
      this->InsurancePlan_SpecificCost_impl_->benefit ();
  }

  void InsurancePlan_SpecificCost_pskel::
  post_InsurancePlan_SpecificCost ()
  {
    if (this->InsurancePlan_SpecificCost_impl_)
      this->InsurancePlan_SpecificCost_impl_->post_InsurancePlan_SpecificCost ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_SpecificCost_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->benefit_parser_)
      this->benefit_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_Benefit1_pskel
  //

  void InsurancePlan_Benefit1_pskel::
  type ()
  {
    if (this->InsurancePlan_Benefit1_impl_)
      this->InsurancePlan_Benefit1_impl_->type ();
  }

  void InsurancePlan_Benefit1_pskel::
  cost ()
  {
    if (this->InsurancePlan_Benefit1_impl_)
      this->InsurancePlan_Benefit1_impl_->cost ();
  }

  void InsurancePlan_Benefit1_pskel::
  post_InsurancePlan_Benefit1 ()
  {
    if (this->InsurancePlan_Benefit1_impl_)
      this->InsurancePlan_Benefit1_impl_->post_InsurancePlan_Benefit1 ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_Benefit1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->cost_parser_)
      this->cost_parser_->_reset ();

    this->resetting_ = false;
  }

  // InsurancePlan_Cost_pskel
  //

  void InsurancePlan_Cost_pskel::
  type ()
  {
    if (this->InsurancePlan_Cost_impl_)
      this->InsurancePlan_Cost_impl_->type ();
  }

  void InsurancePlan_Cost_pskel::
  applicability ()
  {
    if (this->InsurancePlan_Cost_impl_)
      this->InsurancePlan_Cost_impl_->applicability ();
  }

  void InsurancePlan_Cost_pskel::
  qualifiers ()
  {
    if (this->InsurancePlan_Cost_impl_)
      this->InsurancePlan_Cost_impl_->qualifiers ();
  }

  void InsurancePlan_Cost_pskel::
  value ()
  {
    if (this->InsurancePlan_Cost_impl_)
      this->InsurancePlan_Cost_impl_->value ();
  }

  void InsurancePlan_Cost_pskel::
  post_InsurancePlan_Cost ()
  {
    if (this->InsurancePlan_Cost_impl_)
      this->InsurancePlan_Cost_impl_->post_InsurancePlan_Cost ();
    else
      post_BackboneElement ();
  }

  void InsurancePlan_Cost_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->applicability_parser_)
      this->applicability_parser_->_reset ();

    if (this->qualifiers_parser_)
      this->qualifiers_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for InsurancePlan_pskel.
  //
  bool InsurancePlan_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "alias" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "ownedBy" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "administeredBy" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "coverageArea" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "contact" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "endpoint" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "network" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "coverage" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "plan" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void InsurancePlan_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "alias" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->alias_parser_)
            {
              this->alias_parser_->pre ();
              ctx.nested_parser (this->alias_parser_);
            }
          }
          else
          {
            if (this->alias_parser_ != 0)
            {
              this->alias_parser_->post_string ();
              this->alias ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "ownedBy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->ownedBy_parser_)
            {
              this->ownedBy_parser_->pre ();
              ctx.nested_parser (this->ownedBy_parser_);
            }
          }
          else
          {
            if (this->ownedBy_parser_ != 0)
            {
              this->ownedBy_parser_->post_Reference ();
              this->ownedBy ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "administeredBy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->administeredBy_parser_)
            {
              this->administeredBy_parser_->pre ();
              ctx.nested_parser (this->administeredBy_parser_);
            }
          }
          else
          {
            if (this->administeredBy_parser_ != 0)
            {
              this->administeredBy_parser_->post_Reference ();
              this->administeredBy ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "coverageArea" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverageArea_parser_)
            {
              this->coverageArea_parser_->pre ();
              ctx.nested_parser (this->coverageArea_parser_);
            }
          }
          else
          {
            if (this->coverageArea_parser_ != 0)
            {
              this->coverageArea_parser_->post_Reference ();
              this->coverageArea ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_InsurancePlan_Contact ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_Reference ();
              this->endpoint ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "network" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->network_parser_)
            {
              this->network_parser_->pre ();
              ctx.nested_parser (this->network_parser_);
            }
          }
          else
          {
            if (this->network_parser_ != 0)
            {
              this->network_parser_->post_Reference ();
              this->network ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "coverage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverage_parser_)
            {
              this->coverage_parser_->pre ();
              ctx.nested_parser (this->coverage_parser_);
            }
          }
          else
          {
            if (this->coverage_parser_ != 0)
            {
              this->coverage_parser_->post_InsurancePlan_Coverage ();
              this->coverage ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "plan" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->plan_parser_)
            {
              this->plan_parser_->pre ();
              ctx.nested_parser (this->plan_parser_);
            }
          }
          else
          {
            if (this->plan_parser_ != 0)
            {
              this->plan_parser_->post_InsurancePlan_Plan ();
              this->plan ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_Contact_pskel.
  //
  bool InsurancePlan_Contact_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "telecom" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "address" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_Contact_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_Contact_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_Contact_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_Contact_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void InsurancePlan_Contact_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_CodeableConcept ();
              this->purpose ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_HumanName ();
              this->name ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "telecom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->telecom_parser_)
            {
              this->telecom_parser_->pre ();
              ctx.nested_parser (this->telecom_parser_);
            }
          }
          else
          {
            if (this->telecom_parser_ != 0)
            {
              this->telecom_parser_->post_ContactPoint ();
              this->telecom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "address" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->address_parser_)
            {
              this->address_parser_->pre ();
              ctx.nested_parser (this->address_parser_);
            }
          }
          else
          {
            if (this->address_parser_ != 0)
            {
              this->address_parser_->post_Address ();
              this->address ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_Coverage_pskel.
  //
  bool InsurancePlan_Coverage_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_Coverage_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_Coverage_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_Coverage_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_Coverage_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void InsurancePlan_Coverage_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "network" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->network_parser_)
            {
              this->network_parser_->pre ();
              ctx.nested_parser (this->network_parser_);
            }
          }
          else
          {
            if (this->network_parser_ != 0)
            {
              this->network_parser_->post_Reference ();
              this->network ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "benefit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->benefit_parser_)
            {
              this->benefit_parser_->pre ();
              ctx.nested_parser (this->benefit_parser_);
            }
          }
          else
          {
            if (this->benefit_parser_ != 0)
            {
              this->benefit_parser_->post_InsurancePlan_Benefit ();
              this->benefit ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_Benefit_pskel.
  //
  bool InsurancePlan_Benefit_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_Benefit_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_Benefit_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_Benefit_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_Benefit_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void InsurancePlan_Benefit_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "requirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requirement_parser_)
            {
              this->requirement_parser_->pre ();
              ctx.nested_parser (this->requirement_parser_);
            }
          }
          else
          {
            if (this->requirement_parser_ != 0)
            {
              this->requirement_parser_->post_string ();
              this->requirement ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "limit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->limit_parser_)
            {
              this->limit_parser_->pre ();
              ctx.nested_parser (this->limit_parser_);
            }
          }
          else
          {
            if (this->limit_parser_ != 0)
            {
              this->limit_parser_->post_InsurancePlan_Limit ();
              this->limit ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_Limit_pskel.
  //
  bool InsurancePlan_Limit_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "value" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_Limit_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_Limit_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_Limit_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_Limit_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void InsurancePlan_Limit_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_Quantity ();
              this->value ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_Plan_pskel.
  //
  bool InsurancePlan_Plan_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "coverageArea" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "network" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "generalCost" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "specificCost" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_Plan_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_Plan_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_Plan_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_Plan_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void InsurancePlan_Plan_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "coverageArea" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverageArea_parser_)
            {
              this->coverageArea_parser_->pre ();
              ctx.nested_parser (this->coverageArea_parser_);
            }
          }
          else
          {
            if (this->coverageArea_parser_ != 0)
            {
              this->coverageArea_parser_->post_Reference ();
              this->coverageArea ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "network" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->network_parser_)
            {
              this->network_parser_->pre ();
              ctx.nested_parser (this->network_parser_);
            }
          }
          else
          {
            if (this->network_parser_ != 0)
            {
              this->network_parser_->post_Reference ();
              this->network ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "generalCost" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->generalCost_parser_)
            {
              this->generalCost_parser_->pre ();
              ctx.nested_parser (this->generalCost_parser_);
            }
          }
          else
          {
            if (this->generalCost_parser_ != 0)
            {
              this->generalCost_parser_->post_InsurancePlan_GeneralCost ();
              this->generalCost ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "specificCost" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specificCost_parser_)
            {
              this->specificCost_parser_->pre ();
              ctx.nested_parser (this->specificCost_parser_);
            }
          }
          else
          {
            if (this->specificCost_parser_ != 0)
            {
              this->specificCost_parser_->post_InsurancePlan_SpecificCost ();
              this->specificCost ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_GeneralCost_pskel.
  //
  bool InsurancePlan_GeneralCost_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "groupSize" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "cost" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "comment" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_GeneralCost_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_GeneralCost_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_GeneralCost_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_GeneralCost_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void InsurancePlan_GeneralCost_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "groupSize" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupSize_parser_)
            {
              this->groupSize_parser_->pre ();
              ctx.nested_parser (this->groupSize_parser_);
            }
          }
          else
          {
            if (this->groupSize_parser_ != 0)
            {
              this->groupSize_parser_->post_positiveInt ();
              this->groupSize ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "cost" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->cost_parser_)
            {
              this->cost_parser_->pre ();
              ctx.nested_parser (this->cost_parser_);
            }
          }
          else
          {
            if (this->cost_parser_ != 0)
            {
              this->cost_parser_->post_Money ();
              this->cost ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_SpecificCost_pskel.
  //
  bool InsurancePlan_SpecificCost_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_SpecificCost_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_SpecificCost_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_SpecificCost_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_SpecificCost_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void InsurancePlan_SpecificCost_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "benefit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->benefit_parser_)
            {
              this->benefit_parser_->pre ();
              ctx.nested_parser (this->benefit_parser_);
            }
          }
          else
          {
            if (this->benefit_parser_ != 0)
            {
              this->benefit_parser_->post_InsurancePlan_Benefit1 ();
              this->benefit ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_Benefit1_pskel.
  //
  bool InsurancePlan_Benefit1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_Benefit1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_Benefit1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_Benefit1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_Benefit1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void InsurancePlan_Benefit1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cost" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->cost_parser_)
            {
              this->cost_parser_->pre ();
              ctx.nested_parser (this->cost_parser_);
            }
          }
          else
          {
            if (this->cost_parser_ != 0)
            {
              this->cost_parser_->post_InsurancePlan_Cost ();
              this->cost ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for InsurancePlan_Cost_pskel.
  //
  bool InsurancePlan_Cost_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &InsurancePlan_Cost_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool InsurancePlan_Cost_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void InsurancePlan_Cost_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void InsurancePlan_Cost_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void InsurancePlan_Cost_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "applicability" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->applicability_parser_)
            {
              this->applicability_parser_->pre ();
              ctx.nested_parser (this->applicability_parser_);
            }
          }
          else
          {
            if (this->applicability_parser_ != 0)
            {
              this->applicability_parser_->post_CodeableConcept ();
              this->applicability ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "qualifiers" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->qualifiers_parser_)
            {
              this->qualifiers_parser_->pre ();
              ctx.nested_parser (this->qualifiers_parser_);
            }
          }
          else
          {
            if (this->qualifiers_parser_ != 0)
            {
              this->qualifiers_parser_->post_CodeableConcept ();
              this->qualifiers ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_Quantity ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

