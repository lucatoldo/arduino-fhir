// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef COVERAGEELIGIBILITYRESPONSE_PSKEL_HXX
#define COVERAGEELIGIBILITYRESPONSE_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class CoverageEligibilityResponse_pskel;
  class CoverageEligibilityResponse_Insurance_pskel;
  class CoverageEligibilityResponse_Item_pskel;
  class CoverageEligibilityResponse_Benefit_pskel;
  class CoverageEligibilityResponse_Error_pskel;
  class EligibilityResponsePurpose_list_pskel;
  class EligibilityResponsePurpose_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class CoverageEligibilityResponse_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    purpose ();

    virtual void
    patient ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    created ();

    virtual void
    requestor ();

    virtual void
    request ();

    virtual void
    outcome ();

    virtual void
    disposition ();

    virtual void
    insurer ();

    virtual void
    insurance ();

    virtual void
    preAuthRef ();

    virtual void
    form ();

    virtual void
    error ();

    virtual void
    post_CoverageEligibilityResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::EligibilityResponsePurpose_pskel& /* purpose */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* requestor */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::RemittanceOutcome_pskel& /* outcome */,
             ::fhir::string_pskel& /* disposition */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::CoverageEligibilityResponse_Insurance_pskel& /* insurance */,
             ::fhir::string_pskel& /* preAuthRef */,
             ::fhir::CodeableConcept_pskel& /* form */,
             ::fhir::CoverageEligibilityResponse_Error_pskel& /* error */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    purpose_parser (::fhir::EligibilityResponsePurpose_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    requestor_parser (::fhir::Reference_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::RemittanceOutcome_pskel&);

    void
    disposition_parser (::fhir::string_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    insurance_parser (::fhir::CoverageEligibilityResponse_Insurance_pskel&);

    void
    preAuthRef_parser (::fhir::string_pskel&);

    void
    form_parser (::fhir::CodeableConcept_pskel&);

    void
    error_parser (::fhir::CoverageEligibilityResponse_Error_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_pskel* CoverageEligibilityResponse_impl_;
    CoverageEligibilityResponse_pskel (CoverageEligibilityResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::EligibilityResponsePurpose_pskel* purpose_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* requestor_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::RemittanceOutcome_pskel* outcome_parser_;
    ::fhir::string_pskel* disposition_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::CoverageEligibilityResponse_Insurance_pskel* insurance_parser_;
    ::fhir::string_pskel* preAuthRef_parser_;
    ::fhir::CodeableConcept_pskel* form_parser_;
    ::fhir::CoverageEligibilityResponse_Error_pskel* error_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Insurance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    coverage ();

    virtual void
    inforce ();

    virtual void
    benefitPeriod ();

    virtual void
    item ();

    virtual void
    post_CoverageEligibilityResponse_Insurance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::boolean_pskel& /* inforce */,
             ::fhir::Period_pskel& /* benefitPeriod */,
             ::fhir::CoverageEligibilityResponse_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    inforce_parser (::fhir::boolean_pskel&);

    void
    benefitPeriod_parser (::fhir::Period_pskel&);

    void
    item_parser (::fhir::CoverageEligibilityResponse_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Insurance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Insurance_pskel* CoverageEligibilityResponse_Insurance_impl_;
    CoverageEligibilityResponse_Insurance_pskel (CoverageEligibilityResponse_Insurance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::boolean_pskel* inforce_parser_;
    ::fhir::Period_pskel* benefitPeriod_parser_;
    ::fhir::CoverageEligibilityResponse_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Insurance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    provider ();

    virtual void
    excluded ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    network ();

    virtual void
    unit ();

    virtual void
    term ();

    virtual void
    benefit ();

    virtual void
    authorizationRequired ();

    virtual void
    authorizationSupporting ();

    virtual void
    authorizationUrl ();

    virtual void
    post_CoverageEligibilityResponse_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::boolean_pskel& /* excluded */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* network */,
             ::fhir::CodeableConcept_pskel& /* unit */,
             ::fhir::CodeableConcept_pskel& /* term */,
             ::fhir::CoverageEligibilityResponse_Benefit_pskel& /* benefit */,
             ::fhir::boolean_pskel& /* authorizationRequired */,
             ::fhir::CodeableConcept_pskel& /* authorizationSupporting */,
             ::fhir::uri_pskel& /* authorizationUrl */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    excluded_parser (::fhir::boolean_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    network_parser (::fhir::CodeableConcept_pskel&);

    void
    unit_parser (::fhir::CodeableConcept_pskel&);

    void
    term_parser (::fhir::CodeableConcept_pskel&);

    void
    benefit_parser (::fhir::CoverageEligibilityResponse_Benefit_pskel&);

    void
    authorizationRequired_parser (::fhir::boolean_pskel&);

    void
    authorizationSupporting_parser (::fhir::CodeableConcept_pskel&);

    void
    authorizationUrl_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Item_pskel* CoverageEligibilityResponse_Item_impl_;
    CoverageEligibilityResponse_Item_pskel (CoverageEligibilityResponse_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::boolean_pskel* excluded_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* network_parser_;
    ::fhir::CodeableConcept_pskel* unit_parser_;
    ::fhir::CodeableConcept_pskel* term_parser_;
    ::fhir::CoverageEligibilityResponse_Benefit_pskel* benefit_parser_;
    ::fhir::boolean_pskel* authorizationRequired_parser_;
    ::fhir::CodeableConcept_pskel* authorizationSupporting_parser_;
    ::fhir::uri_pskel* authorizationUrl_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Benefit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    allowedUnsignedInt ();

    virtual void
    allowedString ();

    virtual void
    allowedMoney ();

    virtual void
    usedUnsignedInt ();

    virtual void
    usedString ();

    virtual void
    usedMoney ();

    virtual void
    post_CoverageEligibilityResponse_Benefit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::unsignedInt_pskel& /* allowedUnsignedInt */,
             ::fhir::string_pskel& /* allowedString */,
             ::fhir::Money_pskel& /* allowedMoney */,
             ::fhir::unsignedInt_pskel& /* usedUnsignedInt */,
             ::fhir::string_pskel& /* usedString */,
             ::fhir::Money_pskel& /* usedMoney */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    allowedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    allowedString_parser (::fhir::string_pskel&);

    void
    allowedMoney_parser (::fhir::Money_pskel&);

    void
    usedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    usedString_parser (::fhir::string_pskel&);

    void
    usedMoney_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Benefit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Benefit_pskel* CoverageEligibilityResponse_Benefit_impl_;
    CoverageEligibilityResponse_Benefit_pskel (CoverageEligibilityResponse_Benefit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::unsignedInt_pskel* allowedUnsignedInt_parser_;
    ::fhir::string_pskel* allowedString_parser_;
    ::fhir::Money_pskel* allowedMoney_parser_;
    ::fhir::unsignedInt_pskel* usedUnsignedInt_parser_;
    ::fhir::string_pskel* usedString_parser_;
    ::fhir::Money_pskel* usedMoney_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Benefit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Error_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    post_CoverageEligibilityResponse_Error ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Error_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Error_pskel* CoverageEligibilityResponse_Error_impl_;
    CoverageEligibilityResponse_Error_pskel (CoverageEligibilityResponse_Error_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Error_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EligibilityResponsePurpose_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EligibilityResponsePurpose_list ();

    // Constructor.
    //
    EligibilityResponsePurpose_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EligibilityResponsePurpose_list_pskel* EligibilityResponsePurpose_list_impl_;
    EligibilityResponsePurpose_list_pskel (EligibilityResponsePurpose_list_pskel*, void*);

    protected:
    static const char* const _xsde_EligibilityResponsePurpose_list_pskel_enums_[4UL];
  };

  class EligibilityResponsePurpose_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EligibilityResponsePurpose ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EligibilityResponsePurpose_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EligibilityResponsePurpose_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EligibilityResponsePurpose_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EligibilityResponsePurpose_pskel* EligibilityResponsePurpose_impl_;
    EligibilityResponsePurpose_pskel (EligibilityResponsePurpose_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EligibilityResponsePurpose_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // COVERAGEELIGIBILITYRESPONSE_PSKEL_HXX
