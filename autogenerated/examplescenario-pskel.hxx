// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef EXAMPLESCENARIO_PSKEL_HXX
#define EXAMPLESCENARIO_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class ExampleScenario_pskel;
  class ExampleScenario_Actor_pskel;
  class ExampleScenario_Instance_pskel;
  class ExampleScenario_Version_pskel;
  class ExampleScenario_ContainedInstance_pskel;
  class ExampleScenario_Process_pskel;
  class ExampleScenario_Step_pskel;
  class ExampleScenario_Operation_pskel;
  class ExampleScenario_Alternative_pskel;
  class ExampleScenarioActorType_list_pskel;
  class ExampleScenarioActorType_pskel;
  class ResourceType_list_pskel;
  class ResourceType_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class ExampleScenario_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    purpose ();

    virtual void
    actor ();

    virtual void
    instance ();

    virtual void
    process ();

    virtual void
    workflow ();

    virtual void
    post_ExampleScenario ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::ExampleScenario_Actor_pskel& /* actor */,
             ::fhir::ExampleScenario_Instance_pskel& /* instance */,
             ::fhir::ExampleScenario_Process_pskel& /* process */,
             ::fhir::canonical_pskel& /* workflow */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    actor_parser (::fhir::ExampleScenario_Actor_pskel&);

    void
    instance_parser (::fhir::ExampleScenario_Instance_pskel&);

    void
    process_parser (::fhir::ExampleScenario_Process_pskel&);

    void
    workflow_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_pskel* ExampleScenario_impl_;
    ExampleScenario_pskel (ExampleScenario_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::ExampleScenario_Actor_pskel* actor_parser_;
    ::fhir::ExampleScenario_Instance_pskel* instance_parser_;
    ::fhir::ExampleScenario_Process_pskel* process_parser_;
    ::fhir::canonical_pskel* workflow_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Actor_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    actorId ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    post_ExampleScenario_Actor ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* actorId */,
             ::fhir::ExampleScenarioActorType_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::markdown_pskel& /* description */);

    // Individual element parsers.
    //
    void
    actorId_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::ExampleScenarioActorType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Actor_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Actor_pskel* ExampleScenario_Actor_impl_;
    ExampleScenario_Actor_pskel (ExampleScenario_Actor_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* actorId_parser_;
    ::fhir::ExampleScenarioActorType_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::markdown_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Actor_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Instance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    resourceId ();

    virtual void
    resourceType ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    version ();

    virtual void
    containedInstance ();

    virtual void
    post_ExampleScenario_Instance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* resourceId */,
             ::fhir::ResourceType_pskel& /* resourceType */,
             ::fhir::string_pskel& /* name */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::ExampleScenario_Version_pskel& /* version */,
             ::fhir::ExampleScenario_ContainedInstance_pskel& /* containedInstance */);

    // Individual element parsers.
    //
    void
    resourceId_parser (::fhir::string_pskel&);

    void
    resourceType_parser (::fhir::ResourceType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    version_parser (::fhir::ExampleScenario_Version_pskel&);

    void
    containedInstance_parser (::fhir::ExampleScenario_ContainedInstance_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Instance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Instance_pskel* ExampleScenario_Instance_impl_;
    ExampleScenario_Instance_pskel (ExampleScenario_Instance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* resourceId_parser_;
    ::fhir::ResourceType_pskel* resourceType_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::ExampleScenario_Version_pskel* version_parser_;
    ::fhir::ExampleScenario_ContainedInstance_pskel* containedInstance_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Instance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Version_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    versionId ();

    virtual void
    description ();

    virtual void
    post_ExampleScenario_Version ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* versionId */,
             ::fhir::markdown_pskel& /* description */);

    // Individual element parsers.
    //
    void
    versionId_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Version_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Version_pskel* ExampleScenario_Version_impl_;
    ExampleScenario_Version_pskel (ExampleScenario_Version_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* versionId_parser_;
    ::fhir::markdown_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Version_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_ContainedInstance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    resourceId ();

    virtual void
    versionId ();

    virtual void
    post_ExampleScenario_ContainedInstance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* resourceId */,
             ::fhir::string_pskel& /* versionId */);

    // Individual element parsers.
    //
    void
    resourceId_parser (::fhir::string_pskel&);

    void
    versionId_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_ContainedInstance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_ContainedInstance_pskel* ExampleScenario_ContainedInstance_impl_;
    ExampleScenario_ContainedInstance_pskel (ExampleScenario_ContainedInstance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* resourceId_parser_;
    ::fhir::string_pskel* versionId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_ContainedInstance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Process_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    title ();

    virtual void
    description ();

    virtual void
    preConditions ();

    virtual void
    postConditions ();

    virtual void
    step ();

    virtual void
    post_ExampleScenario_Process ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* title */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::markdown_pskel& /* preConditions */,
             ::fhir::markdown_pskel& /* postConditions */,
             ::fhir::ExampleScenario_Step_pskel& /* step */);

    // Individual element parsers.
    //
    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    preConditions_parser (::fhir::markdown_pskel&);

    void
    postConditions_parser (::fhir::markdown_pskel&);

    void
    step_parser (::fhir::ExampleScenario_Step_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Process_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Process_pskel* ExampleScenario_Process_impl_;
    ExampleScenario_Process_pskel (ExampleScenario_Process_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* title_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::markdown_pskel* preConditions_parser_;
    ::fhir::markdown_pskel* postConditions_parser_;
    ::fhir::ExampleScenario_Step_pskel* step_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Process_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Step_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    process ();

    virtual void
    pause ();

    virtual void
    operation ();

    virtual void
    alternative ();

    virtual void
    post_ExampleScenario_Step ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ExampleScenario_Process_pskel& /* process */,
             ::fhir::boolean_pskel& /* pause */,
             ::fhir::ExampleScenario_Operation_pskel& /* operation */,
             ::fhir::ExampleScenario_Alternative_pskel& /* alternative */);

    // Individual element parsers.
    //
    void
    process_parser (::fhir::ExampleScenario_Process_pskel&);

    void
    pause_parser (::fhir::boolean_pskel&);

    void
    operation_parser (::fhir::ExampleScenario_Operation_pskel&);

    void
    alternative_parser (::fhir::ExampleScenario_Alternative_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Step_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Step_pskel* ExampleScenario_Step_impl_;
    ExampleScenario_Step_pskel (ExampleScenario_Step_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ExampleScenario_Process_pskel* process_parser_;
    ::fhir::boolean_pskel* pause_parser_;
    ::fhir::ExampleScenario_Operation_pskel* operation_parser_;
    ::fhir::ExampleScenario_Alternative_pskel* alternative_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Step_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Operation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    number ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    initiator ();

    virtual void
    receiver ();

    virtual void
    description ();

    virtual void
    initiatorActive ();

    virtual void
    receiverActive ();

    virtual void
    request ();

    virtual void
    response ();

    virtual void
    post_ExampleScenario_Operation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* number */,
             ::fhir::string_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* initiator */,
             ::fhir::string_pskel& /* receiver */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::boolean_pskel& /* initiatorActive */,
             ::fhir::boolean_pskel& /* receiverActive */,
             ::fhir::ExampleScenario_ContainedInstance_pskel& /* request */,
             ::fhir::ExampleScenario_ContainedInstance_pskel& /* response */);

    // Individual element parsers.
    //
    void
    number_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    initiator_parser (::fhir::string_pskel&);

    void
    receiver_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    initiatorActive_parser (::fhir::boolean_pskel&);

    void
    receiverActive_parser (::fhir::boolean_pskel&);

    void
    request_parser (::fhir::ExampleScenario_ContainedInstance_pskel&);

    void
    response_parser (::fhir::ExampleScenario_ContainedInstance_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Operation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Operation_pskel* ExampleScenario_Operation_impl_;
    ExampleScenario_Operation_pskel (ExampleScenario_Operation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* number_parser_;
    ::fhir::string_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* initiator_parser_;
    ::fhir::string_pskel* receiver_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::boolean_pskel* initiatorActive_parser_;
    ::fhir::boolean_pskel* receiverActive_parser_;
    ::fhir::ExampleScenario_ContainedInstance_pskel* request_parser_;
    ::fhir::ExampleScenario_ContainedInstance_pskel* response_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Operation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Alternative_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    title ();

    virtual void
    description ();

    virtual void
    step ();

    virtual void
    post_ExampleScenario_Alternative ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* title */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::ExampleScenario_Step_pskel& /* step */);

    // Individual element parsers.
    //
    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    step_parser (::fhir::ExampleScenario_Step_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Alternative_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Alternative_pskel* ExampleScenario_Alternative_impl_;
    ExampleScenario_Alternative_pskel (ExampleScenario_Alternative_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* title_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::ExampleScenario_Step_pskel* step_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Alternative_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenarioActorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExampleScenarioActorType_list ();

    // Constructor.
    //
    ExampleScenarioActorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenarioActorType_list_pskel* ExampleScenarioActorType_list_impl_;
    ExampleScenarioActorType_list_pskel (ExampleScenarioActorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ExampleScenarioActorType_list_pskel_enums_[2UL];
  };

  class ExampleScenarioActorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ExampleScenarioActorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ExampleScenarioActorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ExampleScenarioActorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenarioActorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenarioActorType_pskel* ExampleScenarioActorType_impl_;
    ExampleScenarioActorType_pskel (ExampleScenarioActorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ExampleScenarioActorType_list_pskel* value_parser_;
  };

  class ResourceType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResourceType_list ();

    // Constructor.
    //
    ResourceType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceType_list_pskel* ResourceType_list_impl_;
    ResourceType_list_pskel (ResourceType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResourceType_list_pskel_enums_[148UL];
  };

  class ResourceType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResourceType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResourceType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResourceType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResourceType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceType_pskel* ResourceType_impl_;
    ResourceType_pskel (ResourceType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResourceType_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EXAMPLESCENARIO_PSKEL_HXX
