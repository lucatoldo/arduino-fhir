// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef ENCOUNTER_PSKEL_HXX
#define ENCOUNTER_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class Encounter_pskel;
  class Encounter_StatusHistory_pskel;
  class Encounter_ClassHistory_pskel;
  class Encounter_Participant_pskel;
  class Encounter_Diagnosis_pskel;
  class Encounter_Hospitalization_pskel;
  class Encounter_Location_pskel;
  class EncounterLocationStatus_list_pskel;
  class EncounterLocationStatus_pskel;
  class EncounterStatus_list_pskel;
  class EncounterStatus_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class Encounter_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusHistory ();

    virtual void
    class_ ();

    virtual void
    classHistory ();

    virtual void
    type ();

    virtual void
    serviceType ();

    virtual void
    priority ();

    virtual void
    subject ();

    virtual void
    episodeOfCare ();

    virtual void
    basedOn ();

    virtual void
    participant ();

    virtual void
    appointment ();

    virtual void
    period ();

    virtual void
    length ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    diagnosis ();

    virtual void
    account ();

    virtual void
    hospitalization ();

    virtual void
    location ();

    virtual void
    serviceProvider ();

    virtual void
    partOf ();

    virtual void
    post_Encounter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::EncounterStatus_pskel& /* status */,
             ::fhir::Encounter_StatusHistory_pskel& /* statusHistory */,
             ::fhir::Coding_pskel& /* class */,
             ::fhir::Encounter_ClassHistory_pskel& /* classHistory */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* serviceType */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* episodeOfCare */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Encounter_Participant_pskel& /* participant */,
             ::fhir::Reference_pskel& /* appointment */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Duration_pskel& /* length */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Encounter_Diagnosis_pskel& /* diagnosis */,
             ::fhir::Reference_pskel& /* account */,
             ::fhir::Encounter_Hospitalization_pskel& /* hospitalization */,
             ::fhir::Encounter_Location_pskel& /* location */,
             ::fhir::Reference_pskel& /* serviceProvider */,
             ::fhir::Reference_pskel& /* partOf */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::EncounterStatus_pskel&);

    void
    statusHistory_parser (::fhir::Encounter_StatusHistory_pskel&);

    void
    class__parser (::fhir::Coding_pskel&);

    void
    classHistory_parser (::fhir::Encounter_ClassHistory_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    serviceType_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    episodeOfCare_parser (::fhir::Reference_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    participant_parser (::fhir::Encounter_Participant_pskel&);

    void
    appointment_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    length_parser (::fhir::Duration_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    diagnosis_parser (::fhir::Encounter_Diagnosis_pskel&);

    void
    account_parser (::fhir::Reference_pskel&);

    void
    hospitalization_parser (::fhir::Encounter_Hospitalization_pskel&);

    void
    location_parser (::fhir::Encounter_Location_pskel&);

    void
    serviceProvider_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_pskel* Encounter_impl_;
    Encounter_pskel (Encounter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::EncounterStatus_pskel* status_parser_;
    ::fhir::Encounter_StatusHistory_pskel* statusHistory_parser_;
    ::fhir::Coding_pskel* class__parser_;
    ::fhir::Encounter_ClassHistory_pskel* classHistory_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* serviceType_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* episodeOfCare_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Encounter_Participant_pskel* participant_parser_;
    ::fhir::Reference_pskel* appointment_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Duration_pskel* length_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Encounter_Diagnosis_pskel* diagnosis_parser_;
    ::fhir::Reference_pskel* account_parser_;
    ::fhir::Encounter_Hospitalization_pskel* hospitalization_parser_;
    ::fhir::Encounter_Location_pskel* location_parser_;
    ::fhir::Reference_pskel* serviceProvider_parser_;
    ::fhir::Reference_pskel* partOf_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_StatusHistory_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    status ();

    virtual void
    period ();

    virtual void
    post_Encounter_StatusHistory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::EncounterStatus_pskel& /* status */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    status_parser (::fhir::EncounterStatus_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_StatusHistory_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_StatusHistory_pskel* Encounter_StatusHistory_impl_;
    Encounter_StatusHistory_pskel (Encounter_StatusHistory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::EncounterStatus_pskel* status_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_StatusHistory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_ClassHistory_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    class_ ();

    virtual void
    period ();

    virtual void
    post_Encounter_ClassHistory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* class */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    class__parser (::fhir::Coding_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_ClassHistory_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_ClassHistory_pskel* Encounter_ClassHistory_impl_;
    Encounter_ClassHistory_pskel (Encounter_ClassHistory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* class__parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_ClassHistory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    period ();

    virtual void
    individual ();

    virtual void
    post_Encounter_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* individual */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    individual_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Participant_pskel* Encounter_Participant_impl_;
    Encounter_Participant_pskel (Encounter_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* individual_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Diagnosis_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    condition ();

    virtual void
    use ();

    virtual void
    rank ();

    virtual void
    post_Encounter_Diagnosis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* condition */,
             ::fhir::CodeableConcept_pskel& /* use */,
             ::fhir::positiveInt_pskel& /* rank */);

    // Individual element parsers.
    //
    void
    condition_parser (::fhir::Reference_pskel&);

    void
    use_parser (::fhir::CodeableConcept_pskel&);

    void
    rank_parser (::fhir::positiveInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Diagnosis_pskel* Encounter_Diagnosis_impl_;
    Encounter_Diagnosis_pskel (Encounter_Diagnosis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* condition_parser_;
    ::fhir::CodeableConcept_pskel* use_parser_;
    ::fhir::positiveInt_pskel* rank_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Diagnosis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Hospitalization_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    preAdmissionIdentifier ();

    virtual void
    origin ();

    virtual void
    admitSource ();

    virtual void
    reAdmission ();

    virtual void
    dietPreference ();

    virtual void
    specialCourtesy ();

    virtual void
    specialArrangement ();

    virtual void
    destination ();

    virtual void
    dischargeDisposition ();

    virtual void
    post_Encounter_Hospitalization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* preAdmissionIdentifier */,
             ::fhir::Reference_pskel& /* origin */,
             ::fhir::CodeableConcept_pskel& /* admitSource */,
             ::fhir::CodeableConcept_pskel& /* reAdmission */,
             ::fhir::CodeableConcept_pskel& /* dietPreference */,
             ::fhir::CodeableConcept_pskel& /* specialCourtesy */,
             ::fhir::CodeableConcept_pskel& /* specialArrangement */,
             ::fhir::Reference_pskel& /* destination */,
             ::fhir::CodeableConcept_pskel& /* dischargeDisposition */);

    // Individual element parsers.
    //
    void
    preAdmissionIdentifier_parser (::fhir::Identifier_pskel&);

    void
    origin_parser (::fhir::Reference_pskel&);

    void
    admitSource_parser (::fhir::CodeableConcept_pskel&);

    void
    reAdmission_parser (::fhir::CodeableConcept_pskel&);

    void
    dietPreference_parser (::fhir::CodeableConcept_pskel&);

    void
    specialCourtesy_parser (::fhir::CodeableConcept_pskel&);

    void
    specialArrangement_parser (::fhir::CodeableConcept_pskel&);

    void
    destination_parser (::fhir::Reference_pskel&);

    void
    dischargeDisposition_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Hospitalization_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Hospitalization_pskel* Encounter_Hospitalization_impl_;
    Encounter_Hospitalization_pskel (Encounter_Hospitalization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* preAdmissionIdentifier_parser_;
    ::fhir::Reference_pskel* origin_parser_;
    ::fhir::CodeableConcept_pskel* admitSource_parser_;
    ::fhir::CodeableConcept_pskel* reAdmission_parser_;
    ::fhir::CodeableConcept_pskel* dietPreference_parser_;
    ::fhir::CodeableConcept_pskel* specialCourtesy_parser_;
    ::fhir::CodeableConcept_pskel* specialArrangement_parser_;
    ::fhir::Reference_pskel* destination_parser_;
    ::fhir::CodeableConcept_pskel* dischargeDisposition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Hospitalization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Location_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    location ();

    virtual void
    status ();

    virtual void
    physicalType ();

    virtual void
    period ();

    virtual void
    post_Encounter_Location ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::EncounterLocationStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* physicalType */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    location_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::EncounterLocationStatus_pskel&);

    void
    physicalType_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Location_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Location_pskel* Encounter_Location_impl_;
    Encounter_Location_pskel (Encounter_Location_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::EncounterLocationStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* physicalType_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Location_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EncounterLocationStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EncounterLocationStatus_list ();

    // Constructor.
    //
    EncounterLocationStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterLocationStatus_list_pskel* EncounterLocationStatus_list_impl_;
    EncounterLocationStatus_list_pskel (EncounterLocationStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_EncounterLocationStatus_list_pskel_enums_[4UL];
  };

  class EncounterLocationStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EncounterLocationStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EncounterLocationStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EncounterLocationStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EncounterLocationStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterLocationStatus_pskel* EncounterLocationStatus_impl_;
    EncounterLocationStatus_pskel (EncounterLocationStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EncounterLocationStatus_list_pskel* value_parser_;
  };

  class EncounterStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EncounterStatus_list ();

    // Constructor.
    //
    EncounterStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterStatus_list_pskel* EncounterStatus_list_impl_;
    EncounterStatus_list_pskel (EncounterStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_EncounterStatus_list_pskel_enums_[9UL];
  };

  class EncounterStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EncounterStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EncounterStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EncounterStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EncounterStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterStatus_pskel* EncounterStatus_impl_;
    EncounterStatus_pskel (EncounterStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EncounterStatus_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ENCOUNTER_PSKEL_HXX
