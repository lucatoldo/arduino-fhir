// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "requestgroup-pskel.hxx"

namespace fhir
{
  // RequestGroup_pskel
  //

  void RequestGroup_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void RequestGroup_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void RequestGroup_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void RequestGroup_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void RequestGroup_pskel::
  replaces_parser (::fhir::Reference_pskel& p)
  {
    this->replaces_parser_ = &p;
  }

  void RequestGroup_pskel::
  groupIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->groupIdentifier_parser_ = &p;
  }

  void RequestGroup_pskel::
  status_parser (::fhir::RequestStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void RequestGroup_pskel::
  intent_parser (::fhir::RequestIntent_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void RequestGroup_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void RequestGroup_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void RequestGroup_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void RequestGroup_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void RequestGroup_pskel::
  authoredOn_parser (::fhir::dateTime_pskel& p)
  {
    this->authoredOn_parser_ = &p;
  }

  void RequestGroup_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void RequestGroup_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void RequestGroup_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void RequestGroup_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void RequestGroup_pskel::
  action_parser (::fhir::RequestGroup_Action_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void RequestGroup_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& replaces,
           ::fhir::Identifier_pskel& groupIdentifier,
           ::fhir::RequestStatus_pskel& status,
           ::fhir::RequestIntent_pskel& intent,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& authoredOn,
           ::fhir::Reference_pskel& author,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Annotation_pskel& note,
           ::fhir::RequestGroup_Action_pskel& action)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->basedOn_parser_ = &basedOn;
    this->replaces_parser_ = &replaces;
    this->groupIdentifier_parser_ = &groupIdentifier;
    this->status_parser_ = &status;
    this->intent_parser_ = &intent;
    this->priority_parser_ = &priority;
    this->code_parser_ = &code;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->authoredOn_parser_ = &authoredOn;
    this->author_parser_ = &author;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->note_parser_ = &note;
    this->action_parser_ = &action;
  }

  RequestGroup_pskel::
  RequestGroup_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    RequestGroup_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    replaces_parser_ (0),
    groupIdentifier_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    authoredOn_parser_ (0),
    author_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RequestGroup_pskel::
  RequestGroup_pskel (RequestGroup_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    RequestGroup_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    replaces_parser_ (0),
    groupIdentifier_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    authoredOn_parser_ (0),
    author_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RequestGroup_Action_pskel
  //

  void RequestGroup_Action_pskel::
  prefix_parser (::fhir::string_pskel& p)
  {
    this->prefix_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  textEquivalent_parser (::fhir::string_pskel& p)
  {
    this->textEquivalent_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  documentation_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  condition_parser (::fhir::RequestGroup_Condition_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  relatedAction_parser (::fhir::RequestGroup_RelatedAction_pskel& p)
  {
    this->relatedAction_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  timingDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->timingDateTime_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  timingAge_parser (::fhir::Age_pskel& p)
  {
    this->timingAge_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  timingPeriod_parser (::fhir::Period_pskel& p)
  {
    this->timingPeriod_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  timingDuration_parser (::fhir::Duration_pskel& p)
  {
    this->timingDuration_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  timingRange_parser (::fhir::Range_pskel& p)
  {
    this->timingRange_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  timingTiming_parser (::fhir::Timing_pskel& p)
  {
    this->timingTiming_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  participant_parser (::fhir::Reference_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  groupingBehavior_parser (::fhir::ActionGroupingBehavior_pskel& p)
  {
    this->groupingBehavior_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  selectionBehavior_parser (::fhir::ActionSelectionBehavior_pskel& p)
  {
    this->selectionBehavior_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  requiredBehavior_parser (::fhir::ActionRequiredBehavior_pskel& p)
  {
    this->requiredBehavior_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  precheckBehavior_parser (::fhir::ActionPrecheckBehavior_pskel& p)
  {
    this->precheckBehavior_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  cardinalityBehavior_parser (::fhir::ActionCardinalityBehavior_pskel& p)
  {
    this->cardinalityBehavior_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  resource_parser (::fhir::Reference_pskel& p)
  {
    this->resource_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  action_parser (::fhir::RequestGroup_Action_pskel& p)
  {
    this->action_parser_ = &p;
  }

  void RequestGroup_Action_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& prefix,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& description,
           ::fhir::string_pskel& textEquivalent,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::RelatedArtifact_pskel& documentation,
           ::fhir::RequestGroup_Condition_pskel& condition,
           ::fhir::RequestGroup_RelatedAction_pskel& relatedAction,
           ::fhir::dateTime_pskel& timingDateTime,
           ::fhir::Age_pskel& timingAge,
           ::fhir::Period_pskel& timingPeriod,
           ::fhir::Duration_pskel& timingDuration,
           ::fhir::Range_pskel& timingRange,
           ::fhir::Timing_pskel& timingTiming,
           ::fhir::Reference_pskel& participant,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::ActionGroupingBehavior_pskel& groupingBehavior,
           ::fhir::ActionSelectionBehavior_pskel& selectionBehavior,
           ::fhir::ActionRequiredBehavior_pskel& requiredBehavior,
           ::fhir::ActionPrecheckBehavior_pskel& precheckBehavior,
           ::fhir::ActionCardinalityBehavior_pskel& cardinalityBehavior,
           ::fhir::Reference_pskel& resource,
           ::fhir::RequestGroup_Action_pskel& action)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->prefix_parser_ = &prefix;
    this->title_parser_ = &title;
    this->description_parser_ = &description;
    this->textEquivalent_parser_ = &textEquivalent;
    this->priority_parser_ = &priority;
    this->code_parser_ = &code;
    this->documentation_parser_ = &documentation;
    this->condition_parser_ = &condition;
    this->relatedAction_parser_ = &relatedAction;
    this->timingDateTime_parser_ = &timingDateTime;
    this->timingAge_parser_ = &timingAge;
    this->timingPeriod_parser_ = &timingPeriod;
    this->timingDuration_parser_ = &timingDuration;
    this->timingRange_parser_ = &timingRange;
    this->timingTiming_parser_ = &timingTiming;
    this->participant_parser_ = &participant;
    this->type_parser_ = &type;
    this->groupingBehavior_parser_ = &groupingBehavior;
    this->selectionBehavior_parser_ = &selectionBehavior;
    this->requiredBehavior_parser_ = &requiredBehavior;
    this->precheckBehavior_parser_ = &precheckBehavior;
    this->cardinalityBehavior_parser_ = &cardinalityBehavior;
    this->resource_parser_ = &resource;
    this->action_parser_ = &action;
  }

  RequestGroup_Action_pskel::
  RequestGroup_Action_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RequestGroup_Action_impl_ (0),
    prefix_parser_ (0),
    title_parser_ (0),
    description_parser_ (0),
    textEquivalent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    documentation_parser_ (0),
    condition_parser_ (0),
    relatedAction_parser_ (0),
    timingDateTime_parser_ (0),
    timingAge_parser_ (0),
    timingPeriod_parser_ (0),
    timingDuration_parser_ (0),
    timingRange_parser_ (0),
    timingTiming_parser_ (0),
    participant_parser_ (0),
    type_parser_ (0),
    groupingBehavior_parser_ (0),
    selectionBehavior_parser_ (0),
    requiredBehavior_parser_ (0),
    precheckBehavior_parser_ (0),
    cardinalityBehavior_parser_ (0),
    resource_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RequestGroup_Action_pskel::
  RequestGroup_Action_pskel (RequestGroup_Action_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RequestGroup_Action_impl_ (impl),
    prefix_parser_ (0),
    title_parser_ (0),
    description_parser_ (0),
    textEquivalent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    documentation_parser_ (0),
    condition_parser_ (0),
    relatedAction_parser_ (0),
    timingDateTime_parser_ (0),
    timingAge_parser_ (0),
    timingPeriod_parser_ (0),
    timingDuration_parser_ (0),
    timingRange_parser_ (0),
    timingTiming_parser_ (0),
    participant_parser_ (0),
    type_parser_ (0),
    groupingBehavior_parser_ (0),
    selectionBehavior_parser_ (0),
    requiredBehavior_parser_ (0),
    precheckBehavior_parser_ (0),
    cardinalityBehavior_parser_ (0),
    resource_parser_ (0),
    action_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RequestGroup_Condition_pskel
  //

  void RequestGroup_Condition_pskel::
  kind_parser (::fhir::ActionConditionKind_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void RequestGroup_Condition_pskel::
  expression_parser (::fhir::Expression_pskel& p)
  {
    this->expression_parser_ = &p;
  }

  void RequestGroup_Condition_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ActionConditionKind_pskel& kind,
           ::fhir::Expression_pskel& expression)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->kind_parser_ = &kind;
    this->expression_parser_ = &expression;
  }

  RequestGroup_Condition_pskel::
  RequestGroup_Condition_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RequestGroup_Condition_impl_ (0),
    kind_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RequestGroup_Condition_pskel::
  RequestGroup_Condition_pskel (RequestGroup_Condition_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RequestGroup_Condition_impl_ (impl),
    kind_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RequestGroup_RelatedAction_pskel
  //

  void RequestGroup_RelatedAction_pskel::
  actionId_parser (::fhir::id_pskel& p)
  {
    this->actionId_parser_ = &p;
  }

  void RequestGroup_RelatedAction_pskel::
  relationship_parser (::fhir::ActionRelationshipType_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void RequestGroup_RelatedAction_pskel::
  offsetDuration_parser (::fhir::Duration_pskel& p)
  {
    this->offsetDuration_parser_ = &p;
  }

  void RequestGroup_RelatedAction_pskel::
  offsetRange_parser (::fhir::Range_pskel& p)
  {
    this->offsetRange_parser_ = &p;
  }

  void RequestGroup_RelatedAction_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& actionId,
           ::fhir::ActionRelationshipType_pskel& relationship,
           ::fhir::Duration_pskel& offsetDuration,
           ::fhir::Range_pskel& offsetRange)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->actionId_parser_ = &actionId;
    this->relationship_parser_ = &relationship;
    this->offsetDuration_parser_ = &offsetDuration;
    this->offsetRange_parser_ = &offsetRange;
  }

  RequestGroup_RelatedAction_pskel::
  RequestGroup_RelatedAction_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RequestGroup_RelatedAction_impl_ (0),
    actionId_parser_ (0),
    relationship_parser_ (0),
    offsetDuration_parser_ (0),
    offsetRange_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RequestGroup_RelatedAction_pskel::
  RequestGroup_RelatedAction_pskel (RequestGroup_RelatedAction_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RequestGroup_RelatedAction_impl_ (impl),
    actionId_parser_ (0),
    relationship_parser_ (0),
    offsetDuration_parser_ (0),
    offsetRange_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // RequestGroup_pskel
  //

  void RequestGroup_pskel::
  identifier ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->identifier ();
  }

  void RequestGroup_pskel::
  instantiatesCanonical ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->instantiatesCanonical ();
  }

  void RequestGroup_pskel::
  instantiatesUri ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->instantiatesUri ();
  }

  void RequestGroup_pskel::
  basedOn ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->basedOn ();
  }

  void RequestGroup_pskel::
  replaces ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->replaces ();
  }

  void RequestGroup_pskel::
  groupIdentifier ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->groupIdentifier ();
  }

  void RequestGroup_pskel::
  status ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->status ();
  }

  void RequestGroup_pskel::
  intent ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->intent ();
  }

  void RequestGroup_pskel::
  priority ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->priority ();
  }

  void RequestGroup_pskel::
  code ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->code ();
  }

  void RequestGroup_pskel::
  subject ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->subject ();
  }

  void RequestGroup_pskel::
  encounter ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->encounter ();
  }

  void RequestGroup_pskel::
  authoredOn ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->authoredOn ();
  }

  void RequestGroup_pskel::
  author ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->author ();
  }

  void RequestGroup_pskel::
  reasonCode ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->reasonCode ();
  }

  void RequestGroup_pskel::
  reasonReference ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->reasonReference ();
  }

  void RequestGroup_pskel::
  note ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->note ();
  }

  void RequestGroup_pskel::
  action ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->action ();
  }

  void RequestGroup_pskel::
  post_RequestGroup ()
  {
    if (this->RequestGroup_impl_)
      this->RequestGroup_impl_->post_RequestGroup ();
    else
      post_DomainResource ();
  }

  void RequestGroup_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->replaces_parser_)
      this->replaces_parser_->_reset ();

    if (this->groupIdentifier_parser_)
      this->groupIdentifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->authoredOn_parser_)
      this->authoredOn_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    this->resetting_ = false;
  }

  // RequestGroup_Action_pskel
  //

  void RequestGroup_Action_pskel::
  prefix ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->prefix ();
  }

  void RequestGroup_Action_pskel::
  title ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->title ();
  }

  void RequestGroup_Action_pskel::
  description ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->description ();
  }

  void RequestGroup_Action_pskel::
  textEquivalent ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->textEquivalent ();
  }

  void RequestGroup_Action_pskel::
  priority ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->priority ();
  }

  void RequestGroup_Action_pskel::
  code ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->code ();
  }

  void RequestGroup_Action_pskel::
  documentation ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->documentation ();
  }

  void RequestGroup_Action_pskel::
  condition ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->condition ();
  }

  void RequestGroup_Action_pskel::
  relatedAction ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->relatedAction ();
  }

  void RequestGroup_Action_pskel::
  timingDateTime ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->timingDateTime ();
  }

  void RequestGroup_Action_pskel::
  timingAge ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->timingAge ();
  }

  void RequestGroup_Action_pskel::
  timingPeriod ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->timingPeriod ();
  }

  void RequestGroup_Action_pskel::
  timingDuration ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->timingDuration ();
  }

  void RequestGroup_Action_pskel::
  timingRange ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->timingRange ();
  }

  void RequestGroup_Action_pskel::
  timingTiming ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->timingTiming ();
  }

  void RequestGroup_Action_pskel::
  participant ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->participant ();
  }

  void RequestGroup_Action_pskel::
  type ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->type ();
  }

  void RequestGroup_Action_pskel::
  groupingBehavior ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->groupingBehavior ();
  }

  void RequestGroup_Action_pskel::
  selectionBehavior ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->selectionBehavior ();
  }

  void RequestGroup_Action_pskel::
  requiredBehavior ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->requiredBehavior ();
  }

  void RequestGroup_Action_pskel::
  precheckBehavior ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->precheckBehavior ();
  }

  void RequestGroup_Action_pskel::
  cardinalityBehavior ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->cardinalityBehavior ();
  }

  void RequestGroup_Action_pskel::
  resource ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->resource ();
  }

  void RequestGroup_Action_pskel::
  action ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->action ();
  }

  void RequestGroup_Action_pskel::
  post_RequestGroup_Action ()
  {
    if (this->RequestGroup_Action_impl_)
      this->RequestGroup_Action_impl_->post_RequestGroup_Action ();
    else
      post_BackboneElement ();
  }

  void RequestGroup_Action_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->prefix_parser_)
      this->prefix_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->textEquivalent_parser_)
      this->textEquivalent_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->relatedAction_parser_)
      this->relatedAction_parser_->_reset ();

    if (this->timingDateTime_parser_)
      this->timingDateTime_parser_->_reset ();

    if (this->timingAge_parser_)
      this->timingAge_parser_->_reset ();

    if (this->timingPeriod_parser_)
      this->timingPeriod_parser_->_reset ();

    if (this->timingDuration_parser_)
      this->timingDuration_parser_->_reset ();

    if (this->timingRange_parser_)
      this->timingRange_parser_->_reset ();

    if (this->timingTiming_parser_)
      this->timingTiming_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->groupingBehavior_parser_)
      this->groupingBehavior_parser_->_reset ();

    if (this->selectionBehavior_parser_)
      this->selectionBehavior_parser_->_reset ();

    if (this->requiredBehavior_parser_)
      this->requiredBehavior_parser_->_reset ();

    if (this->precheckBehavior_parser_)
      this->precheckBehavior_parser_->_reset ();

    if (this->cardinalityBehavior_parser_)
      this->cardinalityBehavior_parser_->_reset ();

    if (this->resource_parser_)
      this->resource_parser_->_reset ();

    if (this->action_parser_)
      this->action_parser_->_reset ();

    this->resetting_ = false;
  }

  // RequestGroup_Condition_pskel
  //

  void RequestGroup_Condition_pskel::
  kind ()
  {
    if (this->RequestGroup_Condition_impl_)
      this->RequestGroup_Condition_impl_->kind ();
  }

  void RequestGroup_Condition_pskel::
  expression ()
  {
    if (this->RequestGroup_Condition_impl_)
      this->RequestGroup_Condition_impl_->expression ();
  }

  void RequestGroup_Condition_pskel::
  post_RequestGroup_Condition ()
  {
    if (this->RequestGroup_Condition_impl_)
      this->RequestGroup_Condition_impl_->post_RequestGroup_Condition ();
    else
      post_BackboneElement ();
  }

  void RequestGroup_Condition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->expression_parser_)
      this->expression_parser_->_reset ();

    this->resetting_ = false;
  }

  // RequestGroup_RelatedAction_pskel
  //

  void RequestGroup_RelatedAction_pskel::
  actionId ()
  {
    if (this->RequestGroup_RelatedAction_impl_)
      this->RequestGroup_RelatedAction_impl_->actionId ();
  }

  void RequestGroup_RelatedAction_pskel::
  relationship ()
  {
    if (this->RequestGroup_RelatedAction_impl_)
      this->RequestGroup_RelatedAction_impl_->relationship ();
  }

  void RequestGroup_RelatedAction_pskel::
  offsetDuration ()
  {
    if (this->RequestGroup_RelatedAction_impl_)
      this->RequestGroup_RelatedAction_impl_->offsetDuration ();
  }

  void RequestGroup_RelatedAction_pskel::
  offsetRange ()
  {
    if (this->RequestGroup_RelatedAction_impl_)
      this->RequestGroup_RelatedAction_impl_->offsetRange ();
  }

  void RequestGroup_RelatedAction_pskel::
  post_RequestGroup_RelatedAction ()
  {
    if (this->RequestGroup_RelatedAction_impl_)
      this->RequestGroup_RelatedAction_impl_->post_RequestGroup_RelatedAction ();
    else
      post_BackboneElement ();
  }

  void RequestGroup_RelatedAction_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->actionId_parser_)
      this->actionId_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->offsetDuration_parser_)
      this->offsetDuration_parser_->_reset ();

    if (this->offsetRange_parser_)
      this->offsetRange_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for RequestGroup_pskel.
  //
  bool RequestGroup_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "replaces" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "groupIdentifier" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RequestGroup_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RequestGroup_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RequestGroup_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void RequestGroup_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void RequestGroup_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "replaces" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->replaces_parser_)
            {
              this->replaces_parser_->pre ();
              ctx.nested_parser (this->replaces_parser_);
            }
          }
          else
          {
            if (this->replaces_parser_ != 0)
            {
              this->replaces_parser_->post_Reference ();
              this->replaces ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "groupIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupIdentifier_parser_)
            {
              this->groupIdentifier_parser_->pre ();
              ctx.nested_parser (this->groupIdentifier_parser_);
            }
          }
          else
          {
            if (this->groupIdentifier_parser_ != 0)
            {
              this->groupIdentifier_parser_->post_Identifier ();
              this->groupIdentifier ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_RequestStatus ();
              this->status ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_RequestIntent ();
              this->intent ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "authoredOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authoredOn_parser_)
            {
              this->authoredOn_parser_->pre ();
              ctx.nested_parser (this->authoredOn_parser_);
            }
          }
          else
          {
            if (this->authoredOn_parser_ != 0)
            {
              this->authoredOn_parser_->post_dateTime ();
              this->authoredOn ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_RequestGroup_Action ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RequestGroup_Action_pskel.
  //
  bool RequestGroup_Action_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "prefix" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "textEquivalent" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "priority" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "documentation" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "condition" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "relatedAction" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "timingDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "timingAge" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "timingPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "timingDuration" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "timingRange" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "timingTiming" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "participant" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "groupingBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;
        else if (n == "selectionBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 18UL;
        else if (n == "requiredBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 19UL;
        else if (n == "precheckBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 20UL;
        else if (n == "cardinalityBehavior" &&
                 ns == "http://hl7.org/fhir")
          s = 21UL;
        else if (n == "resource" &&
                 ns == "http://hl7.org/fhir")
          s = 22UL;
        else if (n == "action" &&
                 ns == "http://hl7.org/fhir")
          s = 23UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RequestGroup_Action_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RequestGroup_Action_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RequestGroup_Action_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RequestGroup_Action_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void RequestGroup_Action_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "prefix" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prefix_parser_)
            {
              this->prefix_parser_->pre ();
              ctx.nested_parser (this->prefix_parser_);
            }
          }
          else
          {
            if (this->prefix_parser_ != 0)
            {
              this->prefix_parser_->post_string ();
              this->prefix ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "textEquivalent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->textEquivalent_parser_)
            {
              this->textEquivalent_parser_->pre ();
              ctx.nested_parser (this->textEquivalent_parser_);
            }
          }
          else
          {
            if (this->textEquivalent_parser_ != 0)
            {
              this->textEquivalent_parser_->post_string ();
              this->textEquivalent ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_RelatedArtifact ();
              this->documentation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_RequestGroup_Condition ();
              this->condition ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "relatedAction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatedAction_parser_)
            {
              this->relatedAction_parser_->pre ();
              ctx.nested_parser (this->relatedAction_parser_);
            }
          }
          else
          {
            if (this->relatedAction_parser_ != 0)
            {
              this->relatedAction_parser_->post_RequestGroup_RelatedAction ();
              this->relatedAction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "timingDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingDateTime_parser_)
            {
              this->timingDateTime_parser_->pre ();
              ctx.nested_parser (this->timingDateTime_parser_);
            }
          }
          else
          {
            if (this->timingDateTime_parser_ != 0)
            {
              this->timingDateTime_parser_->post_dateTime ();
              this->timingDateTime ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "timingAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingAge_parser_)
            {
              this->timingAge_parser_->pre ();
              ctx.nested_parser (this->timingAge_parser_);
            }
          }
          else
          {
            if (this->timingAge_parser_ != 0)
            {
              this->timingAge_parser_->post_Age ();
              this->timingAge ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "timingPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingPeriod_parser_)
            {
              this->timingPeriod_parser_->pre ();
              ctx.nested_parser (this->timingPeriod_parser_);
            }
          }
          else
          {
            if (this->timingPeriod_parser_ != 0)
            {
              this->timingPeriod_parser_->post_Period ();
              this->timingPeriod ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "timingDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingDuration_parser_)
            {
              this->timingDuration_parser_->pre ();
              ctx.nested_parser (this->timingDuration_parser_);
            }
          }
          else
          {
            if (this->timingDuration_parser_ != 0)
            {
              this->timingDuration_parser_->post_Duration ();
              this->timingDuration ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "timingRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingRange_parser_)
            {
              this->timingRange_parser_->pre ();
              ctx.nested_parser (this->timingRange_parser_);
            }
          }
          else
          {
            if (this->timingRange_parser_ != 0)
            {
              this->timingRange_parser_->post_Range ();
              this->timingRange ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "timingTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingTiming_parser_)
            {
              this->timingTiming_parser_->pre ();
              ctx.nested_parser (this->timingTiming_parser_);
            }
          }
          else
          {
            if (this->timingTiming_parser_ != 0)
            {
              this->timingTiming_parser_->post_Timing ();
              this->timingTiming ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_Reference ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "groupingBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupingBehavior_parser_)
            {
              this->groupingBehavior_parser_->pre ();
              ctx.nested_parser (this->groupingBehavior_parser_);
            }
          }
          else
          {
            if (this->groupingBehavior_parser_ != 0)
            {
              this->groupingBehavior_parser_->post_ActionGroupingBehavior ();
              this->groupingBehavior ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "selectionBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->selectionBehavior_parser_)
            {
              this->selectionBehavior_parser_->pre ();
              ctx.nested_parser (this->selectionBehavior_parser_);
            }
          }
          else
          {
            if (this->selectionBehavior_parser_ != 0)
            {
              this->selectionBehavior_parser_->post_ActionSelectionBehavior ();
              this->selectionBehavior ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "requiredBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requiredBehavior_parser_)
            {
              this->requiredBehavior_parser_->pre ();
              ctx.nested_parser (this->requiredBehavior_parser_);
            }
          }
          else
          {
            if (this->requiredBehavior_parser_ != 0)
            {
              this->requiredBehavior_parser_->post_ActionRequiredBehavior ();
              this->requiredBehavior ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "precheckBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->precheckBehavior_parser_)
            {
              this->precheckBehavior_parser_->pre ();
              ctx.nested_parser (this->precheckBehavior_parser_);
            }
          }
          else
          {
            if (this->precheckBehavior_parser_ != 0)
            {
              this->precheckBehavior_parser_->post_ActionPrecheckBehavior ();
              this->precheckBehavior ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "cardinalityBehavior" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->cardinalityBehavior_parser_)
            {
              this->cardinalityBehavior_parser_->pre ();
              ctx.nested_parser (this->cardinalityBehavior_parser_);
            }
          }
          else
          {
            if (this->cardinalityBehavior_parser_ != 0)
            {
              this->cardinalityBehavior_parser_->post_ActionCardinalityBehavior ();
              this->cardinalityBehavior ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "resource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resource_parser_)
            {
              this->resource_parser_->pre ();
              ctx.nested_parser (this->resource_parser_);
            }
          }
          else
          {
            if (this->resource_parser_ != 0)
            {
              this->resource_parser_->post_Reference ();
              this->resource ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "action" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->action_parser_)
            {
              this->action_parser_->pre ();
              ctx.nested_parser (this->action_parser_);
            }
          }
          else
          {
            if (this->action_parser_ != 0)
            {
              this->action_parser_->post_RequestGroup_Action ();
              this->action ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RequestGroup_Condition_pskel.
  //
  bool RequestGroup_Condition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RequestGroup_Condition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RequestGroup_Condition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RequestGroup_Condition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RequestGroup_Condition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void RequestGroup_Condition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_ActionConditionKind ();
              this->kind ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "expression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expression_parser_)
            {
              this->expression_parser_->pre ();
              ctx.nested_parser (this->expression_parser_);
            }
          }
          else
          {
            if (this->expression_parser_ != 0)
            {
              this->expression_parser_->post_Expression ();
              this->expression ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RequestGroup_RelatedAction_pskel.
  //
  bool RequestGroup_RelatedAction_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "actionId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RequestGroup_RelatedAction_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RequestGroup_RelatedAction_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RequestGroup_RelatedAction_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RequestGroup_RelatedAction_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void RequestGroup_RelatedAction_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "actionId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actionId_parser_)
            {
              this->actionId_parser_->pre ();
              ctx.nested_parser (this->actionId_parser_);
            }
          }
          else
          {
            if (this->actionId_parser_ != 0)
            {
              this->actionId_parser_->post_id ();
              this->actionId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_ActionRelationshipType ();
              this->relationship ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "offsetDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->offsetDuration_parser_)
            {
              this->offsetDuration_parser_->pre ();
              ctx.nested_parser (this->offsetDuration_parser_);
            }
          }
          else
          {
            if (this->offsetDuration_parser_ != 0)
            {
              this->offsetDuration_parser_->post_Duration ();
              this->offsetDuration ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "offsetRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->offsetRange_parser_)
            {
              this->offsetRange_parser_->pre ();
              ctx.nested_parser (this->offsetRange_parser_);
            }
          }
          else
          {
            if (this->offsetRange_parser_ != 0)
            {
              this->offsetRange_parser_->post_Range ();
              this->offsetRange ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

