// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "riskevidencesynthesis-pskel.hxx"

namespace fhir
{
  // RiskEvidenceSynthesis_pskel
  //

  void RiskEvidenceSynthesis_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  approvalDate_parser (::fhir::date_pskel& p)
  {
    this->approvalDate_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  lastReviewDate_parser (::fhir::date_pskel& p)
  {
    this->lastReviewDate_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  topic_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->topic_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  author_parser (::fhir::ContactDetail_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  editor_parser (::fhir::ContactDetail_pskel& p)
  {
    this->editor_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  reviewer_parser (::fhir::ContactDetail_pskel& p)
  {
    this->reviewer_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  endorser_parser (::fhir::ContactDetail_pskel& p)
  {
    this->endorser_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  relatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->relatedArtifact_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  synthesisType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->synthesisType_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  studyType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->studyType_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  population_parser (::fhir::Reference_pskel& p)
  {
    this->population_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  exposure_parser (::fhir::Reference_pskel& p)
  {
    this->exposure_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  outcome_parser (::fhir::Reference_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  sampleSize_parser (::fhir::RiskEvidenceSynthesis_SampleSize_pskel& p)
  {
    this->sampleSize_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  riskEstimate_parser (::fhir::RiskEvidenceSynthesis_RiskEstimate_pskel& p)
  {
    this->riskEstimate_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  certainty_parser (::fhir::RiskEvidenceSynthesis_Certainty_pskel& p)
  {
    this->certainty_parser_ = &p;
  }

  void RiskEvidenceSynthesis_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::Annotation_pskel& note,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& copyright,
           ::fhir::date_pskel& approvalDate,
           ::fhir::date_pskel& lastReviewDate,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::CodeableConcept_pskel& topic,
           ::fhir::ContactDetail_pskel& author,
           ::fhir::ContactDetail_pskel& editor,
           ::fhir::ContactDetail_pskel& reviewer,
           ::fhir::ContactDetail_pskel& endorser,
           ::fhir::RelatedArtifact_pskel& relatedArtifact,
           ::fhir::CodeableConcept_pskel& synthesisType,
           ::fhir::CodeableConcept_pskel& studyType,
           ::fhir::Reference_pskel& population,
           ::fhir::Reference_pskel& exposure,
           ::fhir::Reference_pskel& outcome,
           ::fhir::RiskEvidenceSynthesis_SampleSize_pskel& sampleSize,
           ::fhir::RiskEvidenceSynthesis_RiskEstimate_pskel& riskEstimate,
           ::fhir::RiskEvidenceSynthesis_Certainty_pskel& certainty)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->note_parser_ = &note;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->copyright_parser_ = &copyright;
    this->approvalDate_parser_ = &approvalDate;
    this->lastReviewDate_parser_ = &lastReviewDate;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->topic_parser_ = &topic;
    this->author_parser_ = &author;
    this->editor_parser_ = &editor;
    this->reviewer_parser_ = &reviewer;
    this->endorser_parser_ = &endorser;
    this->relatedArtifact_parser_ = &relatedArtifact;
    this->synthesisType_parser_ = &synthesisType;
    this->studyType_parser_ = &studyType;
    this->population_parser_ = &population;
    this->exposure_parser_ = &exposure;
    this->outcome_parser_ = &outcome;
    this->sampleSize_parser_ = &sampleSize;
    this->riskEstimate_parser_ = &riskEstimate;
    this->certainty_parser_ = &certainty;
  }

  RiskEvidenceSynthesis_pskel::
  RiskEvidenceSynthesis_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    RiskEvidenceSynthesis_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    note_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    synthesisType_parser_ (0),
    studyType_parser_ (0),
    population_parser_ (0),
    exposure_parser_ (0),
    outcome_parser_ (0),
    sampleSize_parser_ (0),
    riskEstimate_parser_ (0),
    certainty_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskEvidenceSynthesis_pskel::
  RiskEvidenceSynthesis_pskel (RiskEvidenceSynthesis_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    RiskEvidenceSynthesis_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    note_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    synthesisType_parser_ (0),
    studyType_parser_ (0),
    population_parser_ (0),
    exposure_parser_ (0),
    outcome_parser_ (0),
    sampleSize_parser_ (0),
    riskEstimate_parser_ (0),
    certainty_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RiskEvidenceSynthesis_SampleSize_pskel
  //

  void RiskEvidenceSynthesis_SampleSize_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  numberOfStudies_parser (::fhir::integer_pskel& p)
  {
    this->numberOfStudies_parser_ = &p;
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  numberOfParticipants_parser (::fhir::integer_pskel& p)
  {
    this->numberOfParticipants_parser_ = &p;
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::integer_pskel& numberOfStudies,
           ::fhir::integer_pskel& numberOfParticipants)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->numberOfStudies_parser_ = &numberOfStudies;
    this->numberOfParticipants_parser_ = &numberOfParticipants;
  }

  RiskEvidenceSynthesis_SampleSize_pskel::
  RiskEvidenceSynthesis_SampleSize_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RiskEvidenceSynthesis_SampleSize_impl_ (0),
    description_parser_ (0),
    numberOfStudies_parser_ (0),
    numberOfParticipants_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskEvidenceSynthesis_SampleSize_pskel::
  RiskEvidenceSynthesis_SampleSize_pskel (RiskEvidenceSynthesis_SampleSize_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RiskEvidenceSynthesis_SampleSize_impl_ (impl),
    description_parser_ (0),
    numberOfStudies_parser_ (0),
    numberOfParticipants_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RiskEvidenceSynthesis_RiskEstimate_pskel
  //

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  value_parser (::fhir::decimal_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  unitOfMeasure_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->unitOfMeasure_parser_ = &p;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  denominatorCount_parser (::fhir::integer_pskel& p)
  {
    this->denominatorCount_parser_ = &p;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  numeratorCount_parser (::fhir::integer_pskel& p)
  {
    this->numeratorCount_parser_ = &p;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  precisionEstimate_parser (::fhir::RiskEvidenceSynthesis_PrecisionEstimate_pskel& p)
  {
    this->precisionEstimate_parser_ = &p;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::decimal_pskel& value,
           ::fhir::CodeableConcept_pskel& unitOfMeasure,
           ::fhir::integer_pskel& denominatorCount,
           ::fhir::integer_pskel& numeratorCount,
           ::fhir::RiskEvidenceSynthesis_PrecisionEstimate_pskel& precisionEstimate)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->type_parser_ = &type;
    this->value_parser_ = &value;
    this->unitOfMeasure_parser_ = &unitOfMeasure;
    this->denominatorCount_parser_ = &denominatorCount;
    this->numeratorCount_parser_ = &numeratorCount;
    this->precisionEstimate_parser_ = &precisionEstimate;
  }

  RiskEvidenceSynthesis_RiskEstimate_pskel::
  RiskEvidenceSynthesis_RiskEstimate_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RiskEvidenceSynthesis_RiskEstimate_impl_ (0),
    description_parser_ (0),
    type_parser_ (0),
    value_parser_ (0),
    unitOfMeasure_parser_ (0),
    denominatorCount_parser_ (0),
    numeratorCount_parser_ (0),
    precisionEstimate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskEvidenceSynthesis_RiskEstimate_pskel::
  RiskEvidenceSynthesis_RiskEstimate_pskel (RiskEvidenceSynthesis_RiskEstimate_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RiskEvidenceSynthesis_RiskEstimate_impl_ (impl),
    description_parser_ (0),
    type_parser_ (0),
    value_parser_ (0),
    unitOfMeasure_parser_ (0),
    denominatorCount_parser_ (0),
    numeratorCount_parser_ (0),
    precisionEstimate_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RiskEvidenceSynthesis_PrecisionEstimate_pskel
  //

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  level_parser (::fhir::decimal_pskel& p)
  {
    this->level_parser_ = &p;
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  from_parser (::fhir::decimal_pskel& p)
  {
    this->from_parser_ = &p;
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  to_parser (::fhir::decimal_pskel& p)
  {
    this->to_parser_ = &p;
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::decimal_pskel& level,
           ::fhir::decimal_pskel& from,
           ::fhir::decimal_pskel& to)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->level_parser_ = &level;
    this->from_parser_ = &from;
    this->to_parser_ = &to;
  }

  RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  RiskEvidenceSynthesis_PrecisionEstimate_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RiskEvidenceSynthesis_PrecisionEstimate_impl_ (0),
    type_parser_ (0),
    level_parser_ (0),
    from_parser_ (0),
    to_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  RiskEvidenceSynthesis_PrecisionEstimate_pskel (RiskEvidenceSynthesis_PrecisionEstimate_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RiskEvidenceSynthesis_PrecisionEstimate_impl_ (impl),
    type_parser_ (0),
    level_parser_ (0),
    from_parser_ (0),
    to_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RiskEvidenceSynthesis_Certainty_pskel
  //

  void RiskEvidenceSynthesis_Certainty_pskel::
  rating_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->rating_parser_ = &p;
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  certaintySubcomponent_parser (::fhir::RiskEvidenceSynthesis_CertaintySubcomponent_pskel& p)
  {
    this->certaintySubcomponent_parser_ = &p;
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& rating,
           ::fhir::Annotation_pskel& note,
           ::fhir::RiskEvidenceSynthesis_CertaintySubcomponent_pskel& certaintySubcomponent)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->rating_parser_ = &rating;
    this->note_parser_ = &note;
    this->certaintySubcomponent_parser_ = &certaintySubcomponent;
  }

  RiskEvidenceSynthesis_Certainty_pskel::
  RiskEvidenceSynthesis_Certainty_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RiskEvidenceSynthesis_Certainty_impl_ (0),
    rating_parser_ (0),
    note_parser_ (0),
    certaintySubcomponent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskEvidenceSynthesis_Certainty_pskel::
  RiskEvidenceSynthesis_Certainty_pskel (RiskEvidenceSynthesis_Certainty_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RiskEvidenceSynthesis_Certainty_impl_ (impl),
    rating_parser_ (0),
    note_parser_ (0),
    certaintySubcomponent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RiskEvidenceSynthesis_CertaintySubcomponent_pskel
  //

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  rating_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->rating_parser_ = &p;
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& rating,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->rating_parser_ = &rating;
    this->note_parser_ = &note;
  }

  RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  RiskEvidenceSynthesis_CertaintySubcomponent_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RiskEvidenceSynthesis_CertaintySubcomponent_impl_ (0),
    type_parser_ (0),
    rating_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  RiskEvidenceSynthesis_CertaintySubcomponent_pskel (RiskEvidenceSynthesis_CertaintySubcomponent_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RiskEvidenceSynthesis_CertaintySubcomponent_impl_ (impl),
    type_parser_ (0),
    rating_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // RiskEvidenceSynthesis_pskel
  //

  void RiskEvidenceSynthesis_pskel::
  url ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->url ();
  }

  void RiskEvidenceSynthesis_pskel::
  identifier ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->identifier ();
  }

  void RiskEvidenceSynthesis_pskel::
  version ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->version ();
  }

  void RiskEvidenceSynthesis_pskel::
  name ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->name ();
  }

  void RiskEvidenceSynthesis_pskel::
  title ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->title ();
  }

  void RiskEvidenceSynthesis_pskel::
  status ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->status ();
  }

  void RiskEvidenceSynthesis_pskel::
  date ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->date ();
  }

  void RiskEvidenceSynthesis_pskel::
  publisher ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->publisher ();
  }

  void RiskEvidenceSynthesis_pskel::
  contact ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->contact ();
  }

  void RiskEvidenceSynthesis_pskel::
  description ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->description ();
  }

  void RiskEvidenceSynthesis_pskel::
  note ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->note ();
  }

  void RiskEvidenceSynthesis_pskel::
  useContext ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->useContext ();
  }

  void RiskEvidenceSynthesis_pskel::
  jurisdiction ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->jurisdiction ();
  }

  void RiskEvidenceSynthesis_pskel::
  copyright ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->copyright ();
  }

  void RiskEvidenceSynthesis_pskel::
  approvalDate ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->approvalDate ();
  }

  void RiskEvidenceSynthesis_pskel::
  lastReviewDate ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->lastReviewDate ();
  }

  void RiskEvidenceSynthesis_pskel::
  effectivePeriod ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->effectivePeriod ();
  }

  void RiskEvidenceSynthesis_pskel::
  topic ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->topic ();
  }

  void RiskEvidenceSynthesis_pskel::
  author ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->author ();
  }

  void RiskEvidenceSynthesis_pskel::
  editor ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->editor ();
  }

  void RiskEvidenceSynthesis_pskel::
  reviewer ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->reviewer ();
  }

  void RiskEvidenceSynthesis_pskel::
  endorser ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->endorser ();
  }

  void RiskEvidenceSynthesis_pskel::
  relatedArtifact ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->relatedArtifact ();
  }

  void RiskEvidenceSynthesis_pskel::
  synthesisType ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->synthesisType ();
  }

  void RiskEvidenceSynthesis_pskel::
  studyType ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->studyType ();
  }

  void RiskEvidenceSynthesis_pskel::
  population ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->population ();
  }

  void RiskEvidenceSynthesis_pskel::
  exposure ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->exposure ();
  }

  void RiskEvidenceSynthesis_pskel::
  outcome ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->outcome ();
  }

  void RiskEvidenceSynthesis_pskel::
  sampleSize ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->sampleSize ();
  }

  void RiskEvidenceSynthesis_pskel::
  riskEstimate ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->riskEstimate ();
  }

  void RiskEvidenceSynthesis_pskel::
  certainty ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->certainty ();
  }

  void RiskEvidenceSynthesis_pskel::
  post_RiskEvidenceSynthesis ()
  {
    if (this->RiskEvidenceSynthesis_impl_)
      this->RiskEvidenceSynthesis_impl_->post_RiskEvidenceSynthesis ();
    else
      post_DomainResource ();
  }

  void RiskEvidenceSynthesis_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->approvalDate_parser_)
      this->approvalDate_parser_->_reset ();

    if (this->lastReviewDate_parser_)
      this->lastReviewDate_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->topic_parser_)
      this->topic_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->editor_parser_)
      this->editor_parser_->_reset ();

    if (this->reviewer_parser_)
      this->reviewer_parser_->_reset ();

    if (this->endorser_parser_)
      this->endorser_parser_->_reset ();

    if (this->relatedArtifact_parser_)
      this->relatedArtifact_parser_->_reset ();

    if (this->synthesisType_parser_)
      this->synthesisType_parser_->_reset ();

    if (this->studyType_parser_)
      this->studyType_parser_->_reset ();

    if (this->population_parser_)
      this->population_parser_->_reset ();

    if (this->exposure_parser_)
      this->exposure_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->sampleSize_parser_)
      this->sampleSize_parser_->_reset ();

    if (this->riskEstimate_parser_)
      this->riskEstimate_parser_->_reset ();

    if (this->certainty_parser_)
      this->certainty_parser_->_reset ();

    this->resetting_ = false;
  }

  // RiskEvidenceSynthesis_SampleSize_pskel
  //

  void RiskEvidenceSynthesis_SampleSize_pskel::
  description ()
  {
    if (this->RiskEvidenceSynthesis_SampleSize_impl_)
      this->RiskEvidenceSynthesis_SampleSize_impl_->description ();
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  numberOfStudies ()
  {
    if (this->RiskEvidenceSynthesis_SampleSize_impl_)
      this->RiskEvidenceSynthesis_SampleSize_impl_->numberOfStudies ();
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  numberOfParticipants ()
  {
    if (this->RiskEvidenceSynthesis_SampleSize_impl_)
      this->RiskEvidenceSynthesis_SampleSize_impl_->numberOfParticipants ();
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  post_RiskEvidenceSynthesis_SampleSize ()
  {
    if (this->RiskEvidenceSynthesis_SampleSize_impl_)
      this->RiskEvidenceSynthesis_SampleSize_impl_->post_RiskEvidenceSynthesis_SampleSize ();
    else
      post_BackboneElement ();
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->numberOfStudies_parser_)
      this->numberOfStudies_parser_->_reset ();

    if (this->numberOfParticipants_parser_)
      this->numberOfParticipants_parser_->_reset ();

    this->resetting_ = false;
  }

  // RiskEvidenceSynthesis_RiskEstimate_pskel
  //

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  description ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->description ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  type ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->type ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  value ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->value ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  unitOfMeasure ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->unitOfMeasure ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  denominatorCount ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->denominatorCount ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  numeratorCount ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->numeratorCount ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  precisionEstimate ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->precisionEstimate ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  post_RiskEvidenceSynthesis_RiskEstimate ()
  {
    if (this->RiskEvidenceSynthesis_RiskEstimate_impl_)
      this->RiskEvidenceSynthesis_RiskEstimate_impl_->post_RiskEvidenceSynthesis_RiskEstimate ();
    else
      post_BackboneElement ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->unitOfMeasure_parser_)
      this->unitOfMeasure_parser_->_reset ();

    if (this->denominatorCount_parser_)
      this->denominatorCount_parser_->_reset ();

    if (this->numeratorCount_parser_)
      this->numeratorCount_parser_->_reset ();

    if (this->precisionEstimate_parser_)
      this->precisionEstimate_parser_->_reset ();

    this->resetting_ = false;
  }

  // RiskEvidenceSynthesis_PrecisionEstimate_pskel
  //

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  type ()
  {
    if (this->RiskEvidenceSynthesis_PrecisionEstimate_impl_)
      this->RiskEvidenceSynthesis_PrecisionEstimate_impl_->type ();
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  level ()
  {
    if (this->RiskEvidenceSynthesis_PrecisionEstimate_impl_)
      this->RiskEvidenceSynthesis_PrecisionEstimate_impl_->level ();
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  from ()
  {
    if (this->RiskEvidenceSynthesis_PrecisionEstimate_impl_)
      this->RiskEvidenceSynthesis_PrecisionEstimate_impl_->from ();
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  to ()
  {
    if (this->RiskEvidenceSynthesis_PrecisionEstimate_impl_)
      this->RiskEvidenceSynthesis_PrecisionEstimate_impl_->to ();
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  post_RiskEvidenceSynthesis_PrecisionEstimate ()
  {
    if (this->RiskEvidenceSynthesis_PrecisionEstimate_impl_)
      this->RiskEvidenceSynthesis_PrecisionEstimate_impl_->post_RiskEvidenceSynthesis_PrecisionEstimate ();
    else
      post_BackboneElement ();
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->level_parser_)
      this->level_parser_->_reset ();

    if (this->from_parser_)
      this->from_parser_->_reset ();

    if (this->to_parser_)
      this->to_parser_->_reset ();

    this->resetting_ = false;
  }

  // RiskEvidenceSynthesis_Certainty_pskel
  //

  void RiskEvidenceSynthesis_Certainty_pskel::
  rating ()
  {
    if (this->RiskEvidenceSynthesis_Certainty_impl_)
      this->RiskEvidenceSynthesis_Certainty_impl_->rating ();
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  note ()
  {
    if (this->RiskEvidenceSynthesis_Certainty_impl_)
      this->RiskEvidenceSynthesis_Certainty_impl_->note ();
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  certaintySubcomponent ()
  {
    if (this->RiskEvidenceSynthesis_Certainty_impl_)
      this->RiskEvidenceSynthesis_Certainty_impl_->certaintySubcomponent ();
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  post_RiskEvidenceSynthesis_Certainty ()
  {
    if (this->RiskEvidenceSynthesis_Certainty_impl_)
      this->RiskEvidenceSynthesis_Certainty_impl_->post_RiskEvidenceSynthesis_Certainty ();
    else
      post_BackboneElement ();
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->rating_parser_)
      this->rating_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->certaintySubcomponent_parser_)
      this->certaintySubcomponent_parser_->_reset ();

    this->resetting_ = false;
  }

  // RiskEvidenceSynthesis_CertaintySubcomponent_pskel
  //

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  type ()
  {
    if (this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_)
      this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_->type ();
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  rating ()
  {
    if (this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_)
      this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_->rating ();
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  note ()
  {
    if (this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_)
      this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_->note ();
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  post_RiskEvidenceSynthesis_CertaintySubcomponent ()
  {
    if (this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_)
      this->RiskEvidenceSynthesis_CertaintySubcomponent_impl_->post_RiskEvidenceSynthesis_CertaintySubcomponent ();
    else
      post_BackboneElement ();
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->rating_parser_)
      this->rating_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for RiskEvidenceSynthesis_pskel.
  //
  bool RiskEvidenceSynthesis_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskEvidenceSynthesis_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskEvidenceSynthesis_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskEvidenceSynthesis_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void RiskEvidenceSynthesis_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void RiskEvidenceSynthesis_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "approvalDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->approvalDate_parser_)
            {
              this->approvalDate_parser_->pre ();
              ctx.nested_parser (this->approvalDate_parser_);
            }
          }
          else
          {
            if (this->approvalDate_parser_ != 0)
            {
              this->approvalDate_parser_->post_date ();
              this->approvalDate ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "lastReviewDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastReviewDate_parser_)
            {
              this->lastReviewDate_parser_->pre ();
              ctx.nested_parser (this->lastReviewDate_parser_);
            }
          }
          else
          {
            if (this->lastReviewDate_parser_ != 0)
            {
              this->lastReviewDate_parser_->post_date ();
              this->lastReviewDate ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "topic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topic_parser_)
            {
              this->topic_parser_->pre ();
              ctx.nested_parser (this->topic_parser_);
            }
          }
          else
          {
            if (this->topic_parser_ != 0)
            {
              this->topic_parser_->post_CodeableConcept ();
              this->topic ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_ContactDetail ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "editor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->editor_parser_)
            {
              this->editor_parser_->pre ();
              ctx.nested_parser (this->editor_parser_);
            }
          }
          else
          {
            if (this->editor_parser_ != 0)
            {
              this->editor_parser_->post_ContactDetail ();
              this->editor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "reviewer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reviewer_parser_)
            {
              this->reviewer_parser_->pre ();
              ctx.nested_parser (this->reviewer_parser_);
            }
          }
          else
          {
            if (this->reviewer_parser_ != 0)
            {
              this->reviewer_parser_->post_ContactDetail ();
              this->reviewer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "endorser" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endorser_parser_)
            {
              this->endorser_parser_->pre ();
              ctx.nested_parser (this->endorser_parser_);
            }
          }
          else
          {
            if (this->endorser_parser_ != 0)
            {
              this->endorser_parser_->post_ContactDetail ();
              this->endorser ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "relatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatedArtifact_parser_)
            {
              this->relatedArtifact_parser_->pre ();
              ctx.nested_parser (this->relatedArtifact_parser_);
            }
          }
          else
          {
            if (this->relatedArtifact_parser_ != 0)
            {
              this->relatedArtifact_parser_->post_RelatedArtifact ();
              this->relatedArtifact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "synthesisType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->synthesisType_parser_)
            {
              this->synthesisType_parser_->pre ();
              ctx.nested_parser (this->synthesisType_parser_);
            }
          }
          else
          {
            if (this->synthesisType_parser_ != 0)
            {
              this->synthesisType_parser_->post_CodeableConcept ();
              this->synthesisType ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "studyType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->studyType_parser_)
            {
              this->studyType_parser_->pre ();
              ctx.nested_parser (this->studyType_parser_);
            }
          }
          else
          {
            if (this->studyType_parser_ != 0)
            {
              this->studyType_parser_->post_CodeableConcept ();
              this->studyType ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "population" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->population_parser_)
            {
              this->population_parser_->pre ();
              ctx.nested_parser (this->population_parser_);
            }
          }
          else
          {
            if (this->population_parser_ != 0)
            {
              this->population_parser_->post_Reference ();
              this->population ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "exposure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exposure_parser_)
            {
              this->exposure_parser_->pre ();
              ctx.nested_parser (this->exposure_parser_);
            }
          }
          else
          {
            if (this->exposure_parser_ != 0)
            {
              this->exposure_parser_->post_Reference ();
              this->exposure ();
            }

            count = 0;
            state = 27UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_Reference ();
              this->outcome ();
            }

            count = 0;
            state = 28UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "sampleSize" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sampleSize_parser_)
            {
              this->sampleSize_parser_->pre ();
              ctx.nested_parser (this->sampleSize_parser_);
            }
          }
          else
          {
            if (this->sampleSize_parser_ != 0)
            {
              this->sampleSize_parser_->post_RiskEvidenceSynthesis_SampleSize ();
              this->sampleSize ();
            }

            count = 0;
            state = 29UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "riskEstimate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->riskEstimate_parser_)
            {
              this->riskEstimate_parser_->pre ();
              ctx.nested_parser (this->riskEstimate_parser_);
            }
          }
          else
          {
            if (this->riskEstimate_parser_ != 0)
            {
              this->riskEstimate_parser_->post_RiskEvidenceSynthesis_RiskEstimate ();
              this->riskEstimate ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "certainty" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->certainty_parser_)
            {
              this->certainty_parser_->pre ();
              ctx.nested_parser (this->certainty_parser_);
            }
          }
          else
          {
            if (this->certainty_parser_ != 0)
            {
              this->certainty_parser_->post_RiskEvidenceSynthesis_Certainty ();
              this->certainty ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RiskEvidenceSynthesis_SampleSize_pskel.
  //
  bool RiskEvidenceSynthesis_SampleSize_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "numberOfStudies" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "numberOfParticipants" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskEvidenceSynthesis_SampleSize_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskEvidenceSynthesis_SampleSize_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void RiskEvidenceSynthesis_SampleSize_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "numberOfStudies" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numberOfStudies_parser_)
            {
              this->numberOfStudies_parser_->pre ();
              ctx.nested_parser (this->numberOfStudies_parser_);
            }
          }
          else
          {
            if (this->numberOfStudies_parser_ != 0)
            {
              this->numberOfStudies_parser_->post_integer ();
              this->numberOfStudies ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "numberOfParticipants" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numberOfParticipants_parser_)
            {
              this->numberOfParticipants_parser_->pre ();
              ctx.nested_parser (this->numberOfParticipants_parser_);
            }
          }
          else
          {
            if (this->numberOfParticipants_parser_ != 0)
            {
              this->numberOfParticipants_parser_->post_integer ();
              this->numberOfParticipants ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RiskEvidenceSynthesis_RiskEstimate_pskel.
  //
  bool RiskEvidenceSynthesis_RiskEstimate_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "value" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "unitOfMeasure" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "denominatorCount" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "numeratorCount" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "precisionEstimate" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskEvidenceSynthesis_RiskEstimate_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskEvidenceSynthesis_RiskEstimate_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void RiskEvidenceSynthesis_RiskEstimate_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_decimal ();
              this->value ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "unitOfMeasure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitOfMeasure_parser_)
            {
              this->unitOfMeasure_parser_->pre ();
              ctx.nested_parser (this->unitOfMeasure_parser_);
            }
          }
          else
          {
            if (this->unitOfMeasure_parser_ != 0)
            {
              this->unitOfMeasure_parser_->post_CodeableConcept ();
              this->unitOfMeasure ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "denominatorCount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->denominatorCount_parser_)
            {
              this->denominatorCount_parser_->pre ();
              ctx.nested_parser (this->denominatorCount_parser_);
            }
          }
          else
          {
            if (this->denominatorCount_parser_ != 0)
            {
              this->denominatorCount_parser_->post_integer ();
              this->denominatorCount ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "numeratorCount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numeratorCount_parser_)
            {
              this->numeratorCount_parser_->pre ();
              ctx.nested_parser (this->numeratorCount_parser_);
            }
          }
          else
          {
            if (this->numeratorCount_parser_ != 0)
            {
              this->numeratorCount_parser_->post_integer ();
              this->numeratorCount ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "precisionEstimate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->precisionEstimate_parser_)
            {
              this->precisionEstimate_parser_->pre ();
              ctx.nested_parser (this->precisionEstimate_parser_);
            }
          }
          else
          {
            if (this->precisionEstimate_parser_ != 0)
            {
              this->precisionEstimate_parser_->post_RiskEvidenceSynthesis_PrecisionEstimate ();
              this->precisionEstimate ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RiskEvidenceSynthesis_PrecisionEstimate_pskel.
  //
  bool RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "level" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "from" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "to" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskEvidenceSynthesis_PrecisionEstimate_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void RiskEvidenceSynthesis_PrecisionEstimate_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "level" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->level_parser_)
            {
              this->level_parser_->pre ();
              ctx.nested_parser (this->level_parser_);
            }
          }
          else
          {
            if (this->level_parser_ != 0)
            {
              this->level_parser_->post_decimal ();
              this->level ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "from" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->from_parser_)
            {
              this->from_parser_->pre ();
              ctx.nested_parser (this->from_parser_);
            }
          }
          else
          {
            if (this->from_parser_ != 0)
            {
              this->from_parser_->post_decimal ();
              this->from ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "to" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->to_parser_)
            {
              this->to_parser_->pre ();
              ctx.nested_parser (this->to_parser_);
            }
          }
          else
          {
            if (this->to_parser_ != 0)
            {
              this->to_parser_->post_decimal ();
              this->to ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RiskEvidenceSynthesis_Certainty_pskel.
  //
  bool RiskEvidenceSynthesis_Certainty_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "rating" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "note" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "certaintySubcomponent" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskEvidenceSynthesis_Certainty_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskEvidenceSynthesis_Certainty_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void RiskEvidenceSynthesis_Certainty_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "rating" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rating_parser_)
            {
              this->rating_parser_->pre ();
              ctx.nested_parser (this->rating_parser_);
            }
          }
          else
          {
            if (this->rating_parser_ != 0)
            {
              this->rating_parser_->post_CodeableConcept ();
              this->rating ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "certaintySubcomponent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->certaintySubcomponent_parser_)
            {
              this->certaintySubcomponent_parser_->pre ();
              ctx.nested_parser (this->certaintySubcomponent_parser_);
            }
          }
          else
          {
            if (this->certaintySubcomponent_parser_ != 0)
            {
              this->certaintySubcomponent_parser_->post_RiskEvidenceSynthesis_CertaintySubcomponent ();
              this->certaintySubcomponent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RiskEvidenceSynthesis_CertaintySubcomponent_pskel.
  //
  bool RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "rating" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "note" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskEvidenceSynthesis_CertaintySubcomponent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void RiskEvidenceSynthesis_CertaintySubcomponent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "rating" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rating_parser_)
            {
              this->rating_parser_->pre ();
              ctx.nested_parser (this->rating_parser_);
            }
          }
          else
          {
            if (this->rating_parser_ != 0)
            {
              this->rating_parser_->post_CodeableConcept ();
              this->rating ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

