// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "task-pskel.hxx"

namespace fhir
{
  // Task_pskel
  //

  void Task_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Task_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void Task_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void Task_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void Task_pskel::
  groupIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->groupIdentifier_parser_ = &p;
  }

  void Task_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void Task_pskel::
  status_parser (::fhir::TaskStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Task_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void Task_pskel::
  businessStatus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->businessStatus_parser_ = &p;
  }

  void Task_pskel::
  intent_parser (::fhir::TaskIntent_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void Task_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void Task_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Task_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Task_pskel::
  focus_parser (::fhir::Reference_pskel& p)
  {
    this->focus_parser_ = &p;
  }

  void Task_pskel::
  for__parser (::fhir::Reference_pskel& p)
  {
    this->for__parser_ = &p;
  }

  void Task_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void Task_pskel::
  executionPeriod_parser (::fhir::Period_pskel& p)
  {
    this->executionPeriod_parser_ = &p;
  }

  void Task_pskel::
  authoredOn_parser (::fhir::dateTime_pskel& p)
  {
    this->authoredOn_parser_ = &p;
  }

  void Task_pskel::
  lastModified_parser (::fhir::dateTime_pskel& p)
  {
    this->lastModified_parser_ = &p;
  }

  void Task_pskel::
  requester_parser (::fhir::Reference_pskel& p)
  {
    this->requester_parser_ = &p;
  }

  void Task_pskel::
  performerType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->performerType_parser_ = &p;
  }

  void Task_pskel::
  owner_parser (::fhir::Reference_pskel& p)
  {
    this->owner_parser_ = &p;
  }

  void Task_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Task_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Task_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void Task_pskel::
  insurance_parser (::fhir::Reference_pskel& p)
  {
    this->insurance_parser_ = &p;
  }

  void Task_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Task_pskel::
  relevantHistory_parser (::fhir::Reference_pskel& p)
  {
    this->relevantHistory_parser_ = &p;
  }

  void Task_pskel::
  restriction_parser (::fhir::Task_Restriction_pskel& p)
  {
    this->restriction_parser_ = &p;
  }

  void Task_pskel::
  input_parser (::fhir::Task_Input_pskel& p)
  {
    this->input_parser_ = &p;
  }

  void Task_pskel::
  output_parser (::fhir::Task_Output_pskel& p)
  {
    this->output_parser_ = &p;
  }

  void Task_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Identifier_pskel& groupIdentifier,
           ::fhir::Reference_pskel& partOf,
           ::fhir::TaskStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::CodeableConcept_pskel& businessStatus,
           ::fhir::TaskIntent_pskel& intent,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::string_pskel& description,
           ::fhir::Reference_pskel& focus,
           ::fhir::Reference_pskel& for_,
           ::fhir::Reference_pskel& encounter,
           ::fhir::Period_pskel& executionPeriod,
           ::fhir::dateTime_pskel& authoredOn,
           ::fhir::dateTime_pskel& lastModified,
           ::fhir::Reference_pskel& requester,
           ::fhir::CodeableConcept_pskel& performerType,
           ::fhir::Reference_pskel& owner,
           ::fhir::Reference_pskel& location,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Reference_pskel& insurance,
           ::fhir::Annotation_pskel& note,
           ::fhir::Reference_pskel& relevantHistory,
           ::fhir::Task_Restriction_pskel& restriction,
           ::fhir::Task_Input_pskel& input,
           ::fhir::Task_Output_pskel& output)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->basedOn_parser_ = &basedOn;
    this->groupIdentifier_parser_ = &groupIdentifier;
    this->partOf_parser_ = &partOf;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->businessStatus_parser_ = &businessStatus;
    this->intent_parser_ = &intent;
    this->priority_parser_ = &priority;
    this->code_parser_ = &code;
    this->description_parser_ = &description;
    this->focus_parser_ = &focus;
    this->for__parser_ = &for_;
    this->encounter_parser_ = &encounter;
    this->executionPeriod_parser_ = &executionPeriod;
    this->authoredOn_parser_ = &authoredOn;
    this->lastModified_parser_ = &lastModified;
    this->requester_parser_ = &requester;
    this->performerType_parser_ = &performerType;
    this->owner_parser_ = &owner;
    this->location_parser_ = &location;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->insurance_parser_ = &insurance;
    this->note_parser_ = &note;
    this->relevantHistory_parser_ = &relevantHistory;
    this->restriction_parser_ = &restriction;
    this->input_parser_ = &input;
    this->output_parser_ = &output;
  }

  Task_pskel::
  Task_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Task_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    groupIdentifier_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    businessStatus_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    description_parser_ (0),
    focus_parser_ (0),
    for__parser_ (0),
    encounter_parser_ (0),
    executionPeriod_parser_ (0),
    authoredOn_parser_ (0),
    lastModified_parser_ (0),
    requester_parser_ (0),
    performerType_parser_ (0),
    owner_parser_ (0),
    location_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    insurance_parser_ (0),
    note_parser_ (0),
    relevantHistory_parser_ (0),
    restriction_parser_ (0),
    input_parser_ (0),
    output_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Task_pskel::
  Task_pskel (Task_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Task_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    groupIdentifier_parser_ (0),
    partOf_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    businessStatus_parser_ (0),
    intent_parser_ (0),
    priority_parser_ (0),
    code_parser_ (0),
    description_parser_ (0),
    focus_parser_ (0),
    for__parser_ (0),
    encounter_parser_ (0),
    executionPeriod_parser_ (0),
    authoredOn_parser_ (0),
    lastModified_parser_ (0),
    requester_parser_ (0),
    performerType_parser_ (0),
    owner_parser_ (0),
    location_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    insurance_parser_ (0),
    note_parser_ (0),
    relevantHistory_parser_ (0),
    restriction_parser_ (0),
    input_parser_ (0),
    output_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Task_Restriction_pskel
  //

  void Task_Restriction_pskel::
  repetitions_parser (::fhir::positiveInt_pskel& p)
  {
    this->repetitions_parser_ = &p;
  }

  void Task_Restriction_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Task_Restriction_pskel::
  recipient_parser (::fhir::Reference_pskel& p)
  {
    this->recipient_parser_ = &p;
  }

  void Task_Restriction_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& repetitions,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& recipient)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->repetitions_parser_ = &repetitions;
    this->period_parser_ = &period;
    this->recipient_parser_ = &recipient;
  }

  Task_Restriction_pskel::
  Task_Restriction_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Task_Restriction_impl_ (0),
    repetitions_parser_ (0),
    period_parser_ (0),
    recipient_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Task_Restriction_pskel::
  Task_Restriction_pskel (Task_Restriction_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Task_Restriction_impl_ (impl),
    repetitions_parser_ (0),
    period_parser_ (0),
    recipient_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Task_Input_pskel
  //

  void Task_Input_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Task_Input_pskel::
  valueBase64Binary_parser (::fhir::base64Binary_pskel& p)
  {
    this->valueBase64Binary_parser_ = &p;
  }

  void Task_Input_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void Task_Input_pskel::
  valueCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->valueCanonical_parser_ = &p;
  }

  void Task_Input_pskel::
  valueCode_parser (::fhir::code_pskel& p)
  {
    this->valueCode_parser_ = &p;
  }

  void Task_Input_pskel::
  valueDate_parser (::fhir::date_pskel& p)
  {
    this->valueDate_parser_ = &p;
  }

  void Task_Input_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void Task_Input_pskel::
  valueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->valueDecimal_parser_ = &p;
  }

  void Task_Input_pskel::
  valueId_parser (::fhir::id_pskel& p)
  {
    this->valueId_parser_ = &p;
  }

  void Task_Input_pskel::
  valueInstant_parser (::fhir::instant_pskel& p)
  {
    this->valueInstant_parser_ = &p;
  }

  void Task_Input_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void Task_Input_pskel::
  valueMarkdown_parser (::fhir::markdown_pskel& p)
  {
    this->valueMarkdown_parser_ = &p;
  }

  void Task_Input_pskel::
  valueOid_parser (::fhir::oid_pskel& p)
  {
    this->valueOid_parser_ = &p;
  }

  void Task_Input_pskel::
  valuePositiveInt_parser (::fhir::positiveInt_pskel& p)
  {
    this->valuePositiveInt_parser_ = &p;
  }

  void Task_Input_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void Task_Input_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void Task_Input_pskel::
  valueUnsignedInt_parser (::fhir::unsignedInt_pskel& p)
  {
    this->valueUnsignedInt_parser_ = &p;
  }

  void Task_Input_pskel::
  valueUri_parser (::fhir::uri_pskel& p)
  {
    this->valueUri_parser_ = &p;
  }

  void Task_Input_pskel::
  valueUrl_parser (::fhir::url_pskel& p)
  {
    this->valueUrl_parser_ = &p;
  }

  void Task_Input_pskel::
  valueUuid_parser (::fhir::uuid_pskel& p)
  {
    this->valueUuid_parser_ = &p;
  }

  void Task_Input_pskel::
  valueAddress_parser (::fhir::Address_pskel& p)
  {
    this->valueAddress_parser_ = &p;
  }

  void Task_Input_pskel::
  valueAge_parser (::fhir::Age_pskel& p)
  {
    this->valueAge_parser_ = &p;
  }

  void Task_Input_pskel::
  valueAnnotation_parser (::fhir::Annotation_pskel& p)
  {
    this->valueAnnotation_parser_ = &p;
  }

  void Task_Input_pskel::
  valueAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->valueAttachment_parser_ = &p;
  }

  void Task_Input_pskel::
  valueCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCodeableConcept_parser_ = &p;
  }

  void Task_Input_pskel::
  valueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->valueCoding_parser_ = &p;
  }

  void Task_Input_pskel::
  valueContactPoint_parser (::fhir::ContactPoint_pskel& p)
  {
    this->valueContactPoint_parser_ = &p;
  }

  void Task_Input_pskel::
  valueCount_parser (::fhir::Count_pskel& p)
  {
    this->valueCount_parser_ = &p;
  }

  void Task_Input_pskel::
  valueDistance_parser (::fhir::Distance_pskel& p)
  {
    this->valueDistance_parser_ = &p;
  }

  void Task_Input_pskel::
  valueDuration_parser (::fhir::Duration_pskel& p)
  {
    this->valueDuration_parser_ = &p;
  }

  void Task_Input_pskel::
  valueHumanName_parser (::fhir::HumanName_pskel& p)
  {
    this->valueHumanName_parser_ = &p;
  }

  void Task_Input_pskel::
  valueIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->valueIdentifier_parser_ = &p;
  }

  void Task_Input_pskel::
  valueMoney_parser (::fhir::Money_pskel& p)
  {
    this->valueMoney_parser_ = &p;
  }

  void Task_Input_pskel::
  valuePeriod_parser (::fhir::Period_pskel& p)
  {
    this->valuePeriod_parser_ = &p;
  }

  void Task_Input_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Task_Input_pskel::
  valueRange_parser (::fhir::Range_pskel& p)
  {
    this->valueRange_parser_ = &p;
  }

  void Task_Input_pskel::
  valueRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->valueRatio_parser_ = &p;
  }

  void Task_Input_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void Task_Input_pskel::
  valueSampledData_parser (::fhir::SampledData_pskel& p)
  {
    this->valueSampledData_parser_ = &p;
  }

  void Task_Input_pskel::
  valueSignature_parser (::fhir::Signature_pskel& p)
  {
    this->valueSignature_parser_ = &p;
  }

  void Task_Input_pskel::
  valueTiming_parser (::fhir::Timing_pskel& p)
  {
    this->valueTiming_parser_ = &p;
  }

  void Task_Input_pskel::
  valueContactDetail_parser (::fhir::ContactDetail_pskel& p)
  {
    this->valueContactDetail_parser_ = &p;
  }

  void Task_Input_pskel::
  valueContributor_parser (::fhir::Contributor_pskel& p)
  {
    this->valueContributor_parser_ = &p;
  }

  void Task_Input_pskel::
  valueDataRequirement_parser (::fhir::DataRequirement_pskel& p)
  {
    this->valueDataRequirement_parser_ = &p;
  }

  void Task_Input_pskel::
  valueExpression_parser (::fhir::Expression_pskel& p)
  {
    this->valueExpression_parser_ = &p;
  }

  void Task_Input_pskel::
  valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel& p)
  {
    this->valueParameterDefinition_parser_ = &p;
  }

  void Task_Input_pskel::
  valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->valueRelatedArtifact_parser_ = &p;
  }

  void Task_Input_pskel::
  valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel& p)
  {
    this->valueTriggerDefinition_parser_ = &p;
  }

  void Task_Input_pskel::
  valueUsageContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->valueUsageContext_parser_ = &p;
  }

  void Task_Input_pskel::
  valueDosage_parser (::fhir::Dosage_pskel& p)
  {
    this->valueDosage_parser_ = &p;
  }

  void Task_Input_pskel::
  valueMeta_parser (::fhir::Meta_pskel& p)
  {
    this->valueMeta_parser_ = &p;
  }

  void Task_Input_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::base64Binary_pskel& valueBase64Binary,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::canonical_pskel& valueCanonical,
           ::fhir::code_pskel& valueCode,
           ::fhir::date_pskel& valueDate,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::decimal_pskel& valueDecimal,
           ::fhir::id_pskel& valueId,
           ::fhir::instant_pskel& valueInstant,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::markdown_pskel& valueMarkdown,
           ::fhir::oid_pskel& valueOid,
           ::fhir::positiveInt_pskel& valuePositiveInt,
           ::fhir::string_pskel& valueString,
           ::fhir::time_pskel& valueTime,
           ::fhir::unsignedInt_pskel& valueUnsignedInt,
           ::fhir::uri_pskel& valueUri,
           ::fhir::url_pskel& valueUrl,
           ::fhir::uuid_pskel& valueUuid,
           ::fhir::Address_pskel& valueAddress,
           ::fhir::Age_pskel& valueAge,
           ::fhir::Annotation_pskel& valueAnnotation,
           ::fhir::Attachment_pskel& valueAttachment,
           ::fhir::CodeableConcept_pskel& valueCodeableConcept,
           ::fhir::Coding_pskel& valueCoding,
           ::fhir::ContactPoint_pskel& valueContactPoint,
           ::fhir::Count_pskel& valueCount,
           ::fhir::Distance_pskel& valueDistance,
           ::fhir::Duration_pskel& valueDuration,
           ::fhir::HumanName_pskel& valueHumanName,
           ::fhir::Identifier_pskel& valueIdentifier,
           ::fhir::Money_pskel& valueMoney,
           ::fhir::Period_pskel& valuePeriod,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Range_pskel& valueRange,
           ::fhir::Ratio_pskel& valueRatio,
           ::fhir::Reference_pskel& valueReference,
           ::fhir::SampledData_pskel& valueSampledData,
           ::fhir::Signature_pskel& valueSignature,
           ::fhir::Timing_pskel& valueTiming,
           ::fhir::ContactDetail_pskel& valueContactDetail,
           ::fhir::Contributor_pskel& valueContributor,
           ::fhir::DataRequirement_pskel& valueDataRequirement,
           ::fhir::Expression_pskel& valueExpression,
           ::fhir::ParameterDefinition_pskel& valueParameterDefinition,
           ::fhir::RelatedArtifact_pskel& valueRelatedArtifact,
           ::fhir::TriggerDefinition_pskel& valueTriggerDefinition,
           ::fhir::UsageContext_pskel& valueUsageContext,
           ::fhir::Dosage_pskel& valueDosage,
           ::fhir::Meta_pskel& valueMeta)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->valueBase64Binary_parser_ = &valueBase64Binary;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueCanonical_parser_ = &valueCanonical;
    this->valueCode_parser_ = &valueCode;
    this->valueDate_parser_ = &valueDate;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valueDecimal_parser_ = &valueDecimal;
    this->valueId_parser_ = &valueId;
    this->valueInstant_parser_ = &valueInstant;
    this->valueInteger_parser_ = &valueInteger;
    this->valueMarkdown_parser_ = &valueMarkdown;
    this->valueOid_parser_ = &valueOid;
    this->valuePositiveInt_parser_ = &valuePositiveInt;
    this->valueString_parser_ = &valueString;
    this->valueTime_parser_ = &valueTime;
    this->valueUnsignedInt_parser_ = &valueUnsignedInt;
    this->valueUri_parser_ = &valueUri;
    this->valueUrl_parser_ = &valueUrl;
    this->valueUuid_parser_ = &valueUuid;
    this->valueAddress_parser_ = &valueAddress;
    this->valueAge_parser_ = &valueAge;
    this->valueAnnotation_parser_ = &valueAnnotation;
    this->valueAttachment_parser_ = &valueAttachment;
    this->valueCodeableConcept_parser_ = &valueCodeableConcept;
    this->valueCoding_parser_ = &valueCoding;
    this->valueContactPoint_parser_ = &valueContactPoint;
    this->valueCount_parser_ = &valueCount;
    this->valueDistance_parser_ = &valueDistance;
    this->valueDuration_parser_ = &valueDuration;
    this->valueHumanName_parser_ = &valueHumanName;
    this->valueIdentifier_parser_ = &valueIdentifier;
    this->valueMoney_parser_ = &valueMoney;
    this->valuePeriod_parser_ = &valuePeriod;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueRange_parser_ = &valueRange;
    this->valueRatio_parser_ = &valueRatio;
    this->valueReference_parser_ = &valueReference;
    this->valueSampledData_parser_ = &valueSampledData;
    this->valueSignature_parser_ = &valueSignature;
    this->valueTiming_parser_ = &valueTiming;
    this->valueContactDetail_parser_ = &valueContactDetail;
    this->valueContributor_parser_ = &valueContributor;
    this->valueDataRequirement_parser_ = &valueDataRequirement;
    this->valueExpression_parser_ = &valueExpression;
    this->valueParameterDefinition_parser_ = &valueParameterDefinition;
    this->valueRelatedArtifact_parser_ = &valueRelatedArtifact;
    this->valueTriggerDefinition_parser_ = &valueTriggerDefinition;
    this->valueUsageContext_parser_ = &valueUsageContext;
    this->valueDosage_parser_ = &valueDosage;
    this->valueMeta_parser_ = &valueMeta;
  }

  Task_Input_pskel::
  Task_Input_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Task_Input_impl_ (0),
    type_parser_ (0),
    valueBase64Binary_parser_ (0),
    valueBoolean_parser_ (0),
    valueCanonical_parser_ (0),
    valueCode_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueDecimal_parser_ (0),
    valueId_parser_ (0),
    valueInstant_parser_ (0),
    valueInteger_parser_ (0),
    valueMarkdown_parser_ (0),
    valueOid_parser_ (0),
    valuePositiveInt_parser_ (0),
    valueString_parser_ (0),
    valueTime_parser_ (0),
    valueUnsignedInt_parser_ (0),
    valueUri_parser_ (0),
    valueUrl_parser_ (0),
    valueUuid_parser_ (0),
    valueAddress_parser_ (0),
    valueAge_parser_ (0),
    valueAnnotation_parser_ (0),
    valueAttachment_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueCoding_parser_ (0),
    valueContactPoint_parser_ (0),
    valueCount_parser_ (0),
    valueDistance_parser_ (0),
    valueDuration_parser_ (0),
    valueHumanName_parser_ (0),
    valueIdentifier_parser_ (0),
    valueMoney_parser_ (0),
    valuePeriod_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueReference_parser_ (0),
    valueSampledData_parser_ (0),
    valueSignature_parser_ (0),
    valueTiming_parser_ (0),
    valueContactDetail_parser_ (0),
    valueContributor_parser_ (0),
    valueDataRequirement_parser_ (0),
    valueExpression_parser_ (0),
    valueParameterDefinition_parser_ (0),
    valueRelatedArtifact_parser_ (0),
    valueTriggerDefinition_parser_ (0),
    valueUsageContext_parser_ (0),
    valueDosage_parser_ (0),
    valueMeta_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Task_Input_pskel::
  Task_Input_pskel (Task_Input_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Task_Input_impl_ (impl),
    type_parser_ (0),
    valueBase64Binary_parser_ (0),
    valueBoolean_parser_ (0),
    valueCanonical_parser_ (0),
    valueCode_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueDecimal_parser_ (0),
    valueId_parser_ (0),
    valueInstant_parser_ (0),
    valueInteger_parser_ (0),
    valueMarkdown_parser_ (0),
    valueOid_parser_ (0),
    valuePositiveInt_parser_ (0),
    valueString_parser_ (0),
    valueTime_parser_ (0),
    valueUnsignedInt_parser_ (0),
    valueUri_parser_ (0),
    valueUrl_parser_ (0),
    valueUuid_parser_ (0),
    valueAddress_parser_ (0),
    valueAge_parser_ (0),
    valueAnnotation_parser_ (0),
    valueAttachment_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueCoding_parser_ (0),
    valueContactPoint_parser_ (0),
    valueCount_parser_ (0),
    valueDistance_parser_ (0),
    valueDuration_parser_ (0),
    valueHumanName_parser_ (0),
    valueIdentifier_parser_ (0),
    valueMoney_parser_ (0),
    valuePeriod_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueReference_parser_ (0),
    valueSampledData_parser_ (0),
    valueSignature_parser_ (0),
    valueTiming_parser_ (0),
    valueContactDetail_parser_ (0),
    valueContributor_parser_ (0),
    valueDataRequirement_parser_ (0),
    valueExpression_parser_ (0),
    valueParameterDefinition_parser_ (0),
    valueRelatedArtifact_parser_ (0),
    valueTriggerDefinition_parser_ (0),
    valueUsageContext_parser_ (0),
    valueDosage_parser_ (0),
    valueMeta_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Task_Output_pskel
  //

  void Task_Output_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Task_Output_pskel::
  valueBase64Binary_parser (::fhir::base64Binary_pskel& p)
  {
    this->valueBase64Binary_parser_ = &p;
  }

  void Task_Output_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void Task_Output_pskel::
  valueCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->valueCanonical_parser_ = &p;
  }

  void Task_Output_pskel::
  valueCode_parser (::fhir::code_pskel& p)
  {
    this->valueCode_parser_ = &p;
  }

  void Task_Output_pskel::
  valueDate_parser (::fhir::date_pskel& p)
  {
    this->valueDate_parser_ = &p;
  }

  void Task_Output_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void Task_Output_pskel::
  valueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->valueDecimal_parser_ = &p;
  }

  void Task_Output_pskel::
  valueId_parser (::fhir::id_pskel& p)
  {
    this->valueId_parser_ = &p;
  }

  void Task_Output_pskel::
  valueInstant_parser (::fhir::instant_pskel& p)
  {
    this->valueInstant_parser_ = &p;
  }

  void Task_Output_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void Task_Output_pskel::
  valueMarkdown_parser (::fhir::markdown_pskel& p)
  {
    this->valueMarkdown_parser_ = &p;
  }

  void Task_Output_pskel::
  valueOid_parser (::fhir::oid_pskel& p)
  {
    this->valueOid_parser_ = &p;
  }

  void Task_Output_pskel::
  valuePositiveInt_parser (::fhir::positiveInt_pskel& p)
  {
    this->valuePositiveInt_parser_ = &p;
  }

  void Task_Output_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void Task_Output_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void Task_Output_pskel::
  valueUnsignedInt_parser (::fhir::unsignedInt_pskel& p)
  {
    this->valueUnsignedInt_parser_ = &p;
  }

  void Task_Output_pskel::
  valueUri_parser (::fhir::uri_pskel& p)
  {
    this->valueUri_parser_ = &p;
  }

  void Task_Output_pskel::
  valueUrl_parser (::fhir::url_pskel& p)
  {
    this->valueUrl_parser_ = &p;
  }

  void Task_Output_pskel::
  valueUuid_parser (::fhir::uuid_pskel& p)
  {
    this->valueUuid_parser_ = &p;
  }

  void Task_Output_pskel::
  valueAddress_parser (::fhir::Address_pskel& p)
  {
    this->valueAddress_parser_ = &p;
  }

  void Task_Output_pskel::
  valueAge_parser (::fhir::Age_pskel& p)
  {
    this->valueAge_parser_ = &p;
  }

  void Task_Output_pskel::
  valueAnnotation_parser (::fhir::Annotation_pskel& p)
  {
    this->valueAnnotation_parser_ = &p;
  }

  void Task_Output_pskel::
  valueAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->valueAttachment_parser_ = &p;
  }

  void Task_Output_pskel::
  valueCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCodeableConcept_parser_ = &p;
  }

  void Task_Output_pskel::
  valueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->valueCoding_parser_ = &p;
  }

  void Task_Output_pskel::
  valueContactPoint_parser (::fhir::ContactPoint_pskel& p)
  {
    this->valueContactPoint_parser_ = &p;
  }

  void Task_Output_pskel::
  valueCount_parser (::fhir::Count_pskel& p)
  {
    this->valueCount_parser_ = &p;
  }

  void Task_Output_pskel::
  valueDistance_parser (::fhir::Distance_pskel& p)
  {
    this->valueDistance_parser_ = &p;
  }

  void Task_Output_pskel::
  valueDuration_parser (::fhir::Duration_pskel& p)
  {
    this->valueDuration_parser_ = &p;
  }

  void Task_Output_pskel::
  valueHumanName_parser (::fhir::HumanName_pskel& p)
  {
    this->valueHumanName_parser_ = &p;
  }

  void Task_Output_pskel::
  valueIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->valueIdentifier_parser_ = &p;
  }

  void Task_Output_pskel::
  valueMoney_parser (::fhir::Money_pskel& p)
  {
    this->valueMoney_parser_ = &p;
  }

  void Task_Output_pskel::
  valuePeriod_parser (::fhir::Period_pskel& p)
  {
    this->valuePeriod_parser_ = &p;
  }

  void Task_Output_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Task_Output_pskel::
  valueRange_parser (::fhir::Range_pskel& p)
  {
    this->valueRange_parser_ = &p;
  }

  void Task_Output_pskel::
  valueRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->valueRatio_parser_ = &p;
  }

  void Task_Output_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void Task_Output_pskel::
  valueSampledData_parser (::fhir::SampledData_pskel& p)
  {
    this->valueSampledData_parser_ = &p;
  }

  void Task_Output_pskel::
  valueSignature_parser (::fhir::Signature_pskel& p)
  {
    this->valueSignature_parser_ = &p;
  }

  void Task_Output_pskel::
  valueTiming_parser (::fhir::Timing_pskel& p)
  {
    this->valueTiming_parser_ = &p;
  }

  void Task_Output_pskel::
  valueContactDetail_parser (::fhir::ContactDetail_pskel& p)
  {
    this->valueContactDetail_parser_ = &p;
  }

  void Task_Output_pskel::
  valueContributor_parser (::fhir::Contributor_pskel& p)
  {
    this->valueContributor_parser_ = &p;
  }

  void Task_Output_pskel::
  valueDataRequirement_parser (::fhir::DataRequirement_pskel& p)
  {
    this->valueDataRequirement_parser_ = &p;
  }

  void Task_Output_pskel::
  valueExpression_parser (::fhir::Expression_pskel& p)
  {
    this->valueExpression_parser_ = &p;
  }

  void Task_Output_pskel::
  valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel& p)
  {
    this->valueParameterDefinition_parser_ = &p;
  }

  void Task_Output_pskel::
  valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->valueRelatedArtifact_parser_ = &p;
  }

  void Task_Output_pskel::
  valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel& p)
  {
    this->valueTriggerDefinition_parser_ = &p;
  }

  void Task_Output_pskel::
  valueUsageContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->valueUsageContext_parser_ = &p;
  }

  void Task_Output_pskel::
  valueDosage_parser (::fhir::Dosage_pskel& p)
  {
    this->valueDosage_parser_ = &p;
  }

  void Task_Output_pskel::
  valueMeta_parser (::fhir::Meta_pskel& p)
  {
    this->valueMeta_parser_ = &p;
  }

  void Task_Output_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::base64Binary_pskel& valueBase64Binary,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::canonical_pskel& valueCanonical,
           ::fhir::code_pskel& valueCode,
           ::fhir::date_pskel& valueDate,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::decimal_pskel& valueDecimal,
           ::fhir::id_pskel& valueId,
           ::fhir::instant_pskel& valueInstant,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::markdown_pskel& valueMarkdown,
           ::fhir::oid_pskel& valueOid,
           ::fhir::positiveInt_pskel& valuePositiveInt,
           ::fhir::string_pskel& valueString,
           ::fhir::time_pskel& valueTime,
           ::fhir::unsignedInt_pskel& valueUnsignedInt,
           ::fhir::uri_pskel& valueUri,
           ::fhir::url_pskel& valueUrl,
           ::fhir::uuid_pskel& valueUuid,
           ::fhir::Address_pskel& valueAddress,
           ::fhir::Age_pskel& valueAge,
           ::fhir::Annotation_pskel& valueAnnotation,
           ::fhir::Attachment_pskel& valueAttachment,
           ::fhir::CodeableConcept_pskel& valueCodeableConcept,
           ::fhir::Coding_pskel& valueCoding,
           ::fhir::ContactPoint_pskel& valueContactPoint,
           ::fhir::Count_pskel& valueCount,
           ::fhir::Distance_pskel& valueDistance,
           ::fhir::Duration_pskel& valueDuration,
           ::fhir::HumanName_pskel& valueHumanName,
           ::fhir::Identifier_pskel& valueIdentifier,
           ::fhir::Money_pskel& valueMoney,
           ::fhir::Period_pskel& valuePeriod,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Range_pskel& valueRange,
           ::fhir::Ratio_pskel& valueRatio,
           ::fhir::Reference_pskel& valueReference,
           ::fhir::SampledData_pskel& valueSampledData,
           ::fhir::Signature_pskel& valueSignature,
           ::fhir::Timing_pskel& valueTiming,
           ::fhir::ContactDetail_pskel& valueContactDetail,
           ::fhir::Contributor_pskel& valueContributor,
           ::fhir::DataRequirement_pskel& valueDataRequirement,
           ::fhir::Expression_pskel& valueExpression,
           ::fhir::ParameterDefinition_pskel& valueParameterDefinition,
           ::fhir::RelatedArtifact_pskel& valueRelatedArtifact,
           ::fhir::TriggerDefinition_pskel& valueTriggerDefinition,
           ::fhir::UsageContext_pskel& valueUsageContext,
           ::fhir::Dosage_pskel& valueDosage,
           ::fhir::Meta_pskel& valueMeta)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->valueBase64Binary_parser_ = &valueBase64Binary;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueCanonical_parser_ = &valueCanonical;
    this->valueCode_parser_ = &valueCode;
    this->valueDate_parser_ = &valueDate;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valueDecimal_parser_ = &valueDecimal;
    this->valueId_parser_ = &valueId;
    this->valueInstant_parser_ = &valueInstant;
    this->valueInteger_parser_ = &valueInteger;
    this->valueMarkdown_parser_ = &valueMarkdown;
    this->valueOid_parser_ = &valueOid;
    this->valuePositiveInt_parser_ = &valuePositiveInt;
    this->valueString_parser_ = &valueString;
    this->valueTime_parser_ = &valueTime;
    this->valueUnsignedInt_parser_ = &valueUnsignedInt;
    this->valueUri_parser_ = &valueUri;
    this->valueUrl_parser_ = &valueUrl;
    this->valueUuid_parser_ = &valueUuid;
    this->valueAddress_parser_ = &valueAddress;
    this->valueAge_parser_ = &valueAge;
    this->valueAnnotation_parser_ = &valueAnnotation;
    this->valueAttachment_parser_ = &valueAttachment;
    this->valueCodeableConcept_parser_ = &valueCodeableConcept;
    this->valueCoding_parser_ = &valueCoding;
    this->valueContactPoint_parser_ = &valueContactPoint;
    this->valueCount_parser_ = &valueCount;
    this->valueDistance_parser_ = &valueDistance;
    this->valueDuration_parser_ = &valueDuration;
    this->valueHumanName_parser_ = &valueHumanName;
    this->valueIdentifier_parser_ = &valueIdentifier;
    this->valueMoney_parser_ = &valueMoney;
    this->valuePeriod_parser_ = &valuePeriod;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueRange_parser_ = &valueRange;
    this->valueRatio_parser_ = &valueRatio;
    this->valueReference_parser_ = &valueReference;
    this->valueSampledData_parser_ = &valueSampledData;
    this->valueSignature_parser_ = &valueSignature;
    this->valueTiming_parser_ = &valueTiming;
    this->valueContactDetail_parser_ = &valueContactDetail;
    this->valueContributor_parser_ = &valueContributor;
    this->valueDataRequirement_parser_ = &valueDataRequirement;
    this->valueExpression_parser_ = &valueExpression;
    this->valueParameterDefinition_parser_ = &valueParameterDefinition;
    this->valueRelatedArtifact_parser_ = &valueRelatedArtifact;
    this->valueTriggerDefinition_parser_ = &valueTriggerDefinition;
    this->valueUsageContext_parser_ = &valueUsageContext;
    this->valueDosage_parser_ = &valueDosage;
    this->valueMeta_parser_ = &valueMeta;
  }

  Task_Output_pskel::
  Task_Output_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Task_Output_impl_ (0),
    type_parser_ (0),
    valueBase64Binary_parser_ (0),
    valueBoolean_parser_ (0),
    valueCanonical_parser_ (0),
    valueCode_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueDecimal_parser_ (0),
    valueId_parser_ (0),
    valueInstant_parser_ (0),
    valueInteger_parser_ (0),
    valueMarkdown_parser_ (0),
    valueOid_parser_ (0),
    valuePositiveInt_parser_ (0),
    valueString_parser_ (0),
    valueTime_parser_ (0),
    valueUnsignedInt_parser_ (0),
    valueUri_parser_ (0),
    valueUrl_parser_ (0),
    valueUuid_parser_ (0),
    valueAddress_parser_ (0),
    valueAge_parser_ (0),
    valueAnnotation_parser_ (0),
    valueAttachment_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueCoding_parser_ (0),
    valueContactPoint_parser_ (0),
    valueCount_parser_ (0),
    valueDistance_parser_ (0),
    valueDuration_parser_ (0),
    valueHumanName_parser_ (0),
    valueIdentifier_parser_ (0),
    valueMoney_parser_ (0),
    valuePeriod_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueReference_parser_ (0),
    valueSampledData_parser_ (0),
    valueSignature_parser_ (0),
    valueTiming_parser_ (0),
    valueContactDetail_parser_ (0),
    valueContributor_parser_ (0),
    valueDataRequirement_parser_ (0),
    valueExpression_parser_ (0),
    valueParameterDefinition_parser_ (0),
    valueRelatedArtifact_parser_ (0),
    valueTriggerDefinition_parser_ (0),
    valueUsageContext_parser_ (0),
    valueDosage_parser_ (0),
    valueMeta_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Task_Output_pskel::
  Task_Output_pskel (Task_Output_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Task_Output_impl_ (impl),
    type_parser_ (0),
    valueBase64Binary_parser_ (0),
    valueBoolean_parser_ (0),
    valueCanonical_parser_ (0),
    valueCode_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueDecimal_parser_ (0),
    valueId_parser_ (0),
    valueInstant_parser_ (0),
    valueInteger_parser_ (0),
    valueMarkdown_parser_ (0),
    valueOid_parser_ (0),
    valuePositiveInt_parser_ (0),
    valueString_parser_ (0),
    valueTime_parser_ (0),
    valueUnsignedInt_parser_ (0),
    valueUri_parser_ (0),
    valueUrl_parser_ (0),
    valueUuid_parser_ (0),
    valueAddress_parser_ (0),
    valueAge_parser_ (0),
    valueAnnotation_parser_ (0),
    valueAttachment_parser_ (0),
    valueCodeableConcept_parser_ (0),
    valueCoding_parser_ (0),
    valueContactPoint_parser_ (0),
    valueCount_parser_ (0),
    valueDistance_parser_ (0),
    valueDuration_parser_ (0),
    valueHumanName_parser_ (0),
    valueIdentifier_parser_ (0),
    valueMoney_parser_ (0),
    valuePeriod_parser_ (0),
    valueQuantity_parser_ (0),
    valueRange_parser_ (0),
    valueRatio_parser_ (0),
    valueReference_parser_ (0),
    valueSampledData_parser_ (0),
    valueSignature_parser_ (0),
    valueTiming_parser_ (0),
    valueContactDetail_parser_ (0),
    valueContributor_parser_ (0),
    valueDataRequirement_parser_ (0),
    valueExpression_parser_ (0),
    valueParameterDefinition_parser_ (0),
    valueRelatedArtifact_parser_ (0),
    valueTriggerDefinition_parser_ (0),
    valueUsageContext_parser_ (0),
    valueDosage_parser_ (0),
    valueMeta_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TaskStatus_list_pskel
  //

  TaskStatus_list_pskel::
  TaskStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    TaskStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_TaskStatus_list_pskel_enums_, 12UL);
  }

  TaskStatus_list_pskel::
  TaskStatus_list_pskel (TaskStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    TaskStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_TaskStatus_list_pskel_enums_, 12UL);
  }

  // TaskStatus_pskel
  //

  void TaskStatus_pskel::
  value_parser (::fhir::TaskStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void TaskStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::TaskStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  TaskStatus_pskel::
  TaskStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    TaskStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  TaskStatus_pskel::
  TaskStatus_pskel (TaskStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    TaskStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // TaskIntent_list_pskel
  //

  TaskIntent_list_pskel::
  TaskIntent_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    TaskIntent_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_TaskIntent_list_pskel_enums_, 9UL);
  }

  TaskIntent_list_pskel::
  TaskIntent_list_pskel (TaskIntent_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    TaskIntent_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_TaskIntent_list_pskel_enums_, 9UL);
  }

  // TaskIntent_pskel
  //

  void TaskIntent_pskel::
  value_parser (::fhir::TaskIntent_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void TaskIntent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::TaskIntent_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  TaskIntent_pskel::
  TaskIntent_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    TaskIntent_impl_ (0),
    value_parser_ (0)
  {
  }

  TaskIntent_pskel::
  TaskIntent_pskel (TaskIntent_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    TaskIntent_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Task_pskel
  //

  void Task_pskel::
  identifier ()
  {
    if (this->Task_impl_)
      this->Task_impl_->identifier ();
  }

  void Task_pskel::
  instantiatesCanonical ()
  {
    if (this->Task_impl_)
      this->Task_impl_->instantiatesCanonical ();
  }

  void Task_pskel::
  instantiatesUri ()
  {
    if (this->Task_impl_)
      this->Task_impl_->instantiatesUri ();
  }

  void Task_pskel::
  basedOn ()
  {
    if (this->Task_impl_)
      this->Task_impl_->basedOn ();
  }

  void Task_pskel::
  groupIdentifier ()
  {
    if (this->Task_impl_)
      this->Task_impl_->groupIdentifier ();
  }

  void Task_pskel::
  partOf ()
  {
    if (this->Task_impl_)
      this->Task_impl_->partOf ();
  }

  void Task_pskel::
  status ()
  {
    if (this->Task_impl_)
      this->Task_impl_->status ();
  }

  void Task_pskel::
  statusReason ()
  {
    if (this->Task_impl_)
      this->Task_impl_->statusReason ();
  }

  void Task_pskel::
  businessStatus ()
  {
    if (this->Task_impl_)
      this->Task_impl_->businessStatus ();
  }

  void Task_pskel::
  intent ()
  {
    if (this->Task_impl_)
      this->Task_impl_->intent ();
  }

  void Task_pskel::
  priority ()
  {
    if (this->Task_impl_)
      this->Task_impl_->priority ();
  }

  void Task_pskel::
  code ()
  {
    if (this->Task_impl_)
      this->Task_impl_->code ();
  }

  void Task_pskel::
  description ()
  {
    if (this->Task_impl_)
      this->Task_impl_->description ();
  }

  void Task_pskel::
  focus ()
  {
    if (this->Task_impl_)
      this->Task_impl_->focus ();
  }

  void Task_pskel::
  for_ ()
  {
    if (this->Task_impl_)
      this->Task_impl_->for_ ();
  }

  void Task_pskel::
  encounter ()
  {
    if (this->Task_impl_)
      this->Task_impl_->encounter ();
  }

  void Task_pskel::
  executionPeriod ()
  {
    if (this->Task_impl_)
      this->Task_impl_->executionPeriod ();
  }

  void Task_pskel::
  authoredOn ()
  {
    if (this->Task_impl_)
      this->Task_impl_->authoredOn ();
  }

  void Task_pskel::
  lastModified ()
  {
    if (this->Task_impl_)
      this->Task_impl_->lastModified ();
  }

  void Task_pskel::
  requester ()
  {
    if (this->Task_impl_)
      this->Task_impl_->requester ();
  }

  void Task_pskel::
  performerType ()
  {
    if (this->Task_impl_)
      this->Task_impl_->performerType ();
  }

  void Task_pskel::
  owner ()
  {
    if (this->Task_impl_)
      this->Task_impl_->owner ();
  }

  void Task_pskel::
  location ()
  {
    if (this->Task_impl_)
      this->Task_impl_->location ();
  }

  void Task_pskel::
  reasonCode ()
  {
    if (this->Task_impl_)
      this->Task_impl_->reasonCode ();
  }

  void Task_pskel::
  reasonReference ()
  {
    if (this->Task_impl_)
      this->Task_impl_->reasonReference ();
  }

  void Task_pskel::
  insurance ()
  {
    if (this->Task_impl_)
      this->Task_impl_->insurance ();
  }

  void Task_pskel::
  note ()
  {
    if (this->Task_impl_)
      this->Task_impl_->note ();
  }

  void Task_pskel::
  relevantHistory ()
  {
    if (this->Task_impl_)
      this->Task_impl_->relevantHistory ();
  }

  void Task_pskel::
  restriction ()
  {
    if (this->Task_impl_)
      this->Task_impl_->restriction ();
  }

  void Task_pskel::
  input ()
  {
    if (this->Task_impl_)
      this->Task_impl_->input ();
  }

  void Task_pskel::
  output ()
  {
    if (this->Task_impl_)
      this->Task_impl_->output ();
  }

  void Task_pskel::
  post_Task ()
  {
    if (this->Task_impl_)
      this->Task_impl_->post_Task ();
    else
      post_DomainResource ();
  }

  void Task_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->groupIdentifier_parser_)
      this->groupIdentifier_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->businessStatus_parser_)
      this->businessStatus_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->focus_parser_)
      this->focus_parser_->_reset ();

    if (this->for__parser_)
      this->for__parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->executionPeriod_parser_)
      this->executionPeriod_parser_->_reset ();

    if (this->authoredOn_parser_)
      this->authoredOn_parser_->_reset ();

    if (this->lastModified_parser_)
      this->lastModified_parser_->_reset ();

    if (this->requester_parser_)
      this->requester_parser_->_reset ();

    if (this->performerType_parser_)
      this->performerType_parser_->_reset ();

    if (this->owner_parser_)
      this->owner_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->insurance_parser_)
      this->insurance_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->relevantHistory_parser_)
      this->relevantHistory_parser_->_reset ();

    if (this->restriction_parser_)
      this->restriction_parser_->_reset ();

    if (this->input_parser_)
      this->input_parser_->_reset ();

    if (this->output_parser_)
      this->output_parser_->_reset ();

    this->resetting_ = false;
  }

  // Task_Restriction_pskel
  //

  void Task_Restriction_pskel::
  repetitions ()
  {
    if (this->Task_Restriction_impl_)
      this->Task_Restriction_impl_->repetitions ();
  }

  void Task_Restriction_pskel::
  period ()
  {
    if (this->Task_Restriction_impl_)
      this->Task_Restriction_impl_->period ();
  }

  void Task_Restriction_pskel::
  recipient ()
  {
    if (this->Task_Restriction_impl_)
      this->Task_Restriction_impl_->recipient ();
  }

  void Task_Restriction_pskel::
  post_Task_Restriction ()
  {
    if (this->Task_Restriction_impl_)
      this->Task_Restriction_impl_->post_Task_Restriction ();
    else
      post_BackboneElement ();
  }

  void Task_Restriction_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->repetitions_parser_)
      this->repetitions_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->recipient_parser_)
      this->recipient_parser_->_reset ();

    this->resetting_ = false;
  }

  // Task_Input_pskel
  //

  void Task_Input_pskel::
  type ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->type ();
  }

  void Task_Input_pskel::
  valueBase64Binary ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueBase64Binary ();
  }

  void Task_Input_pskel::
  valueBoolean ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueBoolean ();
  }

  void Task_Input_pskel::
  valueCanonical ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueCanonical ();
  }

  void Task_Input_pskel::
  valueCode ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueCode ();
  }

  void Task_Input_pskel::
  valueDate ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueDate ();
  }

  void Task_Input_pskel::
  valueDateTime ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueDateTime ();
  }

  void Task_Input_pskel::
  valueDecimal ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueDecimal ();
  }

  void Task_Input_pskel::
  valueId ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueId ();
  }

  void Task_Input_pskel::
  valueInstant ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueInstant ();
  }

  void Task_Input_pskel::
  valueInteger ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueInteger ();
  }

  void Task_Input_pskel::
  valueMarkdown ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueMarkdown ();
  }

  void Task_Input_pskel::
  valueOid ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueOid ();
  }

  void Task_Input_pskel::
  valuePositiveInt ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valuePositiveInt ();
  }

  void Task_Input_pskel::
  valueString ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueString ();
  }

  void Task_Input_pskel::
  valueTime ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueTime ();
  }

  void Task_Input_pskel::
  valueUnsignedInt ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueUnsignedInt ();
  }

  void Task_Input_pskel::
  valueUri ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueUri ();
  }

  void Task_Input_pskel::
  valueUrl ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueUrl ();
  }

  void Task_Input_pskel::
  valueUuid ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueUuid ();
  }

  void Task_Input_pskel::
  valueAddress ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueAddress ();
  }

  void Task_Input_pskel::
  valueAge ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueAge ();
  }

  void Task_Input_pskel::
  valueAnnotation ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueAnnotation ();
  }

  void Task_Input_pskel::
  valueAttachment ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueAttachment ();
  }

  void Task_Input_pskel::
  valueCodeableConcept ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueCodeableConcept ();
  }

  void Task_Input_pskel::
  valueCoding ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueCoding ();
  }

  void Task_Input_pskel::
  valueContactPoint ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueContactPoint ();
  }

  void Task_Input_pskel::
  valueCount ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueCount ();
  }

  void Task_Input_pskel::
  valueDistance ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueDistance ();
  }

  void Task_Input_pskel::
  valueDuration ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueDuration ();
  }

  void Task_Input_pskel::
  valueHumanName ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueHumanName ();
  }

  void Task_Input_pskel::
  valueIdentifier ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueIdentifier ();
  }

  void Task_Input_pskel::
  valueMoney ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueMoney ();
  }

  void Task_Input_pskel::
  valuePeriod ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valuePeriod ();
  }

  void Task_Input_pskel::
  valueQuantity ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueQuantity ();
  }

  void Task_Input_pskel::
  valueRange ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueRange ();
  }

  void Task_Input_pskel::
  valueRatio ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueRatio ();
  }

  void Task_Input_pskel::
  valueReference ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueReference ();
  }

  void Task_Input_pskel::
  valueSampledData ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueSampledData ();
  }

  void Task_Input_pskel::
  valueSignature ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueSignature ();
  }

  void Task_Input_pskel::
  valueTiming ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueTiming ();
  }

  void Task_Input_pskel::
  valueContactDetail ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueContactDetail ();
  }

  void Task_Input_pskel::
  valueContributor ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueContributor ();
  }

  void Task_Input_pskel::
  valueDataRequirement ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueDataRequirement ();
  }

  void Task_Input_pskel::
  valueExpression ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueExpression ();
  }

  void Task_Input_pskel::
  valueParameterDefinition ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueParameterDefinition ();
  }

  void Task_Input_pskel::
  valueRelatedArtifact ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueRelatedArtifact ();
  }

  void Task_Input_pskel::
  valueTriggerDefinition ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueTriggerDefinition ();
  }

  void Task_Input_pskel::
  valueUsageContext ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueUsageContext ();
  }

  void Task_Input_pskel::
  valueDosage ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueDosage ();
  }

  void Task_Input_pskel::
  valueMeta ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->valueMeta ();
  }

  void Task_Input_pskel::
  post_Task_Input ()
  {
    if (this->Task_Input_impl_)
      this->Task_Input_impl_->post_Task_Input ();
    else
      post_BackboneElement ();
  }

  void Task_Input_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->valueBase64Binary_parser_)
      this->valueBase64Binary_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueCanonical_parser_)
      this->valueCanonical_parser_->_reset ();

    if (this->valueCode_parser_)
      this->valueCode_parser_->_reset ();

    if (this->valueDate_parser_)
      this->valueDate_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valueDecimal_parser_)
      this->valueDecimal_parser_->_reset ();

    if (this->valueId_parser_)
      this->valueId_parser_->_reset ();

    if (this->valueInstant_parser_)
      this->valueInstant_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueMarkdown_parser_)
      this->valueMarkdown_parser_->_reset ();

    if (this->valueOid_parser_)
      this->valueOid_parser_->_reset ();

    if (this->valuePositiveInt_parser_)
      this->valuePositiveInt_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueUnsignedInt_parser_)
      this->valueUnsignedInt_parser_->_reset ();

    if (this->valueUri_parser_)
      this->valueUri_parser_->_reset ();

    if (this->valueUrl_parser_)
      this->valueUrl_parser_->_reset ();

    if (this->valueUuid_parser_)
      this->valueUuid_parser_->_reset ();

    if (this->valueAddress_parser_)
      this->valueAddress_parser_->_reset ();

    if (this->valueAge_parser_)
      this->valueAge_parser_->_reset ();

    if (this->valueAnnotation_parser_)
      this->valueAnnotation_parser_->_reset ();

    if (this->valueAttachment_parser_)
      this->valueAttachment_parser_->_reset ();

    if (this->valueCodeableConcept_parser_)
      this->valueCodeableConcept_parser_->_reset ();

    if (this->valueCoding_parser_)
      this->valueCoding_parser_->_reset ();

    if (this->valueContactPoint_parser_)
      this->valueContactPoint_parser_->_reset ();

    if (this->valueCount_parser_)
      this->valueCount_parser_->_reset ();

    if (this->valueDistance_parser_)
      this->valueDistance_parser_->_reset ();

    if (this->valueDuration_parser_)
      this->valueDuration_parser_->_reset ();

    if (this->valueHumanName_parser_)
      this->valueHumanName_parser_->_reset ();

    if (this->valueIdentifier_parser_)
      this->valueIdentifier_parser_->_reset ();

    if (this->valueMoney_parser_)
      this->valueMoney_parser_->_reset ();

    if (this->valuePeriod_parser_)
      this->valuePeriod_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueRange_parser_)
      this->valueRange_parser_->_reset ();

    if (this->valueRatio_parser_)
      this->valueRatio_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    if (this->valueSampledData_parser_)
      this->valueSampledData_parser_->_reset ();

    if (this->valueSignature_parser_)
      this->valueSignature_parser_->_reset ();

    if (this->valueTiming_parser_)
      this->valueTiming_parser_->_reset ();

    if (this->valueContactDetail_parser_)
      this->valueContactDetail_parser_->_reset ();

    if (this->valueContributor_parser_)
      this->valueContributor_parser_->_reset ();

    if (this->valueDataRequirement_parser_)
      this->valueDataRequirement_parser_->_reset ();

    if (this->valueExpression_parser_)
      this->valueExpression_parser_->_reset ();

    if (this->valueParameterDefinition_parser_)
      this->valueParameterDefinition_parser_->_reset ();

    if (this->valueRelatedArtifact_parser_)
      this->valueRelatedArtifact_parser_->_reset ();

    if (this->valueTriggerDefinition_parser_)
      this->valueTriggerDefinition_parser_->_reset ();

    if (this->valueUsageContext_parser_)
      this->valueUsageContext_parser_->_reset ();

    if (this->valueDosage_parser_)
      this->valueDosage_parser_->_reset ();

    if (this->valueMeta_parser_)
      this->valueMeta_parser_->_reset ();

    this->resetting_ = false;
  }

  // Task_Output_pskel
  //

  void Task_Output_pskel::
  type ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->type ();
  }

  void Task_Output_pskel::
  valueBase64Binary ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueBase64Binary ();
  }

  void Task_Output_pskel::
  valueBoolean ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueBoolean ();
  }

  void Task_Output_pskel::
  valueCanonical ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueCanonical ();
  }

  void Task_Output_pskel::
  valueCode ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueCode ();
  }

  void Task_Output_pskel::
  valueDate ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueDate ();
  }

  void Task_Output_pskel::
  valueDateTime ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueDateTime ();
  }

  void Task_Output_pskel::
  valueDecimal ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueDecimal ();
  }

  void Task_Output_pskel::
  valueId ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueId ();
  }

  void Task_Output_pskel::
  valueInstant ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueInstant ();
  }

  void Task_Output_pskel::
  valueInteger ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueInteger ();
  }

  void Task_Output_pskel::
  valueMarkdown ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueMarkdown ();
  }

  void Task_Output_pskel::
  valueOid ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueOid ();
  }

  void Task_Output_pskel::
  valuePositiveInt ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valuePositiveInt ();
  }

  void Task_Output_pskel::
  valueString ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueString ();
  }

  void Task_Output_pskel::
  valueTime ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueTime ();
  }

  void Task_Output_pskel::
  valueUnsignedInt ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueUnsignedInt ();
  }

  void Task_Output_pskel::
  valueUri ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueUri ();
  }

  void Task_Output_pskel::
  valueUrl ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueUrl ();
  }

  void Task_Output_pskel::
  valueUuid ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueUuid ();
  }

  void Task_Output_pskel::
  valueAddress ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueAddress ();
  }

  void Task_Output_pskel::
  valueAge ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueAge ();
  }

  void Task_Output_pskel::
  valueAnnotation ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueAnnotation ();
  }

  void Task_Output_pskel::
  valueAttachment ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueAttachment ();
  }

  void Task_Output_pskel::
  valueCodeableConcept ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueCodeableConcept ();
  }

  void Task_Output_pskel::
  valueCoding ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueCoding ();
  }

  void Task_Output_pskel::
  valueContactPoint ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueContactPoint ();
  }

  void Task_Output_pskel::
  valueCount ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueCount ();
  }

  void Task_Output_pskel::
  valueDistance ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueDistance ();
  }

  void Task_Output_pskel::
  valueDuration ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueDuration ();
  }

  void Task_Output_pskel::
  valueHumanName ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueHumanName ();
  }

  void Task_Output_pskel::
  valueIdentifier ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueIdentifier ();
  }

  void Task_Output_pskel::
  valueMoney ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueMoney ();
  }

  void Task_Output_pskel::
  valuePeriod ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valuePeriod ();
  }

  void Task_Output_pskel::
  valueQuantity ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueQuantity ();
  }

  void Task_Output_pskel::
  valueRange ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueRange ();
  }

  void Task_Output_pskel::
  valueRatio ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueRatio ();
  }

  void Task_Output_pskel::
  valueReference ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueReference ();
  }

  void Task_Output_pskel::
  valueSampledData ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueSampledData ();
  }

  void Task_Output_pskel::
  valueSignature ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueSignature ();
  }

  void Task_Output_pskel::
  valueTiming ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueTiming ();
  }

  void Task_Output_pskel::
  valueContactDetail ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueContactDetail ();
  }

  void Task_Output_pskel::
  valueContributor ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueContributor ();
  }

  void Task_Output_pskel::
  valueDataRequirement ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueDataRequirement ();
  }

  void Task_Output_pskel::
  valueExpression ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueExpression ();
  }

  void Task_Output_pskel::
  valueParameterDefinition ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueParameterDefinition ();
  }

  void Task_Output_pskel::
  valueRelatedArtifact ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueRelatedArtifact ();
  }

  void Task_Output_pskel::
  valueTriggerDefinition ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueTriggerDefinition ();
  }

  void Task_Output_pskel::
  valueUsageContext ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueUsageContext ();
  }

  void Task_Output_pskel::
  valueDosage ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueDosage ();
  }

  void Task_Output_pskel::
  valueMeta ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->valueMeta ();
  }

  void Task_Output_pskel::
  post_Task_Output ()
  {
    if (this->Task_Output_impl_)
      this->Task_Output_impl_->post_Task_Output ();
    else
      post_BackboneElement ();
  }

  void Task_Output_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->valueBase64Binary_parser_)
      this->valueBase64Binary_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueCanonical_parser_)
      this->valueCanonical_parser_->_reset ();

    if (this->valueCode_parser_)
      this->valueCode_parser_->_reset ();

    if (this->valueDate_parser_)
      this->valueDate_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valueDecimal_parser_)
      this->valueDecimal_parser_->_reset ();

    if (this->valueId_parser_)
      this->valueId_parser_->_reset ();

    if (this->valueInstant_parser_)
      this->valueInstant_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueMarkdown_parser_)
      this->valueMarkdown_parser_->_reset ();

    if (this->valueOid_parser_)
      this->valueOid_parser_->_reset ();

    if (this->valuePositiveInt_parser_)
      this->valuePositiveInt_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueUnsignedInt_parser_)
      this->valueUnsignedInt_parser_->_reset ();

    if (this->valueUri_parser_)
      this->valueUri_parser_->_reset ();

    if (this->valueUrl_parser_)
      this->valueUrl_parser_->_reset ();

    if (this->valueUuid_parser_)
      this->valueUuid_parser_->_reset ();

    if (this->valueAddress_parser_)
      this->valueAddress_parser_->_reset ();

    if (this->valueAge_parser_)
      this->valueAge_parser_->_reset ();

    if (this->valueAnnotation_parser_)
      this->valueAnnotation_parser_->_reset ();

    if (this->valueAttachment_parser_)
      this->valueAttachment_parser_->_reset ();

    if (this->valueCodeableConcept_parser_)
      this->valueCodeableConcept_parser_->_reset ();

    if (this->valueCoding_parser_)
      this->valueCoding_parser_->_reset ();

    if (this->valueContactPoint_parser_)
      this->valueContactPoint_parser_->_reset ();

    if (this->valueCount_parser_)
      this->valueCount_parser_->_reset ();

    if (this->valueDistance_parser_)
      this->valueDistance_parser_->_reset ();

    if (this->valueDuration_parser_)
      this->valueDuration_parser_->_reset ();

    if (this->valueHumanName_parser_)
      this->valueHumanName_parser_->_reset ();

    if (this->valueIdentifier_parser_)
      this->valueIdentifier_parser_->_reset ();

    if (this->valueMoney_parser_)
      this->valueMoney_parser_->_reset ();

    if (this->valuePeriod_parser_)
      this->valuePeriod_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueRange_parser_)
      this->valueRange_parser_->_reset ();

    if (this->valueRatio_parser_)
      this->valueRatio_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    if (this->valueSampledData_parser_)
      this->valueSampledData_parser_->_reset ();

    if (this->valueSignature_parser_)
      this->valueSignature_parser_->_reset ();

    if (this->valueTiming_parser_)
      this->valueTiming_parser_->_reset ();

    if (this->valueContactDetail_parser_)
      this->valueContactDetail_parser_->_reset ();

    if (this->valueContributor_parser_)
      this->valueContributor_parser_->_reset ();

    if (this->valueDataRequirement_parser_)
      this->valueDataRequirement_parser_->_reset ();

    if (this->valueExpression_parser_)
      this->valueExpression_parser_->_reset ();

    if (this->valueParameterDefinition_parser_)
      this->valueParameterDefinition_parser_->_reset ();

    if (this->valueRelatedArtifact_parser_)
      this->valueRelatedArtifact_parser_->_reset ();

    if (this->valueTriggerDefinition_parser_)
      this->valueTriggerDefinition_parser_->_reset ();

    if (this->valueUsageContext_parser_)
      this->valueUsageContext_parser_->_reset ();

    if (this->valueDosage_parser_)
      this->valueDosage_parser_->_reset ();

    if (this->valueMeta_parser_)
      this->valueMeta_parser_->_reset ();

    this->resetting_ = false;
  }

  // TaskStatus_list_pskel
  //

  void TaskStatus_list_pskel::
  post_TaskStatus_list ()
  {
    if (this->TaskStatus_list_impl_)
      this->TaskStatus_list_impl_->post_TaskStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const TaskStatus_list_pskel::_xsde_TaskStatus_list_pskel_enums_[12UL] = 
  {
    "accepted",
    "cancelled",
    "completed",
    "draft",
    "entered-in-error",
    "failed",
    "in-progress",
    "on-hold",
    "ready",
    "received",
    "rejected",
    "requested"
  };

  // TaskStatus_pskel
  //

  void TaskStatus_pskel::
  value ()
  {
    if (this->TaskStatus_impl_)
      this->TaskStatus_impl_->value ();
  }

  void TaskStatus_pskel::
  post_TaskStatus ()
  {
    if (this->TaskStatus_impl_)
      this->TaskStatus_impl_->post_TaskStatus ();
    else
      post_Element ();
  }

  void TaskStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // TaskIntent_list_pskel
  //

  void TaskIntent_list_pskel::
  post_TaskIntent_list ()
  {
    if (this->TaskIntent_list_impl_)
      this->TaskIntent_list_impl_->post_TaskIntent_list ();
    else
      post_code_primitive ();
  }

  const char* const TaskIntent_list_pskel::_xsde_TaskIntent_list_pskel_enums_[9UL] = 
  {
    "filler-order",
    "instance-order",
    "option",
    "order",
    "original-order",
    "plan",
    "proposal",
    "reflex-order",
    "unknown"
  };

  // TaskIntent_pskel
  //

  void TaskIntent_pskel::
  value ()
  {
    if (this->TaskIntent_impl_)
      this->TaskIntent_impl_->value ();
  }

  void TaskIntent_pskel::
  post_TaskIntent ()
  {
    if (this->TaskIntent_impl_)
      this->TaskIntent_impl_->post_TaskIntent ();
    else
      post_Element ();
  }

  void TaskIntent_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Task_pskel.
  //
  bool Task_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "groupIdentifier" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Task_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Task_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Task_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Task_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Task_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "groupIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupIdentifier_parser_)
            {
              this->groupIdentifier_parser_->pre ();
              ctx.nested_parser (this->groupIdentifier_parser_);
            }
          }
          else
          {
            if (this->groupIdentifier_parser_ != 0)
            {
              this->groupIdentifier_parser_->post_Identifier ();
              this->groupIdentifier ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_TaskStatus ();
              this->status ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "businessStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->businessStatus_parser_)
            {
              this->businessStatus_parser_->pre ();
              ctx.nested_parser (this->businessStatus_parser_);
            }
          }
          else
          {
            if (this->businessStatus_parser_ != 0)
            {
              this->businessStatus_parser_->post_CodeableConcept ();
              this->businessStatus ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_TaskIntent ();
              this->intent ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "focus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focus_parser_)
            {
              this->focus_parser_->pre ();
              ctx.nested_parser (this->focus_parser_);
            }
          }
          else
          {
            if (this->focus_parser_ != 0)
            {
              this->focus_parser_->post_Reference ();
              this->focus ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "for" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->for__parser_)
            {
              this->for__parser_->pre ();
              ctx.nested_parser (this->for__parser_);
            }
          }
          else
          {
            if (this->for__parser_ != 0)
            {
              this->for__parser_->post_Reference ();
              this->for_ ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "executionPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->executionPeriod_parser_)
            {
              this->executionPeriod_parser_->pre ();
              ctx.nested_parser (this->executionPeriod_parser_);
            }
          }
          else
          {
            if (this->executionPeriod_parser_ != 0)
            {
              this->executionPeriod_parser_->post_Period ();
              this->executionPeriod ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "authoredOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authoredOn_parser_)
            {
              this->authoredOn_parser_->pre ();
              ctx.nested_parser (this->authoredOn_parser_);
            }
          }
          else
          {
            if (this->authoredOn_parser_ != 0)
            {
              this->authoredOn_parser_->post_dateTime ();
              this->authoredOn ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "lastModified" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastModified_parser_)
            {
              this->lastModified_parser_->pre ();
              ctx.nested_parser (this->lastModified_parser_);
            }
          }
          else
          {
            if (this->lastModified_parser_ != 0)
            {
              this->lastModified_parser_->post_dateTime ();
              this->lastModified ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "requester" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requester_parser_)
            {
              this->requester_parser_->pre ();
              ctx.nested_parser (this->requester_parser_);
            }
          }
          else
          {
            if (this->requester_parser_ != 0)
            {
              this->requester_parser_->post_Reference ();
              this->requester ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "performerType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performerType_parser_)
            {
              this->performerType_parser_->pre ();
              ctx.nested_parser (this->performerType_parser_);
            }
          }
          else
          {
            if (this->performerType_parser_ != 0)
            {
              this->performerType_parser_->post_CodeableConcept ();
              this->performerType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "owner" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->owner_parser_)
            {
              this->owner_parser_->pre ();
              ctx.nested_parser (this->owner_parser_);
            }
          }
          else
          {
            if (this->owner_parser_ != 0)
            {
              this->owner_parser_->post_Reference ();
              this->owner ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "insurance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurance_parser_)
            {
              this->insurance_parser_->pre ();
              ctx.nested_parser (this->insurance_parser_);
            }
          }
          else
          {
            if (this->insurance_parser_ != 0)
            {
              this->insurance_parser_->post_Reference ();
              this->insurance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "relevantHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relevantHistory_parser_)
            {
              this->relevantHistory_parser_->pre ();
              ctx.nested_parser (this->relevantHistory_parser_);
            }
          }
          else
          {
            if (this->relevantHistory_parser_ != 0)
            {
              this->relevantHistory_parser_->post_Reference ();
              this->relevantHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "restriction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->restriction_parser_)
            {
              this->restriction_parser_->pre ();
              ctx.nested_parser (this->restriction_parser_);
            }
          }
          else
          {
            if (this->restriction_parser_ != 0)
            {
              this->restriction_parser_->post_Task_Restriction ();
              this->restriction ();
            }

            count = 0;
            state = 29UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "input" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->input_parser_)
            {
              this->input_parser_->pre ();
              ctx.nested_parser (this->input_parser_);
            }
          }
          else
          {
            if (this->input_parser_ != 0)
            {
              this->input_parser_->post_Task_Input ();
              this->input ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "output" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->output_parser_)
            {
              this->output_parser_->pre ();
              ctx.nested_parser (this->output_parser_);
            }
          }
          else
          {
            if (this->output_parser_ != 0)
            {
              this->output_parser_->post_Task_Output ();
              this->output ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Task_Restriction_pskel.
  //
  bool Task_Restriction_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "repetitions" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "recipient" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Task_Restriction_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Task_Restriction_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Task_Restriction_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Task_Restriction_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Task_Restriction_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "repetitions" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->repetitions_parser_)
            {
              this->repetitions_parser_->pre ();
              ctx.nested_parser (this->repetitions_parser_);
            }
          }
          else
          {
            if (this->repetitions_parser_ != 0)
            {
              this->repetitions_parser_->post_positiveInt ();
              this->repetitions ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "recipient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recipient_parser_)
            {
              this->recipient_parser_->pre ();
              ctx.nested_parser (this->recipient_parser_);
            }
          }
          else
          {
            if (this->recipient_parser_ != 0)
            {
              this->recipient_parser_->post_Reference ();
              this->recipient ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Task_Input_pskel.
  //
  bool Task_Input_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Task_Input_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Task_Input_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Task_Input_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Task_Input_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Task_Input_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueBase64Binary" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBase64Binary_parser_)
            {
              this->valueBase64Binary_parser_->pre ();
              ctx.nested_parser (this->valueBase64Binary_parser_);
            }
          }
          else
          {
            if (this->valueBase64Binary_parser_ != 0)
            {
              this->valueBase64Binary_parser_->post_base64Binary ();
              this->valueBase64Binary ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCanonical_parser_)
            {
              this->valueCanonical_parser_->pre ();
              ctx.nested_parser (this->valueCanonical_parser_);
            }
          }
          else
          {
            if (this->valueCanonical_parser_ != 0)
            {
              this->valueCanonical_parser_->post_canonical ();
              this->valueCanonical ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCode_parser_)
            {
              this->valueCode_parser_->pre ();
              ctx.nested_parser (this->valueCode_parser_);
            }
          }
          else
          {
            if (this->valueCode_parser_ != 0)
            {
              this->valueCode_parser_->post_code ();
              this->valueCode ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDate_parser_)
            {
              this->valueDate_parser_->pre ();
              ctx.nested_parser (this->valueDate_parser_);
            }
          }
          else
          {
            if (this->valueDate_parser_ != 0)
            {
              this->valueDate_parser_->post_date ();
              this->valueDate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDecimal_parser_)
            {
              this->valueDecimal_parser_->pre ();
              ctx.nested_parser (this->valueDecimal_parser_);
            }
          }
          else
          {
            if (this->valueDecimal_parser_ != 0)
            {
              this->valueDecimal_parser_->post_decimal ();
              this->valueDecimal ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "valueId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueId_parser_)
            {
              this->valueId_parser_->pre ();
              ctx.nested_parser (this->valueId_parser_);
            }
          }
          else
          {
            if (this->valueId_parser_ != 0)
            {
              this->valueId_parser_->post_id ();
              this->valueId ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "valueInstant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInstant_parser_)
            {
              this->valueInstant_parser_->pre ();
              ctx.nested_parser (this->valueInstant_parser_);
            }
          }
          else
          {
            if (this->valueInstant_parser_ != 0)
            {
              this->valueInstant_parser_->post_instant ();
              this->valueInstant ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "valueMarkdown" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueMarkdown_parser_)
            {
              this->valueMarkdown_parser_->pre ();
              ctx.nested_parser (this->valueMarkdown_parser_);
            }
          }
          else
          {
            if (this->valueMarkdown_parser_ != 0)
            {
              this->valueMarkdown_parser_->post_markdown ();
              this->valueMarkdown ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "valueOid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueOid_parser_)
            {
              this->valueOid_parser_->pre ();
              ctx.nested_parser (this->valueOid_parser_);
            }
          }
          else
          {
            if (this->valueOid_parser_ != 0)
            {
              this->valueOid_parser_->post_oid ();
              this->valueOid ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "valuePositiveInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valuePositiveInt_parser_)
            {
              this->valuePositiveInt_parser_->pre ();
              ctx.nested_parser (this->valuePositiveInt_parser_);
            }
          }
          else
          {
            if (this->valuePositiveInt_parser_ != 0)
            {
              this->valuePositiveInt_parser_->post_positiveInt ();
              this->valuePositiveInt ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "valueUnsignedInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUnsignedInt_parser_)
            {
              this->valueUnsignedInt_parser_->pre ();
              ctx.nested_parser (this->valueUnsignedInt_parser_);
            }
          }
          else
          {
            if (this->valueUnsignedInt_parser_ != 0)
            {
              this->valueUnsignedInt_parser_->post_unsignedInt ();
              this->valueUnsignedInt ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "valueUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUri_parser_)
            {
              this->valueUri_parser_->pre ();
              ctx.nested_parser (this->valueUri_parser_);
            }
          }
          else
          {
            if (this->valueUri_parser_ != 0)
            {
              this->valueUri_parser_->post_uri ();
              this->valueUri ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "valueUrl" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUrl_parser_)
            {
              this->valueUrl_parser_->pre ();
              ctx.nested_parser (this->valueUrl_parser_);
            }
          }
          else
          {
            if (this->valueUrl_parser_ != 0)
            {
              this->valueUrl_parser_->post_url ();
              this->valueUrl ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "valueUuid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUuid_parser_)
            {
              this->valueUuid_parser_->pre ();
              ctx.nested_parser (this->valueUuid_parser_);
            }
          }
          else
          {
            if (this->valueUuid_parser_ != 0)
            {
              this->valueUuid_parser_->post_uuid ();
              this->valueUuid ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "valueAddress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAddress_parser_)
            {
              this->valueAddress_parser_->pre ();
              ctx.nested_parser (this->valueAddress_parser_);
            }
          }
          else
          {
            if (this->valueAddress_parser_ != 0)
            {
              this->valueAddress_parser_->post_Address ();
              this->valueAddress ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "valueAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAge_parser_)
            {
              this->valueAge_parser_->pre ();
              ctx.nested_parser (this->valueAge_parser_);
            }
          }
          else
          {
            if (this->valueAge_parser_ != 0)
            {
              this->valueAge_parser_->post_Age ();
              this->valueAge ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "valueAnnotation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAnnotation_parser_)
            {
              this->valueAnnotation_parser_->pre ();
              ctx.nested_parser (this->valueAnnotation_parser_);
            }
          }
          else
          {
            if (this->valueAnnotation_parser_ != 0)
            {
              this->valueAnnotation_parser_->post_Annotation ();
              this->valueAnnotation ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "valueAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAttachment_parser_)
            {
              this->valueAttachment_parser_->pre ();
              ctx.nested_parser (this->valueAttachment_parser_);
            }
          }
          else
          {
            if (this->valueAttachment_parser_ != 0)
            {
              this->valueAttachment_parser_->post_Attachment ();
              this->valueAttachment ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "valueCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCodeableConcept_parser_)
            {
              this->valueCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->valueCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->valueCodeableConcept_parser_ != 0)
            {
              this->valueCodeableConcept_parser_->post_CodeableConcept ();
              this->valueCodeableConcept ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "valueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCoding_parser_)
            {
              this->valueCoding_parser_->pre ();
              ctx.nested_parser (this->valueCoding_parser_);
            }
          }
          else
          {
            if (this->valueCoding_parser_ != 0)
            {
              this->valueCoding_parser_->post_Coding ();
              this->valueCoding ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "valueContactPoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueContactPoint_parser_)
            {
              this->valueContactPoint_parser_->pre ();
              ctx.nested_parser (this->valueContactPoint_parser_);
            }
          }
          else
          {
            if (this->valueContactPoint_parser_ != 0)
            {
              this->valueContactPoint_parser_->post_ContactPoint ();
              this->valueContactPoint ();
            }

            count = 0;
            state = 27UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "valueCount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCount_parser_)
            {
              this->valueCount_parser_->pre ();
              ctx.nested_parser (this->valueCount_parser_);
            }
          }
          else
          {
            if (this->valueCount_parser_ != 0)
            {
              this->valueCount_parser_->post_Count ();
              this->valueCount ();
            }

            count = 0;
            state = 28UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "valueDistance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDistance_parser_)
            {
              this->valueDistance_parser_->pre ();
              ctx.nested_parser (this->valueDistance_parser_);
            }
          }
          else
          {
            if (this->valueDistance_parser_ != 0)
            {
              this->valueDistance_parser_->post_Distance ();
              this->valueDistance ();
            }

            count = 0;
            state = 29UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "valueDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDuration_parser_)
            {
              this->valueDuration_parser_->pre ();
              ctx.nested_parser (this->valueDuration_parser_);
            }
          }
          else
          {
            if (this->valueDuration_parser_ != 0)
            {
              this->valueDuration_parser_->post_Duration ();
              this->valueDuration ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "valueHumanName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueHumanName_parser_)
            {
              this->valueHumanName_parser_->pre ();
              ctx.nested_parser (this->valueHumanName_parser_);
            }
          }
          else
          {
            if (this->valueHumanName_parser_ != 0)
            {
              this->valueHumanName_parser_->post_HumanName ();
              this->valueHumanName ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "valueIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueIdentifier_parser_)
            {
              this->valueIdentifier_parser_->pre ();
              ctx.nested_parser (this->valueIdentifier_parser_);
            }
          }
          else
          {
            if (this->valueIdentifier_parser_ != 0)
            {
              this->valueIdentifier_parser_->post_Identifier ();
              this->valueIdentifier ();
            }

            count = 0;
            state = 32UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "valueMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueMoney_parser_)
            {
              this->valueMoney_parser_->pre ();
              ctx.nested_parser (this->valueMoney_parser_);
            }
          }
          else
          {
            if (this->valueMoney_parser_ != 0)
            {
              this->valueMoney_parser_->post_Money ();
              this->valueMoney ();
            }

            count = 0;
            state = 33UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "valuePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valuePeriod_parser_)
            {
              this->valuePeriod_parser_->pre ();
              ctx.nested_parser (this->valuePeriod_parser_);
            }
          }
          else
          {
            if (this->valuePeriod_parser_ != 0)
            {
              this->valuePeriod_parser_->post_Period ();
              this->valuePeriod ();
            }

            count = 0;
            state = 34UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 34UL;
          // Fall through.
        }
      }
      case 34UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 35UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 35UL;
          // Fall through.
        }
      }
      case 35UL:
      {
        if (n == "valueRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRange_parser_)
            {
              this->valueRange_parser_->pre ();
              ctx.nested_parser (this->valueRange_parser_);
            }
          }
          else
          {
            if (this->valueRange_parser_ != 0)
            {
              this->valueRange_parser_->post_Range ();
              this->valueRange ();
            }

            count = 0;
            state = 36UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 36UL;
          // Fall through.
        }
      }
      case 36UL:
      {
        if (n == "valueRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRatio_parser_)
            {
              this->valueRatio_parser_->pre ();
              ctx.nested_parser (this->valueRatio_parser_);
            }
          }
          else
          {
            if (this->valueRatio_parser_ != 0)
            {
              this->valueRatio_parser_->post_Ratio ();
              this->valueRatio ();
            }

            count = 0;
            state = 37UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 37UL;
          // Fall through.
        }
      }
      case 37UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = 38UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 38UL;
          // Fall through.
        }
      }
      case 38UL:
      {
        if (n == "valueSampledData" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSampledData_parser_)
            {
              this->valueSampledData_parser_->pre ();
              ctx.nested_parser (this->valueSampledData_parser_);
            }
          }
          else
          {
            if (this->valueSampledData_parser_ != 0)
            {
              this->valueSampledData_parser_->post_SampledData ();
              this->valueSampledData ();
            }

            count = 0;
            state = 39UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 39UL;
          // Fall through.
        }
      }
      case 39UL:
      {
        if (n == "valueSignature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSignature_parser_)
            {
              this->valueSignature_parser_->pre ();
              ctx.nested_parser (this->valueSignature_parser_);
            }
          }
          else
          {
            if (this->valueSignature_parser_ != 0)
            {
              this->valueSignature_parser_->post_Signature ();
              this->valueSignature ();
            }

            count = 0;
            state = 40UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 40UL;
          // Fall through.
        }
      }
      case 40UL:
      {
        if (n == "valueTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTiming_parser_)
            {
              this->valueTiming_parser_->pre ();
              ctx.nested_parser (this->valueTiming_parser_);
            }
          }
          else
          {
            if (this->valueTiming_parser_ != 0)
            {
              this->valueTiming_parser_->post_Timing ();
              this->valueTiming ();
            }

            count = 0;
            state = 41UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 41UL;
          // Fall through.
        }
      }
      case 41UL:
      {
        if (n == "valueContactDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueContactDetail_parser_)
            {
              this->valueContactDetail_parser_->pre ();
              ctx.nested_parser (this->valueContactDetail_parser_);
            }
          }
          else
          {
            if (this->valueContactDetail_parser_ != 0)
            {
              this->valueContactDetail_parser_->post_ContactDetail ();
              this->valueContactDetail ();
            }

            count = 0;
            state = 42UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 42UL;
          // Fall through.
        }
      }
      case 42UL:
      {
        if (n == "valueContributor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueContributor_parser_)
            {
              this->valueContributor_parser_->pre ();
              ctx.nested_parser (this->valueContributor_parser_);
            }
          }
          else
          {
            if (this->valueContributor_parser_ != 0)
            {
              this->valueContributor_parser_->post_Contributor ();
              this->valueContributor ();
            }

            count = 0;
            state = 43UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 43UL;
          // Fall through.
        }
      }
      case 43UL:
      {
        if (n == "valueDataRequirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDataRequirement_parser_)
            {
              this->valueDataRequirement_parser_->pre ();
              ctx.nested_parser (this->valueDataRequirement_parser_);
            }
          }
          else
          {
            if (this->valueDataRequirement_parser_ != 0)
            {
              this->valueDataRequirement_parser_->post_DataRequirement ();
              this->valueDataRequirement ();
            }

            count = 0;
            state = 44UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 44UL;
          // Fall through.
        }
      }
      case 44UL:
      {
        if (n == "valueExpression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueExpression_parser_)
            {
              this->valueExpression_parser_->pre ();
              ctx.nested_parser (this->valueExpression_parser_);
            }
          }
          else
          {
            if (this->valueExpression_parser_ != 0)
            {
              this->valueExpression_parser_->post_Expression ();
              this->valueExpression ();
            }

            count = 0;
            state = 45UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 45UL;
          // Fall through.
        }
      }
      case 45UL:
      {
        if (n == "valueParameterDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueParameterDefinition_parser_)
            {
              this->valueParameterDefinition_parser_->pre ();
              ctx.nested_parser (this->valueParameterDefinition_parser_);
            }
          }
          else
          {
            if (this->valueParameterDefinition_parser_ != 0)
            {
              this->valueParameterDefinition_parser_->post_ParameterDefinition ();
              this->valueParameterDefinition ();
            }

            count = 0;
            state = 46UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 46UL;
          // Fall through.
        }
      }
      case 46UL:
      {
        if (n == "valueRelatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRelatedArtifact_parser_)
            {
              this->valueRelatedArtifact_parser_->pre ();
              ctx.nested_parser (this->valueRelatedArtifact_parser_);
            }
          }
          else
          {
            if (this->valueRelatedArtifact_parser_ != 0)
            {
              this->valueRelatedArtifact_parser_->post_RelatedArtifact ();
              this->valueRelatedArtifact ();
            }

            count = 0;
            state = 47UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 47UL;
          // Fall through.
        }
      }
      case 47UL:
      {
        if (n == "valueTriggerDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTriggerDefinition_parser_)
            {
              this->valueTriggerDefinition_parser_->pre ();
              ctx.nested_parser (this->valueTriggerDefinition_parser_);
            }
          }
          else
          {
            if (this->valueTriggerDefinition_parser_ != 0)
            {
              this->valueTriggerDefinition_parser_->post_TriggerDefinition ();
              this->valueTriggerDefinition ();
            }

            count = 0;
            state = 48UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 48UL;
          // Fall through.
        }
      }
      case 48UL:
      {
        if (n == "valueUsageContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUsageContext_parser_)
            {
              this->valueUsageContext_parser_->pre ();
              ctx.nested_parser (this->valueUsageContext_parser_);
            }
          }
          else
          {
            if (this->valueUsageContext_parser_ != 0)
            {
              this->valueUsageContext_parser_->post_UsageContext ();
              this->valueUsageContext ();
            }

            count = 0;
            state = 49UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 49UL;
          // Fall through.
        }
      }
      case 49UL:
      {
        if (n == "valueDosage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDosage_parser_)
            {
              this->valueDosage_parser_->pre ();
              ctx.nested_parser (this->valueDosage_parser_);
            }
          }
          else
          {
            if (this->valueDosage_parser_ != 0)
            {
              this->valueDosage_parser_->post_Dosage ();
              this->valueDosage ();
            }

            count = 0;
            state = 50UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 50UL;
          // Fall through.
        }
      }
      case 50UL:
      {
        if (n == "valueMeta" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueMeta_parser_)
            {
              this->valueMeta_parser_->pre ();
              ctx.nested_parser (this->valueMeta_parser_);
            }
          }
          else
          {
            if (this->valueMeta_parser_ != 0)
            {
              this->valueMeta_parser_->post_Meta ();
              this->valueMeta ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Task_Output_pskel.
  //
  bool Task_Output_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Task_Output_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Task_Output_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Task_Output_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Task_Output_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Task_Output_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueBase64Binary" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBase64Binary_parser_)
            {
              this->valueBase64Binary_parser_->pre ();
              ctx.nested_parser (this->valueBase64Binary_parser_);
            }
          }
          else
          {
            if (this->valueBase64Binary_parser_ != 0)
            {
              this->valueBase64Binary_parser_->post_base64Binary ();
              this->valueBase64Binary ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCanonical_parser_)
            {
              this->valueCanonical_parser_->pre ();
              ctx.nested_parser (this->valueCanonical_parser_);
            }
          }
          else
          {
            if (this->valueCanonical_parser_ != 0)
            {
              this->valueCanonical_parser_->post_canonical ();
              this->valueCanonical ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCode_parser_)
            {
              this->valueCode_parser_->pre ();
              ctx.nested_parser (this->valueCode_parser_);
            }
          }
          else
          {
            if (this->valueCode_parser_ != 0)
            {
              this->valueCode_parser_->post_code ();
              this->valueCode ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDate_parser_)
            {
              this->valueDate_parser_->pre ();
              ctx.nested_parser (this->valueDate_parser_);
            }
          }
          else
          {
            if (this->valueDate_parser_ != 0)
            {
              this->valueDate_parser_->post_date ();
              this->valueDate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDecimal_parser_)
            {
              this->valueDecimal_parser_->pre ();
              ctx.nested_parser (this->valueDecimal_parser_);
            }
          }
          else
          {
            if (this->valueDecimal_parser_ != 0)
            {
              this->valueDecimal_parser_->post_decimal ();
              this->valueDecimal ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "valueId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueId_parser_)
            {
              this->valueId_parser_->pre ();
              ctx.nested_parser (this->valueId_parser_);
            }
          }
          else
          {
            if (this->valueId_parser_ != 0)
            {
              this->valueId_parser_->post_id ();
              this->valueId ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "valueInstant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInstant_parser_)
            {
              this->valueInstant_parser_->pre ();
              ctx.nested_parser (this->valueInstant_parser_);
            }
          }
          else
          {
            if (this->valueInstant_parser_ != 0)
            {
              this->valueInstant_parser_->post_instant ();
              this->valueInstant ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "valueMarkdown" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueMarkdown_parser_)
            {
              this->valueMarkdown_parser_->pre ();
              ctx.nested_parser (this->valueMarkdown_parser_);
            }
          }
          else
          {
            if (this->valueMarkdown_parser_ != 0)
            {
              this->valueMarkdown_parser_->post_markdown ();
              this->valueMarkdown ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "valueOid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueOid_parser_)
            {
              this->valueOid_parser_->pre ();
              ctx.nested_parser (this->valueOid_parser_);
            }
          }
          else
          {
            if (this->valueOid_parser_ != 0)
            {
              this->valueOid_parser_->post_oid ();
              this->valueOid ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "valuePositiveInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valuePositiveInt_parser_)
            {
              this->valuePositiveInt_parser_->pre ();
              ctx.nested_parser (this->valuePositiveInt_parser_);
            }
          }
          else
          {
            if (this->valuePositiveInt_parser_ != 0)
            {
              this->valuePositiveInt_parser_->post_positiveInt ();
              this->valuePositiveInt ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "valueUnsignedInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUnsignedInt_parser_)
            {
              this->valueUnsignedInt_parser_->pre ();
              ctx.nested_parser (this->valueUnsignedInt_parser_);
            }
          }
          else
          {
            if (this->valueUnsignedInt_parser_ != 0)
            {
              this->valueUnsignedInt_parser_->post_unsignedInt ();
              this->valueUnsignedInt ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "valueUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUri_parser_)
            {
              this->valueUri_parser_->pre ();
              ctx.nested_parser (this->valueUri_parser_);
            }
          }
          else
          {
            if (this->valueUri_parser_ != 0)
            {
              this->valueUri_parser_->post_uri ();
              this->valueUri ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "valueUrl" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUrl_parser_)
            {
              this->valueUrl_parser_->pre ();
              ctx.nested_parser (this->valueUrl_parser_);
            }
          }
          else
          {
            if (this->valueUrl_parser_ != 0)
            {
              this->valueUrl_parser_->post_url ();
              this->valueUrl ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "valueUuid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUuid_parser_)
            {
              this->valueUuid_parser_->pre ();
              ctx.nested_parser (this->valueUuid_parser_);
            }
          }
          else
          {
            if (this->valueUuid_parser_ != 0)
            {
              this->valueUuid_parser_->post_uuid ();
              this->valueUuid ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "valueAddress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAddress_parser_)
            {
              this->valueAddress_parser_->pre ();
              ctx.nested_parser (this->valueAddress_parser_);
            }
          }
          else
          {
            if (this->valueAddress_parser_ != 0)
            {
              this->valueAddress_parser_->post_Address ();
              this->valueAddress ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "valueAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAge_parser_)
            {
              this->valueAge_parser_->pre ();
              ctx.nested_parser (this->valueAge_parser_);
            }
          }
          else
          {
            if (this->valueAge_parser_ != 0)
            {
              this->valueAge_parser_->post_Age ();
              this->valueAge ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "valueAnnotation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAnnotation_parser_)
            {
              this->valueAnnotation_parser_->pre ();
              ctx.nested_parser (this->valueAnnotation_parser_);
            }
          }
          else
          {
            if (this->valueAnnotation_parser_ != 0)
            {
              this->valueAnnotation_parser_->post_Annotation ();
              this->valueAnnotation ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "valueAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAttachment_parser_)
            {
              this->valueAttachment_parser_->pre ();
              ctx.nested_parser (this->valueAttachment_parser_);
            }
          }
          else
          {
            if (this->valueAttachment_parser_ != 0)
            {
              this->valueAttachment_parser_->post_Attachment ();
              this->valueAttachment ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "valueCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCodeableConcept_parser_)
            {
              this->valueCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->valueCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->valueCodeableConcept_parser_ != 0)
            {
              this->valueCodeableConcept_parser_->post_CodeableConcept ();
              this->valueCodeableConcept ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "valueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCoding_parser_)
            {
              this->valueCoding_parser_->pre ();
              ctx.nested_parser (this->valueCoding_parser_);
            }
          }
          else
          {
            if (this->valueCoding_parser_ != 0)
            {
              this->valueCoding_parser_->post_Coding ();
              this->valueCoding ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "valueContactPoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueContactPoint_parser_)
            {
              this->valueContactPoint_parser_->pre ();
              ctx.nested_parser (this->valueContactPoint_parser_);
            }
          }
          else
          {
            if (this->valueContactPoint_parser_ != 0)
            {
              this->valueContactPoint_parser_->post_ContactPoint ();
              this->valueContactPoint ();
            }

            count = 0;
            state = 27UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "valueCount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCount_parser_)
            {
              this->valueCount_parser_->pre ();
              ctx.nested_parser (this->valueCount_parser_);
            }
          }
          else
          {
            if (this->valueCount_parser_ != 0)
            {
              this->valueCount_parser_->post_Count ();
              this->valueCount ();
            }

            count = 0;
            state = 28UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "valueDistance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDistance_parser_)
            {
              this->valueDistance_parser_->pre ();
              ctx.nested_parser (this->valueDistance_parser_);
            }
          }
          else
          {
            if (this->valueDistance_parser_ != 0)
            {
              this->valueDistance_parser_->post_Distance ();
              this->valueDistance ();
            }

            count = 0;
            state = 29UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "valueDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDuration_parser_)
            {
              this->valueDuration_parser_->pre ();
              ctx.nested_parser (this->valueDuration_parser_);
            }
          }
          else
          {
            if (this->valueDuration_parser_ != 0)
            {
              this->valueDuration_parser_->post_Duration ();
              this->valueDuration ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "valueHumanName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueHumanName_parser_)
            {
              this->valueHumanName_parser_->pre ();
              ctx.nested_parser (this->valueHumanName_parser_);
            }
          }
          else
          {
            if (this->valueHumanName_parser_ != 0)
            {
              this->valueHumanName_parser_->post_HumanName ();
              this->valueHumanName ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "valueIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueIdentifier_parser_)
            {
              this->valueIdentifier_parser_->pre ();
              ctx.nested_parser (this->valueIdentifier_parser_);
            }
          }
          else
          {
            if (this->valueIdentifier_parser_ != 0)
            {
              this->valueIdentifier_parser_->post_Identifier ();
              this->valueIdentifier ();
            }

            count = 0;
            state = 32UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "valueMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueMoney_parser_)
            {
              this->valueMoney_parser_->pre ();
              ctx.nested_parser (this->valueMoney_parser_);
            }
          }
          else
          {
            if (this->valueMoney_parser_ != 0)
            {
              this->valueMoney_parser_->post_Money ();
              this->valueMoney ();
            }

            count = 0;
            state = 33UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "valuePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valuePeriod_parser_)
            {
              this->valuePeriod_parser_->pre ();
              ctx.nested_parser (this->valuePeriod_parser_);
            }
          }
          else
          {
            if (this->valuePeriod_parser_ != 0)
            {
              this->valuePeriod_parser_->post_Period ();
              this->valuePeriod ();
            }

            count = 0;
            state = 34UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 34UL;
          // Fall through.
        }
      }
      case 34UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 35UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 35UL;
          // Fall through.
        }
      }
      case 35UL:
      {
        if (n == "valueRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRange_parser_)
            {
              this->valueRange_parser_->pre ();
              ctx.nested_parser (this->valueRange_parser_);
            }
          }
          else
          {
            if (this->valueRange_parser_ != 0)
            {
              this->valueRange_parser_->post_Range ();
              this->valueRange ();
            }

            count = 0;
            state = 36UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 36UL;
          // Fall through.
        }
      }
      case 36UL:
      {
        if (n == "valueRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRatio_parser_)
            {
              this->valueRatio_parser_->pre ();
              ctx.nested_parser (this->valueRatio_parser_);
            }
          }
          else
          {
            if (this->valueRatio_parser_ != 0)
            {
              this->valueRatio_parser_->post_Ratio ();
              this->valueRatio ();
            }

            count = 0;
            state = 37UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 37UL;
          // Fall through.
        }
      }
      case 37UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = 38UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 38UL;
          // Fall through.
        }
      }
      case 38UL:
      {
        if (n == "valueSampledData" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSampledData_parser_)
            {
              this->valueSampledData_parser_->pre ();
              ctx.nested_parser (this->valueSampledData_parser_);
            }
          }
          else
          {
            if (this->valueSampledData_parser_ != 0)
            {
              this->valueSampledData_parser_->post_SampledData ();
              this->valueSampledData ();
            }

            count = 0;
            state = 39UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 39UL;
          // Fall through.
        }
      }
      case 39UL:
      {
        if (n == "valueSignature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSignature_parser_)
            {
              this->valueSignature_parser_->pre ();
              ctx.nested_parser (this->valueSignature_parser_);
            }
          }
          else
          {
            if (this->valueSignature_parser_ != 0)
            {
              this->valueSignature_parser_->post_Signature ();
              this->valueSignature ();
            }

            count = 0;
            state = 40UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 40UL;
          // Fall through.
        }
      }
      case 40UL:
      {
        if (n == "valueTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTiming_parser_)
            {
              this->valueTiming_parser_->pre ();
              ctx.nested_parser (this->valueTiming_parser_);
            }
          }
          else
          {
            if (this->valueTiming_parser_ != 0)
            {
              this->valueTiming_parser_->post_Timing ();
              this->valueTiming ();
            }

            count = 0;
            state = 41UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 41UL;
          // Fall through.
        }
      }
      case 41UL:
      {
        if (n == "valueContactDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueContactDetail_parser_)
            {
              this->valueContactDetail_parser_->pre ();
              ctx.nested_parser (this->valueContactDetail_parser_);
            }
          }
          else
          {
            if (this->valueContactDetail_parser_ != 0)
            {
              this->valueContactDetail_parser_->post_ContactDetail ();
              this->valueContactDetail ();
            }

            count = 0;
            state = 42UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 42UL;
          // Fall through.
        }
      }
      case 42UL:
      {
        if (n == "valueContributor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueContributor_parser_)
            {
              this->valueContributor_parser_->pre ();
              ctx.nested_parser (this->valueContributor_parser_);
            }
          }
          else
          {
            if (this->valueContributor_parser_ != 0)
            {
              this->valueContributor_parser_->post_Contributor ();
              this->valueContributor ();
            }

            count = 0;
            state = 43UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 43UL;
          // Fall through.
        }
      }
      case 43UL:
      {
        if (n == "valueDataRequirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDataRequirement_parser_)
            {
              this->valueDataRequirement_parser_->pre ();
              ctx.nested_parser (this->valueDataRequirement_parser_);
            }
          }
          else
          {
            if (this->valueDataRequirement_parser_ != 0)
            {
              this->valueDataRequirement_parser_->post_DataRequirement ();
              this->valueDataRequirement ();
            }

            count = 0;
            state = 44UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 44UL;
          // Fall through.
        }
      }
      case 44UL:
      {
        if (n == "valueExpression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueExpression_parser_)
            {
              this->valueExpression_parser_->pre ();
              ctx.nested_parser (this->valueExpression_parser_);
            }
          }
          else
          {
            if (this->valueExpression_parser_ != 0)
            {
              this->valueExpression_parser_->post_Expression ();
              this->valueExpression ();
            }

            count = 0;
            state = 45UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 45UL;
          // Fall through.
        }
      }
      case 45UL:
      {
        if (n == "valueParameterDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueParameterDefinition_parser_)
            {
              this->valueParameterDefinition_parser_->pre ();
              ctx.nested_parser (this->valueParameterDefinition_parser_);
            }
          }
          else
          {
            if (this->valueParameterDefinition_parser_ != 0)
            {
              this->valueParameterDefinition_parser_->post_ParameterDefinition ();
              this->valueParameterDefinition ();
            }

            count = 0;
            state = 46UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 46UL;
          // Fall through.
        }
      }
      case 46UL:
      {
        if (n == "valueRelatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueRelatedArtifact_parser_)
            {
              this->valueRelatedArtifact_parser_->pre ();
              ctx.nested_parser (this->valueRelatedArtifact_parser_);
            }
          }
          else
          {
            if (this->valueRelatedArtifact_parser_ != 0)
            {
              this->valueRelatedArtifact_parser_->post_RelatedArtifact ();
              this->valueRelatedArtifact ();
            }

            count = 0;
            state = 47UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 47UL;
          // Fall through.
        }
      }
      case 47UL:
      {
        if (n == "valueTriggerDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTriggerDefinition_parser_)
            {
              this->valueTriggerDefinition_parser_->pre ();
              ctx.nested_parser (this->valueTriggerDefinition_parser_);
            }
          }
          else
          {
            if (this->valueTriggerDefinition_parser_ != 0)
            {
              this->valueTriggerDefinition_parser_->post_TriggerDefinition ();
              this->valueTriggerDefinition ();
            }

            count = 0;
            state = 48UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 48UL;
          // Fall through.
        }
      }
      case 48UL:
      {
        if (n == "valueUsageContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUsageContext_parser_)
            {
              this->valueUsageContext_parser_->pre ();
              ctx.nested_parser (this->valueUsageContext_parser_);
            }
          }
          else
          {
            if (this->valueUsageContext_parser_ != 0)
            {
              this->valueUsageContext_parser_->post_UsageContext ();
              this->valueUsageContext ();
            }

            count = 0;
            state = 49UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 49UL;
          // Fall through.
        }
      }
      case 49UL:
      {
        if (n == "valueDosage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDosage_parser_)
            {
              this->valueDosage_parser_->pre ();
              ctx.nested_parser (this->valueDosage_parser_);
            }
          }
          else
          {
            if (this->valueDosage_parser_ != 0)
            {
              this->valueDosage_parser_->post_Dosage ();
              this->valueDosage ();
            }

            count = 0;
            state = 50UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 50UL;
          // Fall through.
        }
      }
      case 50UL:
      {
        if (n == "valueMeta" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueMeta_parser_)
            {
              this->valueMeta_parser_->pre ();
              ctx.nested_parser (this->valueMeta_parser_);
            }
          }
          else
          {
            if (this->valueMeta_parser_ != 0)
            {
              this->valueMeta_parser_->post_Meta ();
              this->valueMeta ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for TaskStatus_pskel.
  //
  bool TaskStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_TaskStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for TaskIntent_pskel.
  //
  bool TaskIntent_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_TaskIntent_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

