// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "terminologycapabilities-pskel.hxx"

namespace fhir
{
  // TerminologyCapabilities_pskel
  //

  void TerminologyCapabilities_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  kind_parser (::fhir::CapabilityStatementKind_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  software_parser (::fhir::TerminologyCapabilities_Software_pskel& p)
  {
    this->software_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  implementation_parser (::fhir::TerminologyCapabilities_Implementation_pskel& p)
  {
    this->implementation_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  lockedDate_parser (::fhir::boolean_pskel& p)
  {
    this->lockedDate_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  codeSystem_parser (::fhir::TerminologyCapabilities_CodeSystem_pskel& p)
  {
    this->codeSystem_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  expansion_parser (::fhir::TerminologyCapabilities_Expansion_pskel& p)
  {
    this->expansion_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  codeSearch_parser (::fhir::CodeSearchSupport_pskel& p)
  {
    this->codeSearch_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  validateCode_parser (::fhir::TerminologyCapabilities_ValidateCode_pskel& p)
  {
    this->validateCode_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  translation_parser (::fhir::TerminologyCapabilities_Translation_pskel& p)
  {
    this->translation_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  closure_parser (::fhir::TerminologyCapabilities_Closure_pskel& p)
  {
    this->closure_parser_ = &p;
  }

  void TerminologyCapabilities_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::markdown_pskel& copyright,
           ::fhir::CapabilityStatementKind_pskel& kind,
           ::fhir::TerminologyCapabilities_Software_pskel& software,
           ::fhir::TerminologyCapabilities_Implementation_pskel& implementation,
           ::fhir::boolean_pskel& lockedDate,
           ::fhir::TerminologyCapabilities_CodeSystem_pskel& codeSystem,
           ::fhir::TerminologyCapabilities_Expansion_pskel& expansion,
           ::fhir::CodeSearchSupport_pskel& codeSearch,
           ::fhir::TerminologyCapabilities_ValidateCode_pskel& validateCode,
           ::fhir::TerminologyCapabilities_Translation_pskel& translation,
           ::fhir::TerminologyCapabilities_Closure_pskel& closure)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->copyright_parser_ = &copyright;
    this->kind_parser_ = &kind;
    this->software_parser_ = &software;
    this->implementation_parser_ = &implementation;
    this->lockedDate_parser_ = &lockedDate;
    this->codeSystem_parser_ = &codeSystem;
    this->expansion_parser_ = &expansion;
    this->codeSearch_parser_ = &codeSearch;
    this->validateCode_parser_ = &validateCode;
    this->translation_parser_ = &translation;
    this->closure_parser_ = &closure;
  }

  TerminologyCapabilities_pskel::
  TerminologyCapabilities_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    TerminologyCapabilities_impl_ (0),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    kind_parser_ (0),
    software_parser_ (0),
    implementation_parser_ (0),
    lockedDate_parser_ (0),
    codeSystem_parser_ (0),
    expansion_parser_ (0),
    codeSearch_parser_ (0),
    validateCode_parser_ (0),
    translation_parser_ (0),
    closure_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_pskel::
  TerminologyCapabilities_pskel (TerminologyCapabilities_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    TerminologyCapabilities_impl_ (impl),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    kind_parser_ (0),
    software_parser_ (0),
    implementation_parser_ (0),
    lockedDate_parser_ (0),
    codeSystem_parser_ (0),
    expansion_parser_ (0),
    codeSearch_parser_ (0),
    validateCode_parser_ (0),
    translation_parser_ (0),
    closure_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Software_pskel
  //

  void TerminologyCapabilities_Software_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void TerminologyCapabilities_Software_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void TerminologyCapabilities_Software_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& version)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->version_parser_ = &version;
  }

  TerminologyCapabilities_Software_pskel::
  TerminologyCapabilities_Software_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Software_impl_ (0),
    name_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Software_pskel::
  TerminologyCapabilities_Software_pskel (TerminologyCapabilities_Software_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Software_impl_ (impl),
    name_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Implementation_pskel
  //

  void TerminologyCapabilities_Implementation_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void TerminologyCapabilities_Implementation_pskel::
  url_parser (::fhir::url_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void TerminologyCapabilities_Implementation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::url_pskel& url)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->url_parser_ = &url;
  }

  TerminologyCapabilities_Implementation_pskel::
  TerminologyCapabilities_Implementation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Implementation_impl_ (0),
    description_parser_ (0),
    url_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Implementation_pskel::
  TerminologyCapabilities_Implementation_pskel (TerminologyCapabilities_Implementation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Implementation_impl_ (impl),
    description_parser_ (0),
    url_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_CodeSystem_pskel
  //

  void TerminologyCapabilities_CodeSystem_pskel::
  uri_parser (::fhir::canonical_pskel& p)
  {
    this->uri_parser_ = &p;
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  version_parser (::fhir::TerminologyCapabilities_Version_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  subsumption_parser (::fhir::boolean_pskel& p)
  {
    this->subsumption_parser_ = &p;
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::canonical_pskel& uri,
           ::fhir::TerminologyCapabilities_Version_pskel& version,
           ::fhir::boolean_pskel& subsumption)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->uri_parser_ = &uri;
    this->version_parser_ = &version;
    this->subsumption_parser_ = &subsumption;
  }

  TerminologyCapabilities_CodeSystem_pskel::
  TerminologyCapabilities_CodeSystem_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_CodeSystem_impl_ (0),
    uri_parser_ (0),
    version_parser_ (0),
    subsumption_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_CodeSystem_pskel::
  TerminologyCapabilities_CodeSystem_pskel (TerminologyCapabilities_CodeSystem_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_CodeSystem_impl_ (impl),
    uri_parser_ (0),
    version_parser_ (0),
    subsumption_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Version_pskel
  //

  void TerminologyCapabilities_Version_pskel::
  code_parser (::fhir::string_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void TerminologyCapabilities_Version_pskel::
  isDefault_parser (::fhir::boolean_pskel& p)
  {
    this->isDefault_parser_ = &p;
  }

  void TerminologyCapabilities_Version_pskel::
  compositional_parser (::fhir::boolean_pskel& p)
  {
    this->compositional_parser_ = &p;
  }

  void TerminologyCapabilities_Version_pskel::
  language_parser (::fhir::code_pskel& p)
  {
    this->language_parser_ = &p;
  }

  void TerminologyCapabilities_Version_pskel::
  filter_parser (::fhir::TerminologyCapabilities_Filter_pskel& p)
  {
    this->filter_parser_ = &p;
  }

  void TerminologyCapabilities_Version_pskel::
  property_parser (::fhir::code_pskel& p)
  {
    this->property_parser_ = &p;
  }

  void TerminologyCapabilities_Version_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& code,
           ::fhir::boolean_pskel& isDefault,
           ::fhir::boolean_pskel& compositional,
           ::fhir::code_pskel& language,
           ::fhir::TerminologyCapabilities_Filter_pskel& filter,
           ::fhir::code_pskel& property)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->isDefault_parser_ = &isDefault;
    this->compositional_parser_ = &compositional;
    this->language_parser_ = &language;
    this->filter_parser_ = &filter;
    this->property_parser_ = &property;
  }

  TerminologyCapabilities_Version_pskel::
  TerminologyCapabilities_Version_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Version_impl_ (0),
    code_parser_ (0),
    isDefault_parser_ (0),
    compositional_parser_ (0),
    language_parser_ (0),
    filter_parser_ (0),
    property_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Version_pskel::
  TerminologyCapabilities_Version_pskel (TerminologyCapabilities_Version_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Version_impl_ (impl),
    code_parser_ (0),
    isDefault_parser_ (0),
    compositional_parser_ (0),
    language_parser_ (0),
    filter_parser_ (0),
    property_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Filter_pskel
  //

  void TerminologyCapabilities_Filter_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void TerminologyCapabilities_Filter_pskel::
  op_parser (::fhir::code_pskel& p)
  {
    this->op_parser_ = &p;
  }

  void TerminologyCapabilities_Filter_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& code,
           ::fhir::code_pskel& op)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->op_parser_ = &op;
  }

  TerminologyCapabilities_Filter_pskel::
  TerminologyCapabilities_Filter_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Filter_impl_ (0),
    code_parser_ (0),
    op_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Filter_pskel::
  TerminologyCapabilities_Filter_pskel (TerminologyCapabilities_Filter_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Filter_impl_ (impl),
    code_parser_ (0),
    op_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Expansion_pskel
  //

  void TerminologyCapabilities_Expansion_pskel::
  hierarchical_parser (::fhir::boolean_pskel& p)
  {
    this->hierarchical_parser_ = &p;
  }

  void TerminologyCapabilities_Expansion_pskel::
  paging_parser (::fhir::boolean_pskel& p)
  {
    this->paging_parser_ = &p;
  }

  void TerminologyCapabilities_Expansion_pskel::
  incomplete_parser (::fhir::boolean_pskel& p)
  {
    this->incomplete_parser_ = &p;
  }

  void TerminologyCapabilities_Expansion_pskel::
  parameter_parser (::fhir::TerminologyCapabilities_Parameter_pskel& p)
  {
    this->parameter_parser_ = &p;
  }

  void TerminologyCapabilities_Expansion_pskel::
  textFilter_parser (::fhir::markdown_pskel& p)
  {
    this->textFilter_parser_ = &p;
  }

  void TerminologyCapabilities_Expansion_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& hierarchical,
           ::fhir::boolean_pskel& paging,
           ::fhir::boolean_pskel& incomplete,
           ::fhir::TerminologyCapabilities_Parameter_pskel& parameter,
           ::fhir::markdown_pskel& textFilter)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->hierarchical_parser_ = &hierarchical;
    this->paging_parser_ = &paging;
    this->incomplete_parser_ = &incomplete;
    this->parameter_parser_ = &parameter;
    this->textFilter_parser_ = &textFilter;
  }

  TerminologyCapabilities_Expansion_pskel::
  TerminologyCapabilities_Expansion_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Expansion_impl_ (0),
    hierarchical_parser_ (0),
    paging_parser_ (0),
    incomplete_parser_ (0),
    parameter_parser_ (0),
    textFilter_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Expansion_pskel::
  TerminologyCapabilities_Expansion_pskel (TerminologyCapabilities_Expansion_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Expansion_impl_ (impl),
    hierarchical_parser_ (0),
    paging_parser_ (0),
    incomplete_parser_ (0),
    parameter_parser_ (0),
    textFilter_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Parameter_pskel
  //

  void TerminologyCapabilities_Parameter_pskel::
  name_parser (::fhir::code_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void TerminologyCapabilities_Parameter_pskel::
  documentation_parser (::fhir::string_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void TerminologyCapabilities_Parameter_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& name,
           ::fhir::string_pskel& documentation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->documentation_parser_ = &documentation;
  }

  TerminologyCapabilities_Parameter_pskel::
  TerminologyCapabilities_Parameter_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Parameter_impl_ (0),
    name_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Parameter_pskel::
  TerminologyCapabilities_Parameter_pskel (TerminologyCapabilities_Parameter_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Parameter_impl_ (impl),
    name_parser_ (0),
    documentation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_ValidateCode_pskel
  //

  void TerminologyCapabilities_ValidateCode_pskel::
  translations_parser (::fhir::boolean_pskel& p)
  {
    this->translations_parser_ = &p;
  }

  void TerminologyCapabilities_ValidateCode_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& translations)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->translations_parser_ = &translations;
  }

  TerminologyCapabilities_ValidateCode_pskel::
  TerminologyCapabilities_ValidateCode_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_ValidateCode_impl_ (0),
    translations_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_ValidateCode_pskel::
  TerminologyCapabilities_ValidateCode_pskel (TerminologyCapabilities_ValidateCode_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_ValidateCode_impl_ (impl),
    translations_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Translation_pskel
  //

  void TerminologyCapabilities_Translation_pskel::
  needsMap_parser (::fhir::boolean_pskel& p)
  {
    this->needsMap_parser_ = &p;
  }

  void TerminologyCapabilities_Translation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& needsMap)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->needsMap_parser_ = &needsMap;
  }

  TerminologyCapabilities_Translation_pskel::
  TerminologyCapabilities_Translation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Translation_impl_ (0),
    needsMap_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Translation_pskel::
  TerminologyCapabilities_Translation_pskel (TerminologyCapabilities_Translation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Translation_impl_ (impl),
    needsMap_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // TerminologyCapabilities_Closure_pskel
  //

  void TerminologyCapabilities_Closure_pskel::
  translation_parser (::fhir::boolean_pskel& p)
  {
    this->translation_parser_ = &p;
  }

  void TerminologyCapabilities_Closure_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& translation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->translation_parser_ = &translation;
  }

  TerminologyCapabilities_Closure_pskel::
  TerminologyCapabilities_Closure_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    TerminologyCapabilities_Closure_impl_ (0),
    translation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  TerminologyCapabilities_Closure_pskel::
  TerminologyCapabilities_Closure_pskel (TerminologyCapabilities_Closure_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    TerminologyCapabilities_Closure_impl_ (impl),
    translation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CodeSearchSupport_list_pskel
  //

  CodeSearchSupport_list_pskel::
  CodeSearchSupport_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    CodeSearchSupport_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_CodeSearchSupport_list_pskel_enums_, 2UL);
  }

  CodeSearchSupport_list_pskel::
  CodeSearchSupport_list_pskel (CodeSearchSupport_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    CodeSearchSupport_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_CodeSearchSupport_list_pskel_enums_, 2UL);
  }

  // CodeSearchSupport_pskel
  //

  void CodeSearchSupport_pskel::
  value_parser (::fhir::CodeSearchSupport_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void CodeSearchSupport_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::CodeSearchSupport_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  CodeSearchSupport_pskel::
  CodeSearchSupport_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    CodeSearchSupport_impl_ (0),
    value_parser_ (0)
  {
  }

  CodeSearchSupport_pskel::
  CodeSearchSupport_pskel (CodeSearchSupport_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    CodeSearchSupport_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // TerminologyCapabilities_pskel
  //

  void TerminologyCapabilities_pskel::
  url ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->url ();
  }

  void TerminologyCapabilities_pskel::
  version ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->version ();
  }

  void TerminologyCapabilities_pskel::
  name ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->name ();
  }

  void TerminologyCapabilities_pskel::
  title ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->title ();
  }

  void TerminologyCapabilities_pskel::
  status ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->status ();
  }

  void TerminologyCapabilities_pskel::
  experimental ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->experimental ();
  }

  void TerminologyCapabilities_pskel::
  date ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->date ();
  }

  void TerminologyCapabilities_pskel::
  publisher ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->publisher ();
  }

  void TerminologyCapabilities_pskel::
  contact ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->contact ();
  }

  void TerminologyCapabilities_pskel::
  description ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->description ();
  }

  void TerminologyCapabilities_pskel::
  useContext ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->useContext ();
  }

  void TerminologyCapabilities_pskel::
  jurisdiction ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->jurisdiction ();
  }

  void TerminologyCapabilities_pskel::
  purpose ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->purpose ();
  }

  void TerminologyCapabilities_pskel::
  copyright ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->copyright ();
  }

  void TerminologyCapabilities_pskel::
  kind ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->kind ();
  }

  void TerminologyCapabilities_pskel::
  software ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->software ();
  }

  void TerminologyCapabilities_pskel::
  implementation ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->implementation ();
  }

  void TerminologyCapabilities_pskel::
  lockedDate ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->lockedDate ();
  }

  void TerminologyCapabilities_pskel::
  codeSystem ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->codeSystem ();
  }

  void TerminologyCapabilities_pskel::
  expansion ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->expansion ();
  }

  void TerminologyCapabilities_pskel::
  codeSearch ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->codeSearch ();
  }

  void TerminologyCapabilities_pskel::
  validateCode ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->validateCode ();
  }

  void TerminologyCapabilities_pskel::
  translation ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->translation ();
  }

  void TerminologyCapabilities_pskel::
  closure ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->closure ();
  }

  void TerminologyCapabilities_pskel::
  post_TerminologyCapabilities ()
  {
    if (this->TerminologyCapabilities_impl_)
      this->TerminologyCapabilities_impl_->post_TerminologyCapabilities ();
    else
      post_DomainResource ();
  }

  void TerminologyCapabilities_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->software_parser_)
      this->software_parser_->_reset ();

    if (this->implementation_parser_)
      this->implementation_parser_->_reset ();

    if (this->lockedDate_parser_)
      this->lockedDate_parser_->_reset ();

    if (this->codeSystem_parser_)
      this->codeSystem_parser_->_reset ();

    if (this->expansion_parser_)
      this->expansion_parser_->_reset ();

    if (this->codeSearch_parser_)
      this->codeSearch_parser_->_reset ();

    if (this->validateCode_parser_)
      this->validateCode_parser_->_reset ();

    if (this->translation_parser_)
      this->translation_parser_->_reset ();

    if (this->closure_parser_)
      this->closure_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Software_pskel
  //

  void TerminologyCapabilities_Software_pskel::
  name ()
  {
    if (this->TerminologyCapabilities_Software_impl_)
      this->TerminologyCapabilities_Software_impl_->name ();
  }

  void TerminologyCapabilities_Software_pskel::
  version ()
  {
    if (this->TerminologyCapabilities_Software_impl_)
      this->TerminologyCapabilities_Software_impl_->version ();
  }

  void TerminologyCapabilities_Software_pskel::
  post_TerminologyCapabilities_Software ()
  {
    if (this->TerminologyCapabilities_Software_impl_)
      this->TerminologyCapabilities_Software_impl_->post_TerminologyCapabilities_Software ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Software_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Implementation_pskel
  //

  void TerminologyCapabilities_Implementation_pskel::
  description ()
  {
    if (this->TerminologyCapabilities_Implementation_impl_)
      this->TerminologyCapabilities_Implementation_impl_->description ();
  }

  void TerminologyCapabilities_Implementation_pskel::
  url ()
  {
    if (this->TerminologyCapabilities_Implementation_impl_)
      this->TerminologyCapabilities_Implementation_impl_->url ();
  }

  void TerminologyCapabilities_Implementation_pskel::
  post_TerminologyCapabilities_Implementation ()
  {
    if (this->TerminologyCapabilities_Implementation_impl_)
      this->TerminologyCapabilities_Implementation_impl_->post_TerminologyCapabilities_Implementation ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Implementation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_CodeSystem_pskel
  //

  void TerminologyCapabilities_CodeSystem_pskel::
  uri ()
  {
    if (this->TerminologyCapabilities_CodeSystem_impl_)
      this->TerminologyCapabilities_CodeSystem_impl_->uri ();
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  version ()
  {
    if (this->TerminologyCapabilities_CodeSystem_impl_)
      this->TerminologyCapabilities_CodeSystem_impl_->version ();
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  subsumption ()
  {
    if (this->TerminologyCapabilities_CodeSystem_impl_)
      this->TerminologyCapabilities_CodeSystem_impl_->subsumption ();
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  post_TerminologyCapabilities_CodeSystem ()
  {
    if (this->TerminologyCapabilities_CodeSystem_impl_)
      this->TerminologyCapabilities_CodeSystem_impl_->post_TerminologyCapabilities_CodeSystem ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->uri_parser_)
      this->uri_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->subsumption_parser_)
      this->subsumption_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Version_pskel
  //

  void TerminologyCapabilities_Version_pskel::
  code ()
  {
    if (this->TerminologyCapabilities_Version_impl_)
      this->TerminologyCapabilities_Version_impl_->code ();
  }

  void TerminologyCapabilities_Version_pskel::
  isDefault ()
  {
    if (this->TerminologyCapabilities_Version_impl_)
      this->TerminologyCapabilities_Version_impl_->isDefault ();
  }

  void TerminologyCapabilities_Version_pskel::
  compositional ()
  {
    if (this->TerminologyCapabilities_Version_impl_)
      this->TerminologyCapabilities_Version_impl_->compositional ();
  }

  void TerminologyCapabilities_Version_pskel::
  language ()
  {
    if (this->TerminologyCapabilities_Version_impl_)
      this->TerminologyCapabilities_Version_impl_->language ();
  }

  void TerminologyCapabilities_Version_pskel::
  filter ()
  {
    if (this->TerminologyCapabilities_Version_impl_)
      this->TerminologyCapabilities_Version_impl_->filter ();
  }

  void TerminologyCapabilities_Version_pskel::
  property ()
  {
    if (this->TerminologyCapabilities_Version_impl_)
      this->TerminologyCapabilities_Version_impl_->property ();
  }

  void TerminologyCapabilities_Version_pskel::
  post_TerminologyCapabilities_Version ()
  {
    if (this->TerminologyCapabilities_Version_impl_)
      this->TerminologyCapabilities_Version_impl_->post_TerminologyCapabilities_Version ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Version_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->isDefault_parser_)
      this->isDefault_parser_->_reset ();

    if (this->compositional_parser_)
      this->compositional_parser_->_reset ();

    if (this->language_parser_)
      this->language_parser_->_reset ();

    if (this->filter_parser_)
      this->filter_parser_->_reset ();

    if (this->property_parser_)
      this->property_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Filter_pskel
  //

  void TerminologyCapabilities_Filter_pskel::
  code ()
  {
    if (this->TerminologyCapabilities_Filter_impl_)
      this->TerminologyCapabilities_Filter_impl_->code ();
  }

  void TerminologyCapabilities_Filter_pskel::
  op ()
  {
    if (this->TerminologyCapabilities_Filter_impl_)
      this->TerminologyCapabilities_Filter_impl_->op ();
  }

  void TerminologyCapabilities_Filter_pskel::
  post_TerminologyCapabilities_Filter ()
  {
    if (this->TerminologyCapabilities_Filter_impl_)
      this->TerminologyCapabilities_Filter_impl_->post_TerminologyCapabilities_Filter ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Filter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->op_parser_)
      this->op_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Expansion_pskel
  //

  void TerminologyCapabilities_Expansion_pskel::
  hierarchical ()
  {
    if (this->TerminologyCapabilities_Expansion_impl_)
      this->TerminologyCapabilities_Expansion_impl_->hierarchical ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  paging ()
  {
    if (this->TerminologyCapabilities_Expansion_impl_)
      this->TerminologyCapabilities_Expansion_impl_->paging ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  incomplete ()
  {
    if (this->TerminologyCapabilities_Expansion_impl_)
      this->TerminologyCapabilities_Expansion_impl_->incomplete ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  parameter ()
  {
    if (this->TerminologyCapabilities_Expansion_impl_)
      this->TerminologyCapabilities_Expansion_impl_->parameter ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  textFilter ()
  {
    if (this->TerminologyCapabilities_Expansion_impl_)
      this->TerminologyCapabilities_Expansion_impl_->textFilter ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  post_TerminologyCapabilities_Expansion ()
  {
    if (this->TerminologyCapabilities_Expansion_impl_)
      this->TerminologyCapabilities_Expansion_impl_->post_TerminologyCapabilities_Expansion ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->hierarchical_parser_)
      this->hierarchical_parser_->_reset ();

    if (this->paging_parser_)
      this->paging_parser_->_reset ();

    if (this->incomplete_parser_)
      this->incomplete_parser_->_reset ();

    if (this->parameter_parser_)
      this->parameter_parser_->_reset ();

    if (this->textFilter_parser_)
      this->textFilter_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Parameter_pskel
  //

  void TerminologyCapabilities_Parameter_pskel::
  name ()
  {
    if (this->TerminologyCapabilities_Parameter_impl_)
      this->TerminologyCapabilities_Parameter_impl_->name ();
  }

  void TerminologyCapabilities_Parameter_pskel::
  documentation ()
  {
    if (this->TerminologyCapabilities_Parameter_impl_)
      this->TerminologyCapabilities_Parameter_impl_->documentation ();
  }

  void TerminologyCapabilities_Parameter_pskel::
  post_TerminologyCapabilities_Parameter ()
  {
    if (this->TerminologyCapabilities_Parameter_impl_)
      this->TerminologyCapabilities_Parameter_impl_->post_TerminologyCapabilities_Parameter ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Parameter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_ValidateCode_pskel
  //

  void TerminologyCapabilities_ValidateCode_pskel::
  translations ()
  {
    if (this->TerminologyCapabilities_ValidateCode_impl_)
      this->TerminologyCapabilities_ValidateCode_impl_->translations ();
  }

  void TerminologyCapabilities_ValidateCode_pskel::
  post_TerminologyCapabilities_ValidateCode ()
  {
    if (this->TerminologyCapabilities_ValidateCode_impl_)
      this->TerminologyCapabilities_ValidateCode_impl_->post_TerminologyCapabilities_ValidateCode ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_ValidateCode_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->translations_parser_)
      this->translations_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Translation_pskel
  //

  void TerminologyCapabilities_Translation_pskel::
  needsMap ()
  {
    if (this->TerminologyCapabilities_Translation_impl_)
      this->TerminologyCapabilities_Translation_impl_->needsMap ();
  }

  void TerminologyCapabilities_Translation_pskel::
  post_TerminologyCapabilities_Translation ()
  {
    if (this->TerminologyCapabilities_Translation_impl_)
      this->TerminologyCapabilities_Translation_impl_->post_TerminologyCapabilities_Translation ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Translation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->needsMap_parser_)
      this->needsMap_parser_->_reset ();

    this->resetting_ = false;
  }

  // TerminologyCapabilities_Closure_pskel
  //

  void TerminologyCapabilities_Closure_pskel::
  translation ()
  {
    if (this->TerminologyCapabilities_Closure_impl_)
      this->TerminologyCapabilities_Closure_impl_->translation ();
  }

  void TerminologyCapabilities_Closure_pskel::
  post_TerminologyCapabilities_Closure ()
  {
    if (this->TerminologyCapabilities_Closure_impl_)
      this->TerminologyCapabilities_Closure_impl_->post_TerminologyCapabilities_Closure ();
    else
      post_BackboneElement ();
  }

  void TerminologyCapabilities_Closure_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->translation_parser_)
      this->translation_parser_->_reset ();

    this->resetting_ = false;
  }

  // CodeSearchSupport_list_pskel
  //

  void CodeSearchSupport_list_pskel::
  post_CodeSearchSupport_list ()
  {
    if (this->CodeSearchSupport_list_impl_)
      this->CodeSearchSupport_list_impl_->post_CodeSearchSupport_list ();
    else
      post_code_primitive ();
  }

  const char* const CodeSearchSupport_list_pskel::_xsde_CodeSearchSupport_list_pskel_enums_[2UL] = 
  {
    "all",
    "explicit"
  };

  // CodeSearchSupport_pskel
  //

  void CodeSearchSupport_pskel::
  value ()
  {
    if (this->CodeSearchSupport_impl_)
      this->CodeSearchSupport_impl_->value ();
  }

  void CodeSearchSupport_pskel::
  post_CodeSearchSupport ()
  {
    if (this->CodeSearchSupport_impl_)
      this->CodeSearchSupport_impl_->post_CodeSearchSupport ();
    else
      post_Element ();
  }

  void CodeSearchSupport_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for TerminologyCapabilities_pskel.
  //
  bool TerminologyCapabilities_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_CapabilityStatementKind ();
              this->kind ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "software" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->software_parser_)
            {
              this->software_parser_->pre ();
              ctx.nested_parser (this->software_parser_);
            }
          }
          else
          {
            if (this->software_parser_ != 0)
            {
              this->software_parser_->post_TerminologyCapabilities_Software ();
              this->software ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "implementation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->implementation_parser_)
            {
              this->implementation_parser_->pre ();
              ctx.nested_parser (this->implementation_parser_);
            }
          }
          else
          {
            if (this->implementation_parser_ != 0)
            {
              this->implementation_parser_->post_TerminologyCapabilities_Implementation ();
              this->implementation ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "lockedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lockedDate_parser_)
            {
              this->lockedDate_parser_->pre ();
              ctx.nested_parser (this->lockedDate_parser_);
            }
          }
          else
          {
            if (this->lockedDate_parser_ != 0)
            {
              this->lockedDate_parser_->post_boolean ();
              this->lockedDate ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "codeSystem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->codeSystem_parser_)
            {
              this->codeSystem_parser_->pre ();
              ctx.nested_parser (this->codeSystem_parser_);
            }
          }
          else
          {
            if (this->codeSystem_parser_ != 0)
            {
              this->codeSystem_parser_->post_TerminologyCapabilities_CodeSystem ();
              this->codeSystem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "expansion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expansion_parser_)
            {
              this->expansion_parser_->pre ();
              ctx.nested_parser (this->expansion_parser_);
            }
          }
          else
          {
            if (this->expansion_parser_ != 0)
            {
              this->expansion_parser_->post_TerminologyCapabilities_Expansion ();
              this->expansion ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "codeSearch" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->codeSearch_parser_)
            {
              this->codeSearch_parser_->pre ();
              ctx.nested_parser (this->codeSearch_parser_);
            }
          }
          else
          {
            if (this->codeSearch_parser_ != 0)
            {
              this->codeSearch_parser_->post_CodeSearchSupport ();
              this->codeSearch ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "validateCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validateCode_parser_)
            {
              this->validateCode_parser_->pre ();
              ctx.nested_parser (this->validateCode_parser_);
            }
          }
          else
          {
            if (this->validateCode_parser_ != 0)
            {
              this->validateCode_parser_->post_TerminologyCapabilities_ValidateCode ();
              this->validateCode ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "translation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->translation_parser_)
            {
              this->translation_parser_->pre ();
              ctx.nested_parser (this->translation_parser_);
            }
          }
          else
          {
            if (this->translation_parser_ != 0)
            {
              this->translation_parser_->post_TerminologyCapabilities_Translation ();
              this->translation ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "closure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->closure_parser_)
            {
              this->closure_parser_->pre ();
              ctx.nested_parser (this->closure_parser_);
            }
          }
          else
          {
            if (this->closure_parser_ != 0)
            {
              this->closure_parser_->post_TerminologyCapabilities_Closure ();
              this->closure ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Software_pskel.
  //
  bool TerminologyCapabilities_Software_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Software_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Software_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Software_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Software_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Software_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Implementation_pskel.
  //
  bool TerminologyCapabilities_Implementation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Implementation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Implementation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Implementation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Implementation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Implementation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_url ();
              this->url ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_CodeSystem_pskel.
  //
  bool TerminologyCapabilities_CodeSystem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "subsumption" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_CodeSystem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_CodeSystem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_CodeSystem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uri_parser_)
            {
              this->uri_parser_->pre ();
              ctx.nested_parser (this->uri_parser_);
            }
          }
          else
          {
            if (this->uri_parser_ != 0)
            {
              this->uri_parser_->post_canonical ();
              this->uri ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_TerminologyCapabilities_Version ();
              this->version ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subsumption" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subsumption_parser_)
            {
              this->subsumption_parser_->pre ();
              ctx.nested_parser (this->subsumption_parser_);
            }
          }
          else
          {
            if (this->subsumption_parser_ != 0)
            {
              this->subsumption_parser_->post_boolean ();
              this->subsumption ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Version_pskel.
  //
  bool TerminologyCapabilities_Version_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "isDefault" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "compositional" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "language" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "filter" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "property" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Version_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Version_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Version_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Version_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Version_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_string ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "isDefault" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->isDefault_parser_)
            {
              this->isDefault_parser_->pre ();
              ctx.nested_parser (this->isDefault_parser_);
            }
          }
          else
          {
            if (this->isDefault_parser_ != 0)
            {
              this->isDefault_parser_->post_boolean ();
              this->isDefault ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "compositional" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->compositional_parser_)
            {
              this->compositional_parser_->pre ();
              ctx.nested_parser (this->compositional_parser_);
            }
          }
          else
          {
            if (this->compositional_parser_ != 0)
            {
              this->compositional_parser_->post_boolean ();
              this->compositional ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "language" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->language_parser_)
            {
              this->language_parser_->pre ();
              ctx.nested_parser (this->language_parser_);
            }
          }
          else
          {
            if (this->language_parser_ != 0)
            {
              this->language_parser_->post_code ();
              this->language ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "filter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->filter_parser_)
            {
              this->filter_parser_->pre ();
              ctx.nested_parser (this->filter_parser_);
            }
          }
          else
          {
            if (this->filter_parser_ != 0)
            {
              this->filter_parser_->post_TerminologyCapabilities_Filter ();
              this->filter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "property" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->property_parser_)
            {
              this->property_parser_->pre ();
              ctx.nested_parser (this->property_parser_);
            }
          }
          else
          {
            if (this->property_parser_ != 0)
            {
              this->property_parser_->post_code ();
              this->property ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Filter_pskel.
  //
  bool TerminologyCapabilities_Filter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Filter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Filter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Filter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Filter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Filter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "op" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->op_parser_)
            {
              this->op_parser_->pre ();
              ctx.nested_parser (this->op_parser_);
            }
          }
          else
          {
            if (this->op_parser_ != 0)
            {
              this->op_parser_->post_code ();
              this->op ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Expansion_pskel.
  //
  bool TerminologyCapabilities_Expansion_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "hierarchical" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "paging" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "incomplete" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "parameter" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "textFilter" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Expansion_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Expansion_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Expansion_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Expansion_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "hierarchical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->hierarchical_parser_)
            {
              this->hierarchical_parser_->pre ();
              ctx.nested_parser (this->hierarchical_parser_);
            }
          }
          else
          {
            if (this->hierarchical_parser_ != 0)
            {
              this->hierarchical_parser_->post_boolean ();
              this->hierarchical ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "paging" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paging_parser_)
            {
              this->paging_parser_->pre ();
              ctx.nested_parser (this->paging_parser_);
            }
          }
          else
          {
            if (this->paging_parser_ != 0)
            {
              this->paging_parser_->post_boolean ();
              this->paging ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "incomplete" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->incomplete_parser_)
            {
              this->incomplete_parser_->pre ();
              ctx.nested_parser (this->incomplete_parser_);
            }
          }
          else
          {
            if (this->incomplete_parser_ != 0)
            {
              this->incomplete_parser_->post_boolean ();
              this->incomplete ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "parameter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parameter_parser_)
            {
              this->parameter_parser_->pre ();
              ctx.nested_parser (this->parameter_parser_);
            }
          }
          else
          {
            if (this->parameter_parser_ != 0)
            {
              this->parameter_parser_->post_TerminologyCapabilities_Parameter ();
              this->parameter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "textFilter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->textFilter_parser_)
            {
              this->textFilter_parser_->pre ();
              ctx.nested_parser (this->textFilter_parser_);
            }
          }
          else
          {
            if (this->textFilter_parser_ != 0)
            {
              this->textFilter_parser_->post_markdown ();
              this->textFilter ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Parameter_pskel.
  //
  bool TerminologyCapabilities_Parameter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Parameter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Parameter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Parameter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Parameter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Parameter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_code ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_string ();
              this->documentation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_ValidateCode_pskel.
  //
  bool TerminologyCapabilities_ValidateCode_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "translations" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_ValidateCode_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_ValidateCode_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_ValidateCode_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_ValidateCode_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_ValidateCode_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "translations" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->translations_parser_)
            {
              this->translations_parser_->pre ();
              ctx.nested_parser (this->translations_parser_);
            }
          }
          else
          {
            if (this->translations_parser_ != 0)
            {
              this->translations_parser_->post_boolean ();
              this->translations ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Translation_pskel.
  //
  bool TerminologyCapabilities_Translation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "needsMap" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Translation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Translation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Translation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Translation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Translation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "needsMap" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->needsMap_parser_)
            {
              this->needsMap_parser_->pre ();
              ctx.nested_parser (this->needsMap_parser_);
            }
          }
          else
          {
            if (this->needsMap_parser_ != 0)
            {
              this->needsMap_parser_->post_boolean ();
              this->needsMap ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for TerminologyCapabilities_Closure_pskel.
  //
  bool TerminologyCapabilities_Closure_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "translation" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &TerminologyCapabilities_Closure_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool TerminologyCapabilities_Closure_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void TerminologyCapabilities_Closure_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void TerminologyCapabilities_Closure_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void TerminologyCapabilities_Closure_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "translation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->translation_parser_)
            {
              this->translation_parser_->pre ();
              ctx.nested_parser (this->translation_parser_);
            }
          }
          else
          {
            if (this->translation_parser_ != 0)
            {
              this->translation_parser_->post_boolean ();
              this->translation ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for CodeSearchSupport_pskel.
  //
  bool CodeSearchSupport_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_CodeSearchSupport_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

