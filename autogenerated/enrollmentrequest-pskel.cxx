// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "enrollmentrequest-pskel.hxx"

namespace fhir
{
  // EnrollmentRequest_pskel
  //

  void EnrollmentRequest_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void EnrollmentRequest_pskel::
  status_parser (::fhir::FinancialResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void EnrollmentRequest_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void EnrollmentRequest_pskel::
  insurer_parser (::fhir::Reference_pskel& p)
  {
    this->insurer_parser_ = &p;
  }

  void EnrollmentRequest_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void EnrollmentRequest_pskel::
  candidate_parser (::fhir::Reference_pskel& p)
  {
    this->candidate_parser_ = &p;
  }

  void EnrollmentRequest_pskel::
  coverage_parser (::fhir::Reference_pskel& p)
  {
    this->coverage_parser_ = &p;
  }

  void EnrollmentRequest_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::FinancialResourceStatusCodes_pskel& status,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& insurer,
           ::fhir::Reference_pskel& provider,
           ::fhir::Reference_pskel& candidate,
           ::fhir::Reference_pskel& coverage)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->created_parser_ = &created;
    this->insurer_parser_ = &insurer;
    this->provider_parser_ = &provider;
    this->candidate_parser_ = &candidate;
    this->coverage_parser_ = &coverage;
  }

  EnrollmentRequest_pskel::
  EnrollmentRequest_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    EnrollmentRequest_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    created_parser_ (0),
    insurer_parser_ (0),
    provider_parser_ (0),
    candidate_parser_ (0),
    coverage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  EnrollmentRequest_pskel::
  EnrollmentRequest_pskel (EnrollmentRequest_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    EnrollmentRequest_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    created_parser_ (0),
    insurer_parser_ (0),
    provider_parser_ (0),
    candidate_parser_ (0),
    coverage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // EnrollmentRequest_pskel
  //

  void EnrollmentRequest_pskel::
  identifier ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->identifier ();
  }

  void EnrollmentRequest_pskel::
  status ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->status ();
  }

  void EnrollmentRequest_pskel::
  created ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->created ();
  }

  void EnrollmentRequest_pskel::
  insurer ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->insurer ();
  }

  void EnrollmentRequest_pskel::
  provider ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->provider ();
  }

  void EnrollmentRequest_pskel::
  candidate ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->candidate ();
  }

  void EnrollmentRequest_pskel::
  coverage ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->coverage ();
  }

  void EnrollmentRequest_pskel::
  post_EnrollmentRequest ()
  {
    if (this->EnrollmentRequest_impl_)
      this->EnrollmentRequest_impl_->post_EnrollmentRequest ();
    else
      post_DomainResource ();
  }

  void EnrollmentRequest_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->insurer_parser_)
      this->insurer_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->candidate_parser_)
      this->candidate_parser_->_reset ();

    if (this->coverage_parser_)
      this->coverage_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for EnrollmentRequest_pskel.
  //
  bool EnrollmentRequest_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "created" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "insurer" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "provider" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "candidate" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "coverage" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &EnrollmentRequest_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool EnrollmentRequest_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void EnrollmentRequest_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void EnrollmentRequest_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void EnrollmentRequest_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FinancialResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "insurer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurer_parser_)
            {
              this->insurer_parser_->pre ();
              ctx.nested_parser (this->insurer_parser_);
            }
          }
          else
          {
            if (this->insurer_parser_ != 0)
            {
              this->insurer_parser_->post_Reference ();
              this->insurer ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "candidate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->candidate_parser_)
            {
              this->candidate_parser_->pre ();
              ctx.nested_parser (this->candidate_parser_);
            }
          }
          else
          {
            if (this->candidate_parser_ != 0)
            {
              this->candidate_parser_->post_Reference ();
              this->candidate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "coverage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverage_parser_)
            {
              this->coverage_parser_->pre ();
              ctx.nested_parser (this->coverage_parser_);
            }
          }
          else
          {
            if (this->coverage_parser_ != 0)
            {
              this->coverage_parser_->post_Reference ();
              this->coverage ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

