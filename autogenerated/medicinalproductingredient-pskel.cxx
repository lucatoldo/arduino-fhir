// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "medicinalproductingredient-pskel.hxx"

namespace fhir
{
  // MedicinalProductIngredient_pskel
  //

  void MedicinalProductIngredient_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicinalProductIngredient_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void MedicinalProductIngredient_pskel::
  allergenicIndicator_parser (::fhir::boolean_pskel& p)
  {
    this->allergenicIndicator_parser_ = &p;
  }

  void MedicinalProductIngredient_pskel::
  manufacturer_parser (::fhir::Reference_pskel& p)
  {
    this->manufacturer_parser_ = &p;
  }

  void MedicinalProductIngredient_pskel::
  specifiedSubstance_parser (::fhir::MedicinalProductIngredient_SpecifiedSubstance_pskel& p)
  {
    this->specifiedSubstance_parser_ = &p;
  }

  void MedicinalProductIngredient_pskel::
  substance_parser (::fhir::MedicinalProductIngredient_Substance_pskel& p)
  {
    this->substance_parser_ = &p;
  }

  void MedicinalProductIngredient_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::boolean_pskel& allergenicIndicator,
           ::fhir::Reference_pskel& manufacturer,
           ::fhir::MedicinalProductIngredient_SpecifiedSubstance_pskel& specifiedSubstance,
           ::fhir::MedicinalProductIngredient_Substance_pskel& substance)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->role_parser_ = &role;
    this->allergenicIndicator_parser_ = &allergenicIndicator;
    this->manufacturer_parser_ = &manufacturer;
    this->specifiedSubstance_parser_ = &specifiedSubstance;
    this->substance_parser_ = &substance;
  }

  MedicinalProductIngredient_pskel::
  MedicinalProductIngredient_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MedicinalProductIngredient_impl_ (0),
    identifier_parser_ (0),
    role_parser_ (0),
    allergenicIndicator_parser_ (0),
    manufacturer_parser_ (0),
    specifiedSubstance_parser_ (0),
    substance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductIngredient_pskel::
  MedicinalProductIngredient_pskel (MedicinalProductIngredient_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MedicinalProductIngredient_impl_ (impl),
    identifier_parser_ (0),
    role_parser_ (0),
    allergenicIndicator_parser_ (0),
    manufacturer_parser_ (0),
    specifiedSubstance_parser_ (0),
    substance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductIngredient_SpecifiedSubstance_pskel
  //

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  group_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->group_parser_ = &p;
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  confidentiality_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->confidentiality_parser_ = &p;
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  strength_parser (::fhir::MedicinalProductIngredient_Strength_pskel& p)
  {
    this->strength_parser_ = &p;
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& group,
           ::fhir::CodeableConcept_pskel& confidentiality,
           ::fhir::MedicinalProductIngredient_Strength_pskel& strength)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->group_parser_ = &group;
    this->confidentiality_parser_ = &confidentiality;
    this->strength_parser_ = &strength;
  }

  MedicinalProductIngredient_SpecifiedSubstance_pskel::
  MedicinalProductIngredient_SpecifiedSubstance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductIngredient_SpecifiedSubstance_impl_ (0),
    code_parser_ (0),
    group_parser_ (0),
    confidentiality_parser_ (0),
    strength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductIngredient_SpecifiedSubstance_pskel::
  MedicinalProductIngredient_SpecifiedSubstance_pskel (MedicinalProductIngredient_SpecifiedSubstance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductIngredient_SpecifiedSubstance_impl_ (impl),
    code_parser_ (0),
    group_parser_ (0),
    confidentiality_parser_ (0),
    strength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductIngredient_Strength_pskel
  //

  void MedicinalProductIngredient_Strength_pskel::
  presentation_parser (::fhir::Ratio_pskel& p)
  {
    this->presentation_parser_ = &p;
  }

  void MedicinalProductIngredient_Strength_pskel::
  presentationLowLimit_parser (::fhir::Ratio_pskel& p)
  {
    this->presentationLowLimit_parser_ = &p;
  }

  void MedicinalProductIngredient_Strength_pskel::
  concentration_parser (::fhir::Ratio_pskel& p)
  {
    this->concentration_parser_ = &p;
  }

  void MedicinalProductIngredient_Strength_pskel::
  concentrationLowLimit_parser (::fhir::Ratio_pskel& p)
  {
    this->concentrationLowLimit_parser_ = &p;
  }

  void MedicinalProductIngredient_Strength_pskel::
  measurementPoint_parser (::fhir::string_pskel& p)
  {
    this->measurementPoint_parser_ = &p;
  }

  void MedicinalProductIngredient_Strength_pskel::
  country_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->country_parser_ = &p;
  }

  void MedicinalProductIngredient_Strength_pskel::
  referenceStrength_parser (::fhir::MedicinalProductIngredient_ReferenceStrength_pskel& p)
  {
    this->referenceStrength_parser_ = &p;
  }

  void MedicinalProductIngredient_Strength_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Ratio_pskel& presentation,
           ::fhir::Ratio_pskel& presentationLowLimit,
           ::fhir::Ratio_pskel& concentration,
           ::fhir::Ratio_pskel& concentrationLowLimit,
           ::fhir::string_pskel& measurementPoint,
           ::fhir::CodeableConcept_pskel& country,
           ::fhir::MedicinalProductIngredient_ReferenceStrength_pskel& referenceStrength)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->presentation_parser_ = &presentation;
    this->presentationLowLimit_parser_ = &presentationLowLimit;
    this->concentration_parser_ = &concentration;
    this->concentrationLowLimit_parser_ = &concentrationLowLimit;
    this->measurementPoint_parser_ = &measurementPoint;
    this->country_parser_ = &country;
    this->referenceStrength_parser_ = &referenceStrength;
  }

  MedicinalProductIngredient_Strength_pskel::
  MedicinalProductIngredient_Strength_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductIngredient_Strength_impl_ (0),
    presentation_parser_ (0),
    presentationLowLimit_parser_ (0),
    concentration_parser_ (0),
    concentrationLowLimit_parser_ (0),
    measurementPoint_parser_ (0),
    country_parser_ (0),
    referenceStrength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductIngredient_Strength_pskel::
  MedicinalProductIngredient_Strength_pskel (MedicinalProductIngredient_Strength_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductIngredient_Strength_impl_ (impl),
    presentation_parser_ (0),
    presentationLowLimit_parser_ (0),
    concentration_parser_ (0),
    concentrationLowLimit_parser_ (0),
    measurementPoint_parser_ (0),
    country_parser_ (0),
    referenceStrength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductIngredient_ReferenceStrength_pskel
  //

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  substance_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->substance_parser_ = &p;
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  strength_parser (::fhir::Ratio_pskel& p)
  {
    this->strength_parser_ = &p;
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  strengthLowLimit_parser (::fhir::Ratio_pskel& p)
  {
    this->strengthLowLimit_parser_ = &p;
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  measurementPoint_parser (::fhir::string_pskel& p)
  {
    this->measurementPoint_parser_ = &p;
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  country_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->country_parser_ = &p;
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& substance,
           ::fhir::Ratio_pskel& strength,
           ::fhir::Ratio_pskel& strengthLowLimit,
           ::fhir::string_pskel& measurementPoint,
           ::fhir::CodeableConcept_pskel& country)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->substance_parser_ = &substance;
    this->strength_parser_ = &strength;
    this->strengthLowLimit_parser_ = &strengthLowLimit;
    this->measurementPoint_parser_ = &measurementPoint;
    this->country_parser_ = &country;
  }

  MedicinalProductIngredient_ReferenceStrength_pskel::
  MedicinalProductIngredient_ReferenceStrength_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductIngredient_ReferenceStrength_impl_ (0),
    substance_parser_ (0),
    strength_parser_ (0),
    strengthLowLimit_parser_ (0),
    measurementPoint_parser_ (0),
    country_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductIngredient_ReferenceStrength_pskel::
  MedicinalProductIngredient_ReferenceStrength_pskel (MedicinalProductIngredient_ReferenceStrength_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductIngredient_ReferenceStrength_impl_ (impl),
    substance_parser_ (0),
    strength_parser_ (0),
    strengthLowLimit_parser_ (0),
    measurementPoint_parser_ (0),
    country_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicinalProductIngredient_Substance_pskel
  //

  void MedicinalProductIngredient_Substance_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void MedicinalProductIngredient_Substance_pskel::
  strength_parser (::fhir::MedicinalProductIngredient_Strength_pskel& p)
  {
    this->strength_parser_ = &p;
  }

  void MedicinalProductIngredient_Substance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::MedicinalProductIngredient_Strength_pskel& strength)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->strength_parser_ = &strength;
  }

  MedicinalProductIngredient_Substance_pskel::
  MedicinalProductIngredient_Substance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicinalProductIngredient_Substance_impl_ (0),
    code_parser_ (0),
    strength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicinalProductIngredient_Substance_pskel::
  MedicinalProductIngredient_Substance_pskel (MedicinalProductIngredient_Substance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicinalProductIngredient_Substance_impl_ (impl),
    code_parser_ (0),
    strength_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MedicinalProductIngredient_pskel
  //

  void MedicinalProductIngredient_pskel::
  identifier ()
  {
    if (this->MedicinalProductIngredient_impl_)
      this->MedicinalProductIngredient_impl_->identifier ();
  }

  void MedicinalProductIngredient_pskel::
  role ()
  {
    if (this->MedicinalProductIngredient_impl_)
      this->MedicinalProductIngredient_impl_->role ();
  }

  void MedicinalProductIngredient_pskel::
  allergenicIndicator ()
  {
    if (this->MedicinalProductIngredient_impl_)
      this->MedicinalProductIngredient_impl_->allergenicIndicator ();
  }

  void MedicinalProductIngredient_pskel::
  manufacturer ()
  {
    if (this->MedicinalProductIngredient_impl_)
      this->MedicinalProductIngredient_impl_->manufacturer ();
  }

  void MedicinalProductIngredient_pskel::
  specifiedSubstance ()
  {
    if (this->MedicinalProductIngredient_impl_)
      this->MedicinalProductIngredient_impl_->specifiedSubstance ();
  }

  void MedicinalProductIngredient_pskel::
  substance ()
  {
    if (this->MedicinalProductIngredient_impl_)
      this->MedicinalProductIngredient_impl_->substance ();
  }

  void MedicinalProductIngredient_pskel::
  post_MedicinalProductIngredient ()
  {
    if (this->MedicinalProductIngredient_impl_)
      this->MedicinalProductIngredient_impl_->post_MedicinalProductIngredient ();
    else
      post_DomainResource ();
  }

  void MedicinalProductIngredient_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->allergenicIndicator_parser_)
      this->allergenicIndicator_parser_->_reset ();

    if (this->manufacturer_parser_)
      this->manufacturer_parser_->_reset ();

    if (this->specifiedSubstance_parser_)
      this->specifiedSubstance_parser_->_reset ();

    if (this->substance_parser_)
      this->substance_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductIngredient_SpecifiedSubstance_pskel
  //

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  code ()
  {
    if (this->MedicinalProductIngredient_SpecifiedSubstance_impl_)
      this->MedicinalProductIngredient_SpecifiedSubstance_impl_->code ();
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  group ()
  {
    if (this->MedicinalProductIngredient_SpecifiedSubstance_impl_)
      this->MedicinalProductIngredient_SpecifiedSubstance_impl_->group ();
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  confidentiality ()
  {
    if (this->MedicinalProductIngredient_SpecifiedSubstance_impl_)
      this->MedicinalProductIngredient_SpecifiedSubstance_impl_->confidentiality ();
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  strength ()
  {
    if (this->MedicinalProductIngredient_SpecifiedSubstance_impl_)
      this->MedicinalProductIngredient_SpecifiedSubstance_impl_->strength ();
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  post_MedicinalProductIngredient_SpecifiedSubstance ()
  {
    if (this->MedicinalProductIngredient_SpecifiedSubstance_impl_)
      this->MedicinalProductIngredient_SpecifiedSubstance_impl_->post_MedicinalProductIngredient_SpecifiedSubstance ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->group_parser_)
      this->group_parser_->_reset ();

    if (this->confidentiality_parser_)
      this->confidentiality_parser_->_reset ();

    if (this->strength_parser_)
      this->strength_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductIngredient_Strength_pskel
  //

  void MedicinalProductIngredient_Strength_pskel::
  presentation ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->presentation ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  presentationLowLimit ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->presentationLowLimit ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  concentration ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->concentration ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  concentrationLowLimit ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->concentrationLowLimit ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  measurementPoint ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->measurementPoint ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  country ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->country ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  referenceStrength ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->referenceStrength ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  post_MedicinalProductIngredient_Strength ()
  {
    if (this->MedicinalProductIngredient_Strength_impl_)
      this->MedicinalProductIngredient_Strength_impl_->post_MedicinalProductIngredient_Strength ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->presentation_parser_)
      this->presentation_parser_->_reset ();

    if (this->presentationLowLimit_parser_)
      this->presentationLowLimit_parser_->_reset ();

    if (this->concentration_parser_)
      this->concentration_parser_->_reset ();

    if (this->concentrationLowLimit_parser_)
      this->concentrationLowLimit_parser_->_reset ();

    if (this->measurementPoint_parser_)
      this->measurementPoint_parser_->_reset ();

    if (this->country_parser_)
      this->country_parser_->_reset ();

    if (this->referenceStrength_parser_)
      this->referenceStrength_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductIngredient_ReferenceStrength_pskel
  //

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  substance ()
  {
    if (this->MedicinalProductIngredient_ReferenceStrength_impl_)
      this->MedicinalProductIngredient_ReferenceStrength_impl_->substance ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  strength ()
  {
    if (this->MedicinalProductIngredient_ReferenceStrength_impl_)
      this->MedicinalProductIngredient_ReferenceStrength_impl_->strength ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  strengthLowLimit ()
  {
    if (this->MedicinalProductIngredient_ReferenceStrength_impl_)
      this->MedicinalProductIngredient_ReferenceStrength_impl_->strengthLowLimit ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  measurementPoint ()
  {
    if (this->MedicinalProductIngredient_ReferenceStrength_impl_)
      this->MedicinalProductIngredient_ReferenceStrength_impl_->measurementPoint ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  country ()
  {
    if (this->MedicinalProductIngredient_ReferenceStrength_impl_)
      this->MedicinalProductIngredient_ReferenceStrength_impl_->country ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  post_MedicinalProductIngredient_ReferenceStrength ()
  {
    if (this->MedicinalProductIngredient_ReferenceStrength_impl_)
      this->MedicinalProductIngredient_ReferenceStrength_impl_->post_MedicinalProductIngredient_ReferenceStrength ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->substance_parser_)
      this->substance_parser_->_reset ();

    if (this->strength_parser_)
      this->strength_parser_->_reset ();

    if (this->strengthLowLimit_parser_)
      this->strengthLowLimit_parser_->_reset ();

    if (this->measurementPoint_parser_)
      this->measurementPoint_parser_->_reset ();

    if (this->country_parser_)
      this->country_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicinalProductIngredient_Substance_pskel
  //

  void MedicinalProductIngredient_Substance_pskel::
  code ()
  {
    if (this->MedicinalProductIngredient_Substance_impl_)
      this->MedicinalProductIngredient_Substance_impl_->code ();
  }

  void MedicinalProductIngredient_Substance_pskel::
  strength ()
  {
    if (this->MedicinalProductIngredient_Substance_impl_)
      this->MedicinalProductIngredient_Substance_impl_->strength ();
  }

  void MedicinalProductIngredient_Substance_pskel::
  post_MedicinalProductIngredient_Substance ()
  {
    if (this->MedicinalProductIngredient_Substance_impl_)
      this->MedicinalProductIngredient_Substance_impl_->post_MedicinalProductIngredient_Substance ();
    else
      post_BackboneElement ();
  }

  void MedicinalProductIngredient_Substance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->strength_parser_)
      this->strength_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MedicinalProductIngredient_pskel.
  //
  bool MedicinalProductIngredient_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "role" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductIngredient_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductIngredient_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductIngredient_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductIngredient_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductIngredient_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "allergenicIndicator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allergenicIndicator_parser_)
            {
              this->allergenicIndicator_parser_->pre ();
              ctx.nested_parser (this->allergenicIndicator_parser_);
            }
          }
          else
          {
            if (this->allergenicIndicator_parser_ != 0)
            {
              this->allergenicIndicator_parser_->post_boolean ();
              this->allergenicIndicator ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "manufacturer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturer_parser_)
            {
              this->manufacturer_parser_->pre ();
              ctx.nested_parser (this->manufacturer_parser_);
            }
          }
          else
          {
            if (this->manufacturer_parser_ != 0)
            {
              this->manufacturer_parser_->post_Reference ();
              this->manufacturer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "specifiedSubstance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specifiedSubstance_parser_)
            {
              this->specifiedSubstance_parser_->pre ();
              ctx.nested_parser (this->specifiedSubstance_parser_);
            }
          }
          else
          {
            if (this->specifiedSubstance_parser_ != 0)
            {
              this->specifiedSubstance_parser_->post_MedicinalProductIngredient_SpecifiedSubstance ();
              this->specifiedSubstance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "substance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substance_parser_)
            {
              this->substance_parser_->pre ();
              ctx.nested_parser (this->substance_parser_);
            }
          }
          else
          {
            if (this->substance_parser_ != 0)
            {
              this->substance_parser_->post_MedicinalProductIngredient_Substance ();
              this->substance ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductIngredient_SpecifiedSubstance_pskel.
  //
  bool MedicinalProductIngredient_SpecifiedSubstance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductIngredient_SpecifiedSubstance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductIngredient_SpecifiedSubstance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductIngredient_SpecifiedSubstance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "group" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->group_parser_)
            {
              this->group_parser_->pre ();
              ctx.nested_parser (this->group_parser_);
            }
          }
          else
          {
            if (this->group_parser_ != 0)
            {
              this->group_parser_->post_CodeableConcept ();
              this->group ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "confidentiality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->confidentiality_parser_)
            {
              this->confidentiality_parser_->pre ();
              ctx.nested_parser (this->confidentiality_parser_);
            }
          }
          else
          {
            if (this->confidentiality_parser_ != 0)
            {
              this->confidentiality_parser_->post_CodeableConcept ();
              this->confidentiality ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "strength" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->strength_parser_)
            {
              this->strength_parser_->pre ();
              ctx.nested_parser (this->strength_parser_);
            }
          }
          else
          {
            if (this->strength_parser_ != 0)
            {
              this->strength_parser_->post_MedicinalProductIngredient_Strength ();
              this->strength ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductIngredient_Strength_pskel.
  //
  bool MedicinalProductIngredient_Strength_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "presentation" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductIngredient_Strength_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductIngredient_Strength_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductIngredient_Strength_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductIngredient_Strength_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "presentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->presentation_parser_)
            {
              this->presentation_parser_->pre ();
              ctx.nested_parser (this->presentation_parser_);
            }
          }
          else
          {
            if (this->presentation_parser_ != 0)
            {
              this->presentation_parser_->post_Ratio ();
              this->presentation ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "presentationLowLimit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->presentationLowLimit_parser_)
            {
              this->presentationLowLimit_parser_->pre ();
              ctx.nested_parser (this->presentationLowLimit_parser_);
            }
          }
          else
          {
            if (this->presentationLowLimit_parser_ != 0)
            {
              this->presentationLowLimit_parser_->post_Ratio ();
              this->presentationLowLimit ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "concentration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->concentration_parser_)
            {
              this->concentration_parser_->pre ();
              ctx.nested_parser (this->concentration_parser_);
            }
          }
          else
          {
            if (this->concentration_parser_ != 0)
            {
              this->concentration_parser_->post_Ratio ();
              this->concentration ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "concentrationLowLimit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->concentrationLowLimit_parser_)
            {
              this->concentrationLowLimit_parser_->pre ();
              ctx.nested_parser (this->concentrationLowLimit_parser_);
            }
          }
          else
          {
            if (this->concentrationLowLimit_parser_ != 0)
            {
              this->concentrationLowLimit_parser_->post_Ratio ();
              this->concentrationLowLimit ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "measurementPoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measurementPoint_parser_)
            {
              this->measurementPoint_parser_->pre ();
              ctx.nested_parser (this->measurementPoint_parser_);
            }
          }
          else
          {
            if (this->measurementPoint_parser_ != 0)
            {
              this->measurementPoint_parser_->post_string ();
              this->measurementPoint ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "country" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->country_parser_)
            {
              this->country_parser_->pre ();
              ctx.nested_parser (this->country_parser_);
            }
          }
          else
          {
            if (this->country_parser_ != 0)
            {
              this->country_parser_->post_CodeableConcept ();
              this->country ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "referenceStrength" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referenceStrength_parser_)
            {
              this->referenceStrength_parser_->pre ();
              ctx.nested_parser (this->referenceStrength_parser_);
            }
          }
          else
          {
            if (this->referenceStrength_parser_ != 0)
            {
              this->referenceStrength_parser_->post_MedicinalProductIngredient_ReferenceStrength ();
              this->referenceStrength ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductIngredient_ReferenceStrength_pskel.
  //
  bool MedicinalProductIngredient_ReferenceStrength_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "substance" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "strength" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductIngredient_ReferenceStrength_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductIngredient_ReferenceStrength_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductIngredient_ReferenceStrength_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "substance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substance_parser_)
            {
              this->substance_parser_->pre ();
              ctx.nested_parser (this->substance_parser_);
            }
          }
          else
          {
            if (this->substance_parser_ != 0)
            {
              this->substance_parser_->post_CodeableConcept ();
              this->substance ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "strength" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->strength_parser_)
            {
              this->strength_parser_->pre ();
              ctx.nested_parser (this->strength_parser_);
            }
          }
          else
          {
            if (this->strength_parser_ != 0)
            {
              this->strength_parser_->post_Ratio ();
              this->strength ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "strengthLowLimit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->strengthLowLimit_parser_)
            {
              this->strengthLowLimit_parser_->pre ();
              ctx.nested_parser (this->strengthLowLimit_parser_);
            }
          }
          else
          {
            if (this->strengthLowLimit_parser_ != 0)
            {
              this->strengthLowLimit_parser_->post_Ratio ();
              this->strengthLowLimit ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "measurementPoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->measurementPoint_parser_)
            {
              this->measurementPoint_parser_->pre ();
              ctx.nested_parser (this->measurementPoint_parser_);
            }
          }
          else
          {
            if (this->measurementPoint_parser_ != 0)
            {
              this->measurementPoint_parser_->post_string ();
              this->measurementPoint ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "country" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->country_parser_)
            {
              this->country_parser_->pre ();
              ctx.nested_parser (this->country_parser_);
            }
          }
          else
          {
            if (this->country_parser_ != 0)
            {
              this->country_parser_->post_CodeableConcept ();
              this->country ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicinalProductIngredient_Substance_pskel.
  //
  bool MedicinalProductIngredient_Substance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicinalProductIngredient_Substance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicinalProductIngredient_Substance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicinalProductIngredient_Substance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicinalProductIngredient_Substance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicinalProductIngredient_Substance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "strength" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->strength_parser_)
            {
              this->strength_parser_->pre ();
              ctx.nested_parser (this->strength_parser_);
            }
          }
          else
          {
            if (this->strength_parser_ != 0)
            {
              this->strength_parser_->post_MedicinalProductIngredient_Strength ();
              this->strength ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

