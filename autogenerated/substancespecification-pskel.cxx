// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "substancespecification-pskel.hxx"

namespace fhir
{
  // SubstanceSpecification_pskel
  //

  void SubstanceSpecification_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  status_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  domain_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->domain_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  moiety_parser (::fhir::SubstanceSpecification_Moiety_pskel& p)
  {
    this->moiety_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  property_parser (::fhir::SubstanceSpecification_Property_pskel& p)
  {
    this->property_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  referenceInformation_parser (::fhir::Reference_pskel& p)
  {
    this->referenceInformation_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  structure_parser (::fhir::SubstanceSpecification_Structure_pskel& p)
  {
    this->structure_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  code_parser (::fhir::SubstanceSpecification_Code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  name_parser (::fhir::SubstanceSpecification_Name_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel& p)
  {
    this->molecularWeight_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  relationship_parser (::fhir::SubstanceSpecification_Relationship_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  nucleicAcid_parser (::fhir::Reference_pskel& p)
  {
    this->nucleicAcid_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  polymer_parser (::fhir::Reference_pskel& p)
  {
    this->polymer_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  protein_parser (::fhir::Reference_pskel& p)
  {
    this->protein_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  sourceMaterial_parser (::fhir::Reference_pskel& p)
  {
    this->sourceMaterial_parser_ = &p;
  }

  void SubstanceSpecification_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& status,
           ::fhir::CodeableConcept_pskel& domain,
           ::fhir::string_pskel& description,
           ::fhir::Reference_pskel& source,
           ::fhir::string_pskel& comment,
           ::fhir::SubstanceSpecification_Moiety_pskel& moiety,
           ::fhir::SubstanceSpecification_Property_pskel& property,
           ::fhir::Reference_pskel& referenceInformation,
           ::fhir::SubstanceSpecification_Structure_pskel& structure,
           ::fhir::SubstanceSpecification_Code_pskel& code,
           ::fhir::SubstanceSpecification_Name_pskel& name,
           ::fhir::SubstanceSpecification_MolecularWeight_pskel& molecularWeight,
           ::fhir::SubstanceSpecification_Relationship_pskel& relationship,
           ::fhir::Reference_pskel& nucleicAcid,
           ::fhir::Reference_pskel& polymer,
           ::fhir::Reference_pskel& protein,
           ::fhir::Reference_pskel& sourceMaterial)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->type_parser_ = &type;
    this->status_parser_ = &status;
    this->domain_parser_ = &domain;
    this->description_parser_ = &description;
    this->source_parser_ = &source;
    this->comment_parser_ = &comment;
    this->moiety_parser_ = &moiety;
    this->property_parser_ = &property;
    this->referenceInformation_parser_ = &referenceInformation;
    this->structure_parser_ = &structure;
    this->code_parser_ = &code;
    this->name_parser_ = &name;
    this->molecularWeight_parser_ = &molecularWeight;
    this->relationship_parser_ = &relationship;
    this->nucleicAcid_parser_ = &nucleicAcid;
    this->polymer_parser_ = &polymer;
    this->protein_parser_ = &protein;
    this->sourceMaterial_parser_ = &sourceMaterial;
  }

  SubstanceSpecification_pskel::
  SubstanceSpecification_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    SubstanceSpecification_impl_ (0),
    identifier_parser_ (0),
    type_parser_ (0),
    status_parser_ (0),
    domain_parser_ (0),
    description_parser_ (0),
    source_parser_ (0),
    comment_parser_ (0),
    moiety_parser_ (0),
    property_parser_ (0),
    referenceInformation_parser_ (0),
    structure_parser_ (0),
    code_parser_ (0),
    name_parser_ (0),
    molecularWeight_parser_ (0),
    relationship_parser_ (0),
    nucleicAcid_parser_ (0),
    polymer_parser_ (0),
    protein_parser_ (0),
    sourceMaterial_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_pskel::
  SubstanceSpecification_pskel (SubstanceSpecification_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    SubstanceSpecification_impl_ (impl),
    identifier_parser_ (0),
    type_parser_ (0),
    status_parser_ (0),
    domain_parser_ (0),
    description_parser_ (0),
    source_parser_ (0),
    comment_parser_ (0),
    moiety_parser_ (0),
    property_parser_ (0),
    referenceInformation_parser_ (0),
    structure_parser_ (0),
    code_parser_ (0),
    name_parser_ (0),
    molecularWeight_parser_ (0),
    relationship_parser_ (0),
    nucleicAcid_parser_ (0),
    polymer_parser_ (0),
    protein_parser_ (0),
    sourceMaterial_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Moiety_pskel
  //

  void SubstanceSpecification_Moiety_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  stereochemistry_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->stereochemistry_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  opticalActivity_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->opticalActivity_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  molecularFormula_parser (::fhir::string_pskel& p)
  {
    this->molecularFormula_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  amountQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->amountQuantity_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  amountString_parser (::fhir::string_pskel& p)
  {
    this->amountString_parser_ = &p;
  }

  void SubstanceSpecification_Moiety_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& name,
           ::fhir::CodeableConcept_pskel& stereochemistry,
           ::fhir::CodeableConcept_pskel& opticalActivity,
           ::fhir::string_pskel& molecularFormula,
           ::fhir::Quantity_pskel& amountQuantity,
           ::fhir::string_pskel& amountString)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->role_parser_ = &role;
    this->identifier_parser_ = &identifier;
    this->name_parser_ = &name;
    this->stereochemistry_parser_ = &stereochemistry;
    this->opticalActivity_parser_ = &opticalActivity;
    this->molecularFormula_parser_ = &molecularFormula;
    this->amountQuantity_parser_ = &amountQuantity;
    this->amountString_parser_ = &amountString;
  }

  SubstanceSpecification_Moiety_pskel::
  SubstanceSpecification_Moiety_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Moiety_impl_ (0),
    role_parser_ (0),
    identifier_parser_ (0),
    name_parser_ (0),
    stereochemistry_parser_ (0),
    opticalActivity_parser_ (0),
    molecularFormula_parser_ (0),
    amountQuantity_parser_ (0),
    amountString_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Moiety_pskel::
  SubstanceSpecification_Moiety_pskel (SubstanceSpecification_Moiety_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Moiety_impl_ (impl),
    role_parser_ (0),
    identifier_parser_ (0),
    name_parser_ (0),
    stereochemistry_parser_ (0),
    opticalActivity_parser_ (0),
    molecularFormula_parser_ (0),
    amountQuantity_parser_ (0),
    amountString_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Property_pskel
  //

  void SubstanceSpecification_Property_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void SubstanceSpecification_Property_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void SubstanceSpecification_Property_pskel::
  parameters_parser (::fhir::string_pskel& p)
  {
    this->parameters_parser_ = &p;
  }

  void SubstanceSpecification_Property_pskel::
  definingSubstanceReference_parser (::fhir::Reference_pskel& p)
  {
    this->definingSubstanceReference_parser_ = &p;
  }

  void SubstanceSpecification_Property_pskel::
  definingSubstanceCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->definingSubstanceCodeableConcept_parser_ = &p;
  }

  void SubstanceSpecification_Property_pskel::
  amountQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->amountQuantity_parser_ = &p;
  }

  void SubstanceSpecification_Property_pskel::
  amountString_parser (::fhir::string_pskel& p)
  {
    this->amountString_parser_ = &p;
  }

  void SubstanceSpecification_Property_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::string_pskel& parameters,
           ::fhir::Reference_pskel& definingSubstanceReference,
           ::fhir::CodeableConcept_pskel& definingSubstanceCodeableConcept,
           ::fhir::Quantity_pskel& amountQuantity,
           ::fhir::string_pskel& amountString)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->code_parser_ = &code;
    this->parameters_parser_ = &parameters;
    this->definingSubstanceReference_parser_ = &definingSubstanceReference;
    this->definingSubstanceCodeableConcept_parser_ = &definingSubstanceCodeableConcept;
    this->amountQuantity_parser_ = &amountQuantity;
    this->amountString_parser_ = &amountString;
  }

  SubstanceSpecification_Property_pskel::
  SubstanceSpecification_Property_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Property_impl_ (0),
    category_parser_ (0),
    code_parser_ (0),
    parameters_parser_ (0),
    definingSubstanceReference_parser_ (0),
    definingSubstanceCodeableConcept_parser_ (0),
    amountQuantity_parser_ (0),
    amountString_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Property_pskel::
  SubstanceSpecification_Property_pskel (SubstanceSpecification_Property_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Property_impl_ (impl),
    category_parser_ (0),
    code_parser_ (0),
    parameters_parser_ (0),
    definingSubstanceReference_parser_ (0),
    definingSubstanceCodeableConcept_parser_ (0),
    amountQuantity_parser_ (0),
    amountString_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Structure_pskel
  //

  void SubstanceSpecification_Structure_pskel::
  stereochemistry_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->stereochemistry_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  opticalActivity_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->opticalActivity_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  molecularFormula_parser (::fhir::string_pskel& p)
  {
    this->molecularFormula_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  molecularFormulaByMoiety_parser (::fhir::string_pskel& p)
  {
    this->molecularFormulaByMoiety_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  isotope_parser (::fhir::SubstanceSpecification_Isotope_pskel& p)
  {
    this->isotope_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel& p)
  {
    this->molecularWeight_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  representation_parser (::fhir::SubstanceSpecification_Representation_pskel& p)
  {
    this->representation_parser_ = &p;
  }

  void SubstanceSpecification_Structure_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& stereochemistry,
           ::fhir::CodeableConcept_pskel& opticalActivity,
           ::fhir::string_pskel& molecularFormula,
           ::fhir::string_pskel& molecularFormulaByMoiety,
           ::fhir::SubstanceSpecification_Isotope_pskel& isotope,
           ::fhir::SubstanceSpecification_MolecularWeight_pskel& molecularWeight,
           ::fhir::Reference_pskel& source,
           ::fhir::SubstanceSpecification_Representation_pskel& representation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->stereochemistry_parser_ = &stereochemistry;
    this->opticalActivity_parser_ = &opticalActivity;
    this->molecularFormula_parser_ = &molecularFormula;
    this->molecularFormulaByMoiety_parser_ = &molecularFormulaByMoiety;
    this->isotope_parser_ = &isotope;
    this->molecularWeight_parser_ = &molecularWeight;
    this->source_parser_ = &source;
    this->representation_parser_ = &representation;
  }

  SubstanceSpecification_Structure_pskel::
  SubstanceSpecification_Structure_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Structure_impl_ (0),
    stereochemistry_parser_ (0),
    opticalActivity_parser_ (0),
    molecularFormula_parser_ (0),
    molecularFormulaByMoiety_parser_ (0),
    isotope_parser_ (0),
    molecularWeight_parser_ (0),
    source_parser_ (0),
    representation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Structure_pskel::
  SubstanceSpecification_Structure_pskel (SubstanceSpecification_Structure_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Structure_impl_ (impl),
    stereochemistry_parser_ (0),
    opticalActivity_parser_ (0),
    molecularFormula_parser_ (0),
    molecularFormulaByMoiety_parser_ (0),
    isotope_parser_ (0),
    molecularWeight_parser_ (0),
    source_parser_ (0),
    representation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Isotope_pskel
  //

  void SubstanceSpecification_Isotope_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void SubstanceSpecification_Isotope_pskel::
  name_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void SubstanceSpecification_Isotope_pskel::
  substitution_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->substitution_parser_ = &p;
  }

  void SubstanceSpecification_Isotope_pskel::
  halfLife_parser (::fhir::Quantity_pskel& p)
  {
    this->halfLife_parser_ = &p;
  }

  void SubstanceSpecification_Isotope_pskel::
  molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel& p)
  {
    this->molecularWeight_parser_ = &p;
  }

  void SubstanceSpecification_Isotope_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& name,
           ::fhir::CodeableConcept_pskel& substitution,
           ::fhir::Quantity_pskel& halfLife,
           ::fhir::SubstanceSpecification_MolecularWeight_pskel& molecularWeight)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->name_parser_ = &name;
    this->substitution_parser_ = &substitution;
    this->halfLife_parser_ = &halfLife;
    this->molecularWeight_parser_ = &molecularWeight;
  }

  SubstanceSpecification_Isotope_pskel::
  SubstanceSpecification_Isotope_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Isotope_impl_ (0),
    identifier_parser_ (0),
    name_parser_ (0),
    substitution_parser_ (0),
    halfLife_parser_ (0),
    molecularWeight_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Isotope_pskel::
  SubstanceSpecification_Isotope_pskel (SubstanceSpecification_Isotope_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Isotope_impl_ (impl),
    identifier_parser_ (0),
    name_parser_ (0),
    substitution_parser_ (0),
    halfLife_parser_ (0),
    molecularWeight_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_MolecularWeight_pskel
  //

  void SubstanceSpecification_MolecularWeight_pskel::
  method_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->method_parser_ = &p;
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  amount_parser (::fhir::Quantity_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& method,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Quantity_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->method_parser_ = &method;
    this->type_parser_ = &type;
    this->amount_parser_ = &amount;
  }

  SubstanceSpecification_MolecularWeight_pskel::
  SubstanceSpecification_MolecularWeight_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_MolecularWeight_impl_ (0),
    method_parser_ (0),
    type_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_MolecularWeight_pskel::
  SubstanceSpecification_MolecularWeight_pskel (SubstanceSpecification_MolecularWeight_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_MolecularWeight_impl_ (impl),
    method_parser_ (0),
    type_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Representation_pskel
  //

  void SubstanceSpecification_Representation_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstanceSpecification_Representation_pskel::
  representation_parser (::fhir::string_pskel& p)
  {
    this->representation_parser_ = &p;
  }

  void SubstanceSpecification_Representation_pskel::
  attachment_parser (::fhir::Attachment_pskel& p)
  {
    this->attachment_parser_ = &p;
  }

  void SubstanceSpecification_Representation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::string_pskel& representation,
           ::fhir::Attachment_pskel& attachment)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->representation_parser_ = &representation;
    this->attachment_parser_ = &attachment;
  }

  SubstanceSpecification_Representation_pskel::
  SubstanceSpecification_Representation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Representation_impl_ (0),
    type_parser_ (0),
    representation_parser_ (0),
    attachment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Representation_pskel::
  SubstanceSpecification_Representation_pskel (SubstanceSpecification_Representation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Representation_impl_ (impl),
    type_parser_ (0),
    representation_parser_ (0),
    attachment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Code_pskel
  //

  void SubstanceSpecification_Code_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void SubstanceSpecification_Code_pskel::
  status_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void SubstanceSpecification_Code_pskel::
  statusDate_parser (::fhir::dateTime_pskel& p)
  {
    this->statusDate_parser_ = &p;
  }

  void SubstanceSpecification_Code_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void SubstanceSpecification_Code_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceSpecification_Code_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::CodeableConcept_pskel& status,
           ::fhir::dateTime_pskel& statusDate,
           ::fhir::string_pskel& comment,
           ::fhir::Reference_pskel& source)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->status_parser_ = &status;
    this->statusDate_parser_ = &statusDate;
    this->comment_parser_ = &comment;
    this->source_parser_ = &source;
  }

  SubstanceSpecification_Code_pskel::
  SubstanceSpecification_Code_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Code_impl_ (0),
    code_parser_ (0),
    status_parser_ (0),
    statusDate_parser_ (0),
    comment_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Code_pskel::
  SubstanceSpecification_Code_pskel (SubstanceSpecification_Code_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Code_impl_ (impl),
    code_parser_ (0),
    status_parser_ (0),
    statusDate_parser_ (0),
    comment_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Name_pskel
  //

  void SubstanceSpecification_Name_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  status_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  preferred_parser (::fhir::boolean_pskel& p)
  {
    this->preferred_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  language_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->language_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  domain_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->domain_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  synonym_parser (::fhir::SubstanceSpecification_Name_pskel& p)
  {
    this->synonym_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  translation_parser (::fhir::SubstanceSpecification_Name_pskel& p)
  {
    this->translation_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  official_parser (::fhir::SubstanceSpecification_Official_pskel& p)
  {
    this->official_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceSpecification_Name_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& status,
           ::fhir::boolean_pskel& preferred,
           ::fhir::CodeableConcept_pskel& language,
           ::fhir::CodeableConcept_pskel& domain,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::SubstanceSpecification_Name_pskel& synonym,
           ::fhir::SubstanceSpecification_Name_pskel& translation,
           ::fhir::SubstanceSpecification_Official_pskel& official,
           ::fhir::Reference_pskel& source)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->type_parser_ = &type;
    this->status_parser_ = &status;
    this->preferred_parser_ = &preferred;
    this->language_parser_ = &language;
    this->domain_parser_ = &domain;
    this->jurisdiction_parser_ = &jurisdiction;
    this->synonym_parser_ = &synonym;
    this->translation_parser_ = &translation;
    this->official_parser_ = &official;
    this->source_parser_ = &source;
  }

  SubstanceSpecification_Name_pskel::
  SubstanceSpecification_Name_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Name_impl_ (0),
    name_parser_ (0),
    type_parser_ (0),
    status_parser_ (0),
    preferred_parser_ (0),
    language_parser_ (0),
    domain_parser_ (0),
    jurisdiction_parser_ (0),
    synonym_parser_ (0),
    translation_parser_ (0),
    official_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Name_pskel::
  SubstanceSpecification_Name_pskel (SubstanceSpecification_Name_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Name_impl_ (impl),
    name_parser_ (0),
    type_parser_ (0),
    status_parser_ (0),
    preferred_parser_ (0),
    language_parser_ (0),
    domain_parser_ (0),
    jurisdiction_parser_ (0),
    synonym_parser_ (0),
    translation_parser_ (0),
    official_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Official_pskel
  //

  void SubstanceSpecification_Official_pskel::
  authority_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->authority_parser_ = &p;
  }

  void SubstanceSpecification_Official_pskel::
  status_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void SubstanceSpecification_Official_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void SubstanceSpecification_Official_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& authority,
           ::fhir::CodeableConcept_pskel& status,
           ::fhir::dateTime_pskel& date)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->authority_parser_ = &authority;
    this->status_parser_ = &status;
    this->date_parser_ = &date;
  }

  SubstanceSpecification_Official_pskel::
  SubstanceSpecification_Official_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Official_impl_ (0),
    authority_parser_ (0),
    status_parser_ (0),
    date_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Official_pskel::
  SubstanceSpecification_Official_pskel (SubstanceSpecification_Official_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Official_impl_ (impl),
    authority_parser_ (0),
    status_parser_ (0),
    date_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceSpecification_Relationship_pskel
  //

  void SubstanceSpecification_Relationship_pskel::
  substanceReference_parser (::fhir::Reference_pskel& p)
  {
    this->substanceReference_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  substanceCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->substanceCodeableConcept_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  relationship_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  isDefining_parser (::fhir::boolean_pskel& p)
  {
    this->isDefining_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  amountQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->amountQuantity_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  amountRange_parser (::fhir::Range_pskel& p)
  {
    this->amountRange_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  amountRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->amountRatio_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  amountString_parser (::fhir::string_pskel& p)
  {
    this->amountString_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  amountRatioLowLimit_parser (::fhir::Ratio_pskel& p)
  {
    this->amountRatioLowLimit_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  amountType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->amountType_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceSpecification_Relationship_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& substanceReference,
           ::fhir::CodeableConcept_pskel& substanceCodeableConcept,
           ::fhir::CodeableConcept_pskel& relationship,
           ::fhir::boolean_pskel& isDefining,
           ::fhir::Quantity_pskel& amountQuantity,
           ::fhir::Range_pskel& amountRange,
           ::fhir::Ratio_pskel& amountRatio,
           ::fhir::string_pskel& amountString,
           ::fhir::Ratio_pskel& amountRatioLowLimit,
           ::fhir::CodeableConcept_pskel& amountType,
           ::fhir::Reference_pskel& source)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->substanceReference_parser_ = &substanceReference;
    this->substanceCodeableConcept_parser_ = &substanceCodeableConcept;
    this->relationship_parser_ = &relationship;
    this->isDefining_parser_ = &isDefining;
    this->amountQuantity_parser_ = &amountQuantity;
    this->amountRange_parser_ = &amountRange;
    this->amountRatio_parser_ = &amountRatio;
    this->amountString_parser_ = &amountString;
    this->amountRatioLowLimit_parser_ = &amountRatioLowLimit;
    this->amountType_parser_ = &amountType;
    this->source_parser_ = &source;
  }

  SubstanceSpecification_Relationship_pskel::
  SubstanceSpecification_Relationship_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceSpecification_Relationship_impl_ (0),
    substanceReference_parser_ (0),
    substanceCodeableConcept_parser_ (0),
    relationship_parser_ (0),
    isDefining_parser_ (0),
    amountQuantity_parser_ (0),
    amountRange_parser_ (0),
    amountRatio_parser_ (0),
    amountString_parser_ (0),
    amountRatioLowLimit_parser_ (0),
    amountType_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceSpecification_Relationship_pskel::
  SubstanceSpecification_Relationship_pskel (SubstanceSpecification_Relationship_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceSpecification_Relationship_impl_ (impl),
    substanceReference_parser_ (0),
    substanceCodeableConcept_parser_ (0),
    relationship_parser_ (0),
    isDefining_parser_ (0),
    amountQuantity_parser_ (0),
    amountRange_parser_ (0),
    amountRatio_parser_ (0),
    amountString_parser_ (0),
    amountRatioLowLimit_parser_ (0),
    amountType_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // SubstanceSpecification_pskel
  //

  void SubstanceSpecification_pskel::
  identifier ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->identifier ();
  }

  void SubstanceSpecification_pskel::
  type ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->type ();
  }

  void SubstanceSpecification_pskel::
  status ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->status ();
  }

  void SubstanceSpecification_pskel::
  domain ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->domain ();
  }

  void SubstanceSpecification_pskel::
  description ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->description ();
  }

  void SubstanceSpecification_pskel::
  source ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->source ();
  }

  void SubstanceSpecification_pskel::
  comment ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->comment ();
  }

  void SubstanceSpecification_pskel::
  moiety ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->moiety ();
  }

  void SubstanceSpecification_pskel::
  property ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->property ();
  }

  void SubstanceSpecification_pskel::
  referenceInformation ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->referenceInformation ();
  }

  void SubstanceSpecification_pskel::
  structure ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->structure ();
  }

  void SubstanceSpecification_pskel::
  code ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->code ();
  }

  void SubstanceSpecification_pskel::
  name ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->name ();
  }

  void SubstanceSpecification_pskel::
  molecularWeight ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->molecularWeight ();
  }

  void SubstanceSpecification_pskel::
  relationship ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->relationship ();
  }

  void SubstanceSpecification_pskel::
  nucleicAcid ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->nucleicAcid ();
  }

  void SubstanceSpecification_pskel::
  polymer ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->polymer ();
  }

  void SubstanceSpecification_pskel::
  protein ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->protein ();
  }

  void SubstanceSpecification_pskel::
  sourceMaterial ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->sourceMaterial ();
  }

  void SubstanceSpecification_pskel::
  post_SubstanceSpecification ()
  {
    if (this->SubstanceSpecification_impl_)
      this->SubstanceSpecification_impl_->post_SubstanceSpecification ();
    else
      post_DomainResource ();
  }

  void SubstanceSpecification_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->domain_parser_)
      this->domain_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->moiety_parser_)
      this->moiety_parser_->_reset ();

    if (this->property_parser_)
      this->property_parser_->_reset ();

    if (this->referenceInformation_parser_)
      this->referenceInformation_parser_->_reset ();

    if (this->structure_parser_)
      this->structure_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->molecularWeight_parser_)
      this->molecularWeight_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->nucleicAcid_parser_)
      this->nucleicAcid_parser_->_reset ();

    if (this->polymer_parser_)
      this->polymer_parser_->_reset ();

    if (this->protein_parser_)
      this->protein_parser_->_reset ();

    if (this->sourceMaterial_parser_)
      this->sourceMaterial_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Moiety_pskel
  //

  void SubstanceSpecification_Moiety_pskel::
  role ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->role ();
  }

  void SubstanceSpecification_Moiety_pskel::
  identifier ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->identifier ();
  }

  void SubstanceSpecification_Moiety_pskel::
  name ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->name ();
  }

  void SubstanceSpecification_Moiety_pskel::
  stereochemistry ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->stereochemistry ();
  }

  void SubstanceSpecification_Moiety_pskel::
  opticalActivity ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->opticalActivity ();
  }

  void SubstanceSpecification_Moiety_pskel::
  molecularFormula ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->molecularFormula ();
  }

  void SubstanceSpecification_Moiety_pskel::
  amountQuantity ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->amountQuantity ();
  }

  void SubstanceSpecification_Moiety_pskel::
  amountString ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->amountString ();
  }

  void SubstanceSpecification_Moiety_pskel::
  post_SubstanceSpecification_Moiety ()
  {
    if (this->SubstanceSpecification_Moiety_impl_)
      this->SubstanceSpecification_Moiety_impl_->post_SubstanceSpecification_Moiety ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Moiety_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->stereochemistry_parser_)
      this->stereochemistry_parser_->_reset ();

    if (this->opticalActivity_parser_)
      this->opticalActivity_parser_->_reset ();

    if (this->molecularFormula_parser_)
      this->molecularFormula_parser_->_reset ();

    if (this->amountQuantity_parser_)
      this->amountQuantity_parser_->_reset ();

    if (this->amountString_parser_)
      this->amountString_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Property_pskel
  //

  void SubstanceSpecification_Property_pskel::
  category ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->category ();
  }

  void SubstanceSpecification_Property_pskel::
  code ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->code ();
  }

  void SubstanceSpecification_Property_pskel::
  parameters ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->parameters ();
  }

  void SubstanceSpecification_Property_pskel::
  definingSubstanceReference ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->definingSubstanceReference ();
  }

  void SubstanceSpecification_Property_pskel::
  definingSubstanceCodeableConcept ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->definingSubstanceCodeableConcept ();
  }

  void SubstanceSpecification_Property_pskel::
  amountQuantity ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->amountQuantity ();
  }

  void SubstanceSpecification_Property_pskel::
  amountString ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->amountString ();
  }

  void SubstanceSpecification_Property_pskel::
  post_SubstanceSpecification_Property ()
  {
    if (this->SubstanceSpecification_Property_impl_)
      this->SubstanceSpecification_Property_impl_->post_SubstanceSpecification_Property ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Property_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->parameters_parser_)
      this->parameters_parser_->_reset ();

    if (this->definingSubstanceReference_parser_)
      this->definingSubstanceReference_parser_->_reset ();

    if (this->definingSubstanceCodeableConcept_parser_)
      this->definingSubstanceCodeableConcept_parser_->_reset ();

    if (this->amountQuantity_parser_)
      this->amountQuantity_parser_->_reset ();

    if (this->amountString_parser_)
      this->amountString_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Structure_pskel
  //

  void SubstanceSpecification_Structure_pskel::
  stereochemistry ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->stereochemistry ();
  }

  void SubstanceSpecification_Structure_pskel::
  opticalActivity ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->opticalActivity ();
  }

  void SubstanceSpecification_Structure_pskel::
  molecularFormula ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->molecularFormula ();
  }

  void SubstanceSpecification_Structure_pskel::
  molecularFormulaByMoiety ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->molecularFormulaByMoiety ();
  }

  void SubstanceSpecification_Structure_pskel::
  isotope ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->isotope ();
  }

  void SubstanceSpecification_Structure_pskel::
  molecularWeight ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->molecularWeight ();
  }

  void SubstanceSpecification_Structure_pskel::
  source ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->source ();
  }

  void SubstanceSpecification_Structure_pskel::
  representation ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->representation ();
  }

  void SubstanceSpecification_Structure_pskel::
  post_SubstanceSpecification_Structure ()
  {
    if (this->SubstanceSpecification_Structure_impl_)
      this->SubstanceSpecification_Structure_impl_->post_SubstanceSpecification_Structure ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Structure_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->stereochemistry_parser_)
      this->stereochemistry_parser_->_reset ();

    if (this->opticalActivity_parser_)
      this->opticalActivity_parser_->_reset ();

    if (this->molecularFormula_parser_)
      this->molecularFormula_parser_->_reset ();

    if (this->molecularFormulaByMoiety_parser_)
      this->molecularFormulaByMoiety_parser_->_reset ();

    if (this->isotope_parser_)
      this->isotope_parser_->_reset ();

    if (this->molecularWeight_parser_)
      this->molecularWeight_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->representation_parser_)
      this->representation_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Isotope_pskel
  //

  void SubstanceSpecification_Isotope_pskel::
  identifier ()
  {
    if (this->SubstanceSpecification_Isotope_impl_)
      this->SubstanceSpecification_Isotope_impl_->identifier ();
  }

  void SubstanceSpecification_Isotope_pskel::
  name ()
  {
    if (this->SubstanceSpecification_Isotope_impl_)
      this->SubstanceSpecification_Isotope_impl_->name ();
  }

  void SubstanceSpecification_Isotope_pskel::
  substitution ()
  {
    if (this->SubstanceSpecification_Isotope_impl_)
      this->SubstanceSpecification_Isotope_impl_->substitution ();
  }

  void SubstanceSpecification_Isotope_pskel::
  halfLife ()
  {
    if (this->SubstanceSpecification_Isotope_impl_)
      this->SubstanceSpecification_Isotope_impl_->halfLife ();
  }

  void SubstanceSpecification_Isotope_pskel::
  molecularWeight ()
  {
    if (this->SubstanceSpecification_Isotope_impl_)
      this->SubstanceSpecification_Isotope_impl_->molecularWeight ();
  }

  void SubstanceSpecification_Isotope_pskel::
  post_SubstanceSpecification_Isotope ()
  {
    if (this->SubstanceSpecification_Isotope_impl_)
      this->SubstanceSpecification_Isotope_impl_->post_SubstanceSpecification_Isotope ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Isotope_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->substitution_parser_)
      this->substitution_parser_->_reset ();

    if (this->halfLife_parser_)
      this->halfLife_parser_->_reset ();

    if (this->molecularWeight_parser_)
      this->molecularWeight_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_MolecularWeight_pskel
  //

  void SubstanceSpecification_MolecularWeight_pskel::
  method ()
  {
    if (this->SubstanceSpecification_MolecularWeight_impl_)
      this->SubstanceSpecification_MolecularWeight_impl_->method ();
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  type ()
  {
    if (this->SubstanceSpecification_MolecularWeight_impl_)
      this->SubstanceSpecification_MolecularWeight_impl_->type ();
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  amount ()
  {
    if (this->SubstanceSpecification_MolecularWeight_impl_)
      this->SubstanceSpecification_MolecularWeight_impl_->amount ();
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  post_SubstanceSpecification_MolecularWeight ()
  {
    if (this->SubstanceSpecification_MolecularWeight_impl_)
      this->SubstanceSpecification_MolecularWeight_impl_->post_SubstanceSpecification_MolecularWeight ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->method_parser_)
      this->method_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Representation_pskel
  //

  void SubstanceSpecification_Representation_pskel::
  type ()
  {
    if (this->SubstanceSpecification_Representation_impl_)
      this->SubstanceSpecification_Representation_impl_->type ();
  }

  void SubstanceSpecification_Representation_pskel::
  representation ()
  {
    if (this->SubstanceSpecification_Representation_impl_)
      this->SubstanceSpecification_Representation_impl_->representation ();
  }

  void SubstanceSpecification_Representation_pskel::
  attachment ()
  {
    if (this->SubstanceSpecification_Representation_impl_)
      this->SubstanceSpecification_Representation_impl_->attachment ();
  }

  void SubstanceSpecification_Representation_pskel::
  post_SubstanceSpecification_Representation ()
  {
    if (this->SubstanceSpecification_Representation_impl_)
      this->SubstanceSpecification_Representation_impl_->post_SubstanceSpecification_Representation ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Representation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->representation_parser_)
      this->representation_parser_->_reset ();

    if (this->attachment_parser_)
      this->attachment_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Code_pskel
  //

  void SubstanceSpecification_Code_pskel::
  code ()
  {
    if (this->SubstanceSpecification_Code_impl_)
      this->SubstanceSpecification_Code_impl_->code ();
  }

  void SubstanceSpecification_Code_pskel::
  status ()
  {
    if (this->SubstanceSpecification_Code_impl_)
      this->SubstanceSpecification_Code_impl_->status ();
  }

  void SubstanceSpecification_Code_pskel::
  statusDate ()
  {
    if (this->SubstanceSpecification_Code_impl_)
      this->SubstanceSpecification_Code_impl_->statusDate ();
  }

  void SubstanceSpecification_Code_pskel::
  comment ()
  {
    if (this->SubstanceSpecification_Code_impl_)
      this->SubstanceSpecification_Code_impl_->comment ();
  }

  void SubstanceSpecification_Code_pskel::
  source ()
  {
    if (this->SubstanceSpecification_Code_impl_)
      this->SubstanceSpecification_Code_impl_->source ();
  }

  void SubstanceSpecification_Code_pskel::
  post_SubstanceSpecification_Code ()
  {
    if (this->SubstanceSpecification_Code_impl_)
      this->SubstanceSpecification_Code_impl_->post_SubstanceSpecification_Code ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Code_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusDate_parser_)
      this->statusDate_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Name_pskel
  //

  void SubstanceSpecification_Name_pskel::
  name ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->name ();
  }

  void SubstanceSpecification_Name_pskel::
  type ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->type ();
  }

  void SubstanceSpecification_Name_pskel::
  status ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->status ();
  }

  void SubstanceSpecification_Name_pskel::
  preferred ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->preferred ();
  }

  void SubstanceSpecification_Name_pskel::
  language ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->language ();
  }

  void SubstanceSpecification_Name_pskel::
  domain ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->domain ();
  }

  void SubstanceSpecification_Name_pskel::
  jurisdiction ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->jurisdiction ();
  }

  void SubstanceSpecification_Name_pskel::
  synonym ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->synonym ();
  }

  void SubstanceSpecification_Name_pskel::
  translation ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->translation ();
  }

  void SubstanceSpecification_Name_pskel::
  official ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->official ();
  }

  void SubstanceSpecification_Name_pskel::
  source ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->source ();
  }

  void SubstanceSpecification_Name_pskel::
  post_SubstanceSpecification_Name ()
  {
    if (this->SubstanceSpecification_Name_impl_)
      this->SubstanceSpecification_Name_impl_->post_SubstanceSpecification_Name ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Name_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->preferred_parser_)
      this->preferred_parser_->_reset ();

    if (this->language_parser_)
      this->language_parser_->_reset ();

    if (this->domain_parser_)
      this->domain_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->synonym_parser_)
      this->synonym_parser_->_reset ();

    if (this->translation_parser_)
      this->translation_parser_->_reset ();

    if (this->official_parser_)
      this->official_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Official_pskel
  //

  void SubstanceSpecification_Official_pskel::
  authority ()
  {
    if (this->SubstanceSpecification_Official_impl_)
      this->SubstanceSpecification_Official_impl_->authority ();
  }

  void SubstanceSpecification_Official_pskel::
  status ()
  {
    if (this->SubstanceSpecification_Official_impl_)
      this->SubstanceSpecification_Official_impl_->status ();
  }

  void SubstanceSpecification_Official_pskel::
  date ()
  {
    if (this->SubstanceSpecification_Official_impl_)
      this->SubstanceSpecification_Official_impl_->date ();
  }

  void SubstanceSpecification_Official_pskel::
  post_SubstanceSpecification_Official ()
  {
    if (this->SubstanceSpecification_Official_impl_)
      this->SubstanceSpecification_Official_impl_->post_SubstanceSpecification_Official ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Official_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->authority_parser_)
      this->authority_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceSpecification_Relationship_pskel
  //

  void SubstanceSpecification_Relationship_pskel::
  substanceReference ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->substanceReference ();
  }

  void SubstanceSpecification_Relationship_pskel::
  substanceCodeableConcept ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->substanceCodeableConcept ();
  }

  void SubstanceSpecification_Relationship_pskel::
  relationship ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->relationship ();
  }

  void SubstanceSpecification_Relationship_pskel::
  isDefining ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->isDefining ();
  }

  void SubstanceSpecification_Relationship_pskel::
  amountQuantity ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->amountQuantity ();
  }

  void SubstanceSpecification_Relationship_pskel::
  amountRange ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->amountRange ();
  }

  void SubstanceSpecification_Relationship_pskel::
  amountRatio ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->amountRatio ();
  }

  void SubstanceSpecification_Relationship_pskel::
  amountString ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->amountString ();
  }

  void SubstanceSpecification_Relationship_pskel::
  amountRatioLowLimit ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->amountRatioLowLimit ();
  }

  void SubstanceSpecification_Relationship_pskel::
  amountType ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->amountType ();
  }

  void SubstanceSpecification_Relationship_pskel::
  source ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->source ();
  }

  void SubstanceSpecification_Relationship_pskel::
  post_SubstanceSpecification_Relationship ()
  {
    if (this->SubstanceSpecification_Relationship_impl_)
      this->SubstanceSpecification_Relationship_impl_->post_SubstanceSpecification_Relationship ();
    else
      post_BackboneElement ();
  }

  void SubstanceSpecification_Relationship_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->substanceReference_parser_)
      this->substanceReference_parser_->_reset ();

    if (this->substanceCodeableConcept_parser_)
      this->substanceCodeableConcept_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->isDefining_parser_)
      this->isDefining_parser_->_reset ();

    if (this->amountQuantity_parser_)
      this->amountQuantity_parser_->_reset ();

    if (this->amountRange_parser_)
      this->amountRange_parser_->_reset ();

    if (this->amountRatio_parser_)
      this->amountRatio_parser_->_reset ();

    if (this->amountString_parser_)
      this->amountString_parser_->_reset ();

    if (this->amountRatioLowLimit_parser_)
      this->amountRatioLowLimit_parser_->_reset ();

    if (this->amountType_parser_)
      this->amountType_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for SubstanceSpecification_pskel.
  //
  bool SubstanceSpecification_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "domain" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "comment" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "moiety" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "property" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "referenceInformation" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "structure" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "molecularWeight" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "relationship" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "nucleicAcid" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "polymer" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "protein" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;
        else if (n == "sourceMaterial" &&
                 ns == "http://hl7.org/fhir")
          s = 18UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CodeableConcept ();
              this->status ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "domain" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->domain_parser_)
            {
              this->domain_parser_->pre ();
              ctx.nested_parser (this->domain_parser_);
            }
          }
          else
          {
            if (this->domain_parser_ != 0)
            {
              this->domain_parser_->post_CodeableConcept ();
              this->domain ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "moiety" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->moiety_parser_)
            {
              this->moiety_parser_->pre ();
              ctx.nested_parser (this->moiety_parser_);
            }
          }
          else
          {
            if (this->moiety_parser_ != 0)
            {
              this->moiety_parser_->post_SubstanceSpecification_Moiety ();
              this->moiety ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "property" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->property_parser_)
            {
              this->property_parser_->pre ();
              ctx.nested_parser (this->property_parser_);
            }
          }
          else
          {
            if (this->property_parser_ != 0)
            {
              this->property_parser_->post_SubstanceSpecification_Property ();
              this->property ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "referenceInformation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referenceInformation_parser_)
            {
              this->referenceInformation_parser_->pre ();
              ctx.nested_parser (this->referenceInformation_parser_);
            }
          }
          else
          {
            if (this->referenceInformation_parser_ != 0)
            {
              this->referenceInformation_parser_->post_Reference ();
              this->referenceInformation ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "structure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->structure_parser_)
            {
              this->structure_parser_->pre ();
              ctx.nested_parser (this->structure_parser_);
            }
          }
          else
          {
            if (this->structure_parser_ != 0)
            {
              this->structure_parser_->post_SubstanceSpecification_Structure ();
              this->structure ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_SubstanceSpecification_Code ();
              this->code ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_SubstanceSpecification_Name ();
              this->name ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "molecularWeight" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->molecularWeight_parser_)
            {
              this->molecularWeight_parser_->pre ();
              ctx.nested_parser (this->molecularWeight_parser_);
            }
          }
          else
          {
            if (this->molecularWeight_parser_ != 0)
            {
              this->molecularWeight_parser_->post_SubstanceSpecification_MolecularWeight ();
              this->molecularWeight ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_SubstanceSpecification_Relationship ();
              this->relationship ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "nucleicAcid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->nucleicAcid_parser_)
            {
              this->nucleicAcid_parser_->pre ();
              ctx.nested_parser (this->nucleicAcid_parser_);
            }
          }
          else
          {
            if (this->nucleicAcid_parser_ != 0)
            {
              this->nucleicAcid_parser_->post_Reference ();
              this->nucleicAcid ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "polymer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->polymer_parser_)
            {
              this->polymer_parser_->pre ();
              ctx.nested_parser (this->polymer_parser_);
            }
          }
          else
          {
            if (this->polymer_parser_ != 0)
            {
              this->polymer_parser_->post_Reference ();
              this->polymer ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "protein" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->protein_parser_)
            {
              this->protein_parser_->pre ();
              ctx.nested_parser (this->protein_parser_);
            }
          }
          else
          {
            if (this->protein_parser_ != 0)
            {
              this->protein_parser_->post_Reference ();
              this->protein ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "sourceMaterial" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceMaterial_parser_)
            {
              this->sourceMaterial_parser_->pre ();
              ctx.nested_parser (this->sourceMaterial_parser_);
            }
          }
          else
          {
            if (this->sourceMaterial_parser_ != 0)
            {
              this->sourceMaterial_parser_->post_Reference ();
              this->sourceMaterial ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Moiety_pskel.
  //
  bool SubstanceSpecification_Moiety_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "role" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "stereochemistry" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "opticalActivity" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "molecularFormula" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "amountQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "amountString" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Moiety_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Moiety_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Moiety_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Moiety_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Moiety_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "stereochemistry" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->stereochemistry_parser_)
            {
              this->stereochemistry_parser_->pre ();
              ctx.nested_parser (this->stereochemistry_parser_);
            }
          }
          else
          {
            if (this->stereochemistry_parser_ != 0)
            {
              this->stereochemistry_parser_->post_CodeableConcept ();
              this->stereochemistry ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "opticalActivity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->opticalActivity_parser_)
            {
              this->opticalActivity_parser_->pre ();
              ctx.nested_parser (this->opticalActivity_parser_);
            }
          }
          else
          {
            if (this->opticalActivity_parser_ != 0)
            {
              this->opticalActivity_parser_->post_CodeableConcept ();
              this->opticalActivity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "molecularFormula" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->molecularFormula_parser_)
            {
              this->molecularFormula_parser_->pre ();
              ctx.nested_parser (this->molecularFormula_parser_);
            }
          }
          else
          {
            if (this->molecularFormula_parser_ != 0)
            {
              this->molecularFormula_parser_->post_string ();
              this->molecularFormula ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "amountQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountQuantity_parser_)
            {
              this->amountQuantity_parser_->pre ();
              ctx.nested_parser (this->amountQuantity_parser_);
            }
          }
          else
          {
            if (this->amountQuantity_parser_ != 0)
            {
              this->amountQuantity_parser_->post_Quantity ();
              this->amountQuantity ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "amountString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountString_parser_)
            {
              this->amountString_parser_->pre ();
              ctx.nested_parser (this->amountString_parser_);
            }
          }
          else
          {
            if (this->amountString_parser_ != 0)
            {
              this->amountString_parser_->post_string ();
              this->amountString ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Property_pskel.
  //
  bool SubstanceSpecification_Property_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "parameters" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "definingSubstanceReference" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "definingSubstanceCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "amountQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "amountString" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Property_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Property_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Property_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Property_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Property_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "parameters" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parameters_parser_)
            {
              this->parameters_parser_->pre ();
              ctx.nested_parser (this->parameters_parser_);
            }
          }
          else
          {
            if (this->parameters_parser_ != 0)
            {
              this->parameters_parser_->post_string ();
              this->parameters ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "definingSubstanceReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definingSubstanceReference_parser_)
            {
              this->definingSubstanceReference_parser_->pre ();
              ctx.nested_parser (this->definingSubstanceReference_parser_);
            }
          }
          else
          {
            if (this->definingSubstanceReference_parser_ != 0)
            {
              this->definingSubstanceReference_parser_->post_Reference ();
              this->definingSubstanceReference ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "definingSubstanceCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definingSubstanceCodeableConcept_parser_)
            {
              this->definingSubstanceCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->definingSubstanceCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->definingSubstanceCodeableConcept_parser_ != 0)
            {
              this->definingSubstanceCodeableConcept_parser_->post_CodeableConcept ();
              this->definingSubstanceCodeableConcept ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "amountQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountQuantity_parser_)
            {
              this->amountQuantity_parser_->pre ();
              ctx.nested_parser (this->amountQuantity_parser_);
            }
          }
          else
          {
            if (this->amountQuantity_parser_ != 0)
            {
              this->amountQuantity_parser_->post_Quantity ();
              this->amountQuantity ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "amountString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountString_parser_)
            {
              this->amountString_parser_->pre ();
              ctx.nested_parser (this->amountString_parser_);
            }
          }
          else
          {
            if (this->amountString_parser_ != 0)
            {
              this->amountString_parser_->post_string ();
              this->amountString ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Structure_pskel.
  //
  bool SubstanceSpecification_Structure_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "stereochemistry" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "opticalActivity" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "molecularFormula" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "molecularFormulaByMoiety" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "isotope" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "molecularWeight" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "representation" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Structure_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Structure_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Structure_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Structure_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Structure_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "stereochemistry" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->stereochemistry_parser_)
            {
              this->stereochemistry_parser_->pre ();
              ctx.nested_parser (this->stereochemistry_parser_);
            }
          }
          else
          {
            if (this->stereochemistry_parser_ != 0)
            {
              this->stereochemistry_parser_->post_CodeableConcept ();
              this->stereochemistry ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "opticalActivity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->opticalActivity_parser_)
            {
              this->opticalActivity_parser_->pre ();
              ctx.nested_parser (this->opticalActivity_parser_);
            }
          }
          else
          {
            if (this->opticalActivity_parser_ != 0)
            {
              this->opticalActivity_parser_->post_CodeableConcept ();
              this->opticalActivity ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "molecularFormula" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->molecularFormula_parser_)
            {
              this->molecularFormula_parser_->pre ();
              ctx.nested_parser (this->molecularFormula_parser_);
            }
          }
          else
          {
            if (this->molecularFormula_parser_ != 0)
            {
              this->molecularFormula_parser_->post_string ();
              this->molecularFormula ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "molecularFormulaByMoiety" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->molecularFormulaByMoiety_parser_)
            {
              this->molecularFormulaByMoiety_parser_->pre ();
              ctx.nested_parser (this->molecularFormulaByMoiety_parser_);
            }
          }
          else
          {
            if (this->molecularFormulaByMoiety_parser_ != 0)
            {
              this->molecularFormulaByMoiety_parser_->post_string ();
              this->molecularFormulaByMoiety ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "isotope" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->isotope_parser_)
            {
              this->isotope_parser_->pre ();
              ctx.nested_parser (this->isotope_parser_);
            }
          }
          else
          {
            if (this->isotope_parser_ != 0)
            {
              this->isotope_parser_->post_SubstanceSpecification_Isotope ();
              this->isotope ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "molecularWeight" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->molecularWeight_parser_)
            {
              this->molecularWeight_parser_->pre ();
              ctx.nested_parser (this->molecularWeight_parser_);
            }
          }
          else
          {
            if (this->molecularWeight_parser_ != 0)
            {
              this->molecularWeight_parser_->post_SubstanceSpecification_MolecularWeight ();
              this->molecularWeight ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "representation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->representation_parser_)
            {
              this->representation_parser_->pre ();
              ctx.nested_parser (this->representation_parser_);
            }
          }
          else
          {
            if (this->representation_parser_ != 0)
            {
              this->representation_parser_->post_SubstanceSpecification_Representation ();
              this->representation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Isotope_pskel.
  //
  bool SubstanceSpecification_Isotope_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "substitution" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "halfLife" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "molecularWeight" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Isotope_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Isotope_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Isotope_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Isotope_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Isotope_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_CodeableConcept ();
              this->name ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "substitution" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substitution_parser_)
            {
              this->substitution_parser_->pre ();
              ctx.nested_parser (this->substitution_parser_);
            }
          }
          else
          {
            if (this->substitution_parser_ != 0)
            {
              this->substitution_parser_->post_CodeableConcept ();
              this->substitution ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "halfLife" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->halfLife_parser_)
            {
              this->halfLife_parser_->pre ();
              ctx.nested_parser (this->halfLife_parser_);
            }
          }
          else
          {
            if (this->halfLife_parser_ != 0)
            {
              this->halfLife_parser_->post_Quantity ();
              this->halfLife ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "molecularWeight" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->molecularWeight_parser_)
            {
              this->molecularWeight_parser_->pre ();
              ctx.nested_parser (this->molecularWeight_parser_);
            }
          }
          else
          {
            if (this->molecularWeight_parser_ != 0)
            {
              this->molecularWeight_parser_->post_SubstanceSpecification_MolecularWeight ();
              this->molecularWeight ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_MolecularWeight_pskel.
  //
  bool SubstanceSpecification_MolecularWeight_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "method" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "amount" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_MolecularWeight_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_MolecularWeight_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_MolecularWeight_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "method" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->method_parser_)
            {
              this->method_parser_->pre ();
              ctx.nested_parser (this->method_parser_);
            }
          }
          else
          {
            if (this->method_parser_ != 0)
            {
              this->method_parser_->post_CodeableConcept ();
              this->method ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Quantity ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Representation_pskel.
  //
  bool SubstanceSpecification_Representation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "representation" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "attachment" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Representation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Representation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Representation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Representation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Representation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "representation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->representation_parser_)
            {
              this->representation_parser_->pre ();
              ctx.nested_parser (this->representation_parser_);
            }
          }
          else
          {
            if (this->representation_parser_ != 0)
            {
              this->representation_parser_->post_string ();
              this->representation ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "attachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->attachment_parser_)
            {
              this->attachment_parser_->pre ();
              ctx.nested_parser (this->attachment_parser_);
            }
          }
          else
          {
            if (this->attachment_parser_ != 0)
            {
              this->attachment_parser_->post_Attachment ();
              this->attachment ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Code_pskel.
  //
  bool SubstanceSpecification_Code_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "statusDate" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "comment" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Code_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Code_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Code_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Code_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Code_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CodeableConcept ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "statusDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusDate_parser_)
            {
              this->statusDate_parser_->pre ();
              ctx.nested_parser (this->statusDate_parser_);
            }
          }
          else
          {
            if (this->statusDate_parser_ != 0)
            {
              this->statusDate_parser_->post_dateTime ();
              this->statusDate ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Name_pskel.
  //
  bool SubstanceSpecification_Name_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Name_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Name_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Name_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Name_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Name_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CodeableConcept ();
              this->status ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "preferred" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preferred_parser_)
            {
              this->preferred_parser_->pre ();
              ctx.nested_parser (this->preferred_parser_);
            }
          }
          else
          {
            if (this->preferred_parser_ != 0)
            {
              this->preferred_parser_->post_boolean ();
              this->preferred ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "language" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->language_parser_)
            {
              this->language_parser_->pre ();
              ctx.nested_parser (this->language_parser_);
            }
          }
          else
          {
            if (this->language_parser_ != 0)
            {
              this->language_parser_->post_CodeableConcept ();
              this->language ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "domain" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->domain_parser_)
            {
              this->domain_parser_->pre ();
              ctx.nested_parser (this->domain_parser_);
            }
          }
          else
          {
            if (this->domain_parser_ != 0)
            {
              this->domain_parser_->post_CodeableConcept ();
              this->domain ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "synonym" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->synonym_parser_)
            {
              this->synonym_parser_->pre ();
              ctx.nested_parser (this->synonym_parser_);
            }
          }
          else
          {
            if (this->synonym_parser_ != 0)
            {
              this->synonym_parser_->post_SubstanceSpecification_Name ();
              this->synonym ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "translation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->translation_parser_)
            {
              this->translation_parser_->pre ();
              ctx.nested_parser (this->translation_parser_);
            }
          }
          else
          {
            if (this->translation_parser_ != 0)
            {
              this->translation_parser_->post_SubstanceSpecification_Name ();
              this->translation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "official" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->official_parser_)
            {
              this->official_parser_->pre ();
              ctx.nested_parser (this->official_parser_);
            }
          }
          else
          {
            if (this->official_parser_ != 0)
            {
              this->official_parser_->post_SubstanceSpecification_Official ();
              this->official ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Official_pskel.
  //
  bool SubstanceSpecification_Official_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "authority" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "date" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Official_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Official_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Official_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Official_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Official_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "authority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authority_parser_)
            {
              this->authority_parser_->pre ();
              ctx.nested_parser (this->authority_parser_);
            }
          }
          else
          {
            if (this->authority_parser_ != 0)
            {
              this->authority_parser_->post_CodeableConcept ();
              this->authority ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_CodeableConcept ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceSpecification_Relationship_pskel.
  //
  bool SubstanceSpecification_Relationship_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "substanceReference" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "substanceCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "relationship" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "isDefining" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "amountQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "amountRange" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "amountRatio" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "amountString" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "amountRatioLowLimit" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "amountType" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceSpecification_Relationship_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceSpecification_Relationship_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceSpecification_Relationship_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceSpecification_Relationship_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceSpecification_Relationship_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "substanceReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substanceReference_parser_)
            {
              this->substanceReference_parser_->pre ();
              ctx.nested_parser (this->substanceReference_parser_);
            }
          }
          else
          {
            if (this->substanceReference_parser_ != 0)
            {
              this->substanceReference_parser_->post_Reference ();
              this->substanceReference ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "substanceCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substanceCodeableConcept_parser_)
            {
              this->substanceCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->substanceCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->substanceCodeableConcept_parser_ != 0)
            {
              this->substanceCodeableConcept_parser_->post_CodeableConcept ();
              this->substanceCodeableConcept ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_CodeableConcept ();
              this->relationship ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "isDefining" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->isDefining_parser_)
            {
              this->isDefining_parser_->pre ();
              ctx.nested_parser (this->isDefining_parser_);
            }
          }
          else
          {
            if (this->isDefining_parser_ != 0)
            {
              this->isDefining_parser_->post_boolean ();
              this->isDefining ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "amountQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountQuantity_parser_)
            {
              this->amountQuantity_parser_->pre ();
              ctx.nested_parser (this->amountQuantity_parser_);
            }
          }
          else
          {
            if (this->amountQuantity_parser_ != 0)
            {
              this->amountQuantity_parser_->post_Quantity ();
              this->amountQuantity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "amountRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountRange_parser_)
            {
              this->amountRange_parser_->pre ();
              ctx.nested_parser (this->amountRange_parser_);
            }
          }
          else
          {
            if (this->amountRange_parser_ != 0)
            {
              this->amountRange_parser_->post_Range ();
              this->amountRange ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "amountRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountRatio_parser_)
            {
              this->amountRatio_parser_->pre ();
              ctx.nested_parser (this->amountRatio_parser_);
            }
          }
          else
          {
            if (this->amountRatio_parser_ != 0)
            {
              this->amountRatio_parser_->post_Ratio ();
              this->amountRatio ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "amountString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountString_parser_)
            {
              this->amountString_parser_->pre ();
              ctx.nested_parser (this->amountString_parser_);
            }
          }
          else
          {
            if (this->amountString_parser_ != 0)
            {
              this->amountString_parser_->post_string ();
              this->amountString ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "amountRatioLowLimit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountRatioLowLimit_parser_)
            {
              this->amountRatioLowLimit_parser_->pre ();
              ctx.nested_parser (this->amountRatioLowLimit_parser_);
            }
          }
          else
          {
            if (this->amountRatioLowLimit_parser_ != 0)
            {
              this->amountRatioLowLimit_parser_->post_Ratio ();
              this->amountRatioLowLimit ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "amountType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountType_parser_)
            {
              this->amountType_parser_->pre ();
              ctx.nested_parser (this->amountType_parser_);
            }
          }
          else
          {
            if (this->amountType_parser_ != 0)
            {
              this->amountType_parser_->post_CodeableConcept ();
              this->amountType ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

