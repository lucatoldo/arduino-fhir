// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "substancereferenceinformation-pskel.hxx"

namespace fhir
{
  // SubstanceReferenceInformation_pskel
  //

  void SubstanceReferenceInformation_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void SubstanceReferenceInformation_pskel::
  gene_parser (::fhir::SubstanceReferenceInformation_Gene_pskel& p)
  {
    this->gene_parser_ = &p;
  }

  void SubstanceReferenceInformation_pskel::
  geneElement_parser (::fhir::SubstanceReferenceInformation_GeneElement_pskel& p)
  {
    this->geneElement_parser_ = &p;
  }

  void SubstanceReferenceInformation_pskel::
  classification_parser (::fhir::SubstanceReferenceInformation_Classification_pskel& p)
  {
    this->classification_parser_ = &p;
  }

  void SubstanceReferenceInformation_pskel::
  target_parser (::fhir::SubstanceReferenceInformation_Target_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void SubstanceReferenceInformation_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& comment,
           ::fhir::SubstanceReferenceInformation_Gene_pskel& gene,
           ::fhir::SubstanceReferenceInformation_GeneElement_pskel& geneElement,
           ::fhir::SubstanceReferenceInformation_Classification_pskel& classification,
           ::fhir::SubstanceReferenceInformation_Target_pskel& target)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->comment_parser_ = &comment;
    this->gene_parser_ = &gene;
    this->geneElement_parser_ = &geneElement;
    this->classification_parser_ = &classification;
    this->target_parser_ = &target;
  }

  SubstanceReferenceInformation_pskel::
  SubstanceReferenceInformation_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    SubstanceReferenceInformation_impl_ (0),
    comment_parser_ (0),
    gene_parser_ (0),
    geneElement_parser_ (0),
    classification_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceReferenceInformation_pskel::
  SubstanceReferenceInformation_pskel (SubstanceReferenceInformation_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    SubstanceReferenceInformation_impl_ (impl),
    comment_parser_ (0),
    gene_parser_ (0),
    geneElement_parser_ (0),
    classification_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceReferenceInformation_Gene_pskel
  //

  void SubstanceReferenceInformation_Gene_pskel::
  geneSequenceOrigin_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->geneSequenceOrigin_parser_ = &p;
  }

  void SubstanceReferenceInformation_Gene_pskel::
  gene_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->gene_parser_ = &p;
  }

  void SubstanceReferenceInformation_Gene_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceReferenceInformation_Gene_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& geneSequenceOrigin,
           ::fhir::CodeableConcept_pskel& gene,
           ::fhir::Reference_pskel& source)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->geneSequenceOrigin_parser_ = &geneSequenceOrigin;
    this->gene_parser_ = &gene;
    this->source_parser_ = &source;
  }

  SubstanceReferenceInformation_Gene_pskel::
  SubstanceReferenceInformation_Gene_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceReferenceInformation_Gene_impl_ (0),
    geneSequenceOrigin_parser_ (0),
    gene_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceReferenceInformation_Gene_pskel::
  SubstanceReferenceInformation_Gene_pskel (SubstanceReferenceInformation_Gene_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceReferenceInformation_Gene_impl_ (impl),
    geneSequenceOrigin_parser_ (0),
    gene_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceReferenceInformation_GeneElement_pskel
  //

  void SubstanceReferenceInformation_GeneElement_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  element_parser (::fhir::Identifier_pskel& p)
  {
    this->element_parser_ = &p;
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Identifier_pskel& element,
           ::fhir::Reference_pskel& source)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->element_parser_ = &element;
    this->source_parser_ = &source;
  }

  SubstanceReferenceInformation_GeneElement_pskel::
  SubstanceReferenceInformation_GeneElement_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceReferenceInformation_GeneElement_impl_ (0),
    type_parser_ (0),
    element_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceReferenceInformation_GeneElement_pskel::
  SubstanceReferenceInformation_GeneElement_pskel (SubstanceReferenceInformation_GeneElement_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceReferenceInformation_GeneElement_impl_ (impl),
    type_parser_ (0),
    element_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceReferenceInformation_Classification_pskel
  //

  void SubstanceReferenceInformation_Classification_pskel::
  domain_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->domain_parser_ = &p;
  }

  void SubstanceReferenceInformation_Classification_pskel::
  classification_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->classification_parser_ = &p;
  }

  void SubstanceReferenceInformation_Classification_pskel::
  subtype_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subtype_parser_ = &p;
  }

  void SubstanceReferenceInformation_Classification_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceReferenceInformation_Classification_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& domain,
           ::fhir::CodeableConcept_pskel& classification,
           ::fhir::CodeableConcept_pskel& subtype,
           ::fhir::Reference_pskel& source)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->domain_parser_ = &domain;
    this->classification_parser_ = &classification;
    this->subtype_parser_ = &subtype;
    this->source_parser_ = &source;
  }

  SubstanceReferenceInformation_Classification_pskel::
  SubstanceReferenceInformation_Classification_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceReferenceInformation_Classification_impl_ (0),
    domain_parser_ (0),
    classification_parser_ (0),
    subtype_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceReferenceInformation_Classification_pskel::
  SubstanceReferenceInformation_Classification_pskel (SubstanceReferenceInformation_Classification_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceReferenceInformation_Classification_impl_ (impl),
    domain_parser_ (0),
    classification_parser_ (0),
    subtype_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SubstanceReferenceInformation_Target_pskel
  //

  void SubstanceReferenceInformation_Target_pskel::
  target_parser (::fhir::Identifier_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  interaction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->interaction_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  organism_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->organism_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  organismType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->organismType_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->amountQuantity_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountRange_parser (::fhir::Range_pskel& p)
  {
    this->amountRange_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountString_parser (::fhir::string_pskel& p)
  {
    this->amountString_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->amountType_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void SubstanceReferenceInformation_Target_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& target,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& interaction,
           ::fhir::CodeableConcept_pskel& organism,
           ::fhir::CodeableConcept_pskel& organismType,
           ::fhir::Quantity_pskel& amountQuantity,
           ::fhir::Range_pskel& amountRange,
           ::fhir::string_pskel& amountString,
           ::fhir::CodeableConcept_pskel& amountType,
           ::fhir::Reference_pskel& source)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->target_parser_ = &target;
    this->type_parser_ = &type;
    this->interaction_parser_ = &interaction;
    this->organism_parser_ = &organism;
    this->organismType_parser_ = &organismType;
    this->amountQuantity_parser_ = &amountQuantity;
    this->amountRange_parser_ = &amountRange;
    this->amountString_parser_ = &amountString;
    this->amountType_parser_ = &amountType;
    this->source_parser_ = &source;
  }

  SubstanceReferenceInformation_Target_pskel::
  SubstanceReferenceInformation_Target_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    SubstanceReferenceInformation_Target_impl_ (0),
    target_parser_ (0),
    type_parser_ (0),
    interaction_parser_ (0),
    organism_parser_ (0),
    organismType_parser_ (0),
    amountQuantity_parser_ (0),
    amountRange_parser_ (0),
    amountString_parser_ (0),
    amountType_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  SubstanceReferenceInformation_Target_pskel::
  SubstanceReferenceInformation_Target_pskel (SubstanceReferenceInformation_Target_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    SubstanceReferenceInformation_Target_impl_ (impl),
    target_parser_ (0),
    type_parser_ (0),
    interaction_parser_ (0),
    organism_parser_ (0),
    organismType_parser_ (0),
    amountQuantity_parser_ (0),
    amountRange_parser_ (0),
    amountString_parser_ (0),
    amountType_parser_ (0),
    source_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // SubstanceReferenceInformation_pskel
  //

  void SubstanceReferenceInformation_pskel::
  comment ()
  {
    if (this->SubstanceReferenceInformation_impl_)
      this->SubstanceReferenceInformation_impl_->comment ();
  }

  void SubstanceReferenceInformation_pskel::
  gene ()
  {
    if (this->SubstanceReferenceInformation_impl_)
      this->SubstanceReferenceInformation_impl_->gene ();
  }

  void SubstanceReferenceInformation_pskel::
  geneElement ()
  {
    if (this->SubstanceReferenceInformation_impl_)
      this->SubstanceReferenceInformation_impl_->geneElement ();
  }

  void SubstanceReferenceInformation_pskel::
  classification ()
  {
    if (this->SubstanceReferenceInformation_impl_)
      this->SubstanceReferenceInformation_impl_->classification ();
  }

  void SubstanceReferenceInformation_pskel::
  target ()
  {
    if (this->SubstanceReferenceInformation_impl_)
      this->SubstanceReferenceInformation_impl_->target ();
  }

  void SubstanceReferenceInformation_pskel::
  post_SubstanceReferenceInformation ()
  {
    if (this->SubstanceReferenceInformation_impl_)
      this->SubstanceReferenceInformation_impl_->post_SubstanceReferenceInformation ();
    else
      post_DomainResource ();
  }

  void SubstanceReferenceInformation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->gene_parser_)
      this->gene_parser_->_reset ();

    if (this->geneElement_parser_)
      this->geneElement_parser_->_reset ();

    if (this->classification_parser_)
      this->classification_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceReferenceInformation_Gene_pskel
  //

  void SubstanceReferenceInformation_Gene_pskel::
  geneSequenceOrigin ()
  {
    if (this->SubstanceReferenceInformation_Gene_impl_)
      this->SubstanceReferenceInformation_Gene_impl_->geneSequenceOrigin ();
  }

  void SubstanceReferenceInformation_Gene_pskel::
  gene ()
  {
    if (this->SubstanceReferenceInformation_Gene_impl_)
      this->SubstanceReferenceInformation_Gene_impl_->gene ();
  }

  void SubstanceReferenceInformation_Gene_pskel::
  source ()
  {
    if (this->SubstanceReferenceInformation_Gene_impl_)
      this->SubstanceReferenceInformation_Gene_impl_->source ();
  }

  void SubstanceReferenceInformation_Gene_pskel::
  post_SubstanceReferenceInformation_Gene ()
  {
    if (this->SubstanceReferenceInformation_Gene_impl_)
      this->SubstanceReferenceInformation_Gene_impl_->post_SubstanceReferenceInformation_Gene ();
    else
      post_BackboneElement ();
  }

  void SubstanceReferenceInformation_Gene_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->geneSequenceOrigin_parser_)
      this->geneSequenceOrigin_parser_->_reset ();

    if (this->gene_parser_)
      this->gene_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceReferenceInformation_GeneElement_pskel
  //

  void SubstanceReferenceInformation_GeneElement_pskel::
  type ()
  {
    if (this->SubstanceReferenceInformation_GeneElement_impl_)
      this->SubstanceReferenceInformation_GeneElement_impl_->type ();
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  element ()
  {
    if (this->SubstanceReferenceInformation_GeneElement_impl_)
      this->SubstanceReferenceInformation_GeneElement_impl_->element ();
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  source ()
  {
    if (this->SubstanceReferenceInformation_GeneElement_impl_)
      this->SubstanceReferenceInformation_GeneElement_impl_->source ();
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  post_SubstanceReferenceInformation_GeneElement ()
  {
    if (this->SubstanceReferenceInformation_GeneElement_impl_)
      this->SubstanceReferenceInformation_GeneElement_impl_->post_SubstanceReferenceInformation_GeneElement ();
    else
      post_BackboneElement ();
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->element_parser_)
      this->element_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceReferenceInformation_Classification_pskel
  //

  void SubstanceReferenceInformation_Classification_pskel::
  domain ()
  {
    if (this->SubstanceReferenceInformation_Classification_impl_)
      this->SubstanceReferenceInformation_Classification_impl_->domain ();
  }

  void SubstanceReferenceInformation_Classification_pskel::
  classification ()
  {
    if (this->SubstanceReferenceInformation_Classification_impl_)
      this->SubstanceReferenceInformation_Classification_impl_->classification ();
  }

  void SubstanceReferenceInformation_Classification_pskel::
  subtype ()
  {
    if (this->SubstanceReferenceInformation_Classification_impl_)
      this->SubstanceReferenceInformation_Classification_impl_->subtype ();
  }

  void SubstanceReferenceInformation_Classification_pskel::
  source ()
  {
    if (this->SubstanceReferenceInformation_Classification_impl_)
      this->SubstanceReferenceInformation_Classification_impl_->source ();
  }

  void SubstanceReferenceInformation_Classification_pskel::
  post_SubstanceReferenceInformation_Classification ()
  {
    if (this->SubstanceReferenceInformation_Classification_impl_)
      this->SubstanceReferenceInformation_Classification_impl_->post_SubstanceReferenceInformation_Classification ();
    else
      post_BackboneElement ();
  }

  void SubstanceReferenceInformation_Classification_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->domain_parser_)
      this->domain_parser_->_reset ();

    if (this->classification_parser_)
      this->classification_parser_->_reset ();

    if (this->subtype_parser_)
      this->subtype_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    this->resetting_ = false;
  }

  // SubstanceReferenceInformation_Target_pskel
  //

  void SubstanceReferenceInformation_Target_pskel::
  target ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->target ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  type ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->type ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  interaction ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->interaction ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  organism ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->organism ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  organismType ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->organismType ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountQuantity ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->amountQuantity ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountRange ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->amountRange ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountString ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->amountString ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  amountType ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->amountType ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  source ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->source ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  post_SubstanceReferenceInformation_Target ()
  {
    if (this->SubstanceReferenceInformation_Target_impl_)
      this->SubstanceReferenceInformation_Target_impl_->post_SubstanceReferenceInformation_Target ();
    else
      post_BackboneElement ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->target_parser_)
      this->target_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->interaction_parser_)
      this->interaction_parser_->_reset ();

    if (this->organism_parser_)
      this->organism_parser_->_reset ();

    if (this->organismType_parser_)
      this->organismType_parser_->_reset ();

    if (this->amountQuantity_parser_)
      this->amountQuantity_parser_->_reset ();

    if (this->amountRange_parser_)
      this->amountRange_parser_->_reset ();

    if (this->amountString_parser_)
      this->amountString_parser_->_reset ();

    if (this->amountType_parser_)
      this->amountType_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for SubstanceReferenceInformation_pskel.
  //
  bool SubstanceReferenceInformation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "gene" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "geneElement" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "classification" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "target" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceReferenceInformation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceReferenceInformation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceReferenceInformation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceReferenceInformation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceReferenceInformation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "gene" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->gene_parser_)
            {
              this->gene_parser_->pre ();
              ctx.nested_parser (this->gene_parser_);
            }
          }
          else
          {
            if (this->gene_parser_ != 0)
            {
              this->gene_parser_->post_SubstanceReferenceInformation_Gene ();
              this->gene ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "geneElement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->geneElement_parser_)
            {
              this->geneElement_parser_->pre ();
              ctx.nested_parser (this->geneElement_parser_);
            }
          }
          else
          {
            if (this->geneElement_parser_ != 0)
            {
              this->geneElement_parser_->post_SubstanceReferenceInformation_GeneElement ();
              this->geneElement ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "classification" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->classification_parser_)
            {
              this->classification_parser_->pre ();
              ctx.nested_parser (this->classification_parser_);
            }
          }
          else
          {
            if (this->classification_parser_ != 0)
            {
              this->classification_parser_->post_SubstanceReferenceInformation_Classification ();
              this->classification ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_SubstanceReferenceInformation_Target ();
              this->target ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceReferenceInformation_Gene_pskel.
  //
  bool SubstanceReferenceInformation_Gene_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "geneSequenceOrigin" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "gene" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceReferenceInformation_Gene_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceReferenceInformation_Gene_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceReferenceInformation_Gene_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceReferenceInformation_Gene_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceReferenceInformation_Gene_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "geneSequenceOrigin" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->geneSequenceOrigin_parser_)
            {
              this->geneSequenceOrigin_parser_->pre ();
              ctx.nested_parser (this->geneSequenceOrigin_parser_);
            }
          }
          else
          {
            if (this->geneSequenceOrigin_parser_ != 0)
            {
              this->geneSequenceOrigin_parser_->post_CodeableConcept ();
              this->geneSequenceOrigin ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "gene" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->gene_parser_)
            {
              this->gene_parser_->pre ();
              ctx.nested_parser (this->gene_parser_);
            }
          }
          else
          {
            if (this->gene_parser_ != 0)
            {
              this->gene_parser_->post_CodeableConcept ();
              this->gene ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceReferenceInformation_GeneElement_pskel.
  //
  bool SubstanceReferenceInformation_GeneElement_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "element" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceReferenceInformation_GeneElement_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceReferenceInformation_GeneElement_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceReferenceInformation_GeneElement_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "element" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->element_parser_)
            {
              this->element_parser_->pre ();
              ctx.nested_parser (this->element_parser_);
            }
          }
          else
          {
            if (this->element_parser_ != 0)
            {
              this->element_parser_->post_Identifier ();
              this->element ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceReferenceInformation_Classification_pskel.
  //
  bool SubstanceReferenceInformation_Classification_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "domain" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "classification" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "subtype" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceReferenceInformation_Classification_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceReferenceInformation_Classification_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceReferenceInformation_Classification_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceReferenceInformation_Classification_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceReferenceInformation_Classification_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "domain" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->domain_parser_)
            {
              this->domain_parser_->pre ();
              ctx.nested_parser (this->domain_parser_);
            }
          }
          else
          {
            if (this->domain_parser_ != 0)
            {
              this->domain_parser_->post_CodeableConcept ();
              this->domain ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "classification" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->classification_parser_)
            {
              this->classification_parser_->pre ();
              ctx.nested_parser (this->classification_parser_);
            }
          }
          else
          {
            if (this->classification_parser_ != 0)
            {
              this->classification_parser_->post_CodeableConcept ();
              this->classification ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subtype" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subtype_parser_)
            {
              this->subtype_parser_->pre ();
              ctx.nested_parser (this->subtype_parser_);
            }
          }
          else
          {
            if (this->subtype_parser_ != 0)
            {
              this->subtype_parser_->post_CodeableConcept ();
              this->subtype ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for SubstanceReferenceInformation_Target_pskel.
  //
  bool SubstanceReferenceInformation_Target_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "target" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "interaction" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "organism" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "organismType" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "amountQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "amountRange" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "amountString" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "amountType" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &SubstanceReferenceInformation_Target_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool SubstanceReferenceInformation_Target_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void SubstanceReferenceInformation_Target_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void SubstanceReferenceInformation_Target_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_Identifier ();
              this->target ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "interaction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->interaction_parser_)
            {
              this->interaction_parser_->pre ();
              ctx.nested_parser (this->interaction_parser_);
            }
          }
          else
          {
            if (this->interaction_parser_ != 0)
            {
              this->interaction_parser_->post_CodeableConcept ();
              this->interaction ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "organism" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organism_parser_)
            {
              this->organism_parser_->pre ();
              ctx.nested_parser (this->organism_parser_);
            }
          }
          else
          {
            if (this->organism_parser_ != 0)
            {
              this->organism_parser_->post_CodeableConcept ();
              this->organism ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "organismType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->organismType_parser_)
            {
              this->organismType_parser_->pre ();
              ctx.nested_parser (this->organismType_parser_);
            }
          }
          else
          {
            if (this->organismType_parser_ != 0)
            {
              this->organismType_parser_->post_CodeableConcept ();
              this->organismType ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "amountQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountQuantity_parser_)
            {
              this->amountQuantity_parser_->pre ();
              ctx.nested_parser (this->amountQuantity_parser_);
            }
          }
          else
          {
            if (this->amountQuantity_parser_ != 0)
            {
              this->amountQuantity_parser_->post_Quantity ();
              this->amountQuantity ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "amountRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountRange_parser_)
            {
              this->amountRange_parser_->pre ();
              ctx.nested_parser (this->amountRange_parser_);
            }
          }
          else
          {
            if (this->amountRange_parser_ != 0)
            {
              this->amountRange_parser_->post_Range ();
              this->amountRange ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "amountString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountString_parser_)
            {
              this->amountString_parser_->pre ();
              ctx.nested_parser (this->amountString_parser_);
            }
          }
          else
          {
            if (this->amountString_parser_ != 0)
            {
              this->amountString_parser_->post_string ();
              this->amountString ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "amountType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amountType_parser_)
            {
              this->amountType_parser_->pre ();
              ctx.nested_parser (this->amountType_parser_);
            }
          }
          else
          {
            if (this->amountType_parser_ != 0)
            {
              this->amountType_parser_->post_CodeableConcept ();
              this->amountType ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

