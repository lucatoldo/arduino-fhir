// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "operationdefinition-pskel.hxx"

namespace fhir
{
  // OperationDefinition_pskel
  //

  void OperationDefinition_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void OperationDefinition_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void OperationDefinition_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void OperationDefinition_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void OperationDefinition_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void OperationDefinition_pskel::
  kind_parser (::fhir::OperationKind_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void OperationDefinition_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void OperationDefinition_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void OperationDefinition_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void OperationDefinition_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void OperationDefinition_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void OperationDefinition_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void OperationDefinition_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void OperationDefinition_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void OperationDefinition_pskel::
  affectsState_parser (::fhir::boolean_pskel& p)
  {
    this->affectsState_parser_ = &p;
  }

  void OperationDefinition_pskel::
  code_parser (::fhir::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void OperationDefinition_pskel::
  comment_parser (::fhir::markdown_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void OperationDefinition_pskel::
  base_parser (::fhir::canonical_pskel& p)
  {
    this->base_parser_ = &p;
  }

  void OperationDefinition_pskel::
  resource_parser (::fhir::code_pskel& p)
  {
    this->resource_parser_ = &p;
  }

  void OperationDefinition_pskel::
  system_parser (::fhir::boolean_pskel& p)
  {
    this->system_parser_ = &p;
  }

  void OperationDefinition_pskel::
  type_parser (::fhir::boolean_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void OperationDefinition_pskel::
  instance_parser (::fhir::boolean_pskel& p)
  {
    this->instance_parser_ = &p;
  }

  void OperationDefinition_pskel::
  inputProfile_parser (::fhir::canonical_pskel& p)
  {
    this->inputProfile_parser_ = &p;
  }

  void OperationDefinition_pskel::
  outputProfile_parser (::fhir::canonical_pskel& p)
  {
    this->outputProfile_parser_ = &p;
  }

  void OperationDefinition_pskel::
  parameter_parser (::fhir::OperationDefinition_Parameter_pskel& p)
  {
    this->parameter_parser_ = &p;
  }

  void OperationDefinition_pskel::
  overload_parser (::fhir::OperationDefinition_Overload_pskel& p)
  {
    this->overload_parser_ = &p;
  }

  void OperationDefinition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::OperationKind_pskel& kind,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::boolean_pskel& affectsState,
           ::fhir::code_pskel& code,
           ::fhir::markdown_pskel& comment,
           ::fhir::canonical_pskel& base,
           ::fhir::code_pskel& resource,
           ::fhir::boolean_pskel& system,
           ::fhir::boolean_pskel& type,
           ::fhir::boolean_pskel& instance,
           ::fhir::canonical_pskel& inputProfile,
           ::fhir::canonical_pskel& outputProfile,
           ::fhir::OperationDefinition_Parameter_pskel& parameter,
           ::fhir::OperationDefinition_Overload_pskel& overload)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->kind_parser_ = &kind;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->affectsState_parser_ = &affectsState;
    this->code_parser_ = &code;
    this->comment_parser_ = &comment;
    this->base_parser_ = &base;
    this->resource_parser_ = &resource;
    this->system_parser_ = &system;
    this->type_parser_ = &type;
    this->instance_parser_ = &instance;
    this->inputProfile_parser_ = &inputProfile;
    this->outputProfile_parser_ = &outputProfile;
    this->parameter_parser_ = &parameter;
    this->overload_parser_ = &overload;
  }

  OperationDefinition_pskel::
  OperationDefinition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    OperationDefinition_impl_ (0),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    kind_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    affectsState_parser_ (0),
    code_parser_ (0),
    comment_parser_ (0),
    base_parser_ (0),
    resource_parser_ (0),
    system_parser_ (0),
    type_parser_ (0),
    instance_parser_ (0),
    inputProfile_parser_ (0),
    outputProfile_parser_ (0),
    parameter_parser_ (0),
    overload_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  OperationDefinition_pskel::
  OperationDefinition_pskel (OperationDefinition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    OperationDefinition_impl_ (impl),
    url_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    kind_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    affectsState_parser_ (0),
    code_parser_ (0),
    comment_parser_ (0),
    base_parser_ (0),
    resource_parser_ (0),
    system_parser_ (0),
    type_parser_ (0),
    instance_parser_ (0),
    inputProfile_parser_ (0),
    outputProfile_parser_ (0),
    parameter_parser_ (0),
    overload_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // OperationDefinition_Parameter_pskel
  //

  void OperationDefinition_Parameter_pskel::
  name_parser (::fhir::code_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  use_parser (::fhir::OperationParameterUse_pskel& p)
  {
    this->use_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  min_parser (::fhir::integer_pskel& p)
  {
    this->min_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  max_parser (::fhir::string_pskel& p)
  {
    this->max_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  documentation_parser (::fhir::string_pskel& p)
  {
    this->documentation_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  type_parser (::fhir::code_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  targetProfile_parser (::fhir::canonical_pskel& p)
  {
    this->targetProfile_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  searchType_parser (::fhir::SearchParamType_pskel& p)
  {
    this->searchType_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  binding_parser (::fhir::OperationDefinition_Binding_pskel& p)
  {
    this->binding_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  referencedFrom_parser (::fhir::OperationDefinition_ReferencedFrom_pskel& p)
  {
    this->referencedFrom_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  part_parser (::fhir::OperationDefinition_Parameter_pskel& p)
  {
    this->part_parser_ = &p;
  }

  void OperationDefinition_Parameter_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::code_pskel& name,
           ::fhir::OperationParameterUse_pskel& use,
           ::fhir::integer_pskel& min,
           ::fhir::string_pskel& max,
           ::fhir::string_pskel& documentation,
           ::fhir::code_pskel& type,
           ::fhir::canonical_pskel& targetProfile,
           ::fhir::SearchParamType_pskel& searchType,
           ::fhir::OperationDefinition_Binding_pskel& binding,
           ::fhir::OperationDefinition_ReferencedFrom_pskel& referencedFrom,
           ::fhir::OperationDefinition_Parameter_pskel& part)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->use_parser_ = &use;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->documentation_parser_ = &documentation;
    this->type_parser_ = &type;
    this->targetProfile_parser_ = &targetProfile;
    this->searchType_parser_ = &searchType;
    this->binding_parser_ = &binding;
    this->referencedFrom_parser_ = &referencedFrom;
    this->part_parser_ = &part;
  }

  OperationDefinition_Parameter_pskel::
  OperationDefinition_Parameter_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    OperationDefinition_Parameter_impl_ (0),
    name_parser_ (0),
    use_parser_ (0),
    min_parser_ (0),
    max_parser_ (0),
    documentation_parser_ (0),
    type_parser_ (0),
    targetProfile_parser_ (0),
    searchType_parser_ (0),
    binding_parser_ (0),
    referencedFrom_parser_ (0),
    part_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  OperationDefinition_Parameter_pskel::
  OperationDefinition_Parameter_pskel (OperationDefinition_Parameter_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    OperationDefinition_Parameter_impl_ (impl),
    name_parser_ (0),
    use_parser_ (0),
    min_parser_ (0),
    max_parser_ (0),
    documentation_parser_ (0),
    type_parser_ (0),
    targetProfile_parser_ (0),
    searchType_parser_ (0),
    binding_parser_ (0),
    referencedFrom_parser_ (0),
    part_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // OperationDefinition_Binding_pskel
  //

  void OperationDefinition_Binding_pskel::
  strength_parser (::fhir::BindingStrength_pskel& p)
  {
    this->strength_parser_ = &p;
  }

  void OperationDefinition_Binding_pskel::
  valueSet_parser (::fhir::canonical_pskel& p)
  {
    this->valueSet_parser_ = &p;
  }

  void OperationDefinition_Binding_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::BindingStrength_pskel& strength,
           ::fhir::canonical_pskel& valueSet)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->strength_parser_ = &strength;
    this->valueSet_parser_ = &valueSet;
  }

  OperationDefinition_Binding_pskel::
  OperationDefinition_Binding_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    OperationDefinition_Binding_impl_ (0),
    strength_parser_ (0),
    valueSet_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  OperationDefinition_Binding_pskel::
  OperationDefinition_Binding_pskel (OperationDefinition_Binding_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    OperationDefinition_Binding_impl_ (impl),
    strength_parser_ (0),
    valueSet_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // OperationDefinition_ReferencedFrom_pskel
  //

  void OperationDefinition_ReferencedFrom_pskel::
  source_parser (::fhir::string_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void OperationDefinition_ReferencedFrom_pskel::
  sourceId_parser (::fhir::string_pskel& p)
  {
    this->sourceId_parser_ = &p;
  }

  void OperationDefinition_ReferencedFrom_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& source,
           ::fhir::string_pskel& sourceId)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->source_parser_ = &source;
    this->sourceId_parser_ = &sourceId;
  }

  OperationDefinition_ReferencedFrom_pskel::
  OperationDefinition_ReferencedFrom_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    OperationDefinition_ReferencedFrom_impl_ (0),
    source_parser_ (0),
    sourceId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  OperationDefinition_ReferencedFrom_pskel::
  OperationDefinition_ReferencedFrom_pskel (OperationDefinition_ReferencedFrom_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    OperationDefinition_ReferencedFrom_impl_ (impl),
    source_parser_ (0),
    sourceId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // OperationDefinition_Overload_pskel
  //

  void OperationDefinition_Overload_pskel::
  parameterName_parser (::fhir::string_pskel& p)
  {
    this->parameterName_parser_ = &p;
  }

  void OperationDefinition_Overload_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void OperationDefinition_Overload_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& parameterName,
           ::fhir::string_pskel& comment)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->parameterName_parser_ = &parameterName;
    this->comment_parser_ = &comment;
  }

  OperationDefinition_Overload_pskel::
  OperationDefinition_Overload_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    OperationDefinition_Overload_impl_ (0),
    parameterName_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  OperationDefinition_Overload_pskel::
  OperationDefinition_Overload_pskel (OperationDefinition_Overload_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    OperationDefinition_Overload_impl_ (impl),
    parameterName_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // OperationParameterUse_list_pskel
  //

  OperationParameterUse_list_pskel::
  OperationParameterUse_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    OperationParameterUse_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_OperationParameterUse_list_pskel_enums_, 2UL);
  }

  OperationParameterUse_list_pskel::
  OperationParameterUse_list_pskel (OperationParameterUse_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    OperationParameterUse_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_OperationParameterUse_list_pskel_enums_, 2UL);
  }

  // OperationParameterUse_pskel
  //

  void OperationParameterUse_pskel::
  value_parser (::fhir::OperationParameterUse_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void OperationParameterUse_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::OperationParameterUse_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  OperationParameterUse_pskel::
  OperationParameterUse_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    OperationParameterUse_impl_ (0),
    value_parser_ (0)
  {
  }

  OperationParameterUse_pskel::
  OperationParameterUse_pskel (OperationParameterUse_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    OperationParameterUse_impl_ (impl),
    value_parser_ (0)
  {
  }

  // OperationKind_list_pskel
  //

  OperationKind_list_pskel::
  OperationKind_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    OperationKind_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_OperationKind_list_pskel_enums_, 2UL);
  }

  OperationKind_list_pskel::
  OperationKind_list_pskel (OperationKind_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    OperationKind_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_OperationKind_list_pskel_enums_, 2UL);
  }

  // OperationKind_pskel
  //

  void OperationKind_pskel::
  value_parser (::fhir::OperationKind_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void OperationKind_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::OperationKind_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  OperationKind_pskel::
  OperationKind_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    OperationKind_impl_ (0),
    value_parser_ (0)
  {
  }

  OperationKind_pskel::
  OperationKind_pskel (OperationKind_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    OperationKind_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // OperationDefinition_pskel
  //

  void OperationDefinition_pskel::
  url ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->url ();
  }

  void OperationDefinition_pskel::
  version ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->version ();
  }

  void OperationDefinition_pskel::
  name ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->name ();
  }

  void OperationDefinition_pskel::
  title ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->title ();
  }

  void OperationDefinition_pskel::
  status ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->status ();
  }

  void OperationDefinition_pskel::
  kind ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->kind ();
  }

  void OperationDefinition_pskel::
  experimental ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->experimental ();
  }

  void OperationDefinition_pskel::
  date ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->date ();
  }

  void OperationDefinition_pskel::
  publisher ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->publisher ();
  }

  void OperationDefinition_pskel::
  contact ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->contact ();
  }

  void OperationDefinition_pskel::
  description ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->description ();
  }

  void OperationDefinition_pskel::
  useContext ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->useContext ();
  }

  void OperationDefinition_pskel::
  jurisdiction ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->jurisdiction ();
  }

  void OperationDefinition_pskel::
  purpose ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->purpose ();
  }

  void OperationDefinition_pskel::
  affectsState ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->affectsState ();
  }

  void OperationDefinition_pskel::
  code ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->code ();
  }

  void OperationDefinition_pskel::
  comment ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->comment ();
  }

  void OperationDefinition_pskel::
  base ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->base ();
  }

  void OperationDefinition_pskel::
  resource ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->resource ();
  }

  void OperationDefinition_pskel::
  system ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->system ();
  }

  void OperationDefinition_pskel::
  type ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->type ();
  }

  void OperationDefinition_pskel::
  instance ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->instance ();
  }

  void OperationDefinition_pskel::
  inputProfile ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->inputProfile ();
  }

  void OperationDefinition_pskel::
  outputProfile ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->outputProfile ();
  }

  void OperationDefinition_pskel::
  parameter ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->parameter ();
  }

  void OperationDefinition_pskel::
  overload ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->overload ();
  }

  void OperationDefinition_pskel::
  post_OperationDefinition ()
  {
    if (this->OperationDefinition_impl_)
      this->OperationDefinition_impl_->post_OperationDefinition ();
    else
      post_DomainResource ();
  }

  void OperationDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->affectsState_parser_)
      this->affectsState_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->base_parser_)
      this->base_parser_->_reset ();

    if (this->resource_parser_)
      this->resource_parser_->_reset ();

    if (this->system_parser_)
      this->system_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->instance_parser_)
      this->instance_parser_->_reset ();

    if (this->inputProfile_parser_)
      this->inputProfile_parser_->_reset ();

    if (this->outputProfile_parser_)
      this->outputProfile_parser_->_reset ();

    if (this->parameter_parser_)
      this->parameter_parser_->_reset ();

    if (this->overload_parser_)
      this->overload_parser_->_reset ();

    this->resetting_ = false;
  }

  // OperationDefinition_Parameter_pskel
  //

  void OperationDefinition_Parameter_pskel::
  name ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->name ();
  }

  void OperationDefinition_Parameter_pskel::
  use ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->use ();
  }

  void OperationDefinition_Parameter_pskel::
  min ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->min ();
  }

  void OperationDefinition_Parameter_pskel::
  max ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->max ();
  }

  void OperationDefinition_Parameter_pskel::
  documentation ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->documentation ();
  }

  void OperationDefinition_Parameter_pskel::
  type ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->type ();
  }

  void OperationDefinition_Parameter_pskel::
  targetProfile ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->targetProfile ();
  }

  void OperationDefinition_Parameter_pskel::
  searchType ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->searchType ();
  }

  void OperationDefinition_Parameter_pskel::
  binding ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->binding ();
  }

  void OperationDefinition_Parameter_pskel::
  referencedFrom ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->referencedFrom ();
  }

  void OperationDefinition_Parameter_pskel::
  part ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->part ();
  }

  void OperationDefinition_Parameter_pskel::
  post_OperationDefinition_Parameter ()
  {
    if (this->OperationDefinition_Parameter_impl_)
      this->OperationDefinition_Parameter_impl_->post_OperationDefinition_Parameter ();
    else
      post_BackboneElement ();
  }

  void OperationDefinition_Parameter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->use_parser_)
      this->use_parser_->_reset ();

    if (this->min_parser_)
      this->min_parser_->_reset ();

    if (this->max_parser_)
      this->max_parser_->_reset ();

    if (this->documentation_parser_)
      this->documentation_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->targetProfile_parser_)
      this->targetProfile_parser_->_reset ();

    if (this->searchType_parser_)
      this->searchType_parser_->_reset ();

    if (this->binding_parser_)
      this->binding_parser_->_reset ();

    if (this->referencedFrom_parser_)
      this->referencedFrom_parser_->_reset ();

    if (this->part_parser_)
      this->part_parser_->_reset ();

    this->resetting_ = false;
  }

  // OperationDefinition_Binding_pskel
  //

  void OperationDefinition_Binding_pskel::
  strength ()
  {
    if (this->OperationDefinition_Binding_impl_)
      this->OperationDefinition_Binding_impl_->strength ();
  }

  void OperationDefinition_Binding_pskel::
  valueSet ()
  {
    if (this->OperationDefinition_Binding_impl_)
      this->OperationDefinition_Binding_impl_->valueSet ();
  }

  void OperationDefinition_Binding_pskel::
  post_OperationDefinition_Binding ()
  {
    if (this->OperationDefinition_Binding_impl_)
      this->OperationDefinition_Binding_impl_->post_OperationDefinition_Binding ();
    else
      post_BackboneElement ();
  }

  void OperationDefinition_Binding_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->strength_parser_)
      this->strength_parser_->_reset ();

    if (this->valueSet_parser_)
      this->valueSet_parser_->_reset ();

    this->resetting_ = false;
  }

  // OperationDefinition_ReferencedFrom_pskel
  //

  void OperationDefinition_ReferencedFrom_pskel::
  source ()
  {
    if (this->OperationDefinition_ReferencedFrom_impl_)
      this->OperationDefinition_ReferencedFrom_impl_->source ();
  }

  void OperationDefinition_ReferencedFrom_pskel::
  sourceId ()
  {
    if (this->OperationDefinition_ReferencedFrom_impl_)
      this->OperationDefinition_ReferencedFrom_impl_->sourceId ();
  }

  void OperationDefinition_ReferencedFrom_pskel::
  post_OperationDefinition_ReferencedFrom ()
  {
    if (this->OperationDefinition_ReferencedFrom_impl_)
      this->OperationDefinition_ReferencedFrom_impl_->post_OperationDefinition_ReferencedFrom ();
    else
      post_BackboneElement ();
  }

  void OperationDefinition_ReferencedFrom_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->sourceId_parser_)
      this->sourceId_parser_->_reset ();

    this->resetting_ = false;
  }

  // OperationDefinition_Overload_pskel
  //

  void OperationDefinition_Overload_pskel::
  parameterName ()
  {
    if (this->OperationDefinition_Overload_impl_)
      this->OperationDefinition_Overload_impl_->parameterName ();
  }

  void OperationDefinition_Overload_pskel::
  comment ()
  {
    if (this->OperationDefinition_Overload_impl_)
      this->OperationDefinition_Overload_impl_->comment ();
  }

  void OperationDefinition_Overload_pskel::
  post_OperationDefinition_Overload ()
  {
    if (this->OperationDefinition_Overload_impl_)
      this->OperationDefinition_Overload_impl_->post_OperationDefinition_Overload ();
    else
      post_BackboneElement ();
  }

  void OperationDefinition_Overload_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->parameterName_parser_)
      this->parameterName_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    this->resetting_ = false;
  }

  // OperationParameterUse_list_pskel
  //

  void OperationParameterUse_list_pskel::
  post_OperationParameterUse_list ()
  {
    if (this->OperationParameterUse_list_impl_)
      this->OperationParameterUse_list_impl_->post_OperationParameterUse_list ();
    else
      post_code_primitive ();
  }

  const char* const OperationParameterUse_list_pskel::_xsde_OperationParameterUse_list_pskel_enums_[2UL] = 
  {
    "in",
    "out"
  };

  // OperationParameterUse_pskel
  //

  void OperationParameterUse_pskel::
  value ()
  {
    if (this->OperationParameterUse_impl_)
      this->OperationParameterUse_impl_->value ();
  }

  void OperationParameterUse_pskel::
  post_OperationParameterUse ()
  {
    if (this->OperationParameterUse_impl_)
      this->OperationParameterUse_impl_->post_OperationParameterUse ();
    else
      post_Element ();
  }

  void OperationParameterUse_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // OperationKind_list_pskel
  //

  void OperationKind_list_pskel::
  post_OperationKind_list ()
  {
    if (this->OperationKind_list_impl_)
      this->OperationKind_list_impl_->post_OperationKind_list ();
    else
      post_code_primitive ();
  }

  const char* const OperationKind_list_pskel::_xsde_OperationKind_list_pskel_enums_[2UL] = 
  {
    "operation",
    "query"
  };

  // OperationKind_pskel
  //

  void OperationKind_pskel::
  value ()
  {
    if (this->OperationKind_impl_)
      this->OperationKind_impl_->value ();
  }

  void OperationKind_pskel::
  post_OperationKind ()
  {
    if (this->OperationKind_impl_)
      this->OperationKind_impl_->post_OperationKind ();
    else
      post_Element ();
  }

  void OperationKind_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for OperationDefinition_pskel.
  //
  bool OperationDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &OperationDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool OperationDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void OperationDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void OperationDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void OperationDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_OperationKind ();
              this->kind ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "affectsState" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->affectsState_parser_)
            {
              this->affectsState_parser_->pre ();
              ctx.nested_parser (this->affectsState_parser_);
            }
          }
          else
          {
            if (this->affectsState_parser_ != 0)
            {
              this->affectsState_parser_->post_boolean ();
              this->affectsState ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_code ();
              this->code ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_markdown ();
              this->comment ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "base" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->base_parser_)
            {
              this->base_parser_->pre ();
              ctx.nested_parser (this->base_parser_);
            }
          }
          else
          {
            if (this->base_parser_ != 0)
            {
              this->base_parser_->post_canonical ();
              this->base ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "resource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resource_parser_)
            {
              this->resource_parser_->pre ();
              ctx.nested_parser (this->resource_parser_);
            }
          }
          else
          {
            if (this->resource_parser_ != 0)
            {
              this->resource_parser_->post_code ();
              this->resource ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "system" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->system_parser_)
            {
              this->system_parser_->pre ();
              ctx.nested_parser (this->system_parser_);
            }
          }
          else
          {
            if (this->system_parser_ != 0)
            {
              this->system_parser_->post_boolean ();
              this->system ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_boolean ();
              this->type ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "instance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instance_parser_)
            {
              this->instance_parser_->pre ();
              ctx.nested_parser (this->instance_parser_);
            }
          }
          else
          {
            if (this->instance_parser_ != 0)
            {
              this->instance_parser_->post_boolean ();
              this->instance ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "inputProfile" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->inputProfile_parser_)
            {
              this->inputProfile_parser_->pre ();
              ctx.nested_parser (this->inputProfile_parser_);
            }
          }
          else
          {
            if (this->inputProfile_parser_ != 0)
            {
              this->inputProfile_parser_->post_canonical ();
              this->inputProfile ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "outputProfile" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outputProfile_parser_)
            {
              this->outputProfile_parser_->pre ();
              ctx.nested_parser (this->outputProfile_parser_);
            }
          }
          else
          {
            if (this->outputProfile_parser_ != 0)
            {
              this->outputProfile_parser_->post_canonical ();
              this->outputProfile ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "parameter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parameter_parser_)
            {
              this->parameter_parser_->pre ();
              ctx.nested_parser (this->parameter_parser_);
            }
          }
          else
          {
            if (this->parameter_parser_ != 0)
            {
              this->parameter_parser_->post_OperationDefinition_Parameter ();
              this->parameter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "overload" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->overload_parser_)
            {
              this->overload_parser_->pre ();
              ctx.nested_parser (this->overload_parser_);
            }
          }
          else
          {
            if (this->overload_parser_ != 0)
            {
              this->overload_parser_->post_OperationDefinition_Overload ();
              this->overload ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for OperationDefinition_Parameter_pskel.
  //
  bool OperationDefinition_Parameter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &OperationDefinition_Parameter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool OperationDefinition_Parameter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void OperationDefinition_Parameter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void OperationDefinition_Parameter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void OperationDefinition_Parameter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_code ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "use" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->use_parser_)
            {
              this->use_parser_->pre ();
              ctx.nested_parser (this->use_parser_);
            }
          }
          else
          {
            if (this->use_parser_ != 0)
            {
              this->use_parser_->post_OperationParameterUse ();
              this->use ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "min" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->min_parser_)
            {
              this->min_parser_->pre ();
              ctx.nested_parser (this->min_parser_);
            }
          }
          else
          {
            if (this->min_parser_ != 0)
            {
              this->min_parser_->post_integer ();
              this->min ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "max" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->max_parser_)
            {
              this->max_parser_->pre ();
              ctx.nested_parser (this->max_parser_);
            }
          }
          else
          {
            if (this->max_parser_ != 0)
            {
              this->max_parser_->post_string ();
              this->max ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "documentation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->documentation_parser_)
            {
              this->documentation_parser_->pre ();
              ctx.nested_parser (this->documentation_parser_);
            }
          }
          else
          {
            if (this->documentation_parser_ != 0)
            {
              this->documentation_parser_->post_string ();
              this->documentation ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_code ();
              this->type ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "targetProfile" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetProfile_parser_)
            {
              this->targetProfile_parser_->pre ();
              ctx.nested_parser (this->targetProfile_parser_);
            }
          }
          else
          {
            if (this->targetProfile_parser_ != 0)
            {
              this->targetProfile_parser_->post_canonical ();
              this->targetProfile ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "searchType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->searchType_parser_)
            {
              this->searchType_parser_->pre ();
              ctx.nested_parser (this->searchType_parser_);
            }
          }
          else
          {
            if (this->searchType_parser_ != 0)
            {
              this->searchType_parser_->post_SearchParamType ();
              this->searchType ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "binding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->binding_parser_)
            {
              this->binding_parser_->pre ();
              ctx.nested_parser (this->binding_parser_);
            }
          }
          else
          {
            if (this->binding_parser_ != 0)
            {
              this->binding_parser_->post_OperationDefinition_Binding ();
              this->binding ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "referencedFrom" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referencedFrom_parser_)
            {
              this->referencedFrom_parser_->pre ();
              ctx.nested_parser (this->referencedFrom_parser_);
            }
          }
          else
          {
            if (this->referencedFrom_parser_ != 0)
            {
              this->referencedFrom_parser_->post_OperationDefinition_ReferencedFrom ();
              this->referencedFrom ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "part" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->part_parser_)
            {
              this->part_parser_->pre ();
              ctx.nested_parser (this->part_parser_);
            }
          }
          else
          {
            if (this->part_parser_ != 0)
            {
              this->part_parser_->post_OperationDefinition_Parameter ();
              this->part ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for OperationDefinition_Binding_pskel.
  //
  bool OperationDefinition_Binding_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "strength" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &OperationDefinition_Binding_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool OperationDefinition_Binding_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void OperationDefinition_Binding_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void OperationDefinition_Binding_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void OperationDefinition_Binding_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "strength" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->strength_parser_)
            {
              this->strength_parser_->pre ();
              ctx.nested_parser (this->strength_parser_);
            }
          }
          else
          {
            if (this->strength_parser_ != 0)
            {
              this->strength_parser_->post_BindingStrength ();
              this->strength ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueSet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueSet_parser_)
            {
              this->valueSet_parser_->pre ();
              ctx.nested_parser (this->valueSet_parser_);
            }
          }
          else
          {
            if (this->valueSet_parser_ != 0)
            {
              this->valueSet_parser_->post_canonical ();
              this->valueSet ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for OperationDefinition_ReferencedFrom_pskel.
  //
  bool OperationDefinition_ReferencedFrom_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "source" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &OperationDefinition_ReferencedFrom_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool OperationDefinition_ReferencedFrom_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void OperationDefinition_ReferencedFrom_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void OperationDefinition_ReferencedFrom_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void OperationDefinition_ReferencedFrom_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_string ();
              this->source ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "sourceId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourceId_parser_)
            {
              this->sourceId_parser_->pre ();
              ctx.nested_parser (this->sourceId_parser_);
            }
          }
          else
          {
            if (this->sourceId_parser_ != 0)
            {
              this->sourceId_parser_->post_string ();
              this->sourceId ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for OperationDefinition_Overload_pskel.
  //
  bool OperationDefinition_Overload_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "parameterName" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "comment" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &OperationDefinition_Overload_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool OperationDefinition_Overload_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void OperationDefinition_Overload_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void OperationDefinition_Overload_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void OperationDefinition_Overload_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "parameterName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parameterName_parser_)
            {
              this->parameterName_parser_->pre ();
              ctx.nested_parser (this->parameterName_parser_);
            }
          }
          else
          {
            if (this->parameterName_parser_ != 0)
            {
              this->parameterName_parser_->post_string ();
              this->parameterName ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for OperationParameterUse_pskel.
  //
  bool OperationParameterUse_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_OperationParameterUse_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for OperationKind_pskel.
  //
  bool OperationKind_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_OperationKind_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

