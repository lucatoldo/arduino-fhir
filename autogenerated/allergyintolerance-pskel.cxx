// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "allergyintolerance-pskel.hxx"

namespace fhir
{
  // AllergyIntolerance_pskel
  //

  void AllergyIntolerance_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  clinicalStatus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->clinicalStatus_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  verificationStatus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->verificationStatus_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  type_parser (::fhir::AllergyIntoleranceType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  category_parser (::fhir::AllergyIntoleranceCategory_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  criticality_parser (::fhir::AllergyIntoleranceCriticality_pskel& p)
  {
    this->criticality_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  onsetDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->onsetDateTime_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  onsetAge_parser (::fhir::Age_pskel& p)
  {
    this->onsetAge_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  onsetPeriod_parser (::fhir::Period_pskel& p)
  {
    this->onsetPeriod_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  onsetRange_parser (::fhir::Range_pskel& p)
  {
    this->onsetRange_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  onsetString_parser (::fhir::string_pskel& p)
  {
    this->onsetString_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  recordedDate_parser (::fhir::dateTime_pskel& p)
  {
    this->recordedDate_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  recorder_parser (::fhir::Reference_pskel& p)
  {
    this->recorder_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  asserter_parser (::fhir::Reference_pskel& p)
  {
    this->asserter_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  lastOccurrence_parser (::fhir::dateTime_pskel& p)
  {
    this->lastOccurrence_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  reaction_parser (::fhir::AllergyIntolerance_Reaction_pskel& p)
  {
    this->reaction_parser_ = &p;
  }

  void AllergyIntolerance_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::CodeableConcept_pskel& clinicalStatus,
           ::fhir::CodeableConcept_pskel& verificationStatus,
           ::fhir::AllergyIntoleranceType_pskel& type,
           ::fhir::AllergyIntoleranceCategory_pskel& category,
           ::fhir::AllergyIntoleranceCriticality_pskel& criticality,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& patient,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& onsetDateTime,
           ::fhir::Age_pskel& onsetAge,
           ::fhir::Period_pskel& onsetPeriod,
           ::fhir::Range_pskel& onsetRange,
           ::fhir::string_pskel& onsetString,
           ::fhir::dateTime_pskel& recordedDate,
           ::fhir::Reference_pskel& recorder,
           ::fhir::Reference_pskel& asserter,
           ::fhir::dateTime_pskel& lastOccurrence,
           ::fhir::Annotation_pskel& note,
           ::fhir::AllergyIntolerance_Reaction_pskel& reaction)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->clinicalStatus_parser_ = &clinicalStatus;
    this->verificationStatus_parser_ = &verificationStatus;
    this->type_parser_ = &type;
    this->category_parser_ = &category;
    this->criticality_parser_ = &criticality;
    this->code_parser_ = &code;
    this->patient_parser_ = &patient;
    this->encounter_parser_ = &encounter;
    this->onsetDateTime_parser_ = &onsetDateTime;
    this->onsetAge_parser_ = &onsetAge;
    this->onsetPeriod_parser_ = &onsetPeriod;
    this->onsetRange_parser_ = &onsetRange;
    this->onsetString_parser_ = &onsetString;
    this->recordedDate_parser_ = &recordedDate;
    this->recorder_parser_ = &recorder;
    this->asserter_parser_ = &asserter;
    this->lastOccurrence_parser_ = &lastOccurrence;
    this->note_parser_ = &note;
    this->reaction_parser_ = &reaction;
  }

  AllergyIntolerance_pskel::
  AllergyIntolerance_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    AllergyIntolerance_impl_ (0),
    identifier_parser_ (0),
    clinicalStatus_parser_ (0),
    verificationStatus_parser_ (0),
    type_parser_ (0),
    category_parser_ (0),
    criticality_parser_ (0),
    code_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    onsetDateTime_parser_ (0),
    onsetAge_parser_ (0),
    onsetPeriod_parser_ (0),
    onsetRange_parser_ (0),
    onsetString_parser_ (0),
    recordedDate_parser_ (0),
    recorder_parser_ (0),
    asserter_parser_ (0),
    lastOccurrence_parser_ (0),
    note_parser_ (0),
    reaction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AllergyIntolerance_pskel::
  AllergyIntolerance_pskel (AllergyIntolerance_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    AllergyIntolerance_impl_ (impl),
    identifier_parser_ (0),
    clinicalStatus_parser_ (0),
    verificationStatus_parser_ (0),
    type_parser_ (0),
    category_parser_ (0),
    criticality_parser_ (0),
    code_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    onsetDateTime_parser_ (0),
    onsetAge_parser_ (0),
    onsetPeriod_parser_ (0),
    onsetRange_parser_ (0),
    onsetString_parser_ (0),
    recordedDate_parser_ (0),
    recorder_parser_ (0),
    asserter_parser_ (0),
    lastOccurrence_parser_ (0),
    note_parser_ (0),
    reaction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AllergyIntolerance_Reaction_pskel
  //

  void AllergyIntolerance_Reaction_pskel::
  substance_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->substance_parser_ = &p;
  }

  void AllergyIntolerance_Reaction_pskel::
  manifestation_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->manifestation_parser_ = &p;
  }

  void AllergyIntolerance_Reaction_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void AllergyIntolerance_Reaction_pskel::
  onset_parser (::fhir::dateTime_pskel& p)
  {
    this->onset_parser_ = &p;
  }

  void AllergyIntolerance_Reaction_pskel::
  severity_parser (::fhir::AllergyIntoleranceSeverity_pskel& p)
  {
    this->severity_parser_ = &p;
  }

  void AllergyIntolerance_Reaction_pskel::
  exposureRoute_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->exposureRoute_parser_ = &p;
  }

  void AllergyIntolerance_Reaction_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void AllergyIntolerance_Reaction_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& substance,
           ::fhir::CodeableConcept_pskel& manifestation,
           ::fhir::string_pskel& description,
           ::fhir::dateTime_pskel& onset,
           ::fhir::AllergyIntoleranceSeverity_pskel& severity,
           ::fhir::CodeableConcept_pskel& exposureRoute,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->substance_parser_ = &substance;
    this->manifestation_parser_ = &manifestation;
    this->description_parser_ = &description;
    this->onset_parser_ = &onset;
    this->severity_parser_ = &severity;
    this->exposureRoute_parser_ = &exposureRoute;
    this->note_parser_ = &note;
  }

  AllergyIntolerance_Reaction_pskel::
  AllergyIntolerance_Reaction_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    AllergyIntolerance_Reaction_impl_ (0),
    substance_parser_ (0),
    manifestation_parser_ (0),
    description_parser_ (0),
    onset_parser_ (0),
    severity_parser_ (0),
    exposureRoute_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  AllergyIntolerance_Reaction_pskel::
  AllergyIntolerance_Reaction_pskel (AllergyIntolerance_Reaction_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    AllergyIntolerance_Reaction_impl_ (impl),
    substance_parser_ (0),
    manifestation_parser_ (0),
    description_parser_ (0),
    onset_parser_ (0),
    severity_parser_ (0),
    exposureRoute_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // AllergyIntoleranceCriticality_list_pskel
  //

  AllergyIntoleranceCriticality_list_pskel::
  AllergyIntoleranceCriticality_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AllergyIntoleranceCriticality_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceCriticality_list_pskel_enums_, 3UL);
  }

  AllergyIntoleranceCriticality_list_pskel::
  AllergyIntoleranceCriticality_list_pskel (AllergyIntoleranceCriticality_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AllergyIntoleranceCriticality_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceCriticality_list_pskel_enums_, 3UL);
  }

  // AllergyIntoleranceCriticality_pskel
  //

  void AllergyIntoleranceCriticality_pskel::
  value_parser (::fhir::AllergyIntoleranceCriticality_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AllergyIntoleranceCriticality_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AllergyIntoleranceCriticality_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AllergyIntoleranceCriticality_pskel::
  AllergyIntoleranceCriticality_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AllergyIntoleranceCriticality_impl_ (0),
    value_parser_ (0)
  {
  }

  AllergyIntoleranceCriticality_pskel::
  AllergyIntoleranceCriticality_pskel (AllergyIntoleranceCriticality_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AllergyIntoleranceCriticality_impl_ (impl),
    value_parser_ (0)
  {
  }

  // AllergyIntoleranceType_list_pskel
  //

  AllergyIntoleranceType_list_pskel::
  AllergyIntoleranceType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AllergyIntoleranceType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceType_list_pskel_enums_, 2UL);
  }

  AllergyIntoleranceType_list_pskel::
  AllergyIntoleranceType_list_pskel (AllergyIntoleranceType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AllergyIntoleranceType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceType_list_pskel_enums_, 2UL);
  }

  // AllergyIntoleranceType_pskel
  //

  void AllergyIntoleranceType_pskel::
  value_parser (::fhir::AllergyIntoleranceType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AllergyIntoleranceType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AllergyIntoleranceType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AllergyIntoleranceType_pskel::
  AllergyIntoleranceType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AllergyIntoleranceType_impl_ (0),
    value_parser_ (0)
  {
  }

  AllergyIntoleranceType_pskel::
  AllergyIntoleranceType_pskel (AllergyIntoleranceType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AllergyIntoleranceType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // AllergyIntoleranceCategory_list_pskel
  //

  AllergyIntoleranceCategory_list_pskel::
  AllergyIntoleranceCategory_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AllergyIntoleranceCategory_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceCategory_list_pskel_enums_, 4UL);
  }

  AllergyIntoleranceCategory_list_pskel::
  AllergyIntoleranceCategory_list_pskel (AllergyIntoleranceCategory_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AllergyIntoleranceCategory_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceCategory_list_pskel_enums_, 4UL);
  }

  // AllergyIntoleranceCategory_pskel
  //

  void AllergyIntoleranceCategory_pskel::
  value_parser (::fhir::AllergyIntoleranceCategory_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AllergyIntoleranceCategory_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AllergyIntoleranceCategory_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AllergyIntoleranceCategory_pskel::
  AllergyIntoleranceCategory_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AllergyIntoleranceCategory_impl_ (0),
    value_parser_ (0)
  {
  }

  AllergyIntoleranceCategory_pskel::
  AllergyIntoleranceCategory_pskel (AllergyIntoleranceCategory_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AllergyIntoleranceCategory_impl_ (impl),
    value_parser_ (0)
  {
  }

  // AllergyIntoleranceSeverity_list_pskel
  //

  AllergyIntoleranceSeverity_list_pskel::
  AllergyIntoleranceSeverity_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    AllergyIntoleranceSeverity_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceSeverity_list_pskel_enums_, 3UL);
  }

  AllergyIntoleranceSeverity_list_pskel::
  AllergyIntoleranceSeverity_list_pskel (AllergyIntoleranceSeverity_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    AllergyIntoleranceSeverity_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_AllergyIntoleranceSeverity_list_pskel_enums_, 3UL);
  }

  // AllergyIntoleranceSeverity_pskel
  //

  void AllergyIntoleranceSeverity_pskel::
  value_parser (::fhir::AllergyIntoleranceSeverity_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void AllergyIntoleranceSeverity_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::AllergyIntoleranceSeverity_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  AllergyIntoleranceSeverity_pskel::
  AllergyIntoleranceSeverity_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    AllergyIntoleranceSeverity_impl_ (0),
    value_parser_ (0)
  {
  }

  AllergyIntoleranceSeverity_pskel::
  AllergyIntoleranceSeverity_pskel (AllergyIntoleranceSeverity_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    AllergyIntoleranceSeverity_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // AllergyIntolerance_pskel
  //

  void AllergyIntolerance_pskel::
  identifier ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->identifier ();
  }

  void AllergyIntolerance_pskel::
  clinicalStatus ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->clinicalStatus ();
  }

  void AllergyIntolerance_pskel::
  verificationStatus ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->verificationStatus ();
  }

  void AllergyIntolerance_pskel::
  type ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->type ();
  }

  void AllergyIntolerance_pskel::
  category ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->category ();
  }

  void AllergyIntolerance_pskel::
  criticality ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->criticality ();
  }

  void AllergyIntolerance_pskel::
  code ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->code ();
  }

  void AllergyIntolerance_pskel::
  patient ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->patient ();
  }

  void AllergyIntolerance_pskel::
  encounter ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->encounter ();
  }

  void AllergyIntolerance_pskel::
  onsetDateTime ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->onsetDateTime ();
  }

  void AllergyIntolerance_pskel::
  onsetAge ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->onsetAge ();
  }

  void AllergyIntolerance_pskel::
  onsetPeriod ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->onsetPeriod ();
  }

  void AllergyIntolerance_pskel::
  onsetRange ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->onsetRange ();
  }

  void AllergyIntolerance_pskel::
  onsetString ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->onsetString ();
  }

  void AllergyIntolerance_pskel::
  recordedDate ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->recordedDate ();
  }

  void AllergyIntolerance_pskel::
  recorder ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->recorder ();
  }

  void AllergyIntolerance_pskel::
  asserter ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->asserter ();
  }

  void AllergyIntolerance_pskel::
  lastOccurrence ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->lastOccurrence ();
  }

  void AllergyIntolerance_pskel::
  note ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->note ();
  }

  void AllergyIntolerance_pskel::
  reaction ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->reaction ();
  }

  void AllergyIntolerance_pskel::
  post_AllergyIntolerance ()
  {
    if (this->AllergyIntolerance_impl_)
      this->AllergyIntolerance_impl_->post_AllergyIntolerance ();
    else
      post_DomainResource ();
  }

  void AllergyIntolerance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->clinicalStatus_parser_)
      this->clinicalStatus_parser_->_reset ();

    if (this->verificationStatus_parser_)
      this->verificationStatus_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->criticality_parser_)
      this->criticality_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->onsetDateTime_parser_)
      this->onsetDateTime_parser_->_reset ();

    if (this->onsetAge_parser_)
      this->onsetAge_parser_->_reset ();

    if (this->onsetPeriod_parser_)
      this->onsetPeriod_parser_->_reset ();

    if (this->onsetRange_parser_)
      this->onsetRange_parser_->_reset ();

    if (this->onsetString_parser_)
      this->onsetString_parser_->_reset ();

    if (this->recordedDate_parser_)
      this->recordedDate_parser_->_reset ();

    if (this->recorder_parser_)
      this->recorder_parser_->_reset ();

    if (this->asserter_parser_)
      this->asserter_parser_->_reset ();

    if (this->lastOccurrence_parser_)
      this->lastOccurrence_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->reaction_parser_)
      this->reaction_parser_->_reset ();

    this->resetting_ = false;
  }

  // AllergyIntolerance_Reaction_pskel
  //

  void AllergyIntolerance_Reaction_pskel::
  substance ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->substance ();
  }

  void AllergyIntolerance_Reaction_pskel::
  manifestation ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->manifestation ();
  }

  void AllergyIntolerance_Reaction_pskel::
  description ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->description ();
  }

  void AllergyIntolerance_Reaction_pskel::
  onset ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->onset ();
  }

  void AllergyIntolerance_Reaction_pskel::
  severity ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->severity ();
  }

  void AllergyIntolerance_Reaction_pskel::
  exposureRoute ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->exposureRoute ();
  }

  void AllergyIntolerance_Reaction_pskel::
  note ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->note ();
  }

  void AllergyIntolerance_Reaction_pskel::
  post_AllergyIntolerance_Reaction ()
  {
    if (this->AllergyIntolerance_Reaction_impl_)
      this->AllergyIntolerance_Reaction_impl_->post_AllergyIntolerance_Reaction ();
    else
      post_BackboneElement ();
  }

  void AllergyIntolerance_Reaction_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->substance_parser_)
      this->substance_parser_->_reset ();

    if (this->manifestation_parser_)
      this->manifestation_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->onset_parser_)
      this->onset_parser_->_reset ();

    if (this->severity_parser_)
      this->severity_parser_->_reset ();

    if (this->exposureRoute_parser_)
      this->exposureRoute_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // AllergyIntoleranceCriticality_list_pskel
  //

  void AllergyIntoleranceCriticality_list_pskel::
  post_AllergyIntoleranceCriticality_list ()
  {
    if (this->AllergyIntoleranceCriticality_list_impl_)
      this->AllergyIntoleranceCriticality_list_impl_->post_AllergyIntoleranceCriticality_list ();
    else
      post_code_primitive ();
  }

  const char* const AllergyIntoleranceCriticality_list_pskel::_xsde_AllergyIntoleranceCriticality_list_pskel_enums_[3UL] = 
  {
    "high",
    "low",
    "unable-to-assess"
  };

  // AllergyIntoleranceCriticality_pskel
  //

  void AllergyIntoleranceCriticality_pskel::
  value ()
  {
    if (this->AllergyIntoleranceCriticality_impl_)
      this->AllergyIntoleranceCriticality_impl_->value ();
  }

  void AllergyIntoleranceCriticality_pskel::
  post_AllergyIntoleranceCriticality ()
  {
    if (this->AllergyIntoleranceCriticality_impl_)
      this->AllergyIntoleranceCriticality_impl_->post_AllergyIntoleranceCriticality ();
    else
      post_Element ();
  }

  void AllergyIntoleranceCriticality_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // AllergyIntoleranceType_list_pskel
  //

  void AllergyIntoleranceType_list_pskel::
  post_AllergyIntoleranceType_list ()
  {
    if (this->AllergyIntoleranceType_list_impl_)
      this->AllergyIntoleranceType_list_impl_->post_AllergyIntoleranceType_list ();
    else
      post_code_primitive ();
  }

  const char* const AllergyIntoleranceType_list_pskel::_xsde_AllergyIntoleranceType_list_pskel_enums_[2UL] = 
  {
    "allergy",
    "intolerance"
  };

  // AllergyIntoleranceType_pskel
  //

  void AllergyIntoleranceType_pskel::
  value ()
  {
    if (this->AllergyIntoleranceType_impl_)
      this->AllergyIntoleranceType_impl_->value ();
  }

  void AllergyIntoleranceType_pskel::
  post_AllergyIntoleranceType ()
  {
    if (this->AllergyIntoleranceType_impl_)
      this->AllergyIntoleranceType_impl_->post_AllergyIntoleranceType ();
    else
      post_Element ();
  }

  void AllergyIntoleranceType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // AllergyIntoleranceCategory_list_pskel
  //

  void AllergyIntoleranceCategory_list_pskel::
  post_AllergyIntoleranceCategory_list ()
  {
    if (this->AllergyIntoleranceCategory_list_impl_)
      this->AllergyIntoleranceCategory_list_impl_->post_AllergyIntoleranceCategory_list ();
    else
      post_code_primitive ();
  }

  const char* const AllergyIntoleranceCategory_list_pskel::_xsde_AllergyIntoleranceCategory_list_pskel_enums_[4UL] = 
  {
    "biologic",
    "environment",
    "food",
    "medication"
  };

  // AllergyIntoleranceCategory_pskel
  //

  void AllergyIntoleranceCategory_pskel::
  value ()
  {
    if (this->AllergyIntoleranceCategory_impl_)
      this->AllergyIntoleranceCategory_impl_->value ();
  }

  void AllergyIntoleranceCategory_pskel::
  post_AllergyIntoleranceCategory ()
  {
    if (this->AllergyIntoleranceCategory_impl_)
      this->AllergyIntoleranceCategory_impl_->post_AllergyIntoleranceCategory ();
    else
      post_Element ();
  }

  void AllergyIntoleranceCategory_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // AllergyIntoleranceSeverity_list_pskel
  //

  void AllergyIntoleranceSeverity_list_pskel::
  post_AllergyIntoleranceSeverity_list ()
  {
    if (this->AllergyIntoleranceSeverity_list_impl_)
      this->AllergyIntoleranceSeverity_list_impl_->post_AllergyIntoleranceSeverity_list ();
    else
      post_code_primitive ();
  }

  const char* const AllergyIntoleranceSeverity_list_pskel::_xsde_AllergyIntoleranceSeverity_list_pskel_enums_[3UL] = 
  {
    "mild",
    "moderate",
    "severe"
  };

  // AllergyIntoleranceSeverity_pskel
  //

  void AllergyIntoleranceSeverity_pskel::
  value ()
  {
    if (this->AllergyIntoleranceSeverity_impl_)
      this->AllergyIntoleranceSeverity_impl_->value ();
  }

  void AllergyIntoleranceSeverity_pskel::
  post_AllergyIntoleranceSeverity ()
  {
    if (this->AllergyIntoleranceSeverity_impl_)
      this->AllergyIntoleranceSeverity_impl_->post_AllergyIntoleranceSeverity ();
    else
      post_Element ();
  }

  void AllergyIntoleranceSeverity_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for AllergyIntolerance_pskel.
  //
  bool AllergyIntolerance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "clinicalStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "verificationStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "category" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "criticality" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "code" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "patient" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AllergyIntolerance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AllergyIntolerance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AllergyIntolerance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void AllergyIntolerance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AllergyIntolerance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "clinicalStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->clinicalStatus_parser_)
            {
              this->clinicalStatus_parser_->pre ();
              ctx.nested_parser (this->clinicalStatus_parser_);
            }
          }
          else
          {
            if (this->clinicalStatus_parser_ != 0)
            {
              this->clinicalStatus_parser_->post_CodeableConcept ();
              this->clinicalStatus ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "verificationStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->verificationStatus_parser_)
            {
              this->verificationStatus_parser_->pre ();
              ctx.nested_parser (this->verificationStatus_parser_);
            }
          }
          else
          {
            if (this->verificationStatus_parser_ != 0)
            {
              this->verificationStatus_parser_->post_CodeableConcept ();
              this->verificationStatus ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_AllergyIntoleranceType ();
              this->type ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_AllergyIntoleranceCategory ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "criticality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->criticality_parser_)
            {
              this->criticality_parser_->pre ();
              ctx.nested_parser (this->criticality_parser_);
            }
          }
          else
          {
            if (this->criticality_parser_ != 0)
            {
              this->criticality_parser_->post_AllergyIntoleranceCriticality ();
              this->criticality ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "onsetDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetDateTime_parser_)
            {
              this->onsetDateTime_parser_->pre ();
              ctx.nested_parser (this->onsetDateTime_parser_);
            }
          }
          else
          {
            if (this->onsetDateTime_parser_ != 0)
            {
              this->onsetDateTime_parser_->post_dateTime ();
              this->onsetDateTime ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "onsetAge" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetAge_parser_)
            {
              this->onsetAge_parser_->pre ();
              ctx.nested_parser (this->onsetAge_parser_);
            }
          }
          else
          {
            if (this->onsetAge_parser_ != 0)
            {
              this->onsetAge_parser_->post_Age ();
              this->onsetAge ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "onsetPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetPeriod_parser_)
            {
              this->onsetPeriod_parser_->pre ();
              ctx.nested_parser (this->onsetPeriod_parser_);
            }
          }
          else
          {
            if (this->onsetPeriod_parser_ != 0)
            {
              this->onsetPeriod_parser_->post_Period ();
              this->onsetPeriod ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "onsetRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetRange_parser_)
            {
              this->onsetRange_parser_->pre ();
              ctx.nested_parser (this->onsetRange_parser_);
            }
          }
          else
          {
            if (this->onsetRange_parser_ != 0)
            {
              this->onsetRange_parser_->post_Range ();
              this->onsetRange ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "onsetString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onsetString_parser_)
            {
              this->onsetString_parser_->pre ();
              ctx.nested_parser (this->onsetString_parser_);
            }
          }
          else
          {
            if (this->onsetString_parser_ != 0)
            {
              this->onsetString_parser_->post_string ();
              this->onsetString ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "recordedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recordedDate_parser_)
            {
              this->recordedDate_parser_->pre ();
              ctx.nested_parser (this->recordedDate_parser_);
            }
          }
          else
          {
            if (this->recordedDate_parser_ != 0)
            {
              this->recordedDate_parser_->post_dateTime ();
              this->recordedDate ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "recorder" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recorder_parser_)
            {
              this->recorder_parser_->pre ();
              ctx.nested_parser (this->recorder_parser_);
            }
          }
          else
          {
            if (this->recorder_parser_ != 0)
            {
              this->recorder_parser_->post_Reference ();
              this->recorder ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "asserter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->asserter_parser_)
            {
              this->asserter_parser_->pre ();
              ctx.nested_parser (this->asserter_parser_);
            }
          }
          else
          {
            if (this->asserter_parser_ != 0)
            {
              this->asserter_parser_->post_Reference ();
              this->asserter ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "lastOccurrence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastOccurrence_parser_)
            {
              this->lastOccurrence_parser_->pre ();
              ctx.nested_parser (this->lastOccurrence_parser_);
            }
          }
          else
          {
            if (this->lastOccurrence_parser_ != 0)
            {
              this->lastOccurrence_parser_->post_dateTime ();
              this->lastOccurrence ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "reaction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reaction_parser_)
            {
              this->reaction_parser_->pre ();
              ctx.nested_parser (this->reaction_parser_);
            }
          }
          else
          {
            if (this->reaction_parser_ != 0)
            {
              this->reaction_parser_->post_AllergyIntolerance_Reaction ();
              this->reaction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for AllergyIntolerance_Reaction_pskel.
  //
  bool AllergyIntolerance_Reaction_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "substance" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "manifestation" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &AllergyIntolerance_Reaction_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool AllergyIntolerance_Reaction_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void AllergyIntolerance_Reaction_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void AllergyIntolerance_Reaction_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void AllergyIntolerance_Reaction_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "substance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substance_parser_)
            {
              this->substance_parser_->pre ();
              ctx.nested_parser (this->substance_parser_);
            }
          }
          else
          {
            if (this->substance_parser_ != 0)
            {
              this->substance_parser_->post_CodeableConcept ();
              this->substance ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "manifestation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manifestation_parser_)
            {
              this->manifestation_parser_->pre ();
              ctx.nested_parser (this->manifestation_parser_);
            }
          }
          else
          {
            if (this->manifestation_parser_ != 0)
            {
              this->manifestation_parser_->post_CodeableConcept ();
              this->manifestation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "onset" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onset_parser_)
            {
              this->onset_parser_->pre ();
              ctx.nested_parser (this->onset_parser_);
            }
          }
          else
          {
            if (this->onset_parser_ != 0)
            {
              this->onset_parser_->post_dateTime ();
              this->onset ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "severity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->severity_parser_)
            {
              this->severity_parser_->pre ();
              ctx.nested_parser (this->severity_parser_);
            }
          }
          else
          {
            if (this->severity_parser_ != 0)
            {
              this->severity_parser_->post_AllergyIntoleranceSeverity ();
              this->severity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "exposureRoute" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exposureRoute_parser_)
            {
              this->exposureRoute_parser_->pre ();
              ctx.nested_parser (this->exposureRoute_parser_);
            }
          }
          else
          {
            if (this->exposureRoute_parser_ != 0)
            {
              this->exposureRoute_parser_->post_CodeableConcept ();
              this->exposureRoute ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for AllergyIntoleranceCriticality_pskel.
  //
  bool AllergyIntoleranceCriticality_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AllergyIntoleranceCriticality_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for AllergyIntoleranceType_pskel.
  //
  bool AllergyIntoleranceType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AllergyIntoleranceType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for AllergyIntoleranceCategory_pskel.
  //
  bool AllergyIntoleranceCategory_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AllergyIntoleranceCategory_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for AllergyIntoleranceSeverity_pskel.
  //
  bool AllergyIntoleranceSeverity_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_AllergyIntoleranceSeverity_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

