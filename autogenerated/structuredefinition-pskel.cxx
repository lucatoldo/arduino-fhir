// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "structuredefinition-pskel.hxx"

namespace fhir
{
  // StructureDefinition_pskel
  //

  void StructureDefinition_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void StructureDefinition_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void StructureDefinition_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void StructureDefinition_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void StructureDefinition_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void StructureDefinition_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void StructureDefinition_pskel::
  experimental_parser (::fhir::boolean_pskel& p)
  {
    this->experimental_parser_ = &p;
  }

  void StructureDefinition_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void StructureDefinition_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void StructureDefinition_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void StructureDefinition_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void StructureDefinition_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void StructureDefinition_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void StructureDefinition_pskel::
  purpose_parser (::fhir::markdown_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void StructureDefinition_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void StructureDefinition_pskel::
  keyword_parser (::fhir::Coding_pskel& p)
  {
    this->keyword_parser_ = &p;
  }

  void StructureDefinition_pskel::
  fhirVersion_parser (::fhir::FHIRVersion_pskel& p)
  {
    this->fhirVersion_parser_ = &p;
  }

  void StructureDefinition_pskel::
  mapping_parser (::fhir::StructureDefinition_Mapping_pskel& p)
  {
    this->mapping_parser_ = &p;
  }

  void StructureDefinition_pskel::
  kind_parser (::fhir::StructureDefinitionKind_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void StructureDefinition_pskel::
  abstract_parser (::fhir::boolean_pskel& p)
  {
    this->abstract_parser_ = &p;
  }

  void StructureDefinition_pskel::
  context_parser (::fhir::StructureDefinition_Context_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void StructureDefinition_pskel::
  contextInvariant_parser (::fhir::string_pskel& p)
  {
    this->contextInvariant_parser_ = &p;
  }

  void StructureDefinition_pskel::
  type_parser (::fhir::uri_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void StructureDefinition_pskel::
  baseDefinition_parser (::fhir::canonical_pskel& p)
  {
    this->baseDefinition_parser_ = &p;
  }

  void StructureDefinition_pskel::
  derivation_parser (::fhir::TypeDerivationRule_pskel& p)
  {
    this->derivation_parser_ = &p;
  }

  void StructureDefinition_pskel::
  snapshot_parser (::fhir::StructureDefinition_Snapshot_pskel& p)
  {
    this->snapshot_parser_ = &p;
  }

  void StructureDefinition_pskel::
  differential_parser (::fhir::StructureDefinition_Differential_pskel& p)
  {
    this->differential_parser_ = &p;
  }

  void StructureDefinition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::boolean_pskel& experimental,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& purpose,
           ::fhir::markdown_pskel& copyright,
           ::fhir::Coding_pskel& keyword,
           ::fhir::FHIRVersion_pskel& fhirVersion,
           ::fhir::StructureDefinition_Mapping_pskel& mapping,
           ::fhir::StructureDefinitionKind_pskel& kind,
           ::fhir::boolean_pskel& abstract,
           ::fhir::StructureDefinition_Context_pskel& context,
           ::fhir::string_pskel& contextInvariant,
           ::fhir::uri_pskel& type,
           ::fhir::canonical_pskel& baseDefinition,
           ::fhir::TypeDerivationRule_pskel& derivation,
           ::fhir::StructureDefinition_Snapshot_pskel& snapshot,
           ::fhir::StructureDefinition_Differential_pskel& differential)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->status_parser_ = &status;
    this->experimental_parser_ = &experimental;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->purpose_parser_ = &purpose;
    this->copyright_parser_ = &copyright;
    this->keyword_parser_ = &keyword;
    this->fhirVersion_parser_ = &fhirVersion;
    this->mapping_parser_ = &mapping;
    this->kind_parser_ = &kind;
    this->abstract_parser_ = &abstract;
    this->context_parser_ = &context;
    this->contextInvariant_parser_ = &contextInvariant;
    this->type_parser_ = &type;
    this->baseDefinition_parser_ = &baseDefinition;
    this->derivation_parser_ = &derivation;
    this->snapshot_parser_ = &snapshot;
    this->differential_parser_ = &differential;
  }

  StructureDefinition_pskel::
  StructureDefinition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    StructureDefinition_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    keyword_parser_ (0),
    fhirVersion_parser_ (0),
    mapping_parser_ (0),
    kind_parser_ (0),
    abstract_parser_ (0),
    context_parser_ (0),
    contextInvariant_parser_ (0),
    type_parser_ (0),
    baseDefinition_parser_ (0),
    derivation_parser_ (0),
    snapshot_parser_ (0),
    differential_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureDefinition_pskel::
  StructureDefinition_pskel (StructureDefinition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    StructureDefinition_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    status_parser_ (0),
    experimental_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    purpose_parser_ (0),
    copyright_parser_ (0),
    keyword_parser_ (0),
    fhirVersion_parser_ (0),
    mapping_parser_ (0),
    kind_parser_ (0),
    abstract_parser_ (0),
    context_parser_ (0),
    contextInvariant_parser_ (0),
    type_parser_ (0),
    baseDefinition_parser_ (0),
    derivation_parser_ (0),
    snapshot_parser_ (0),
    differential_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureDefinition_Mapping_pskel
  //

  void StructureDefinition_Mapping_pskel::
  identity_parser (::fhir::id_pskel& p)
  {
    this->identity_parser_ = &p;
  }

  void StructureDefinition_Mapping_pskel::
  uri_parser (::fhir::uri_pskel& p)
  {
    this->uri_parser_ = &p;
  }

  void StructureDefinition_Mapping_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void StructureDefinition_Mapping_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void StructureDefinition_Mapping_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& identity,
           ::fhir::uri_pskel& uri,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& comment)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identity_parser_ = &identity;
    this->uri_parser_ = &uri;
    this->name_parser_ = &name;
    this->comment_parser_ = &comment;
  }

  StructureDefinition_Mapping_pskel::
  StructureDefinition_Mapping_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureDefinition_Mapping_impl_ (0),
    identity_parser_ (0),
    uri_parser_ (0),
    name_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureDefinition_Mapping_pskel::
  StructureDefinition_Mapping_pskel (StructureDefinition_Mapping_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureDefinition_Mapping_impl_ (impl),
    identity_parser_ (0),
    uri_parser_ (0),
    name_parser_ (0),
    comment_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureDefinition_Context_pskel
  //

  void StructureDefinition_Context_pskel::
  type_parser (::fhir::ExtensionContextType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void StructureDefinition_Context_pskel::
  expression_parser (::fhir::string_pskel& p)
  {
    this->expression_parser_ = &p;
  }

  void StructureDefinition_Context_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ExtensionContextType_pskel& type,
           ::fhir::string_pskel& expression)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->expression_parser_ = &expression;
  }

  StructureDefinition_Context_pskel::
  StructureDefinition_Context_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureDefinition_Context_impl_ (0),
    type_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureDefinition_Context_pskel::
  StructureDefinition_Context_pskel (StructureDefinition_Context_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureDefinition_Context_impl_ (impl),
    type_parser_ (0),
    expression_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureDefinition_Snapshot_pskel
  //

  void StructureDefinition_Snapshot_pskel::
  element_parser (::fhir::ElementDefinition_pskel& p)
  {
    this->element_parser_ = &p;
  }

  void StructureDefinition_Snapshot_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ElementDefinition_pskel& element)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->element_parser_ = &element;
  }

  StructureDefinition_Snapshot_pskel::
  StructureDefinition_Snapshot_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureDefinition_Snapshot_impl_ (0),
    element_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureDefinition_Snapshot_pskel::
  StructureDefinition_Snapshot_pskel (StructureDefinition_Snapshot_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureDefinition_Snapshot_impl_ (impl),
    element_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureDefinition_Differential_pskel
  //

  void StructureDefinition_Differential_pskel::
  element_parser (::fhir::ElementDefinition_pskel& p)
  {
    this->element_parser_ = &p;
  }

  void StructureDefinition_Differential_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::ElementDefinition_pskel& element)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->element_parser_ = &element;
  }

  StructureDefinition_Differential_pskel::
  StructureDefinition_Differential_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    StructureDefinition_Differential_impl_ (0),
    element_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  StructureDefinition_Differential_pskel::
  StructureDefinition_Differential_pskel (StructureDefinition_Differential_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    StructureDefinition_Differential_impl_ (impl),
    element_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // StructureDefinitionKind_list_pskel
  //

  StructureDefinitionKind_list_pskel::
  StructureDefinitionKind_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    StructureDefinitionKind_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_StructureDefinitionKind_list_pskel_enums_, 4UL);
  }

  StructureDefinitionKind_list_pskel::
  StructureDefinitionKind_list_pskel (StructureDefinitionKind_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    StructureDefinitionKind_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_StructureDefinitionKind_list_pskel_enums_, 4UL);
  }

  // StructureDefinitionKind_pskel
  //

  void StructureDefinitionKind_pskel::
  value_parser (::fhir::StructureDefinitionKind_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void StructureDefinitionKind_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::StructureDefinitionKind_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  StructureDefinitionKind_pskel::
  StructureDefinitionKind_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    StructureDefinitionKind_impl_ (0),
    value_parser_ (0)
  {
  }

  StructureDefinitionKind_pskel::
  StructureDefinitionKind_pskel (StructureDefinitionKind_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    StructureDefinitionKind_impl_ (impl),
    value_parser_ (0)
  {
  }

  // TypeDerivationRule_list_pskel
  //

  TypeDerivationRule_list_pskel::
  TypeDerivationRule_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    TypeDerivationRule_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_TypeDerivationRule_list_pskel_enums_, 2UL);
  }

  TypeDerivationRule_list_pskel::
  TypeDerivationRule_list_pskel (TypeDerivationRule_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    TypeDerivationRule_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_TypeDerivationRule_list_pskel_enums_, 2UL);
  }

  // TypeDerivationRule_pskel
  //

  void TypeDerivationRule_pskel::
  value_parser (::fhir::TypeDerivationRule_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void TypeDerivationRule_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::TypeDerivationRule_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  TypeDerivationRule_pskel::
  TypeDerivationRule_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    TypeDerivationRule_impl_ (0),
    value_parser_ (0)
  {
  }

  TypeDerivationRule_pskel::
  TypeDerivationRule_pskel (TypeDerivationRule_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    TypeDerivationRule_impl_ (impl),
    value_parser_ (0)
  {
  }

  // ExtensionContextType_list_pskel
  //

  ExtensionContextType_list_pskel::
  ExtensionContextType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ExtensionContextType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ExtensionContextType_list_pskel_enums_, 3UL);
  }

  ExtensionContextType_list_pskel::
  ExtensionContextType_list_pskel (ExtensionContextType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ExtensionContextType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ExtensionContextType_list_pskel_enums_, 3UL);
  }

  // ExtensionContextType_pskel
  //

  void ExtensionContextType_pskel::
  value_parser (::fhir::ExtensionContextType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ExtensionContextType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ExtensionContextType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ExtensionContextType_pskel::
  ExtensionContextType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ExtensionContextType_impl_ (0),
    value_parser_ (0)
  {
  }

  ExtensionContextType_pskel::
  ExtensionContextType_pskel (ExtensionContextType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ExtensionContextType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // StructureDefinition_pskel
  //

  void StructureDefinition_pskel::
  url ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->url ();
  }

  void StructureDefinition_pskel::
  identifier ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->identifier ();
  }

  void StructureDefinition_pskel::
  version ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->version ();
  }

  void StructureDefinition_pskel::
  name ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->name ();
  }

  void StructureDefinition_pskel::
  title ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->title ();
  }

  void StructureDefinition_pskel::
  status ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->status ();
  }

  void StructureDefinition_pskel::
  experimental ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->experimental ();
  }

  void StructureDefinition_pskel::
  date ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->date ();
  }

  void StructureDefinition_pskel::
  publisher ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->publisher ();
  }

  void StructureDefinition_pskel::
  contact ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->contact ();
  }

  void StructureDefinition_pskel::
  description ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->description ();
  }

  void StructureDefinition_pskel::
  useContext ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->useContext ();
  }

  void StructureDefinition_pskel::
  jurisdiction ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->jurisdiction ();
  }

  void StructureDefinition_pskel::
  purpose ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->purpose ();
  }

  void StructureDefinition_pskel::
  copyright ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->copyright ();
  }

  void StructureDefinition_pskel::
  keyword ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->keyword ();
  }

  void StructureDefinition_pskel::
  fhirVersion ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->fhirVersion ();
  }

  void StructureDefinition_pskel::
  mapping ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->mapping ();
  }

  void StructureDefinition_pskel::
  kind ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->kind ();
  }

  void StructureDefinition_pskel::
  abstract ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->abstract ();
  }

  void StructureDefinition_pskel::
  context ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->context ();
  }

  void StructureDefinition_pskel::
  contextInvariant ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->contextInvariant ();
  }

  void StructureDefinition_pskel::
  type ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->type ();
  }

  void StructureDefinition_pskel::
  baseDefinition ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->baseDefinition ();
  }

  void StructureDefinition_pskel::
  derivation ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->derivation ();
  }

  void StructureDefinition_pskel::
  snapshot ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->snapshot ();
  }

  void StructureDefinition_pskel::
  differential ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->differential ();
  }

  void StructureDefinition_pskel::
  post_StructureDefinition ()
  {
    if (this->StructureDefinition_impl_)
      this->StructureDefinition_impl_->post_StructureDefinition ();
    else
      post_DomainResource ();
  }

  void StructureDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->experimental_parser_)
      this->experimental_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->keyword_parser_)
      this->keyword_parser_->_reset ();

    if (this->fhirVersion_parser_)
      this->fhirVersion_parser_->_reset ();

    if (this->mapping_parser_)
      this->mapping_parser_->_reset ();

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->abstract_parser_)
      this->abstract_parser_->_reset ();

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->contextInvariant_parser_)
      this->contextInvariant_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->baseDefinition_parser_)
      this->baseDefinition_parser_->_reset ();

    if (this->derivation_parser_)
      this->derivation_parser_->_reset ();

    if (this->snapshot_parser_)
      this->snapshot_parser_->_reset ();

    if (this->differential_parser_)
      this->differential_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureDefinition_Mapping_pskel
  //

  void StructureDefinition_Mapping_pskel::
  identity ()
  {
    if (this->StructureDefinition_Mapping_impl_)
      this->StructureDefinition_Mapping_impl_->identity ();
  }

  void StructureDefinition_Mapping_pskel::
  uri ()
  {
    if (this->StructureDefinition_Mapping_impl_)
      this->StructureDefinition_Mapping_impl_->uri ();
  }

  void StructureDefinition_Mapping_pskel::
  name ()
  {
    if (this->StructureDefinition_Mapping_impl_)
      this->StructureDefinition_Mapping_impl_->name ();
  }

  void StructureDefinition_Mapping_pskel::
  comment ()
  {
    if (this->StructureDefinition_Mapping_impl_)
      this->StructureDefinition_Mapping_impl_->comment ();
  }

  void StructureDefinition_Mapping_pskel::
  post_StructureDefinition_Mapping ()
  {
    if (this->StructureDefinition_Mapping_impl_)
      this->StructureDefinition_Mapping_impl_->post_StructureDefinition_Mapping ();
    else
      post_BackboneElement ();
  }

  void StructureDefinition_Mapping_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identity_parser_)
      this->identity_parser_->_reset ();

    if (this->uri_parser_)
      this->uri_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureDefinition_Context_pskel
  //

  void StructureDefinition_Context_pskel::
  type ()
  {
    if (this->StructureDefinition_Context_impl_)
      this->StructureDefinition_Context_impl_->type ();
  }

  void StructureDefinition_Context_pskel::
  expression ()
  {
    if (this->StructureDefinition_Context_impl_)
      this->StructureDefinition_Context_impl_->expression ();
  }

  void StructureDefinition_Context_pskel::
  post_StructureDefinition_Context ()
  {
    if (this->StructureDefinition_Context_impl_)
      this->StructureDefinition_Context_impl_->post_StructureDefinition_Context ();
    else
      post_BackboneElement ();
  }

  void StructureDefinition_Context_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->expression_parser_)
      this->expression_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureDefinition_Snapshot_pskel
  //

  void StructureDefinition_Snapshot_pskel::
  element ()
  {
    if (this->StructureDefinition_Snapshot_impl_)
      this->StructureDefinition_Snapshot_impl_->element ();
  }

  void StructureDefinition_Snapshot_pskel::
  post_StructureDefinition_Snapshot ()
  {
    if (this->StructureDefinition_Snapshot_impl_)
      this->StructureDefinition_Snapshot_impl_->post_StructureDefinition_Snapshot ();
    else
      post_BackboneElement ();
  }

  void StructureDefinition_Snapshot_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->element_parser_)
      this->element_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureDefinition_Differential_pskel
  //

  void StructureDefinition_Differential_pskel::
  element ()
  {
    if (this->StructureDefinition_Differential_impl_)
      this->StructureDefinition_Differential_impl_->element ();
  }

  void StructureDefinition_Differential_pskel::
  post_StructureDefinition_Differential ()
  {
    if (this->StructureDefinition_Differential_impl_)
      this->StructureDefinition_Differential_impl_->post_StructureDefinition_Differential ();
    else
      post_BackboneElement ();
  }

  void StructureDefinition_Differential_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->element_parser_)
      this->element_parser_->_reset ();

    this->resetting_ = false;
  }

  // StructureDefinitionKind_list_pskel
  //

  void StructureDefinitionKind_list_pskel::
  post_StructureDefinitionKind_list ()
  {
    if (this->StructureDefinitionKind_list_impl_)
      this->StructureDefinitionKind_list_impl_->post_StructureDefinitionKind_list ();
    else
      post_code_primitive ();
  }

  const char* const StructureDefinitionKind_list_pskel::_xsde_StructureDefinitionKind_list_pskel_enums_[4UL] = 
  {
    "complex-type",
    "logical",
    "primitive-type",
    "resource"
  };

  // StructureDefinitionKind_pskel
  //

  void StructureDefinitionKind_pskel::
  value ()
  {
    if (this->StructureDefinitionKind_impl_)
      this->StructureDefinitionKind_impl_->value ();
  }

  void StructureDefinitionKind_pskel::
  post_StructureDefinitionKind ()
  {
    if (this->StructureDefinitionKind_impl_)
      this->StructureDefinitionKind_impl_->post_StructureDefinitionKind ();
    else
      post_Element ();
  }

  void StructureDefinitionKind_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // TypeDerivationRule_list_pskel
  //

  void TypeDerivationRule_list_pskel::
  post_TypeDerivationRule_list ()
  {
    if (this->TypeDerivationRule_list_impl_)
      this->TypeDerivationRule_list_impl_->post_TypeDerivationRule_list ();
    else
      post_code_primitive ();
  }

  const char* const TypeDerivationRule_list_pskel::_xsde_TypeDerivationRule_list_pskel_enums_[2UL] = 
  {
    "constraint",
    "specialization"
  };

  // TypeDerivationRule_pskel
  //

  void TypeDerivationRule_pskel::
  value ()
  {
    if (this->TypeDerivationRule_impl_)
      this->TypeDerivationRule_impl_->value ();
  }

  void TypeDerivationRule_pskel::
  post_TypeDerivationRule ()
  {
    if (this->TypeDerivationRule_impl_)
      this->TypeDerivationRule_impl_->post_TypeDerivationRule ();
    else
      post_Element ();
  }

  void TypeDerivationRule_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // ExtensionContextType_list_pskel
  //

  void ExtensionContextType_list_pskel::
  post_ExtensionContextType_list ()
  {
    if (this->ExtensionContextType_list_impl_)
      this->ExtensionContextType_list_impl_->post_ExtensionContextType_list ();
    else
      post_code_primitive ();
  }

  const char* const ExtensionContextType_list_pskel::_xsde_ExtensionContextType_list_pskel_enums_[3UL] = 
  {
    "element",
    "extension",
    "fhirpath"
  };

  // ExtensionContextType_pskel
  //

  void ExtensionContextType_pskel::
  value ()
  {
    if (this->ExtensionContextType_impl_)
      this->ExtensionContextType_impl_->value ();
  }

  void ExtensionContextType_pskel::
  post_ExtensionContextType ()
  {
    if (this->ExtensionContextType_impl_)
      this->ExtensionContextType_impl_->post_ExtensionContextType ();
    else
      post_Element ();
  }

  void ExtensionContextType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for StructureDefinition_pskel.
  //
  bool StructureDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void StructureDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "experimental" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->experimental_parser_)
            {
              this->experimental_parser_->pre ();
              ctx.nested_parser (this->experimental_parser_);
            }
          }
          else
          {
            if (this->experimental_parser_ != 0)
            {
              this->experimental_parser_->post_boolean ();
              this->experimental ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_markdown ();
              this->purpose ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "keyword" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->keyword_parser_)
            {
              this->keyword_parser_->pre ();
              ctx.nested_parser (this->keyword_parser_);
            }
          }
          else
          {
            if (this->keyword_parser_ != 0)
            {
              this->keyword_parser_->post_Coding ();
              this->keyword ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "fhirVersion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fhirVersion_parser_)
            {
              this->fhirVersion_parser_->pre ();
              ctx.nested_parser (this->fhirVersion_parser_);
            }
          }
          else
          {
            if (this->fhirVersion_parser_ != 0)
            {
              this->fhirVersion_parser_->post_FHIRVersion ();
              this->fhirVersion ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "mapping" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mapping_parser_)
            {
              this->mapping_parser_->pre ();
              ctx.nested_parser (this->mapping_parser_);
            }
          }
          else
          {
            if (this->mapping_parser_ != 0)
            {
              this->mapping_parser_->post_StructureDefinition_Mapping ();
              this->mapping ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_StructureDefinitionKind ();
              this->kind ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "abstract" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->abstract_parser_)
            {
              this->abstract_parser_->pre ();
              ctx.nested_parser (this->abstract_parser_);
            }
          }
          else
          {
            if (this->abstract_parser_ != 0)
            {
              this->abstract_parser_->post_boolean ();
              this->abstract ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_StructureDefinition_Context ();
              this->context ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "contextInvariant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contextInvariant_parser_)
            {
              this->contextInvariant_parser_->pre ();
              ctx.nested_parser (this->contextInvariant_parser_);
            }
          }
          else
          {
            if (this->contextInvariant_parser_ != 0)
            {
              this->contextInvariant_parser_->post_string ();
              this->contextInvariant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_uri ();
              this->type ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "baseDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->baseDefinition_parser_)
            {
              this->baseDefinition_parser_->pre ();
              ctx.nested_parser (this->baseDefinition_parser_);
            }
          }
          else
          {
            if (this->baseDefinition_parser_ != 0)
            {
              this->baseDefinition_parser_->post_canonical ();
              this->baseDefinition ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "derivation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->derivation_parser_)
            {
              this->derivation_parser_->pre ();
              ctx.nested_parser (this->derivation_parser_);
            }
          }
          else
          {
            if (this->derivation_parser_ != 0)
            {
              this->derivation_parser_->post_TypeDerivationRule ();
              this->derivation ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "snapshot" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->snapshot_parser_)
            {
              this->snapshot_parser_->pre ();
              ctx.nested_parser (this->snapshot_parser_);
            }
          }
          else
          {
            if (this->snapshot_parser_ != 0)
            {
              this->snapshot_parser_->post_StructureDefinition_Snapshot ();
              this->snapshot ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "differential" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->differential_parser_)
            {
              this->differential_parser_->pre ();
              ctx.nested_parser (this->differential_parser_);
            }
          }
          else
          {
            if (this->differential_parser_ != 0)
            {
              this->differential_parser_->post_StructureDefinition_Differential ();
              this->differential ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureDefinition_Mapping_pskel.
  //
  bool StructureDefinition_Mapping_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identity" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureDefinition_Mapping_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureDefinition_Mapping_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureDefinition_Mapping_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureDefinition_Mapping_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureDefinition_Mapping_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identity_parser_)
            {
              this->identity_parser_->pre ();
              ctx.nested_parser (this->identity_parser_);
            }
          }
          else
          {
            if (this->identity_parser_ != 0)
            {
              this->identity_parser_->post_id ();
              this->identity ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "uri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uri_parser_)
            {
              this->uri_parser_->pre ();
              ctx.nested_parser (this->uri_parser_);
            }
          }
          else
          {
            if (this->uri_parser_ != 0)
            {
              this->uri_parser_->post_uri ();
              this->uri ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureDefinition_Context_pskel.
  //
  bool StructureDefinition_Context_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureDefinition_Context_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureDefinition_Context_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureDefinition_Context_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureDefinition_Context_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureDefinition_Context_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_ExtensionContextType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "expression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expression_parser_)
            {
              this->expression_parser_->pre ();
              ctx.nested_parser (this->expression_parser_);
            }
          }
          else
          {
            if (this->expression_parser_ != 0)
            {
              this->expression_parser_->post_string ();
              this->expression ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureDefinition_Snapshot_pskel.
  //
  bool StructureDefinition_Snapshot_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "element" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureDefinition_Snapshot_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureDefinition_Snapshot_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureDefinition_Snapshot_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureDefinition_Snapshot_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureDefinition_Snapshot_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "element" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->element_parser_)
            {
              this->element_parser_->pre ();
              ctx.nested_parser (this->element_parser_);
            }
          }
          else
          {
            if (this->element_parser_ != 0)
            {
              this->element_parser_->post_ElementDefinition ();
              this->element ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for StructureDefinition_Differential_pskel.
  //
  bool StructureDefinition_Differential_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "element" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &StructureDefinition_Differential_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool StructureDefinition_Differential_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void StructureDefinition_Differential_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void StructureDefinition_Differential_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void StructureDefinition_Differential_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "element" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->element_parser_)
            {
              this->element_parser_->pre ();
              ctx.nested_parser (this->element_parser_);
            }
          }
          else
          {
            if (this->element_parser_ != 0)
            {
              this->element_parser_->post_ElementDefinition ();
              this->element ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for StructureDefinitionKind_pskel.
  //
  bool StructureDefinitionKind_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_StructureDefinitionKind_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for TypeDerivationRule_pskel.
  //
  bool TypeDerivationRule_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_TypeDerivationRule_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for ExtensionContextType_pskel.
  //
  bool ExtensionContextType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ExtensionContextType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

