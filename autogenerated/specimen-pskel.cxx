// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "specimen-pskel.hxx"

namespace fhir
{
  // Specimen_pskel
  //

  void Specimen_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Specimen_pskel::
  accessionIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->accessionIdentifier_parser_ = &p;
  }

  void Specimen_pskel::
  status_parser (::fhir::SpecimenStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Specimen_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Specimen_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Specimen_pskel::
  receivedTime_parser (::fhir::dateTime_pskel& p)
  {
    this->receivedTime_parser_ = &p;
  }

  void Specimen_pskel::
  parent_parser (::fhir::Reference_pskel& p)
  {
    this->parent_parser_ = &p;
  }

  void Specimen_pskel::
  request_parser (::fhir::Reference_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void Specimen_pskel::
  collection_parser (::fhir::Specimen_Collection_pskel& p)
  {
    this->collection_parser_ = &p;
  }

  void Specimen_pskel::
  processing_parser (::fhir::Specimen_Processing_pskel& p)
  {
    this->processing_parser_ = &p;
  }

  void Specimen_pskel::
  container_parser (::fhir::Specimen_Container_pskel& p)
  {
    this->container_parser_ = &p;
  }

  void Specimen_pskel::
  condition_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void Specimen_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Specimen_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Identifier_pskel& accessionIdentifier,
           ::fhir::SpecimenStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& subject,
           ::fhir::dateTime_pskel& receivedTime,
           ::fhir::Reference_pskel& parent,
           ::fhir::Reference_pskel& request,
           ::fhir::Specimen_Collection_pskel& collection,
           ::fhir::Specimen_Processing_pskel& processing,
           ::fhir::Specimen_Container_pskel& container,
           ::fhir::CodeableConcept_pskel& condition,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->accessionIdentifier_parser_ = &accessionIdentifier;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->subject_parser_ = &subject;
    this->receivedTime_parser_ = &receivedTime;
    this->parent_parser_ = &parent;
    this->request_parser_ = &request;
    this->collection_parser_ = &collection;
    this->processing_parser_ = &processing;
    this->container_parser_ = &container;
    this->condition_parser_ = &condition;
    this->note_parser_ = &note;
  }

  Specimen_pskel::
  Specimen_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Specimen_impl_ (0),
    identifier_parser_ (0),
    accessionIdentifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    subject_parser_ (0),
    receivedTime_parser_ (0),
    parent_parser_ (0),
    request_parser_ (0),
    collection_parser_ (0),
    processing_parser_ (0),
    container_parser_ (0),
    condition_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Specimen_pskel::
  Specimen_pskel (Specimen_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Specimen_impl_ (impl),
    identifier_parser_ (0),
    accessionIdentifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    subject_parser_ (0),
    receivedTime_parser_ (0),
    parent_parser_ (0),
    request_parser_ (0),
    collection_parser_ (0),
    processing_parser_ (0),
    container_parser_ (0),
    condition_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Specimen_Collection_pskel
  //

  void Specimen_Collection_pskel::
  collector_parser (::fhir::Reference_pskel& p)
  {
    this->collector_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  collectedDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->collectedDateTime_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  collectedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->collectedPeriod_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  duration_parser (::fhir::Duration_pskel& p)
  {
    this->duration_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  method_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->method_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  fastingStatusCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->fastingStatusCodeableConcept_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  fastingStatusDuration_parser (::fhir::Duration_pskel& p)
  {
    this->fastingStatusDuration_parser_ = &p;
  }

  void Specimen_Collection_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& collector,
           ::fhir::dateTime_pskel& collectedDateTime,
           ::fhir::Period_pskel& collectedPeriod,
           ::fhir::Duration_pskel& duration,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::CodeableConcept_pskel& method,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::CodeableConcept_pskel& fastingStatusCodeableConcept,
           ::fhir::Duration_pskel& fastingStatusDuration)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->collector_parser_ = &collector;
    this->collectedDateTime_parser_ = &collectedDateTime;
    this->collectedPeriod_parser_ = &collectedPeriod;
    this->duration_parser_ = &duration;
    this->quantity_parser_ = &quantity;
    this->method_parser_ = &method;
    this->bodySite_parser_ = &bodySite;
    this->fastingStatusCodeableConcept_parser_ = &fastingStatusCodeableConcept;
    this->fastingStatusDuration_parser_ = &fastingStatusDuration;
  }

  Specimen_Collection_pskel::
  Specimen_Collection_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Specimen_Collection_impl_ (0),
    collector_parser_ (0),
    collectedDateTime_parser_ (0),
    collectedPeriod_parser_ (0),
    duration_parser_ (0),
    quantity_parser_ (0),
    method_parser_ (0),
    bodySite_parser_ (0),
    fastingStatusCodeableConcept_parser_ (0),
    fastingStatusDuration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Specimen_Collection_pskel::
  Specimen_Collection_pskel (Specimen_Collection_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Specimen_Collection_impl_ (impl),
    collector_parser_ (0),
    collectedDateTime_parser_ (0),
    collectedPeriod_parser_ (0),
    duration_parser_ (0),
    quantity_parser_ (0),
    method_parser_ (0),
    bodySite_parser_ (0),
    fastingStatusCodeableConcept_parser_ (0),
    fastingStatusDuration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Specimen_Processing_pskel
  //

  void Specimen_Processing_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Specimen_Processing_pskel::
  procedure_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->procedure_parser_ = &p;
  }

  void Specimen_Processing_pskel::
  additive_parser (::fhir::Reference_pskel& p)
  {
    this->additive_parser_ = &p;
  }

  void Specimen_Processing_pskel::
  timeDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->timeDateTime_parser_ = &p;
  }

  void Specimen_Processing_pskel::
  timePeriod_parser (::fhir::Period_pskel& p)
  {
    this->timePeriod_parser_ = &p;
  }

  void Specimen_Processing_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& procedure,
           ::fhir::Reference_pskel& additive,
           ::fhir::dateTime_pskel& timeDateTime,
           ::fhir::Period_pskel& timePeriod)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->procedure_parser_ = &procedure;
    this->additive_parser_ = &additive;
    this->timeDateTime_parser_ = &timeDateTime;
    this->timePeriod_parser_ = &timePeriod;
  }

  Specimen_Processing_pskel::
  Specimen_Processing_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Specimen_Processing_impl_ (0),
    description_parser_ (0),
    procedure_parser_ (0),
    additive_parser_ (0),
    timeDateTime_parser_ (0),
    timePeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Specimen_Processing_pskel::
  Specimen_Processing_pskel (Specimen_Processing_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Specimen_Processing_impl_ (impl),
    description_parser_ (0),
    procedure_parser_ (0),
    additive_parser_ (0),
    timeDateTime_parser_ (0),
    timePeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Specimen_Container_pskel
  //

  void Specimen_Container_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Specimen_Container_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Specimen_Container_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Specimen_Container_pskel::
  capacity_parser (::fhir::Quantity_pskel& p)
  {
    this->capacity_parser_ = &p;
  }

  void Specimen_Container_pskel::
  specimenQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->specimenQuantity_parser_ = &p;
  }

  void Specimen_Container_pskel::
  additiveCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->additiveCodeableConcept_parser_ = &p;
  }

  void Specimen_Container_pskel::
  additiveReference_parser (::fhir::Reference_pskel& p)
  {
    this->additiveReference_parser_ = &p;
  }

  void Specimen_Container_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Quantity_pskel& capacity,
           ::fhir::Quantity_pskel& specimenQuantity,
           ::fhir::CodeableConcept_pskel& additiveCodeableConcept,
           ::fhir::Reference_pskel& additiveReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->description_parser_ = &description;
    this->type_parser_ = &type;
    this->capacity_parser_ = &capacity;
    this->specimenQuantity_parser_ = &specimenQuantity;
    this->additiveCodeableConcept_parser_ = &additiveCodeableConcept;
    this->additiveReference_parser_ = &additiveReference;
  }

  Specimen_Container_pskel::
  Specimen_Container_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Specimen_Container_impl_ (0),
    identifier_parser_ (0),
    description_parser_ (0),
    type_parser_ (0),
    capacity_parser_ (0),
    specimenQuantity_parser_ (0),
    additiveCodeableConcept_parser_ (0),
    additiveReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Specimen_Container_pskel::
  Specimen_Container_pskel (Specimen_Container_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Specimen_Container_impl_ (impl),
    identifier_parser_ (0),
    description_parser_ (0),
    type_parser_ (0),
    capacity_parser_ (0),
    specimenQuantity_parser_ (0),
    additiveCodeableConcept_parser_ (0),
    additiveReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // SpecimenStatus_list_pskel
  //

  SpecimenStatus_list_pskel::
  SpecimenStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    SpecimenStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_SpecimenStatus_list_pskel_enums_, 4UL);
  }

  SpecimenStatus_list_pskel::
  SpecimenStatus_list_pskel (SpecimenStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    SpecimenStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_SpecimenStatus_list_pskel_enums_, 4UL);
  }

  // SpecimenStatus_pskel
  //

  void SpecimenStatus_pskel::
  value_parser (::fhir::SpecimenStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void SpecimenStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::SpecimenStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  SpecimenStatus_pskel::
  SpecimenStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    SpecimenStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  SpecimenStatus_pskel::
  SpecimenStatus_pskel (SpecimenStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    SpecimenStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Specimen_pskel
  //

  void Specimen_pskel::
  identifier ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->identifier ();
  }

  void Specimen_pskel::
  accessionIdentifier ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->accessionIdentifier ();
  }

  void Specimen_pskel::
  status ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->status ();
  }

  void Specimen_pskel::
  type ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->type ();
  }

  void Specimen_pskel::
  subject ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->subject ();
  }

  void Specimen_pskel::
  receivedTime ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->receivedTime ();
  }

  void Specimen_pskel::
  parent ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->parent ();
  }

  void Specimen_pskel::
  request ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->request ();
  }

  void Specimen_pskel::
  collection ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->collection ();
  }

  void Specimen_pskel::
  processing ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->processing ();
  }

  void Specimen_pskel::
  container ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->container ();
  }

  void Specimen_pskel::
  condition ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->condition ();
  }

  void Specimen_pskel::
  note ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->note ();
  }

  void Specimen_pskel::
  post_Specimen ()
  {
    if (this->Specimen_impl_)
      this->Specimen_impl_->post_Specimen ();
    else
      post_DomainResource ();
  }

  void Specimen_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->accessionIdentifier_parser_)
      this->accessionIdentifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->receivedTime_parser_)
      this->receivedTime_parser_->_reset ();

    if (this->parent_parser_)
      this->parent_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->collection_parser_)
      this->collection_parser_->_reset ();

    if (this->processing_parser_)
      this->processing_parser_->_reset ();

    if (this->container_parser_)
      this->container_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // Specimen_Collection_pskel
  //

  void Specimen_Collection_pskel::
  collector ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->collector ();
  }

  void Specimen_Collection_pskel::
  collectedDateTime ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->collectedDateTime ();
  }

  void Specimen_Collection_pskel::
  collectedPeriod ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->collectedPeriod ();
  }

  void Specimen_Collection_pskel::
  duration ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->duration ();
  }

  void Specimen_Collection_pskel::
  quantity ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->quantity ();
  }

  void Specimen_Collection_pskel::
  method ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->method ();
  }

  void Specimen_Collection_pskel::
  bodySite ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->bodySite ();
  }

  void Specimen_Collection_pskel::
  fastingStatusCodeableConcept ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->fastingStatusCodeableConcept ();
  }

  void Specimen_Collection_pskel::
  fastingStatusDuration ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->fastingStatusDuration ();
  }

  void Specimen_Collection_pskel::
  post_Specimen_Collection ()
  {
    if (this->Specimen_Collection_impl_)
      this->Specimen_Collection_impl_->post_Specimen_Collection ();
    else
      post_BackboneElement ();
  }

  void Specimen_Collection_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->collector_parser_)
      this->collector_parser_->_reset ();

    if (this->collectedDateTime_parser_)
      this->collectedDateTime_parser_->_reset ();

    if (this->collectedPeriod_parser_)
      this->collectedPeriod_parser_->_reset ();

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->method_parser_)
      this->method_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->fastingStatusCodeableConcept_parser_)
      this->fastingStatusCodeableConcept_parser_->_reset ();

    if (this->fastingStatusDuration_parser_)
      this->fastingStatusDuration_parser_->_reset ();

    this->resetting_ = false;
  }

  // Specimen_Processing_pskel
  //

  void Specimen_Processing_pskel::
  description ()
  {
    if (this->Specimen_Processing_impl_)
      this->Specimen_Processing_impl_->description ();
  }

  void Specimen_Processing_pskel::
  procedure ()
  {
    if (this->Specimen_Processing_impl_)
      this->Specimen_Processing_impl_->procedure ();
  }

  void Specimen_Processing_pskel::
  additive ()
  {
    if (this->Specimen_Processing_impl_)
      this->Specimen_Processing_impl_->additive ();
  }

  void Specimen_Processing_pskel::
  timeDateTime ()
  {
    if (this->Specimen_Processing_impl_)
      this->Specimen_Processing_impl_->timeDateTime ();
  }

  void Specimen_Processing_pskel::
  timePeriod ()
  {
    if (this->Specimen_Processing_impl_)
      this->Specimen_Processing_impl_->timePeriod ();
  }

  void Specimen_Processing_pskel::
  post_Specimen_Processing ()
  {
    if (this->Specimen_Processing_impl_)
      this->Specimen_Processing_impl_->post_Specimen_Processing ();
    else
      post_BackboneElement ();
  }

  void Specimen_Processing_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->procedure_parser_)
      this->procedure_parser_->_reset ();

    if (this->additive_parser_)
      this->additive_parser_->_reset ();

    if (this->timeDateTime_parser_)
      this->timeDateTime_parser_->_reset ();

    if (this->timePeriod_parser_)
      this->timePeriod_parser_->_reset ();

    this->resetting_ = false;
  }

  // Specimen_Container_pskel
  //

  void Specimen_Container_pskel::
  identifier ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->identifier ();
  }

  void Specimen_Container_pskel::
  description ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->description ();
  }

  void Specimen_Container_pskel::
  type ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->type ();
  }

  void Specimen_Container_pskel::
  capacity ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->capacity ();
  }

  void Specimen_Container_pskel::
  specimenQuantity ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->specimenQuantity ();
  }

  void Specimen_Container_pskel::
  additiveCodeableConcept ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->additiveCodeableConcept ();
  }

  void Specimen_Container_pskel::
  additiveReference ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->additiveReference ();
  }

  void Specimen_Container_pskel::
  post_Specimen_Container ()
  {
    if (this->Specimen_Container_impl_)
      this->Specimen_Container_impl_->post_Specimen_Container ();
    else
      post_BackboneElement ();
  }

  void Specimen_Container_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->capacity_parser_)
      this->capacity_parser_->_reset ();

    if (this->specimenQuantity_parser_)
      this->specimenQuantity_parser_->_reset ();

    if (this->additiveCodeableConcept_parser_)
      this->additiveCodeableConcept_parser_->_reset ();

    if (this->additiveReference_parser_)
      this->additiveReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // SpecimenStatus_list_pskel
  //

  void SpecimenStatus_list_pskel::
  post_SpecimenStatus_list ()
  {
    if (this->SpecimenStatus_list_impl_)
      this->SpecimenStatus_list_impl_->post_SpecimenStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const SpecimenStatus_list_pskel::_xsde_SpecimenStatus_list_pskel_enums_[4UL] = 
  {
    "available",
    "entered-in-error",
    "unavailable",
    "unsatisfactory"
  };

  // SpecimenStatus_pskel
  //

  void SpecimenStatus_pskel::
  value ()
  {
    if (this->SpecimenStatus_impl_)
      this->SpecimenStatus_impl_->value ();
  }

  void SpecimenStatus_pskel::
  post_SpecimenStatus ()
  {
    if (this->SpecimenStatus_impl_)
      this->SpecimenStatus_impl_->post_SpecimenStatus ();
    else
      post_Element ();
  }

  void SpecimenStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Specimen_pskel.
  //
  bool Specimen_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "accessionIdentifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "subject" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "receivedTime" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "parent" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "request" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "collection" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "processing" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "container" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "condition" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "note" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Specimen_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Specimen_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Specimen_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Specimen_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Specimen_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "accessionIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->accessionIdentifier_parser_)
            {
              this->accessionIdentifier_parser_->pre ();
              ctx.nested_parser (this->accessionIdentifier_parser_);
            }
          }
          else
          {
            if (this->accessionIdentifier_parser_ != 0)
            {
              this->accessionIdentifier_parser_->post_Identifier ();
              this->accessionIdentifier ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_SpecimenStatus ();
              this->status ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "receivedTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->receivedTime_parser_)
            {
              this->receivedTime_parser_->pre ();
              ctx.nested_parser (this->receivedTime_parser_);
            }
          }
          else
          {
            if (this->receivedTime_parser_ != 0)
            {
              this->receivedTime_parser_->post_dateTime ();
              this->receivedTime ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "parent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parent_parser_)
            {
              this->parent_parser_->pre ();
              ctx.nested_parser (this->parent_parser_);
            }
          }
          else
          {
            if (this->parent_parser_ != 0)
            {
              this->parent_parser_->post_Reference ();
              this->parent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_Reference ();
              this->request ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "collection" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collection_parser_)
            {
              this->collection_parser_->pre ();
              ctx.nested_parser (this->collection_parser_);
            }
          }
          else
          {
            if (this->collection_parser_ != 0)
            {
              this->collection_parser_->post_Specimen_Collection ();
              this->collection ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "processing" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->processing_parser_)
            {
              this->processing_parser_->pre ();
              ctx.nested_parser (this->processing_parser_);
            }
          }
          else
          {
            if (this->processing_parser_ != 0)
            {
              this->processing_parser_->post_Specimen_Processing ();
              this->processing ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "container" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->container_parser_)
            {
              this->container_parser_->pre ();
              ctx.nested_parser (this->container_parser_);
            }
          }
          else
          {
            if (this->container_parser_ != 0)
            {
              this->container_parser_->post_Specimen_Container ();
              this->container ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_CodeableConcept ();
              this->condition ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Specimen_Collection_pskel.
  //
  bool Specimen_Collection_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "collector" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "collectedDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "collectedPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "duration" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "method" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "bodySite" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "fastingStatusCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "fastingStatusDuration" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Specimen_Collection_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Specimen_Collection_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Specimen_Collection_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Specimen_Collection_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Specimen_Collection_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "collector" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collector_parser_)
            {
              this->collector_parser_->pre ();
              ctx.nested_parser (this->collector_parser_);
            }
          }
          else
          {
            if (this->collector_parser_ != 0)
            {
              this->collector_parser_->post_Reference ();
              this->collector ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "collectedDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collectedDateTime_parser_)
            {
              this->collectedDateTime_parser_->pre ();
              ctx.nested_parser (this->collectedDateTime_parser_);
            }
          }
          else
          {
            if (this->collectedDateTime_parser_ != 0)
            {
              this->collectedDateTime_parser_->post_dateTime ();
              this->collectedDateTime ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "collectedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collectedPeriod_parser_)
            {
              this->collectedPeriod_parser_->pre ();
              ctx.nested_parser (this->collectedPeriod_parser_);
            }
          }
          else
          {
            if (this->collectedPeriod_parser_ != 0)
            {
              this->collectedPeriod_parser_->post_Period ();
              this->collectedPeriod ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "duration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->duration_parser_)
            {
              this->duration_parser_->pre ();
              ctx.nested_parser (this->duration_parser_);
            }
          }
          else
          {
            if (this->duration_parser_ != 0)
            {
              this->duration_parser_->post_Duration ();
              this->duration ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "method" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->method_parser_)
            {
              this->method_parser_->pre ();
              ctx.nested_parser (this->method_parser_);
            }
          }
          else
          {
            if (this->method_parser_ != 0)
            {
              this->method_parser_->post_CodeableConcept ();
              this->method ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "fastingStatusCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fastingStatusCodeableConcept_parser_)
            {
              this->fastingStatusCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->fastingStatusCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->fastingStatusCodeableConcept_parser_ != 0)
            {
              this->fastingStatusCodeableConcept_parser_->post_CodeableConcept ();
              this->fastingStatusCodeableConcept ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "fastingStatusDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fastingStatusDuration_parser_)
            {
              this->fastingStatusDuration_parser_->pre ();
              ctx.nested_parser (this->fastingStatusDuration_parser_);
            }
          }
          else
          {
            if (this->fastingStatusDuration_parser_ != 0)
            {
              this->fastingStatusDuration_parser_->post_Duration ();
              this->fastingStatusDuration ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Specimen_Processing_pskel.
  //
  bool Specimen_Processing_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "procedure" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "additive" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "timeDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "timePeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Specimen_Processing_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Specimen_Processing_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Specimen_Processing_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Specimen_Processing_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Specimen_Processing_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "procedure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedure_parser_)
            {
              this->procedure_parser_->pre ();
              ctx.nested_parser (this->procedure_parser_);
            }
          }
          else
          {
            if (this->procedure_parser_ != 0)
            {
              this->procedure_parser_->post_CodeableConcept ();
              this->procedure ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "additive" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->additive_parser_)
            {
              this->additive_parser_->pre ();
              ctx.nested_parser (this->additive_parser_);
            }
          }
          else
          {
            if (this->additive_parser_ != 0)
            {
              this->additive_parser_->post_Reference ();
              this->additive ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "timeDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timeDateTime_parser_)
            {
              this->timeDateTime_parser_->pre ();
              ctx.nested_parser (this->timeDateTime_parser_);
            }
          }
          else
          {
            if (this->timeDateTime_parser_ != 0)
            {
              this->timeDateTime_parser_->post_dateTime ();
              this->timeDateTime ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "timePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timePeriod_parser_)
            {
              this->timePeriod_parser_->pre ();
              ctx.nested_parser (this->timePeriod_parser_);
            }
          }
          else
          {
            if (this->timePeriod_parser_ != 0)
            {
              this->timePeriod_parser_->post_Period ();
              this->timePeriod ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Specimen_Container_pskel.
  //
  bool Specimen_Container_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "capacity" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "specimenQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "additiveCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "additiveReference" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Specimen_Container_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Specimen_Container_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Specimen_Container_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Specimen_Container_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Specimen_Container_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "capacity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->capacity_parser_)
            {
              this->capacity_parser_->pre ();
              ctx.nested_parser (this->capacity_parser_);
            }
          }
          else
          {
            if (this->capacity_parser_ != 0)
            {
              this->capacity_parser_->post_Quantity ();
              this->capacity ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "specimenQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specimenQuantity_parser_)
            {
              this->specimenQuantity_parser_->pre ();
              ctx.nested_parser (this->specimenQuantity_parser_);
            }
          }
          else
          {
            if (this->specimenQuantity_parser_ != 0)
            {
              this->specimenQuantity_parser_->post_Quantity ();
              this->specimenQuantity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "additiveCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->additiveCodeableConcept_parser_)
            {
              this->additiveCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->additiveCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->additiveCodeableConcept_parser_ != 0)
            {
              this->additiveCodeableConcept_parser_->post_CodeableConcept ();
              this->additiveCodeableConcept ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "additiveReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->additiveReference_parser_)
            {
              this->additiveReference_parser_->pre ();
              ctx.nested_parser (this->additiveReference_parser_);
            }
          }
          else
          {
            if (this->additiveReference_parser_ != 0)
            {
              this->additiveReference_parser_->post_Reference ();
              this->additiveReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for SpecimenStatus_pskel.
  //
  bool SpecimenStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_SpecimenStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

