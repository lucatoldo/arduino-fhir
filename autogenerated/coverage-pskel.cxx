// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "coverage-pskel.hxx"

namespace fhir
{
  // Coverage_pskel
  //

  void Coverage_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Coverage_pskel::
  status_parser (::fhir::FinancialResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Coverage_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Coverage_pskel::
  policyHolder_parser (::fhir::Reference_pskel& p)
  {
    this->policyHolder_parser_ = &p;
  }

  void Coverage_pskel::
  subscriber_parser (::fhir::Reference_pskel& p)
  {
    this->subscriber_parser_ = &p;
  }

  void Coverage_pskel::
  subscriberId_parser (::fhir::string_pskel& p)
  {
    this->subscriberId_parser_ = &p;
  }

  void Coverage_pskel::
  beneficiary_parser (::fhir::Reference_pskel& p)
  {
    this->beneficiary_parser_ = &p;
  }

  void Coverage_pskel::
  dependent_parser (::fhir::string_pskel& p)
  {
    this->dependent_parser_ = &p;
  }

  void Coverage_pskel::
  relationship_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void Coverage_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Coverage_pskel::
  payor_parser (::fhir::Reference_pskel& p)
  {
    this->payor_parser_ = &p;
  }

  void Coverage_pskel::
  class__parser (::fhir::Coverage_Class_pskel& p)
  {
    this->class__parser_ = &p;
  }

  void Coverage_pskel::
  order_parser (::fhir::positiveInt_pskel& p)
  {
    this->order_parser_ = &p;
  }

  void Coverage_pskel::
  network_parser (::fhir::string_pskel& p)
  {
    this->network_parser_ = &p;
  }

  void Coverage_pskel::
  costToBeneficiary_parser (::fhir::Coverage_CostToBeneficiary_pskel& p)
  {
    this->costToBeneficiary_parser_ = &p;
  }

  void Coverage_pskel::
  subrogation_parser (::fhir::boolean_pskel& p)
  {
    this->subrogation_parser_ = &p;
  }

  void Coverage_pskel::
  contract_parser (::fhir::Reference_pskel& p)
  {
    this->contract_parser_ = &p;
  }

  void Coverage_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::FinancialResourceStatusCodes_pskel& status,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& policyHolder,
           ::fhir::Reference_pskel& subscriber,
           ::fhir::string_pskel& subscriberId,
           ::fhir::Reference_pskel& beneficiary,
           ::fhir::string_pskel& dependent,
           ::fhir::CodeableConcept_pskel& relationship,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& payor,
           ::fhir::Coverage_Class_pskel& class_,
           ::fhir::positiveInt_pskel& order,
           ::fhir::string_pskel& network,
           ::fhir::Coverage_CostToBeneficiary_pskel& costToBeneficiary,
           ::fhir::boolean_pskel& subrogation,
           ::fhir::Reference_pskel& contract)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->policyHolder_parser_ = &policyHolder;
    this->subscriber_parser_ = &subscriber;
    this->subscriberId_parser_ = &subscriberId;
    this->beneficiary_parser_ = &beneficiary;
    this->dependent_parser_ = &dependent;
    this->relationship_parser_ = &relationship;
    this->period_parser_ = &period;
    this->payor_parser_ = &payor;
    this->class__parser_ = &class_;
    this->order_parser_ = &order;
    this->network_parser_ = &network;
    this->costToBeneficiary_parser_ = &costToBeneficiary;
    this->subrogation_parser_ = &subrogation;
    this->contract_parser_ = &contract;
  }

  Coverage_pskel::
  Coverage_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Coverage_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    policyHolder_parser_ (0),
    subscriber_parser_ (0),
    subscriberId_parser_ (0),
    beneficiary_parser_ (0),
    dependent_parser_ (0),
    relationship_parser_ (0),
    period_parser_ (0),
    payor_parser_ (0),
    class__parser_ (0),
    order_parser_ (0),
    network_parser_ (0),
    costToBeneficiary_parser_ (0),
    subrogation_parser_ (0),
    contract_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Coverage_pskel::
  Coverage_pskel (Coverage_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Coverage_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    policyHolder_parser_ (0),
    subscriber_parser_ (0),
    subscriberId_parser_ (0),
    beneficiary_parser_ (0),
    dependent_parser_ (0),
    relationship_parser_ (0),
    period_parser_ (0),
    payor_parser_ (0),
    class__parser_ (0),
    order_parser_ (0),
    network_parser_ (0),
    costToBeneficiary_parser_ (0),
    subrogation_parser_ (0),
    contract_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Coverage_Class_pskel
  //

  void Coverage_Class_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Coverage_Class_pskel::
  value_parser (::fhir::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void Coverage_Class_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Coverage_Class_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::string_pskel& value,
           ::fhir::string_pskel& name)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->value_parser_ = &value;
    this->name_parser_ = &name;
  }

  Coverage_Class_pskel::
  Coverage_Class_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Coverage_Class_impl_ (0),
    type_parser_ (0),
    value_parser_ (0),
    name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Coverage_Class_pskel::
  Coverage_Class_pskel (Coverage_Class_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Coverage_Class_impl_ (impl),
    type_parser_ (0),
    value_parser_ (0),
    name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Coverage_CostToBeneficiary_pskel
  //

  void Coverage_CostToBeneficiary_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Coverage_CostToBeneficiary_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Coverage_CostToBeneficiary_pskel::
  valueMoney_parser (::fhir::Money_pskel& p)
  {
    this->valueMoney_parser_ = &p;
  }

  void Coverage_CostToBeneficiary_pskel::
  exception_parser (::fhir::Coverage_Exception_pskel& p)
  {
    this->exception_parser_ = &p;
  }

  void Coverage_CostToBeneficiary_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Money_pskel& valueMoney,
           ::fhir::Coverage_Exception_pskel& exception)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueMoney_parser_ = &valueMoney;
    this->exception_parser_ = &exception;
  }

  Coverage_CostToBeneficiary_pskel::
  Coverage_CostToBeneficiary_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Coverage_CostToBeneficiary_impl_ (0),
    type_parser_ (0),
    valueQuantity_parser_ (0),
    valueMoney_parser_ (0),
    exception_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Coverage_CostToBeneficiary_pskel::
  Coverage_CostToBeneficiary_pskel (Coverage_CostToBeneficiary_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Coverage_CostToBeneficiary_impl_ (impl),
    type_parser_ (0),
    valueQuantity_parser_ (0),
    valueMoney_parser_ (0),
    exception_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Coverage_Exception_pskel
  //

  void Coverage_Exception_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Coverage_Exception_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Coverage_Exception_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->period_parser_ = &period;
  }

  Coverage_Exception_pskel::
  Coverage_Exception_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Coverage_Exception_impl_ (0),
    type_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Coverage_Exception_pskel::
  Coverage_Exception_pskel (Coverage_Exception_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Coverage_Exception_impl_ (impl),
    type_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Coverage_pskel
  //

  void Coverage_pskel::
  identifier ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->identifier ();
  }

  void Coverage_pskel::
  status ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->status ();
  }

  void Coverage_pskel::
  type ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->type ();
  }

  void Coverage_pskel::
  policyHolder ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->policyHolder ();
  }

  void Coverage_pskel::
  subscriber ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->subscriber ();
  }

  void Coverage_pskel::
  subscriberId ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->subscriberId ();
  }

  void Coverage_pskel::
  beneficiary ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->beneficiary ();
  }

  void Coverage_pskel::
  dependent ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->dependent ();
  }

  void Coverage_pskel::
  relationship ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->relationship ();
  }

  void Coverage_pskel::
  period ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->period ();
  }

  void Coverage_pskel::
  payor ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->payor ();
  }

  void Coverage_pskel::
  class_ ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->class_ ();
  }

  void Coverage_pskel::
  order ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->order ();
  }

  void Coverage_pskel::
  network ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->network ();
  }

  void Coverage_pskel::
  costToBeneficiary ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->costToBeneficiary ();
  }

  void Coverage_pskel::
  subrogation ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->subrogation ();
  }

  void Coverage_pskel::
  contract ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->contract ();
  }

  void Coverage_pskel::
  post_Coverage ()
  {
    if (this->Coverage_impl_)
      this->Coverage_impl_->post_Coverage ();
    else
      post_DomainResource ();
  }

  void Coverage_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->policyHolder_parser_)
      this->policyHolder_parser_->_reset ();

    if (this->subscriber_parser_)
      this->subscriber_parser_->_reset ();

    if (this->subscriberId_parser_)
      this->subscriberId_parser_->_reset ();

    if (this->beneficiary_parser_)
      this->beneficiary_parser_->_reset ();

    if (this->dependent_parser_)
      this->dependent_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->payor_parser_)
      this->payor_parser_->_reset ();

    if (this->class__parser_)
      this->class__parser_->_reset ();

    if (this->order_parser_)
      this->order_parser_->_reset ();

    if (this->network_parser_)
      this->network_parser_->_reset ();

    if (this->costToBeneficiary_parser_)
      this->costToBeneficiary_parser_->_reset ();

    if (this->subrogation_parser_)
      this->subrogation_parser_->_reset ();

    if (this->contract_parser_)
      this->contract_parser_->_reset ();

    this->resetting_ = false;
  }

  // Coverage_Class_pskel
  //

  void Coverage_Class_pskel::
  type ()
  {
    if (this->Coverage_Class_impl_)
      this->Coverage_Class_impl_->type ();
  }

  void Coverage_Class_pskel::
  value ()
  {
    if (this->Coverage_Class_impl_)
      this->Coverage_Class_impl_->value ();
  }

  void Coverage_Class_pskel::
  name ()
  {
    if (this->Coverage_Class_impl_)
      this->Coverage_Class_impl_->name ();
  }

  void Coverage_Class_pskel::
  post_Coverage_Class ()
  {
    if (this->Coverage_Class_impl_)
      this->Coverage_Class_impl_->post_Coverage_Class ();
    else
      post_BackboneElement ();
  }

  void Coverage_Class_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    this->resetting_ = false;
  }

  // Coverage_CostToBeneficiary_pskel
  //

  void Coverage_CostToBeneficiary_pskel::
  type ()
  {
    if (this->Coverage_CostToBeneficiary_impl_)
      this->Coverage_CostToBeneficiary_impl_->type ();
  }

  void Coverage_CostToBeneficiary_pskel::
  valueQuantity ()
  {
    if (this->Coverage_CostToBeneficiary_impl_)
      this->Coverage_CostToBeneficiary_impl_->valueQuantity ();
  }

  void Coverage_CostToBeneficiary_pskel::
  valueMoney ()
  {
    if (this->Coverage_CostToBeneficiary_impl_)
      this->Coverage_CostToBeneficiary_impl_->valueMoney ();
  }

  void Coverage_CostToBeneficiary_pskel::
  exception ()
  {
    if (this->Coverage_CostToBeneficiary_impl_)
      this->Coverage_CostToBeneficiary_impl_->exception ();
  }

  void Coverage_CostToBeneficiary_pskel::
  post_Coverage_CostToBeneficiary ()
  {
    if (this->Coverage_CostToBeneficiary_impl_)
      this->Coverage_CostToBeneficiary_impl_->post_Coverage_CostToBeneficiary ();
    else
      post_BackboneElement ();
  }

  void Coverage_CostToBeneficiary_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueMoney_parser_)
      this->valueMoney_parser_->_reset ();

    if (this->exception_parser_)
      this->exception_parser_->_reset ();

    this->resetting_ = false;
  }

  // Coverage_Exception_pskel
  //

  void Coverage_Exception_pskel::
  type ()
  {
    if (this->Coverage_Exception_impl_)
      this->Coverage_Exception_impl_->type ();
  }

  void Coverage_Exception_pskel::
  period ()
  {
    if (this->Coverage_Exception_impl_)
      this->Coverage_Exception_impl_->period ();
  }

  void Coverage_Exception_pskel::
  post_Coverage_Exception ()
  {
    if (this->Coverage_Exception_impl_)
      this->Coverage_Exception_impl_->post_Coverage_Exception ();
    else
      post_BackboneElement ();
  }

  void Coverage_Exception_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Coverage_pskel.
  //
  bool Coverage_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Coverage_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Coverage_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Coverage_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Coverage_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Coverage_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FinancialResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "policyHolder" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->policyHolder_parser_)
            {
              this->policyHolder_parser_->pre ();
              ctx.nested_parser (this->policyHolder_parser_);
            }
          }
          else
          {
            if (this->policyHolder_parser_ != 0)
            {
              this->policyHolder_parser_->post_Reference ();
              this->policyHolder ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "subscriber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subscriber_parser_)
            {
              this->subscriber_parser_->pre ();
              ctx.nested_parser (this->subscriber_parser_);
            }
          }
          else
          {
            if (this->subscriber_parser_ != 0)
            {
              this->subscriber_parser_->post_Reference ();
              this->subscriber ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "subscriberId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subscriberId_parser_)
            {
              this->subscriberId_parser_->pre ();
              ctx.nested_parser (this->subscriberId_parser_);
            }
          }
          else
          {
            if (this->subscriberId_parser_ != 0)
            {
              this->subscriberId_parser_->post_string ();
              this->subscriberId ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "beneficiary" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->beneficiary_parser_)
            {
              this->beneficiary_parser_->pre ();
              ctx.nested_parser (this->beneficiary_parser_);
            }
          }
          else
          {
            if (this->beneficiary_parser_ != 0)
            {
              this->beneficiary_parser_->post_Reference ();
              this->beneficiary ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "dependent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dependent_parser_)
            {
              this->dependent_parser_->pre ();
              ctx.nested_parser (this->dependent_parser_);
            }
          }
          else
          {
            if (this->dependent_parser_ != 0)
            {
              this->dependent_parser_->post_string ();
              this->dependent ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_CodeableConcept ();
              this->relationship ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "payor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payor_parser_)
            {
              this->payor_parser_->pre ();
              ctx.nested_parser (this->payor_parser_);
            }
          }
          else
          {
            if (this->payor_parser_ != 0)
            {
              this->payor_parser_->post_Reference ();
              this->payor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "class" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->class__parser_)
            {
              this->class__parser_->pre ();
              ctx.nested_parser (this->class__parser_);
            }
          }
          else
          {
            if (this->class__parser_ != 0)
            {
              this->class__parser_->post_Coverage_Class ();
              this->class_ ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "order" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->order_parser_)
            {
              this->order_parser_->pre ();
              ctx.nested_parser (this->order_parser_);
            }
          }
          else
          {
            if (this->order_parser_ != 0)
            {
              this->order_parser_->post_positiveInt ();
              this->order ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "network" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->network_parser_)
            {
              this->network_parser_->pre ();
              ctx.nested_parser (this->network_parser_);
            }
          }
          else
          {
            if (this->network_parser_ != 0)
            {
              this->network_parser_->post_string ();
              this->network ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "costToBeneficiary" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->costToBeneficiary_parser_)
            {
              this->costToBeneficiary_parser_->pre ();
              ctx.nested_parser (this->costToBeneficiary_parser_);
            }
          }
          else
          {
            if (this->costToBeneficiary_parser_ != 0)
            {
              this->costToBeneficiary_parser_->post_Coverage_CostToBeneficiary ();
              this->costToBeneficiary ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "subrogation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subrogation_parser_)
            {
              this->subrogation_parser_->pre ();
              ctx.nested_parser (this->subrogation_parser_);
            }
          }
          else
          {
            if (this->subrogation_parser_ != 0)
            {
              this->subrogation_parser_->post_boolean ();
              this->subrogation ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "contract" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contract_parser_)
            {
              this->contract_parser_->pre ();
              ctx.nested_parser (this->contract_parser_);
            }
          }
          else
          {
            if (this->contract_parser_ != 0)
            {
              this->contract_parser_->post_Reference ();
              this->contract ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Coverage_Class_pskel.
  //
  bool Coverage_Class_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Coverage_Class_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Coverage_Class_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Coverage_Class_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Coverage_Class_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Coverage_Class_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_string ();
              this->value ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Coverage_CostToBeneficiary_pskel.
  //
  bool Coverage_CostToBeneficiary_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "valueQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "valueMoney" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "exception" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Coverage_CostToBeneficiary_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Coverage_CostToBeneficiary_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Coverage_CostToBeneficiary_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Coverage_CostToBeneficiary_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Coverage_CostToBeneficiary_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueMoney_parser_)
            {
              this->valueMoney_parser_->pre ();
              ctx.nested_parser (this->valueMoney_parser_);
            }
          }
          else
          {
            if (this->valueMoney_parser_ != 0)
            {
              this->valueMoney_parser_->post_Money ();
              this->valueMoney ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "exception" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exception_parser_)
            {
              this->exception_parser_->pre ();
              ctx.nested_parser (this->exception_parser_);
            }
          }
          else
          {
            if (this->exception_parser_ != 0)
            {
              this->exception_parser_->post_Coverage_Exception ();
              this->exception ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Coverage_Exception_pskel.
  //
  bool Coverage_Exception_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Coverage_Exception_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Coverage_Exception_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Coverage_Exception_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Coverage_Exception_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Coverage_Exception_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

