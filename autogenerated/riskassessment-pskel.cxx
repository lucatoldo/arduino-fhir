// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "riskassessment-pskel.hxx"

namespace fhir
{
  // RiskAssessment_pskel
  //

  void RiskAssessment_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void RiskAssessment_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void RiskAssessment_pskel::
  parent_parser (::fhir::Reference_pskel& p)
  {
    this->parent_parser_ = &p;
  }

  void RiskAssessment_pskel::
  status_parser (::fhir::ObservationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void RiskAssessment_pskel::
  method_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->method_parser_ = &p;
  }

  void RiskAssessment_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void RiskAssessment_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void RiskAssessment_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void RiskAssessment_pskel::
  occurrenceDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->occurrenceDateTime_parser_ = &p;
  }

  void RiskAssessment_pskel::
  occurrencePeriod_parser (::fhir::Period_pskel& p)
  {
    this->occurrencePeriod_parser_ = &p;
  }

  void RiskAssessment_pskel::
  condition_parser (::fhir::Reference_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void RiskAssessment_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void RiskAssessment_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void RiskAssessment_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void RiskAssessment_pskel::
  basis_parser (::fhir::Reference_pskel& p)
  {
    this->basis_parser_ = &p;
  }

  void RiskAssessment_pskel::
  prediction_parser (::fhir::RiskAssessment_Prediction_pskel& p)
  {
    this->prediction_parser_ = &p;
  }

  void RiskAssessment_pskel::
  mitigation_parser (::fhir::string_pskel& p)
  {
    this->mitigation_parser_ = &p;
  }

  void RiskAssessment_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void RiskAssessment_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& parent,
           ::fhir::ObservationStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& method,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& occurrenceDateTime,
           ::fhir::Period_pskel& occurrencePeriod,
           ::fhir::Reference_pskel& condition,
           ::fhir::Reference_pskel& performer,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Reference_pskel& basis,
           ::fhir::RiskAssessment_Prediction_pskel& prediction,
           ::fhir::string_pskel& mitigation,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->basedOn_parser_ = &basedOn;
    this->parent_parser_ = &parent;
    this->status_parser_ = &status;
    this->method_parser_ = &method;
    this->code_parser_ = &code;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->occurrenceDateTime_parser_ = &occurrenceDateTime;
    this->occurrencePeriod_parser_ = &occurrencePeriod;
    this->condition_parser_ = &condition;
    this->performer_parser_ = &performer;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->basis_parser_ = &basis;
    this->prediction_parser_ = &prediction;
    this->mitigation_parser_ = &mitigation;
    this->note_parser_ = &note;
  }

  RiskAssessment_pskel::
  RiskAssessment_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    RiskAssessment_impl_ (0),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    parent_parser_ (0),
    status_parser_ (0),
    method_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    condition_parser_ (0),
    performer_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    basis_parser_ (0),
    prediction_parser_ (0),
    mitigation_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskAssessment_pskel::
  RiskAssessment_pskel (RiskAssessment_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    RiskAssessment_impl_ (impl),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    parent_parser_ (0),
    status_parser_ (0),
    method_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    condition_parser_ (0),
    performer_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    basis_parser_ (0),
    prediction_parser_ (0),
    mitigation_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // RiskAssessment_Prediction_pskel
  //

  void RiskAssessment_Prediction_pskel::
  outcome_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  probabilityDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->probabilityDecimal_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  probabilityRange_parser (::fhir::Range_pskel& p)
  {
    this->probabilityRange_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  qualitativeRisk_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->qualitativeRisk_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  relativeRisk_parser (::fhir::decimal_pskel& p)
  {
    this->relativeRisk_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  whenPeriod_parser (::fhir::Period_pskel& p)
  {
    this->whenPeriod_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  whenRange_parser (::fhir::Range_pskel& p)
  {
    this->whenRange_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  rationale_parser (::fhir::string_pskel& p)
  {
    this->rationale_parser_ = &p;
  }

  void RiskAssessment_Prediction_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& outcome,
           ::fhir::decimal_pskel& probabilityDecimal,
           ::fhir::Range_pskel& probabilityRange,
           ::fhir::CodeableConcept_pskel& qualitativeRisk,
           ::fhir::decimal_pskel& relativeRisk,
           ::fhir::Period_pskel& whenPeriod,
           ::fhir::Range_pskel& whenRange,
           ::fhir::string_pskel& rationale)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->outcome_parser_ = &outcome;
    this->probabilityDecimal_parser_ = &probabilityDecimal;
    this->probabilityRange_parser_ = &probabilityRange;
    this->qualitativeRisk_parser_ = &qualitativeRisk;
    this->relativeRisk_parser_ = &relativeRisk;
    this->whenPeriod_parser_ = &whenPeriod;
    this->whenRange_parser_ = &whenRange;
    this->rationale_parser_ = &rationale;
  }

  RiskAssessment_Prediction_pskel::
  RiskAssessment_Prediction_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    RiskAssessment_Prediction_impl_ (0),
    outcome_parser_ (0),
    probabilityDecimal_parser_ (0),
    probabilityRange_parser_ (0),
    qualitativeRisk_parser_ (0),
    relativeRisk_parser_ (0),
    whenPeriod_parser_ (0),
    whenRange_parser_ (0),
    rationale_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  RiskAssessment_Prediction_pskel::
  RiskAssessment_Prediction_pskel (RiskAssessment_Prediction_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    RiskAssessment_Prediction_impl_ (impl),
    outcome_parser_ (0),
    probabilityDecimal_parser_ (0),
    probabilityRange_parser_ (0),
    qualitativeRisk_parser_ (0),
    relativeRisk_parser_ (0),
    whenPeriod_parser_ (0),
    whenRange_parser_ (0),
    rationale_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // RiskAssessment_pskel
  //

  void RiskAssessment_pskel::
  identifier ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->identifier ();
  }

  void RiskAssessment_pskel::
  basedOn ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->basedOn ();
  }

  void RiskAssessment_pskel::
  parent ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->parent ();
  }

  void RiskAssessment_pskel::
  status ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->status ();
  }

  void RiskAssessment_pskel::
  method ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->method ();
  }

  void RiskAssessment_pskel::
  code ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->code ();
  }

  void RiskAssessment_pskel::
  subject ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->subject ();
  }

  void RiskAssessment_pskel::
  encounter ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->encounter ();
  }

  void RiskAssessment_pskel::
  occurrenceDateTime ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->occurrenceDateTime ();
  }

  void RiskAssessment_pskel::
  occurrencePeriod ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->occurrencePeriod ();
  }

  void RiskAssessment_pskel::
  condition ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->condition ();
  }

  void RiskAssessment_pskel::
  performer ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->performer ();
  }

  void RiskAssessment_pskel::
  reasonCode ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->reasonCode ();
  }

  void RiskAssessment_pskel::
  reasonReference ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->reasonReference ();
  }

  void RiskAssessment_pskel::
  basis ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->basis ();
  }

  void RiskAssessment_pskel::
  prediction ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->prediction ();
  }

  void RiskAssessment_pskel::
  mitigation ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->mitigation ();
  }

  void RiskAssessment_pskel::
  note ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->note ();
  }

  void RiskAssessment_pskel::
  post_RiskAssessment ()
  {
    if (this->RiskAssessment_impl_)
      this->RiskAssessment_impl_->post_RiskAssessment ();
    else
      post_DomainResource ();
  }

  void RiskAssessment_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->parent_parser_)
      this->parent_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->method_parser_)
      this->method_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->occurrenceDateTime_parser_)
      this->occurrenceDateTime_parser_->_reset ();

    if (this->occurrencePeriod_parser_)
      this->occurrencePeriod_parser_->_reset ();

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->basis_parser_)
      this->basis_parser_->_reset ();

    if (this->prediction_parser_)
      this->prediction_parser_->_reset ();

    if (this->mitigation_parser_)
      this->mitigation_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // RiskAssessment_Prediction_pskel
  //

  void RiskAssessment_Prediction_pskel::
  outcome ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->outcome ();
  }

  void RiskAssessment_Prediction_pskel::
  probabilityDecimal ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->probabilityDecimal ();
  }

  void RiskAssessment_Prediction_pskel::
  probabilityRange ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->probabilityRange ();
  }

  void RiskAssessment_Prediction_pskel::
  qualitativeRisk ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->qualitativeRisk ();
  }

  void RiskAssessment_Prediction_pskel::
  relativeRisk ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->relativeRisk ();
  }

  void RiskAssessment_Prediction_pskel::
  whenPeriod ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->whenPeriod ();
  }

  void RiskAssessment_Prediction_pskel::
  whenRange ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->whenRange ();
  }

  void RiskAssessment_Prediction_pskel::
  rationale ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->rationale ();
  }

  void RiskAssessment_Prediction_pskel::
  post_RiskAssessment_Prediction ()
  {
    if (this->RiskAssessment_Prediction_impl_)
      this->RiskAssessment_Prediction_impl_->post_RiskAssessment_Prediction ();
    else
      post_BackboneElement ();
  }

  void RiskAssessment_Prediction_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->probabilityDecimal_parser_)
      this->probabilityDecimal_parser_->_reset ();

    if (this->probabilityRange_parser_)
      this->probabilityRange_parser_->_reset ();

    if (this->qualitativeRisk_parser_)
      this->qualitativeRisk_parser_->_reset ();

    if (this->relativeRisk_parser_)
      this->relativeRisk_parser_->_reset ();

    if (this->whenPeriod_parser_)
      this->whenPeriod_parser_->_reset ();

    if (this->whenRange_parser_)
      this->whenRange_parser_->_reset ();

    if (this->rationale_parser_)
      this->rationale_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for RiskAssessment_pskel.
  //
  bool RiskAssessment_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "parent" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskAssessment_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskAssessment_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskAssessment_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void RiskAssessment_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void RiskAssessment_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "parent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parent_parser_)
            {
              this->parent_parser_->pre ();
              ctx.nested_parser (this->parent_parser_);
            }
          }
          else
          {
            if (this->parent_parser_ != 0)
            {
              this->parent_parser_->post_Reference ();
              this->parent ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ObservationStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "method" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->method_parser_)
            {
              this->method_parser_->pre ();
              ctx.nested_parser (this->method_parser_);
            }
          }
          else
          {
            if (this->method_parser_ != 0)
            {
              this->method_parser_->post_CodeableConcept ();
              this->method ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "occurrenceDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceDateTime_parser_)
            {
              this->occurrenceDateTime_parser_->pre ();
              ctx.nested_parser (this->occurrenceDateTime_parser_);
            }
          }
          else
          {
            if (this->occurrenceDateTime_parser_ != 0)
            {
              this->occurrenceDateTime_parser_->post_dateTime ();
              this->occurrenceDateTime ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "occurrencePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrencePeriod_parser_)
            {
              this->occurrencePeriod_parser_->pre ();
              ctx.nested_parser (this->occurrencePeriod_parser_);
            }
          }
          else
          {
            if (this->occurrencePeriod_parser_ != 0)
            {
              this->occurrencePeriod_parser_->post_Period ();
              this->occurrencePeriod ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_Reference ();
              this->condition ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "basis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basis_parser_)
            {
              this->basis_parser_->pre ();
              ctx.nested_parser (this->basis_parser_);
            }
          }
          else
          {
            if (this->basis_parser_ != 0)
            {
              this->basis_parser_->post_Reference ();
              this->basis ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "prediction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prediction_parser_)
            {
              this->prediction_parser_->pre ();
              ctx.nested_parser (this->prediction_parser_);
            }
          }
          else
          {
            if (this->prediction_parser_ != 0)
            {
              this->prediction_parser_->post_RiskAssessment_Prediction ();
              this->prediction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "mitigation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->mitigation_parser_)
            {
              this->mitigation_parser_->pre ();
              ctx.nested_parser (this->mitigation_parser_);
            }
          }
          else
          {
            if (this->mitigation_parser_ != 0)
            {
              this->mitigation_parser_->post_string ();
              this->mitigation ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for RiskAssessment_Prediction_pskel.
  //
  bool RiskAssessment_Prediction_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "probabilityDecimal" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "probabilityRange" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "qualitativeRisk" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "relativeRisk" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "whenPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "whenRange" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "rationale" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &RiskAssessment_Prediction_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool RiskAssessment_Prediction_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void RiskAssessment_Prediction_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void RiskAssessment_Prediction_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void RiskAssessment_Prediction_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_CodeableConcept ();
              this->outcome ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "probabilityDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->probabilityDecimal_parser_)
            {
              this->probabilityDecimal_parser_->pre ();
              ctx.nested_parser (this->probabilityDecimal_parser_);
            }
          }
          else
          {
            if (this->probabilityDecimal_parser_ != 0)
            {
              this->probabilityDecimal_parser_->post_decimal ();
              this->probabilityDecimal ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "probabilityRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->probabilityRange_parser_)
            {
              this->probabilityRange_parser_->pre ();
              ctx.nested_parser (this->probabilityRange_parser_);
            }
          }
          else
          {
            if (this->probabilityRange_parser_ != 0)
            {
              this->probabilityRange_parser_->post_Range ();
              this->probabilityRange ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "qualitativeRisk" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->qualitativeRisk_parser_)
            {
              this->qualitativeRisk_parser_->pre ();
              ctx.nested_parser (this->qualitativeRisk_parser_);
            }
          }
          else
          {
            if (this->qualitativeRisk_parser_ != 0)
            {
              this->qualitativeRisk_parser_->post_CodeableConcept ();
              this->qualitativeRisk ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "relativeRisk" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relativeRisk_parser_)
            {
              this->relativeRisk_parser_->pre ();
              ctx.nested_parser (this->relativeRisk_parser_);
            }
          }
          else
          {
            if (this->relativeRisk_parser_ != 0)
            {
              this->relativeRisk_parser_->post_decimal ();
              this->relativeRisk ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "whenPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->whenPeriod_parser_)
            {
              this->whenPeriod_parser_->pre ();
              ctx.nested_parser (this->whenPeriod_parser_);
            }
          }
          else
          {
            if (this->whenPeriod_parser_ != 0)
            {
              this->whenPeriod_parser_->post_Period ();
              this->whenPeriod ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "whenRange" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->whenRange_parser_)
            {
              this->whenRange_parser_->pre ();
              ctx.nested_parser (this->whenRange_parser_);
            }
          }
          else
          {
            if (this->whenRange_parser_ != 0)
            {
              this->whenRange_parser_->post_Range ();
              this->whenRange ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "rationale" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rationale_parser_)
            {
              this->rationale_parser_->pre ();
              ctx.nested_parser (this->rationale_parser_);
            }
          }
          else
          {
            if (this->rationale_parser_ != 0)
            {
              this->rationale_parser_->post_string ();
              this->rationale ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

