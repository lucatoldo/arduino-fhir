// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "invoice-pskel.hxx"

namespace fhir
{
  // Invoice_pskel
  //

  void Invoice_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Invoice_pskel::
  status_parser (::fhir::InvoiceStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Invoice_pskel::
  cancelledReason_parser (::fhir::string_pskel& p)
  {
    this->cancelledReason_parser_ = &p;
  }

  void Invoice_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Invoice_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Invoice_pskel::
  recipient_parser (::fhir::Reference_pskel& p)
  {
    this->recipient_parser_ = &p;
  }

  void Invoice_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void Invoice_pskel::
  participant_parser (::fhir::Invoice_Participant_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void Invoice_pskel::
  issuer_parser (::fhir::Reference_pskel& p)
  {
    this->issuer_parser_ = &p;
  }

  void Invoice_pskel::
  account_parser (::fhir::Reference_pskel& p)
  {
    this->account_parser_ = &p;
  }

  void Invoice_pskel::
  lineItem_parser (::fhir::Invoice_LineItem_pskel& p)
  {
    this->lineItem_parser_ = &p;
  }

  void Invoice_pskel::
  totalPriceComponent_parser (::fhir::Invoice_PriceComponent_pskel& p)
  {
    this->totalPriceComponent_parser_ = &p;
  }

  void Invoice_pskel::
  totalNet_parser (::fhir::Money_pskel& p)
  {
    this->totalNet_parser_ = &p;
  }

  void Invoice_pskel::
  totalGross_parser (::fhir::Money_pskel& p)
  {
    this->totalGross_parser_ = &p;
  }

  void Invoice_pskel::
  paymentTerms_parser (::fhir::markdown_pskel& p)
  {
    this->paymentTerms_parser_ = &p;
  }

  void Invoice_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Invoice_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::InvoiceStatus_pskel& status,
           ::fhir::string_pskel& cancelledReason,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& recipient,
           ::fhir::dateTime_pskel& date,
           ::fhir::Invoice_Participant_pskel& participant,
           ::fhir::Reference_pskel& issuer,
           ::fhir::Reference_pskel& account,
           ::fhir::Invoice_LineItem_pskel& lineItem,
           ::fhir::Invoice_PriceComponent_pskel& totalPriceComponent,
           ::fhir::Money_pskel& totalNet,
           ::fhir::Money_pskel& totalGross,
           ::fhir::markdown_pskel& paymentTerms,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->cancelledReason_parser_ = &cancelledReason;
    this->type_parser_ = &type;
    this->subject_parser_ = &subject;
    this->recipient_parser_ = &recipient;
    this->date_parser_ = &date;
    this->participant_parser_ = &participant;
    this->issuer_parser_ = &issuer;
    this->account_parser_ = &account;
    this->lineItem_parser_ = &lineItem;
    this->totalPriceComponent_parser_ = &totalPriceComponent;
    this->totalNet_parser_ = &totalNet;
    this->totalGross_parser_ = &totalGross;
    this->paymentTerms_parser_ = &paymentTerms;
    this->note_parser_ = &note;
  }

  Invoice_pskel::
  Invoice_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Invoice_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    cancelledReason_parser_ (0),
    type_parser_ (0),
    subject_parser_ (0),
    recipient_parser_ (0),
    date_parser_ (0),
    participant_parser_ (0),
    issuer_parser_ (0),
    account_parser_ (0),
    lineItem_parser_ (0),
    totalPriceComponent_parser_ (0),
    totalNet_parser_ (0),
    totalGross_parser_ (0),
    paymentTerms_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Invoice_pskel::
  Invoice_pskel (Invoice_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Invoice_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    cancelledReason_parser_ (0),
    type_parser_ (0),
    subject_parser_ (0),
    recipient_parser_ (0),
    date_parser_ (0),
    participant_parser_ (0),
    issuer_parser_ (0),
    account_parser_ (0),
    lineItem_parser_ (0),
    totalPriceComponent_parser_ (0),
    totalNet_parser_ (0),
    totalGross_parser_ (0),
    paymentTerms_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Invoice_Participant_pskel
  //

  void Invoice_Participant_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void Invoice_Participant_pskel::
  actor_parser (::fhir::Reference_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void Invoice_Participant_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::Reference_pskel& actor)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->role_parser_ = &role;
    this->actor_parser_ = &actor;
  }

  Invoice_Participant_pskel::
  Invoice_Participant_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Invoice_Participant_impl_ (0),
    role_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Invoice_Participant_pskel::
  Invoice_Participant_pskel (Invoice_Participant_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Invoice_Participant_impl_ (impl),
    role_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Invoice_LineItem_pskel
  //

  void Invoice_LineItem_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void Invoice_LineItem_pskel::
  chargeItemReference_parser (::fhir::Reference_pskel& p)
  {
    this->chargeItemReference_parser_ = &p;
  }

  void Invoice_LineItem_pskel::
  chargeItemCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->chargeItemCodeableConcept_parser_ = &p;
  }

  void Invoice_LineItem_pskel::
  priceComponent_parser (::fhir::Invoice_PriceComponent_pskel& p)
  {
    this->priceComponent_parser_ = &p;
  }

  void Invoice_LineItem_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::Reference_pskel& chargeItemReference,
           ::fhir::CodeableConcept_pskel& chargeItemCodeableConcept,
           ::fhir::Invoice_PriceComponent_pskel& priceComponent)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->chargeItemReference_parser_ = &chargeItemReference;
    this->chargeItemCodeableConcept_parser_ = &chargeItemCodeableConcept;
    this->priceComponent_parser_ = &priceComponent;
  }

  Invoice_LineItem_pskel::
  Invoice_LineItem_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Invoice_LineItem_impl_ (0),
    sequence_parser_ (0),
    chargeItemReference_parser_ (0),
    chargeItemCodeableConcept_parser_ (0),
    priceComponent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Invoice_LineItem_pskel::
  Invoice_LineItem_pskel (Invoice_LineItem_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Invoice_LineItem_impl_ (impl),
    sequence_parser_ (0),
    chargeItemReference_parser_ (0),
    chargeItemCodeableConcept_parser_ (0),
    priceComponent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Invoice_PriceComponent_pskel
  //

  void Invoice_PriceComponent_pskel::
  type_parser (::fhir::InvoicePriceComponentType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Invoice_PriceComponent_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void Invoice_PriceComponent_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void Invoice_PriceComponent_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void Invoice_PriceComponent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::InvoicePriceComponentType_pskel& type,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->code_parser_ = &code;
    this->factor_parser_ = &factor;
    this->amount_parser_ = &amount;
  }

  Invoice_PriceComponent_pskel::
  Invoice_PriceComponent_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Invoice_PriceComponent_impl_ (0),
    type_parser_ (0),
    code_parser_ (0),
    factor_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Invoice_PriceComponent_pskel::
  Invoice_PriceComponent_pskel (Invoice_PriceComponent_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Invoice_PriceComponent_impl_ (impl),
    type_parser_ (0),
    code_parser_ (0),
    factor_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // InvoiceStatus_list_pskel
  //

  InvoiceStatus_list_pskel::
  InvoiceStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    InvoiceStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_InvoiceStatus_list_pskel_enums_, 5UL);
  }

  InvoiceStatus_list_pskel::
  InvoiceStatus_list_pskel (InvoiceStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    InvoiceStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_InvoiceStatus_list_pskel_enums_, 5UL);
  }

  // InvoiceStatus_pskel
  //

  void InvoiceStatus_pskel::
  value_parser (::fhir::InvoiceStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void InvoiceStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::InvoiceStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  InvoiceStatus_pskel::
  InvoiceStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    InvoiceStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  InvoiceStatus_pskel::
  InvoiceStatus_pskel (InvoiceStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    InvoiceStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Invoice_pskel
  //

  void Invoice_pskel::
  identifier ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->identifier ();
  }

  void Invoice_pskel::
  status ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->status ();
  }

  void Invoice_pskel::
  cancelledReason ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->cancelledReason ();
  }

  void Invoice_pskel::
  type ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->type ();
  }

  void Invoice_pskel::
  subject ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->subject ();
  }

  void Invoice_pskel::
  recipient ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->recipient ();
  }

  void Invoice_pskel::
  date ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->date ();
  }

  void Invoice_pskel::
  participant ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->participant ();
  }

  void Invoice_pskel::
  issuer ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->issuer ();
  }

  void Invoice_pskel::
  account ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->account ();
  }

  void Invoice_pskel::
  lineItem ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->lineItem ();
  }

  void Invoice_pskel::
  totalPriceComponent ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->totalPriceComponent ();
  }

  void Invoice_pskel::
  totalNet ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->totalNet ();
  }

  void Invoice_pskel::
  totalGross ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->totalGross ();
  }

  void Invoice_pskel::
  paymentTerms ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->paymentTerms ();
  }

  void Invoice_pskel::
  note ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->note ();
  }

  void Invoice_pskel::
  post_Invoice ()
  {
    if (this->Invoice_impl_)
      this->Invoice_impl_->post_Invoice ();
    else
      post_DomainResource ();
  }

  void Invoice_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->cancelledReason_parser_)
      this->cancelledReason_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->recipient_parser_)
      this->recipient_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->issuer_parser_)
      this->issuer_parser_->_reset ();

    if (this->account_parser_)
      this->account_parser_->_reset ();

    if (this->lineItem_parser_)
      this->lineItem_parser_->_reset ();

    if (this->totalPriceComponent_parser_)
      this->totalPriceComponent_parser_->_reset ();

    if (this->totalNet_parser_)
      this->totalNet_parser_->_reset ();

    if (this->totalGross_parser_)
      this->totalGross_parser_->_reset ();

    if (this->paymentTerms_parser_)
      this->paymentTerms_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // Invoice_Participant_pskel
  //

  void Invoice_Participant_pskel::
  role ()
  {
    if (this->Invoice_Participant_impl_)
      this->Invoice_Participant_impl_->role ();
  }

  void Invoice_Participant_pskel::
  actor ()
  {
    if (this->Invoice_Participant_impl_)
      this->Invoice_Participant_impl_->actor ();
  }

  void Invoice_Participant_pskel::
  post_Invoice_Participant ()
  {
    if (this->Invoice_Participant_impl_)
      this->Invoice_Participant_impl_->post_Invoice_Participant ();
    else
      post_BackboneElement ();
  }

  void Invoice_Participant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    this->resetting_ = false;
  }

  // Invoice_LineItem_pskel
  //

  void Invoice_LineItem_pskel::
  sequence ()
  {
    if (this->Invoice_LineItem_impl_)
      this->Invoice_LineItem_impl_->sequence ();
  }

  void Invoice_LineItem_pskel::
  chargeItemReference ()
  {
    if (this->Invoice_LineItem_impl_)
      this->Invoice_LineItem_impl_->chargeItemReference ();
  }

  void Invoice_LineItem_pskel::
  chargeItemCodeableConcept ()
  {
    if (this->Invoice_LineItem_impl_)
      this->Invoice_LineItem_impl_->chargeItemCodeableConcept ();
  }

  void Invoice_LineItem_pskel::
  priceComponent ()
  {
    if (this->Invoice_LineItem_impl_)
      this->Invoice_LineItem_impl_->priceComponent ();
  }

  void Invoice_LineItem_pskel::
  post_Invoice_LineItem ()
  {
    if (this->Invoice_LineItem_impl_)
      this->Invoice_LineItem_impl_->post_Invoice_LineItem ();
    else
      post_BackboneElement ();
  }

  void Invoice_LineItem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->chargeItemReference_parser_)
      this->chargeItemReference_parser_->_reset ();

    if (this->chargeItemCodeableConcept_parser_)
      this->chargeItemCodeableConcept_parser_->_reset ();

    if (this->priceComponent_parser_)
      this->priceComponent_parser_->_reset ();

    this->resetting_ = false;
  }

  // Invoice_PriceComponent_pskel
  //

  void Invoice_PriceComponent_pskel::
  type ()
  {
    if (this->Invoice_PriceComponent_impl_)
      this->Invoice_PriceComponent_impl_->type ();
  }

  void Invoice_PriceComponent_pskel::
  code ()
  {
    if (this->Invoice_PriceComponent_impl_)
      this->Invoice_PriceComponent_impl_->code ();
  }

  void Invoice_PriceComponent_pskel::
  factor ()
  {
    if (this->Invoice_PriceComponent_impl_)
      this->Invoice_PriceComponent_impl_->factor ();
  }

  void Invoice_PriceComponent_pskel::
  amount ()
  {
    if (this->Invoice_PriceComponent_impl_)
      this->Invoice_PriceComponent_impl_->amount ();
  }

  void Invoice_PriceComponent_pskel::
  post_Invoice_PriceComponent ()
  {
    if (this->Invoice_PriceComponent_impl_)
      this->Invoice_PriceComponent_impl_->post_Invoice_PriceComponent ();
    else
      post_BackboneElement ();
  }

  void Invoice_PriceComponent_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // InvoiceStatus_list_pskel
  //

  void InvoiceStatus_list_pskel::
  post_InvoiceStatus_list ()
  {
    if (this->InvoiceStatus_list_impl_)
      this->InvoiceStatus_list_impl_->post_InvoiceStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const InvoiceStatus_list_pskel::_xsde_InvoiceStatus_list_pskel_enums_[5UL] = 
  {
    "balanced",
    "cancelled",
    "draft",
    "entered-in-error",
    "issued"
  };

  // InvoiceStatus_pskel
  //

  void InvoiceStatus_pskel::
  value ()
  {
    if (this->InvoiceStatus_impl_)
      this->InvoiceStatus_impl_->value ();
  }

  void InvoiceStatus_pskel::
  post_InvoiceStatus ()
  {
    if (this->InvoiceStatus_impl_)
      this->InvoiceStatus_impl_->post_InvoiceStatus ();
    else
      post_Element ();
  }

  void InvoiceStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Invoice_pskel.
  //
  bool Invoice_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Invoice_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Invoice_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Invoice_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Invoice_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Invoice_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_InvoiceStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "cancelledReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->cancelledReason_parser_)
            {
              this->cancelledReason_parser_->pre ();
              ctx.nested_parser (this->cancelledReason_parser_);
            }
          }
          else
          {
            if (this->cancelledReason_parser_ != 0)
            {
              this->cancelledReason_parser_->post_string ();
              this->cancelledReason ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "recipient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recipient_parser_)
            {
              this->recipient_parser_->pre ();
              ctx.nested_parser (this->recipient_parser_);
            }
          }
          else
          {
            if (this->recipient_parser_ != 0)
            {
              this->recipient_parser_->post_Reference ();
              this->recipient ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_Invoice_Participant ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "issuer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issuer_parser_)
            {
              this->issuer_parser_->pre ();
              ctx.nested_parser (this->issuer_parser_);
            }
          }
          else
          {
            if (this->issuer_parser_ != 0)
            {
              this->issuer_parser_->post_Reference ();
              this->issuer ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "account" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->account_parser_)
            {
              this->account_parser_->pre ();
              ctx.nested_parser (this->account_parser_);
            }
          }
          else
          {
            if (this->account_parser_ != 0)
            {
              this->account_parser_->post_Reference ();
              this->account ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "lineItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lineItem_parser_)
            {
              this->lineItem_parser_->pre ();
              ctx.nested_parser (this->lineItem_parser_);
            }
          }
          else
          {
            if (this->lineItem_parser_ != 0)
            {
              this->lineItem_parser_->post_Invoice_LineItem ();
              this->lineItem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "totalPriceComponent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->totalPriceComponent_parser_)
            {
              this->totalPriceComponent_parser_->pre ();
              ctx.nested_parser (this->totalPriceComponent_parser_);
            }
          }
          else
          {
            if (this->totalPriceComponent_parser_ != 0)
            {
              this->totalPriceComponent_parser_->post_Invoice_PriceComponent ();
              this->totalPriceComponent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "totalNet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->totalNet_parser_)
            {
              this->totalNet_parser_->pre ();
              ctx.nested_parser (this->totalNet_parser_);
            }
          }
          else
          {
            if (this->totalNet_parser_ != 0)
            {
              this->totalNet_parser_->post_Money ();
              this->totalNet ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "totalGross" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->totalGross_parser_)
            {
              this->totalGross_parser_->pre ();
              ctx.nested_parser (this->totalGross_parser_);
            }
          }
          else
          {
            if (this->totalGross_parser_ != 0)
            {
              this->totalGross_parser_->post_Money ();
              this->totalGross ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "paymentTerms" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->paymentTerms_parser_)
            {
              this->paymentTerms_parser_->pre ();
              ctx.nested_parser (this->paymentTerms_parser_);
            }
          }
          else
          {
            if (this->paymentTerms_parser_ != 0)
            {
              this->paymentTerms_parser_->post_markdown ();
              this->paymentTerms ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Invoice_Participant_pskel.
  //
  bool Invoice_Participant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "role" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "actor" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Invoice_Participant_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Invoice_Participant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Invoice_Participant_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Invoice_Participant_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Invoice_Participant_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_Reference ();
              this->actor ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Invoice_LineItem_pskel.
  //
  bool Invoice_LineItem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "chargeItemReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "chargeItemCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "priceComponent" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Invoice_LineItem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Invoice_LineItem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Invoice_LineItem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Invoice_LineItem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Invoice_LineItem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "chargeItemReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->chargeItemReference_parser_)
            {
              this->chargeItemReference_parser_->pre ();
              ctx.nested_parser (this->chargeItemReference_parser_);
            }
          }
          else
          {
            if (this->chargeItemReference_parser_ != 0)
            {
              this->chargeItemReference_parser_->post_Reference ();
              this->chargeItemReference ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "chargeItemCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->chargeItemCodeableConcept_parser_)
            {
              this->chargeItemCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->chargeItemCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->chargeItemCodeableConcept_parser_ != 0)
            {
              this->chargeItemCodeableConcept_parser_->post_CodeableConcept ();
              this->chargeItemCodeableConcept ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "priceComponent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priceComponent_parser_)
            {
              this->priceComponent_parser_->pre ();
              ctx.nested_parser (this->priceComponent_parser_);
            }
          }
          else
          {
            if (this->priceComponent_parser_ != 0)
            {
              this->priceComponent_parser_->post_Invoice_PriceComponent ();
              this->priceComponent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Invoice_PriceComponent_pskel.
  //
  bool Invoice_PriceComponent_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Invoice_PriceComponent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Invoice_PriceComponent_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Invoice_PriceComponent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Invoice_PriceComponent_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Invoice_PriceComponent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_InvoicePriceComponentType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for InvoiceStatus_pskel.
  //
  bool InvoiceStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_InvoiceStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

