// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "imagingstudy-pskel.hxx"

namespace fhir
{
  // ImagingStudy_pskel
  //

  void ImagingStudy_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ImagingStudy_pskel::
  status_parser (::fhir::ImagingStudyStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ImagingStudy_pskel::
  modality_parser (::fhir::Coding_pskel& p)
  {
    this->modality_parser_ = &p;
  }

  void ImagingStudy_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void ImagingStudy_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void ImagingStudy_pskel::
  started_parser (::fhir::dateTime_pskel& p)
  {
    this->started_parser_ = &p;
  }

  void ImagingStudy_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void ImagingStudy_pskel::
  referrer_parser (::fhir::Reference_pskel& p)
  {
    this->referrer_parser_ = &p;
  }

  void ImagingStudy_pskel::
  interpreter_parser (::fhir::Reference_pskel& p)
  {
    this->interpreter_parser_ = &p;
  }

  void ImagingStudy_pskel::
  endpoint_parser (::fhir::Reference_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void ImagingStudy_pskel::
  numberOfSeries_parser (::fhir::unsignedInt_pskel& p)
  {
    this->numberOfSeries_parser_ = &p;
  }

  void ImagingStudy_pskel::
  numberOfInstances_parser (::fhir::unsignedInt_pskel& p)
  {
    this->numberOfInstances_parser_ = &p;
  }

  void ImagingStudy_pskel::
  procedureReference_parser (::fhir::Reference_pskel& p)
  {
    this->procedureReference_parser_ = &p;
  }

  void ImagingStudy_pskel::
  procedureCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->procedureCode_parser_ = &p;
  }

  void ImagingStudy_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void ImagingStudy_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void ImagingStudy_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void ImagingStudy_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void ImagingStudy_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ImagingStudy_pskel::
  series_parser (::fhir::ImagingStudy_Series_pskel& p)
  {
    this->series_parser_ = &p;
  }

  void ImagingStudy_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::ImagingStudyStatus_pskel& status,
           ::fhir::Coding_pskel& modality,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& started,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& referrer,
           ::fhir::Reference_pskel& interpreter,
           ::fhir::Reference_pskel& endpoint,
           ::fhir::unsignedInt_pskel& numberOfSeries,
           ::fhir::unsignedInt_pskel& numberOfInstances,
           ::fhir::Reference_pskel& procedureReference,
           ::fhir::CodeableConcept_pskel& procedureCode,
           ::fhir::Reference_pskel& location,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Annotation_pskel& note,
           ::fhir::string_pskel& description,
           ::fhir::ImagingStudy_Series_pskel& series)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->modality_parser_ = &modality;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->started_parser_ = &started;
    this->basedOn_parser_ = &basedOn;
    this->referrer_parser_ = &referrer;
    this->interpreter_parser_ = &interpreter;
    this->endpoint_parser_ = &endpoint;
    this->numberOfSeries_parser_ = &numberOfSeries;
    this->numberOfInstances_parser_ = &numberOfInstances;
    this->procedureReference_parser_ = &procedureReference;
    this->procedureCode_parser_ = &procedureCode;
    this->location_parser_ = &location;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->note_parser_ = &note;
    this->description_parser_ = &description;
    this->series_parser_ = &series;
  }

  ImagingStudy_pskel::
  ImagingStudy_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ImagingStudy_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    modality_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    started_parser_ (0),
    basedOn_parser_ (0),
    referrer_parser_ (0),
    interpreter_parser_ (0),
    endpoint_parser_ (0),
    numberOfSeries_parser_ (0),
    numberOfInstances_parser_ (0),
    procedureReference_parser_ (0),
    procedureCode_parser_ (0),
    location_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    description_parser_ (0),
    series_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImagingStudy_pskel::
  ImagingStudy_pskel (ImagingStudy_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ImagingStudy_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    modality_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    started_parser_ (0),
    basedOn_parser_ (0),
    referrer_parser_ (0),
    interpreter_parser_ (0),
    endpoint_parser_ (0),
    numberOfSeries_parser_ (0),
    numberOfInstances_parser_ (0),
    procedureReference_parser_ (0),
    procedureCode_parser_ (0),
    location_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    note_parser_ (0),
    description_parser_ (0),
    series_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImagingStudy_Series_pskel
  //

  void ImagingStudy_Series_pskel::
  uid_parser (::fhir::id_pskel& p)
  {
    this->uid_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  number_parser (::fhir::unsignedInt_pskel& p)
  {
    this->number_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  modality_parser (::fhir::Coding_pskel& p)
  {
    this->modality_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  numberOfInstances_parser (::fhir::unsignedInt_pskel& p)
  {
    this->numberOfInstances_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  endpoint_parser (::fhir::Reference_pskel& p)
  {
    this->endpoint_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  bodySite_parser (::fhir::Coding_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  laterality_parser (::fhir::Coding_pskel& p)
  {
    this->laterality_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  specimen_parser (::fhir::Reference_pskel& p)
  {
    this->specimen_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  started_parser (::fhir::dateTime_pskel& p)
  {
    this->started_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  performer_parser (::fhir::ImagingStudy_Performer_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  instance_parser (::fhir::ImagingStudy_Instance_pskel& p)
  {
    this->instance_parser_ = &p;
  }

  void ImagingStudy_Series_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& uid,
           ::fhir::unsignedInt_pskel& number,
           ::fhir::Coding_pskel& modality,
           ::fhir::string_pskel& description,
           ::fhir::unsignedInt_pskel& numberOfInstances,
           ::fhir::Reference_pskel& endpoint,
           ::fhir::Coding_pskel& bodySite,
           ::fhir::Coding_pskel& laterality,
           ::fhir::Reference_pskel& specimen,
           ::fhir::dateTime_pskel& started,
           ::fhir::ImagingStudy_Performer_pskel& performer,
           ::fhir::ImagingStudy_Instance_pskel& instance)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->uid_parser_ = &uid;
    this->number_parser_ = &number;
    this->modality_parser_ = &modality;
    this->description_parser_ = &description;
    this->numberOfInstances_parser_ = &numberOfInstances;
    this->endpoint_parser_ = &endpoint;
    this->bodySite_parser_ = &bodySite;
    this->laterality_parser_ = &laterality;
    this->specimen_parser_ = &specimen;
    this->started_parser_ = &started;
    this->performer_parser_ = &performer;
    this->instance_parser_ = &instance;
  }

  ImagingStudy_Series_pskel::
  ImagingStudy_Series_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImagingStudy_Series_impl_ (0),
    uid_parser_ (0),
    number_parser_ (0),
    modality_parser_ (0),
    description_parser_ (0),
    numberOfInstances_parser_ (0),
    endpoint_parser_ (0),
    bodySite_parser_ (0),
    laterality_parser_ (0),
    specimen_parser_ (0),
    started_parser_ (0),
    performer_parser_ (0),
    instance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImagingStudy_Series_pskel::
  ImagingStudy_Series_pskel (ImagingStudy_Series_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImagingStudy_Series_impl_ (impl),
    uid_parser_ (0),
    number_parser_ (0),
    modality_parser_ (0),
    description_parser_ (0),
    numberOfInstances_parser_ (0),
    endpoint_parser_ (0),
    bodySite_parser_ (0),
    laterality_parser_ (0),
    specimen_parser_ (0),
    started_parser_ (0),
    performer_parser_ (0),
    instance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImagingStudy_Performer_pskel
  //

  void ImagingStudy_Performer_pskel::
  function_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->function_parser_ = &p;
  }

  void ImagingStudy_Performer_pskel::
  actor_parser (::fhir::Reference_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void ImagingStudy_Performer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& function,
           ::fhir::Reference_pskel& actor)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->function_parser_ = &function;
    this->actor_parser_ = &actor;
  }

  ImagingStudy_Performer_pskel::
  ImagingStudy_Performer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImagingStudy_Performer_impl_ (0),
    function_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImagingStudy_Performer_pskel::
  ImagingStudy_Performer_pskel (ImagingStudy_Performer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImagingStudy_Performer_impl_ (impl),
    function_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImagingStudy_Instance_pskel
  //

  void ImagingStudy_Instance_pskel::
  uid_parser (::fhir::id_pskel& p)
  {
    this->uid_parser_ = &p;
  }

  void ImagingStudy_Instance_pskel::
  sopClass_parser (::fhir::Coding_pskel& p)
  {
    this->sopClass_parser_ = &p;
  }

  void ImagingStudy_Instance_pskel::
  number_parser (::fhir::unsignedInt_pskel& p)
  {
    this->number_parser_ = &p;
  }

  void ImagingStudy_Instance_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void ImagingStudy_Instance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::id_pskel& uid,
           ::fhir::Coding_pskel& sopClass,
           ::fhir::unsignedInt_pskel& number,
           ::fhir::string_pskel& title)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->uid_parser_ = &uid;
    this->sopClass_parser_ = &sopClass;
    this->number_parser_ = &number;
    this->title_parser_ = &title;
  }

  ImagingStudy_Instance_pskel::
  ImagingStudy_Instance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImagingStudy_Instance_impl_ (0),
    uid_parser_ (0),
    sopClass_parser_ (0),
    number_parser_ (0),
    title_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImagingStudy_Instance_pskel::
  ImagingStudy_Instance_pskel (ImagingStudy_Instance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImagingStudy_Instance_impl_ (impl),
    uid_parser_ (0),
    sopClass_parser_ (0),
    number_parser_ (0),
    title_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImagingStudyStatus_list_pskel
  //

  ImagingStudyStatus_list_pskel::
  ImagingStudyStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ImagingStudyStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ImagingStudyStatus_list_pskel_enums_, 5UL);
  }

  ImagingStudyStatus_list_pskel::
  ImagingStudyStatus_list_pskel (ImagingStudyStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ImagingStudyStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ImagingStudyStatus_list_pskel_enums_, 5UL);
  }

  // ImagingStudyStatus_pskel
  //

  void ImagingStudyStatus_pskel::
  value_parser (::fhir::ImagingStudyStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ImagingStudyStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ImagingStudyStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ImagingStudyStatus_pskel::
  ImagingStudyStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ImagingStudyStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  ImagingStudyStatus_pskel::
  ImagingStudyStatus_pskel (ImagingStudyStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ImagingStudyStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ImagingStudy_pskel
  //

  void ImagingStudy_pskel::
  identifier ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->identifier ();
  }

  void ImagingStudy_pskel::
  status ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->status ();
  }

  void ImagingStudy_pskel::
  modality ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->modality ();
  }

  void ImagingStudy_pskel::
  subject ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->subject ();
  }

  void ImagingStudy_pskel::
  encounter ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->encounter ();
  }

  void ImagingStudy_pskel::
  started ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->started ();
  }

  void ImagingStudy_pskel::
  basedOn ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->basedOn ();
  }

  void ImagingStudy_pskel::
  referrer ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->referrer ();
  }

  void ImagingStudy_pskel::
  interpreter ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->interpreter ();
  }

  void ImagingStudy_pskel::
  endpoint ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->endpoint ();
  }

  void ImagingStudy_pskel::
  numberOfSeries ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->numberOfSeries ();
  }

  void ImagingStudy_pskel::
  numberOfInstances ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->numberOfInstances ();
  }

  void ImagingStudy_pskel::
  procedureReference ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->procedureReference ();
  }

  void ImagingStudy_pskel::
  procedureCode ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->procedureCode ();
  }

  void ImagingStudy_pskel::
  location ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->location ();
  }

  void ImagingStudy_pskel::
  reasonCode ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->reasonCode ();
  }

  void ImagingStudy_pskel::
  reasonReference ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->reasonReference ();
  }

  void ImagingStudy_pskel::
  note ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->note ();
  }

  void ImagingStudy_pskel::
  description ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->description ();
  }

  void ImagingStudy_pskel::
  series ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->series ();
  }

  void ImagingStudy_pskel::
  post_ImagingStudy ()
  {
    if (this->ImagingStudy_impl_)
      this->ImagingStudy_impl_->post_ImagingStudy ();
    else
      post_DomainResource ();
  }

  void ImagingStudy_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->modality_parser_)
      this->modality_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->started_parser_)
      this->started_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->referrer_parser_)
      this->referrer_parser_->_reset ();

    if (this->interpreter_parser_)
      this->interpreter_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    if (this->numberOfSeries_parser_)
      this->numberOfSeries_parser_->_reset ();

    if (this->numberOfInstances_parser_)
      this->numberOfInstances_parser_->_reset ();

    if (this->procedureReference_parser_)
      this->procedureReference_parser_->_reset ();

    if (this->procedureCode_parser_)
      this->procedureCode_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->series_parser_)
      this->series_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImagingStudy_Series_pskel
  //

  void ImagingStudy_Series_pskel::
  uid ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->uid ();
  }

  void ImagingStudy_Series_pskel::
  number ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->number ();
  }

  void ImagingStudy_Series_pskel::
  modality ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->modality ();
  }

  void ImagingStudy_Series_pskel::
  description ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->description ();
  }

  void ImagingStudy_Series_pskel::
  numberOfInstances ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->numberOfInstances ();
  }

  void ImagingStudy_Series_pskel::
  endpoint ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->endpoint ();
  }

  void ImagingStudy_Series_pskel::
  bodySite ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->bodySite ();
  }

  void ImagingStudy_Series_pskel::
  laterality ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->laterality ();
  }

  void ImagingStudy_Series_pskel::
  specimen ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->specimen ();
  }

  void ImagingStudy_Series_pskel::
  started ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->started ();
  }

  void ImagingStudy_Series_pskel::
  performer ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->performer ();
  }

  void ImagingStudy_Series_pskel::
  instance ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->instance ();
  }

  void ImagingStudy_Series_pskel::
  post_ImagingStudy_Series ()
  {
    if (this->ImagingStudy_Series_impl_)
      this->ImagingStudy_Series_impl_->post_ImagingStudy_Series ();
    else
      post_BackboneElement ();
  }

  void ImagingStudy_Series_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->uid_parser_)
      this->uid_parser_->_reset ();

    if (this->number_parser_)
      this->number_parser_->_reset ();

    if (this->modality_parser_)
      this->modality_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->numberOfInstances_parser_)
      this->numberOfInstances_parser_->_reset ();

    if (this->endpoint_parser_)
      this->endpoint_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->laterality_parser_)
      this->laterality_parser_->_reset ();

    if (this->specimen_parser_)
      this->specimen_parser_->_reset ();

    if (this->started_parser_)
      this->started_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->instance_parser_)
      this->instance_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImagingStudy_Performer_pskel
  //

  void ImagingStudy_Performer_pskel::
  function ()
  {
    if (this->ImagingStudy_Performer_impl_)
      this->ImagingStudy_Performer_impl_->function ();
  }

  void ImagingStudy_Performer_pskel::
  actor ()
  {
    if (this->ImagingStudy_Performer_impl_)
      this->ImagingStudy_Performer_impl_->actor ();
  }

  void ImagingStudy_Performer_pskel::
  post_ImagingStudy_Performer ()
  {
    if (this->ImagingStudy_Performer_impl_)
      this->ImagingStudy_Performer_impl_->post_ImagingStudy_Performer ();
    else
      post_BackboneElement ();
  }

  void ImagingStudy_Performer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->function_parser_)
      this->function_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImagingStudy_Instance_pskel
  //

  void ImagingStudy_Instance_pskel::
  uid ()
  {
    if (this->ImagingStudy_Instance_impl_)
      this->ImagingStudy_Instance_impl_->uid ();
  }

  void ImagingStudy_Instance_pskel::
  sopClass ()
  {
    if (this->ImagingStudy_Instance_impl_)
      this->ImagingStudy_Instance_impl_->sopClass ();
  }

  void ImagingStudy_Instance_pskel::
  number ()
  {
    if (this->ImagingStudy_Instance_impl_)
      this->ImagingStudy_Instance_impl_->number ();
  }

  void ImagingStudy_Instance_pskel::
  title ()
  {
    if (this->ImagingStudy_Instance_impl_)
      this->ImagingStudy_Instance_impl_->title ();
  }

  void ImagingStudy_Instance_pskel::
  post_ImagingStudy_Instance ()
  {
    if (this->ImagingStudy_Instance_impl_)
      this->ImagingStudy_Instance_impl_->post_ImagingStudy_Instance ();
    else
      post_BackboneElement ();
  }

  void ImagingStudy_Instance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->uid_parser_)
      this->uid_parser_->_reset ();

    if (this->sopClass_parser_)
      this->sopClass_parser_->_reset ();

    if (this->number_parser_)
      this->number_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImagingStudyStatus_list_pskel
  //

  void ImagingStudyStatus_list_pskel::
  post_ImagingStudyStatus_list ()
  {
    if (this->ImagingStudyStatus_list_impl_)
      this->ImagingStudyStatus_list_impl_->post_ImagingStudyStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const ImagingStudyStatus_list_pskel::_xsde_ImagingStudyStatus_list_pskel_enums_[5UL] = 
  {
    "available",
    "cancelled",
    "entered-in-error",
    "registered",
    "unknown"
  };

  // ImagingStudyStatus_pskel
  //

  void ImagingStudyStatus_pskel::
  value ()
  {
    if (this->ImagingStudyStatus_impl_)
      this->ImagingStudyStatus_impl_->value ();
  }

  void ImagingStudyStatus_pskel::
  post_ImagingStudyStatus ()
  {
    if (this->ImagingStudyStatus_impl_)
      this->ImagingStudyStatus_impl_->post_ImagingStudyStatus ();
    else
      post_Element ();
  }

  void ImagingStudyStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ImagingStudy_pskel.
  //
  bool ImagingStudy_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImagingStudy_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImagingStudy_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImagingStudy_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ImagingStudy_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImagingStudy_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ImagingStudyStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "modality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modality_parser_)
            {
              this->modality_parser_->pre ();
              ctx.nested_parser (this->modality_parser_);
            }
          }
          else
          {
            if (this->modality_parser_ != 0)
            {
              this->modality_parser_->post_Coding ();
              this->modality ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "started" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->started_parser_)
            {
              this->started_parser_->pre ();
              ctx.nested_parser (this->started_parser_);
            }
          }
          else
          {
            if (this->started_parser_ != 0)
            {
              this->started_parser_->post_dateTime ();
              this->started ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "referrer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referrer_parser_)
            {
              this->referrer_parser_->pre ();
              ctx.nested_parser (this->referrer_parser_);
            }
          }
          else
          {
            if (this->referrer_parser_ != 0)
            {
              this->referrer_parser_->post_Reference ();
              this->referrer ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "interpreter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->interpreter_parser_)
            {
              this->interpreter_parser_->pre ();
              ctx.nested_parser (this->interpreter_parser_);
            }
          }
          else
          {
            if (this->interpreter_parser_ != 0)
            {
              this->interpreter_parser_->post_Reference ();
              this->interpreter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_Reference ();
              this->endpoint ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "numberOfSeries" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numberOfSeries_parser_)
            {
              this->numberOfSeries_parser_->pre ();
              ctx.nested_parser (this->numberOfSeries_parser_);
            }
          }
          else
          {
            if (this->numberOfSeries_parser_ != 0)
            {
              this->numberOfSeries_parser_->post_unsignedInt ();
              this->numberOfSeries ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "numberOfInstances" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numberOfInstances_parser_)
            {
              this->numberOfInstances_parser_->pre ();
              ctx.nested_parser (this->numberOfInstances_parser_);
            }
          }
          else
          {
            if (this->numberOfInstances_parser_ != 0)
            {
              this->numberOfInstances_parser_->post_unsignedInt ();
              this->numberOfInstances ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "procedureReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedureReference_parser_)
            {
              this->procedureReference_parser_->pre ();
              ctx.nested_parser (this->procedureReference_parser_);
            }
          }
          else
          {
            if (this->procedureReference_parser_ != 0)
            {
              this->procedureReference_parser_->post_Reference ();
              this->procedureReference ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "procedureCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedureCode_parser_)
            {
              this->procedureCode_parser_->pre ();
              ctx.nested_parser (this->procedureCode_parser_);
            }
          }
          else
          {
            if (this->procedureCode_parser_ != 0)
            {
              this->procedureCode_parser_->post_CodeableConcept ();
              this->procedureCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "series" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->series_parser_)
            {
              this->series_parser_->pre ();
              ctx.nested_parser (this->series_parser_);
            }
          }
          else
          {
            if (this->series_parser_ != 0)
            {
              this->series_parser_->post_ImagingStudy_Series ();
              this->series ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImagingStudy_Series_pskel.
  //
  bool ImagingStudy_Series_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "uid" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImagingStudy_Series_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImagingStudy_Series_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImagingStudy_Series_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImagingStudy_Series_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImagingStudy_Series_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "uid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uid_parser_)
            {
              this->uid_parser_->pre ();
              ctx.nested_parser (this->uid_parser_);
            }
          }
          else
          {
            if (this->uid_parser_ != 0)
            {
              this->uid_parser_->post_id ();
              this->uid ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "number" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->number_parser_)
            {
              this->number_parser_->pre ();
              ctx.nested_parser (this->number_parser_);
            }
          }
          else
          {
            if (this->number_parser_ != 0)
            {
              this->number_parser_->post_unsignedInt ();
              this->number ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "modality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modality_parser_)
            {
              this->modality_parser_->pre ();
              ctx.nested_parser (this->modality_parser_);
            }
          }
          else
          {
            if (this->modality_parser_ != 0)
            {
              this->modality_parser_->post_Coding ();
              this->modality ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "numberOfInstances" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numberOfInstances_parser_)
            {
              this->numberOfInstances_parser_->pre ();
              ctx.nested_parser (this->numberOfInstances_parser_);
            }
          }
          else
          {
            if (this->numberOfInstances_parser_ != 0)
            {
              this->numberOfInstances_parser_->post_unsignedInt ();
              this->numberOfInstances ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "endpoint" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endpoint_parser_)
            {
              this->endpoint_parser_->pre ();
              ctx.nested_parser (this->endpoint_parser_);
            }
          }
          else
          {
            if (this->endpoint_parser_ != 0)
            {
              this->endpoint_parser_->post_Reference ();
              this->endpoint ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_Coding ();
              this->bodySite ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "laterality" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->laterality_parser_)
            {
              this->laterality_parser_->pre ();
              ctx.nested_parser (this->laterality_parser_);
            }
          }
          else
          {
            if (this->laterality_parser_ != 0)
            {
              this->laterality_parser_->post_Coding ();
              this->laterality ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "specimen" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specimen_parser_)
            {
              this->specimen_parser_->pre ();
              ctx.nested_parser (this->specimen_parser_);
            }
          }
          else
          {
            if (this->specimen_parser_ != 0)
            {
              this->specimen_parser_->post_Reference ();
              this->specimen ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "started" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->started_parser_)
            {
              this->started_parser_->pre ();
              ctx.nested_parser (this->started_parser_);
            }
          }
          else
          {
            if (this->started_parser_ != 0)
            {
              this->started_parser_->post_dateTime ();
              this->started ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_ImagingStudy_Performer ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "instance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instance_parser_)
            {
              this->instance_parser_->pre ();
              ctx.nested_parser (this->instance_parser_);
            }
          }
          else
          {
            if (this->instance_parser_ != 0)
            {
              this->instance_parser_->post_ImagingStudy_Instance ();
              this->instance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImagingStudy_Performer_pskel.
  //
  bool ImagingStudy_Performer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "function" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "actor" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImagingStudy_Performer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImagingStudy_Performer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImagingStudy_Performer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImagingStudy_Performer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImagingStudy_Performer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "function" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->function_parser_)
            {
              this->function_parser_->pre ();
              ctx.nested_parser (this->function_parser_);
            }
          }
          else
          {
            if (this->function_parser_ != 0)
            {
              this->function_parser_->post_CodeableConcept ();
              this->function ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_Reference ();
              this->actor ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImagingStudy_Instance_pskel.
  //
  bool ImagingStudy_Instance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "uid" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImagingStudy_Instance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImagingStudy_Instance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImagingStudy_Instance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImagingStudy_Instance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImagingStudy_Instance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "uid" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uid_parser_)
            {
              this->uid_parser_->pre ();
              ctx.nested_parser (this->uid_parser_);
            }
          }
          else
          {
            if (this->uid_parser_ != 0)
            {
              this->uid_parser_->post_id ();
              this->uid ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "sopClass" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sopClass_parser_)
            {
              this->sopClass_parser_->pre ();
              ctx.nested_parser (this->sopClass_parser_);
            }
          }
          else
          {
            if (this->sopClass_parser_ != 0)
            {
              this->sopClass_parser_->post_Coding ();
              this->sopClass ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "number" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->number_parser_)
            {
              this->number_parser_->pre ();
              ctx.nested_parser (this->number_parser_);
            }
          }
          else
          {
            if (this->number_parser_ != 0)
            {
              this->number_parser_->post_unsignedInt ();
              this->number ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ImagingStudyStatus_pskel.
  //
  bool ImagingStudyStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ImagingStudyStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

