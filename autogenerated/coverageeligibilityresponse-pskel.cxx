// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "coverageeligibilityresponse-pskel.hxx"

namespace fhir
{
  // CoverageEligibilityResponse_pskel
  //

  void CoverageEligibilityResponse_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  status_parser (::fhir::FinancialResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  purpose_parser (::fhir::EligibilityResponsePurpose_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  servicedDate_parser (::fhir::date_pskel& p)
  {
    this->servicedDate_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  servicedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->servicedPeriod_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  requestor_parser (::fhir::Reference_pskel& p)
  {
    this->requestor_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  request_parser (::fhir::Reference_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  outcome_parser (::fhir::RemittanceOutcome_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  disposition_parser (::fhir::string_pskel& p)
  {
    this->disposition_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  insurer_parser (::fhir::Reference_pskel& p)
  {
    this->insurer_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  insurance_parser (::fhir::CoverageEligibilityResponse_Insurance_pskel& p)
  {
    this->insurance_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  preAuthRef_parser (::fhir::string_pskel& p)
  {
    this->preAuthRef_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  form_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->form_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  error_parser (::fhir::CoverageEligibilityResponse_Error_pskel& p)
  {
    this->error_parser_ = &p;
  }

  void CoverageEligibilityResponse_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::FinancialResourceStatusCodes_pskel& status,
           ::fhir::EligibilityResponsePurpose_pskel& purpose,
           ::fhir::Reference_pskel& patient,
           ::fhir::date_pskel& servicedDate,
           ::fhir::Period_pskel& servicedPeriod,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& requestor,
           ::fhir::Reference_pskel& request,
           ::fhir::RemittanceOutcome_pskel& outcome,
           ::fhir::string_pskel& disposition,
           ::fhir::Reference_pskel& insurer,
           ::fhir::CoverageEligibilityResponse_Insurance_pskel& insurance,
           ::fhir::string_pskel& preAuthRef,
           ::fhir::CodeableConcept_pskel& form,
           ::fhir::CoverageEligibilityResponse_Error_pskel& error)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->purpose_parser_ = &purpose;
    this->patient_parser_ = &patient;
    this->servicedDate_parser_ = &servicedDate;
    this->servicedPeriod_parser_ = &servicedPeriod;
    this->created_parser_ = &created;
    this->requestor_parser_ = &requestor;
    this->request_parser_ = &request;
    this->outcome_parser_ = &outcome;
    this->disposition_parser_ = &disposition;
    this->insurer_parser_ = &insurer;
    this->insurance_parser_ = &insurance;
    this->preAuthRef_parser_ = &preAuthRef;
    this->form_parser_ = &form;
    this->error_parser_ = &error;
  }

  CoverageEligibilityResponse_pskel::
  CoverageEligibilityResponse_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    CoverageEligibilityResponse_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    purpose_parser_ (0),
    patient_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    created_parser_ (0),
    requestor_parser_ (0),
    request_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    insurer_parser_ (0),
    insurance_parser_ (0),
    preAuthRef_parser_ (0),
    form_parser_ (0),
    error_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityResponse_pskel::
  CoverageEligibilityResponse_pskel (CoverageEligibilityResponse_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    CoverageEligibilityResponse_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    purpose_parser_ (0),
    patient_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    created_parser_ (0),
    requestor_parser_ (0),
    request_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    insurer_parser_ (0),
    insurance_parser_ (0),
    preAuthRef_parser_ (0),
    form_parser_ (0),
    error_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityResponse_Insurance_pskel
  //

  void CoverageEligibilityResponse_Insurance_pskel::
  coverage_parser (::fhir::Reference_pskel& p)
  {
    this->coverage_parser_ = &p;
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  inforce_parser (::fhir::boolean_pskel& p)
  {
    this->inforce_parser_ = &p;
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  benefitPeriod_parser (::fhir::Period_pskel& p)
  {
    this->benefitPeriod_parser_ = &p;
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  item_parser (::fhir::CoverageEligibilityResponse_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& coverage,
           ::fhir::boolean_pskel& inforce,
           ::fhir::Period_pskel& benefitPeriod,
           ::fhir::CoverageEligibilityResponse_Item_pskel& item)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->coverage_parser_ = &coverage;
    this->inforce_parser_ = &inforce;
    this->benefitPeriod_parser_ = &benefitPeriod;
    this->item_parser_ = &item;
  }

  CoverageEligibilityResponse_Insurance_pskel::
  CoverageEligibilityResponse_Insurance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityResponse_Insurance_impl_ (0),
    coverage_parser_ (0),
    inforce_parser_ (0),
    benefitPeriod_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityResponse_Insurance_pskel::
  CoverageEligibilityResponse_Insurance_pskel (CoverageEligibilityResponse_Insurance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityResponse_Insurance_impl_ (impl),
    coverage_parser_ (0),
    inforce_parser_ (0),
    benefitPeriod_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityResponse_Item_pskel
  //

  void CoverageEligibilityResponse_Item_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  excluded_parser (::fhir::boolean_pskel& p)
  {
    this->excluded_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  network_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->network_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  unit_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->unit_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  term_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->term_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  benefit_parser (::fhir::CoverageEligibilityResponse_Benefit_pskel& p)
  {
    this->benefit_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  authorizationRequired_parser (::fhir::boolean_pskel& p)
  {
    this->authorizationRequired_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  authorizationSupporting_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->authorizationSupporting_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  authorizationUrl_parser (::fhir::uri_pskel& p)
  {
    this->authorizationUrl_parser_ = &p;
  }

  void CoverageEligibilityResponse_Item_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::Reference_pskel& provider,
           ::fhir::boolean_pskel& excluded,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& network,
           ::fhir::CodeableConcept_pskel& unit,
           ::fhir::CodeableConcept_pskel& term,
           ::fhir::CoverageEligibilityResponse_Benefit_pskel& benefit,
           ::fhir::boolean_pskel& authorizationRequired,
           ::fhir::CodeableConcept_pskel& authorizationSupporting,
           ::fhir::uri_pskel& authorizationUrl)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->provider_parser_ = &provider;
    this->excluded_parser_ = &excluded;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
    this->network_parser_ = &network;
    this->unit_parser_ = &unit;
    this->term_parser_ = &term;
    this->benefit_parser_ = &benefit;
    this->authorizationRequired_parser_ = &authorizationRequired;
    this->authorizationSupporting_parser_ = &authorizationSupporting;
    this->authorizationUrl_parser_ = &authorizationUrl;
  }

  CoverageEligibilityResponse_Item_pskel::
  CoverageEligibilityResponse_Item_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityResponse_Item_impl_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    provider_parser_ (0),
    excluded_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    network_parser_ (0),
    unit_parser_ (0),
    term_parser_ (0),
    benefit_parser_ (0),
    authorizationRequired_parser_ (0),
    authorizationSupporting_parser_ (0),
    authorizationUrl_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityResponse_Item_pskel::
  CoverageEligibilityResponse_Item_pskel (CoverageEligibilityResponse_Item_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityResponse_Item_impl_ (impl),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    provider_parser_ (0),
    excluded_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    network_parser_ (0),
    unit_parser_ (0),
    term_parser_ (0),
    benefit_parser_ (0),
    authorizationRequired_parser_ (0),
    authorizationSupporting_parser_ (0),
    authorizationUrl_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityResponse_Benefit_pskel
  //

  void CoverageEligibilityResponse_Benefit_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  allowedUnsignedInt_parser (::fhir::unsignedInt_pskel& p)
  {
    this->allowedUnsignedInt_parser_ = &p;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  allowedString_parser (::fhir::string_pskel& p)
  {
    this->allowedString_parser_ = &p;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  allowedMoney_parser (::fhir::Money_pskel& p)
  {
    this->allowedMoney_parser_ = &p;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  usedUnsignedInt_parser (::fhir::unsignedInt_pskel& p)
  {
    this->usedUnsignedInt_parser_ = &p;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  usedString_parser (::fhir::string_pskel& p)
  {
    this->usedString_parser_ = &p;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  usedMoney_parser (::fhir::Money_pskel& p)
  {
    this->usedMoney_parser_ = &p;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::unsignedInt_pskel& allowedUnsignedInt,
           ::fhir::string_pskel& allowedString,
           ::fhir::Money_pskel& allowedMoney,
           ::fhir::unsignedInt_pskel& usedUnsignedInt,
           ::fhir::string_pskel& usedString,
           ::fhir::Money_pskel& usedMoney)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->allowedUnsignedInt_parser_ = &allowedUnsignedInt;
    this->allowedString_parser_ = &allowedString;
    this->allowedMoney_parser_ = &allowedMoney;
    this->usedUnsignedInt_parser_ = &usedUnsignedInt;
    this->usedString_parser_ = &usedString;
    this->usedMoney_parser_ = &usedMoney;
  }

  CoverageEligibilityResponse_Benefit_pskel::
  CoverageEligibilityResponse_Benefit_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityResponse_Benefit_impl_ (0),
    type_parser_ (0),
    allowedUnsignedInt_parser_ (0),
    allowedString_parser_ (0),
    allowedMoney_parser_ (0),
    usedUnsignedInt_parser_ (0),
    usedString_parser_ (0),
    usedMoney_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityResponse_Benefit_pskel::
  CoverageEligibilityResponse_Benefit_pskel (CoverageEligibilityResponse_Benefit_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityResponse_Benefit_impl_ (impl),
    type_parser_ (0),
    allowedUnsignedInt_parser_ (0),
    allowedString_parser_ (0),
    allowedMoney_parser_ (0),
    usedUnsignedInt_parser_ (0),
    usedString_parser_ (0),
    usedMoney_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityResponse_Error_pskel
  //

  void CoverageEligibilityResponse_Error_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void CoverageEligibilityResponse_Error_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
  }

  CoverageEligibilityResponse_Error_pskel::
  CoverageEligibilityResponse_Error_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityResponse_Error_impl_ (0),
    code_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityResponse_Error_pskel::
  CoverageEligibilityResponse_Error_pskel (CoverageEligibilityResponse_Error_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityResponse_Error_impl_ (impl),
    code_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EligibilityResponsePurpose_list_pskel
  //

  EligibilityResponsePurpose_list_pskel::
  EligibilityResponsePurpose_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EligibilityResponsePurpose_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EligibilityResponsePurpose_list_pskel_enums_, 4UL);
  }

  EligibilityResponsePurpose_list_pskel::
  EligibilityResponsePurpose_list_pskel (EligibilityResponsePurpose_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EligibilityResponsePurpose_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EligibilityResponsePurpose_list_pskel_enums_, 4UL);
  }

  // EligibilityResponsePurpose_pskel
  //

  void EligibilityResponsePurpose_pskel::
  value_parser (::fhir::EligibilityResponsePurpose_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EligibilityResponsePurpose_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EligibilityResponsePurpose_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EligibilityResponsePurpose_pskel::
  EligibilityResponsePurpose_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EligibilityResponsePurpose_impl_ (0),
    value_parser_ (0)
  {
  }

  EligibilityResponsePurpose_pskel::
  EligibilityResponsePurpose_pskel (EligibilityResponsePurpose_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EligibilityResponsePurpose_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // CoverageEligibilityResponse_pskel
  //

  void CoverageEligibilityResponse_pskel::
  identifier ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->identifier ();
  }

  void CoverageEligibilityResponse_pskel::
  status ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->status ();
  }

  void CoverageEligibilityResponse_pskel::
  purpose ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->purpose ();
  }

  void CoverageEligibilityResponse_pskel::
  patient ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->patient ();
  }

  void CoverageEligibilityResponse_pskel::
  servicedDate ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->servicedDate ();
  }

  void CoverageEligibilityResponse_pskel::
  servicedPeriod ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->servicedPeriod ();
  }

  void CoverageEligibilityResponse_pskel::
  created ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->created ();
  }

  void CoverageEligibilityResponse_pskel::
  requestor ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->requestor ();
  }

  void CoverageEligibilityResponse_pskel::
  request ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->request ();
  }

  void CoverageEligibilityResponse_pskel::
  outcome ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->outcome ();
  }

  void CoverageEligibilityResponse_pskel::
  disposition ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->disposition ();
  }

  void CoverageEligibilityResponse_pskel::
  insurer ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->insurer ();
  }

  void CoverageEligibilityResponse_pskel::
  insurance ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->insurance ();
  }

  void CoverageEligibilityResponse_pskel::
  preAuthRef ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->preAuthRef ();
  }

  void CoverageEligibilityResponse_pskel::
  form ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->form ();
  }

  void CoverageEligibilityResponse_pskel::
  error ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->error ();
  }

  void CoverageEligibilityResponse_pskel::
  post_CoverageEligibilityResponse ()
  {
    if (this->CoverageEligibilityResponse_impl_)
      this->CoverageEligibilityResponse_impl_->post_CoverageEligibilityResponse ();
    else
      post_DomainResource ();
  }

  void CoverageEligibilityResponse_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->servicedDate_parser_)
      this->servicedDate_parser_->_reset ();

    if (this->servicedPeriod_parser_)
      this->servicedPeriod_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->requestor_parser_)
      this->requestor_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->disposition_parser_)
      this->disposition_parser_->_reset ();

    if (this->insurer_parser_)
      this->insurer_parser_->_reset ();

    if (this->insurance_parser_)
      this->insurance_parser_->_reset ();

    if (this->preAuthRef_parser_)
      this->preAuthRef_parser_->_reset ();

    if (this->form_parser_)
      this->form_parser_->_reset ();

    if (this->error_parser_)
      this->error_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityResponse_Insurance_pskel
  //

  void CoverageEligibilityResponse_Insurance_pskel::
  coverage ()
  {
    if (this->CoverageEligibilityResponse_Insurance_impl_)
      this->CoverageEligibilityResponse_Insurance_impl_->coverage ();
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  inforce ()
  {
    if (this->CoverageEligibilityResponse_Insurance_impl_)
      this->CoverageEligibilityResponse_Insurance_impl_->inforce ();
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  benefitPeriod ()
  {
    if (this->CoverageEligibilityResponse_Insurance_impl_)
      this->CoverageEligibilityResponse_Insurance_impl_->benefitPeriod ();
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  item ()
  {
    if (this->CoverageEligibilityResponse_Insurance_impl_)
      this->CoverageEligibilityResponse_Insurance_impl_->item ();
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  post_CoverageEligibilityResponse_Insurance ()
  {
    if (this->CoverageEligibilityResponse_Insurance_impl_)
      this->CoverageEligibilityResponse_Insurance_impl_->post_CoverageEligibilityResponse_Insurance ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->coverage_parser_)
      this->coverage_parser_->_reset ();

    if (this->inforce_parser_)
      this->inforce_parser_->_reset ();

    if (this->benefitPeriod_parser_)
      this->benefitPeriod_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityResponse_Item_pskel
  //

  void CoverageEligibilityResponse_Item_pskel::
  category ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->category ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  productOrService ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->productOrService ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  modifier ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->modifier ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  provider ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->provider ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  excluded ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->excluded ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  name ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->name ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  description ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->description ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  network ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->network ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  unit ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->unit ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  term ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->term ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  benefit ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->benefit ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  authorizationRequired ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->authorizationRequired ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  authorizationSupporting ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->authorizationSupporting ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  authorizationUrl ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->authorizationUrl ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  post_CoverageEligibilityResponse_Item ()
  {
    if (this->CoverageEligibilityResponse_Item_impl_)
      this->CoverageEligibilityResponse_Item_impl_->post_CoverageEligibilityResponse_Item ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->excluded_parser_)
      this->excluded_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->network_parser_)
      this->network_parser_->_reset ();

    if (this->unit_parser_)
      this->unit_parser_->_reset ();

    if (this->term_parser_)
      this->term_parser_->_reset ();

    if (this->benefit_parser_)
      this->benefit_parser_->_reset ();

    if (this->authorizationRequired_parser_)
      this->authorizationRequired_parser_->_reset ();

    if (this->authorizationSupporting_parser_)
      this->authorizationSupporting_parser_->_reset ();

    if (this->authorizationUrl_parser_)
      this->authorizationUrl_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityResponse_Benefit_pskel
  //

  void CoverageEligibilityResponse_Benefit_pskel::
  type ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->type ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  allowedUnsignedInt ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->allowedUnsignedInt ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  allowedString ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->allowedString ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  allowedMoney ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->allowedMoney ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  usedUnsignedInt ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->usedUnsignedInt ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  usedString ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->usedString ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  usedMoney ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->usedMoney ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  post_CoverageEligibilityResponse_Benefit ()
  {
    if (this->CoverageEligibilityResponse_Benefit_impl_)
      this->CoverageEligibilityResponse_Benefit_impl_->post_CoverageEligibilityResponse_Benefit ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->allowedUnsignedInt_parser_)
      this->allowedUnsignedInt_parser_->_reset ();

    if (this->allowedString_parser_)
      this->allowedString_parser_->_reset ();

    if (this->allowedMoney_parser_)
      this->allowedMoney_parser_->_reset ();

    if (this->usedUnsignedInt_parser_)
      this->usedUnsignedInt_parser_->_reset ();

    if (this->usedString_parser_)
      this->usedString_parser_->_reset ();

    if (this->usedMoney_parser_)
      this->usedMoney_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityResponse_Error_pskel
  //

  void CoverageEligibilityResponse_Error_pskel::
  code ()
  {
    if (this->CoverageEligibilityResponse_Error_impl_)
      this->CoverageEligibilityResponse_Error_impl_->code ();
  }

  void CoverageEligibilityResponse_Error_pskel::
  post_CoverageEligibilityResponse_Error ()
  {
    if (this->CoverageEligibilityResponse_Error_impl_)
      this->CoverageEligibilityResponse_Error_impl_->post_CoverageEligibilityResponse_Error ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityResponse_Error_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    this->resetting_ = false;
  }

  // EligibilityResponsePurpose_list_pskel
  //

  void EligibilityResponsePurpose_list_pskel::
  post_EligibilityResponsePurpose_list ()
  {
    if (this->EligibilityResponsePurpose_list_impl_)
      this->EligibilityResponsePurpose_list_impl_->post_EligibilityResponsePurpose_list ();
    else
      post_code_primitive ();
  }

  const char* const EligibilityResponsePurpose_list_pskel::_xsde_EligibilityResponsePurpose_list_pskel_enums_[4UL] = 
  {
    "auth-requirements",
    "benefits",
    "discovery",
    "validation"
  };

  // EligibilityResponsePurpose_pskel
  //

  void EligibilityResponsePurpose_pskel::
  value ()
  {
    if (this->EligibilityResponsePurpose_impl_)
      this->EligibilityResponsePurpose_impl_->value ();
  }

  void EligibilityResponsePurpose_pskel::
  post_EligibilityResponsePurpose ()
  {
    if (this->EligibilityResponsePurpose_impl_)
      this->EligibilityResponsePurpose_impl_->post_EligibilityResponsePurpose ();
    else
      post_Element ();
  }

  void EligibilityResponsePurpose_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for CoverageEligibilityResponse_pskel.
  //
  bool CoverageEligibilityResponse_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityResponse_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityResponse_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityResponse_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityResponse_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityResponse_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FinancialResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_EligibilityResponsePurpose ();
              this->purpose ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "servicedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedDate_parser_)
            {
              this->servicedDate_parser_->pre ();
              ctx.nested_parser (this->servicedDate_parser_);
            }
          }
          else
          {
            if (this->servicedDate_parser_ != 0)
            {
              this->servicedDate_parser_->post_date ();
              this->servicedDate ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "servicedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedPeriod_parser_)
            {
              this->servicedPeriod_parser_->pre ();
              ctx.nested_parser (this->servicedPeriod_parser_);
            }
          }
          else
          {
            if (this->servicedPeriod_parser_ != 0)
            {
              this->servicedPeriod_parser_->post_Period ();
              this->servicedPeriod ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "requestor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requestor_parser_)
            {
              this->requestor_parser_->pre ();
              ctx.nested_parser (this->requestor_parser_);
            }
          }
          else
          {
            if (this->requestor_parser_ != 0)
            {
              this->requestor_parser_->post_Reference ();
              this->requestor ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_Reference ();
              this->request ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_RemittanceOutcome ();
              this->outcome ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "disposition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->disposition_parser_)
            {
              this->disposition_parser_->pre ();
              ctx.nested_parser (this->disposition_parser_);
            }
          }
          else
          {
            if (this->disposition_parser_ != 0)
            {
              this->disposition_parser_->post_string ();
              this->disposition ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "insurer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurer_parser_)
            {
              this->insurer_parser_->pre ();
              ctx.nested_parser (this->insurer_parser_);
            }
          }
          else
          {
            if (this->insurer_parser_ != 0)
            {
              this->insurer_parser_->post_Reference ();
              this->insurer ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "insurance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurance_parser_)
            {
              this->insurance_parser_->pre ();
              ctx.nested_parser (this->insurance_parser_);
            }
          }
          else
          {
            if (this->insurance_parser_ != 0)
            {
              this->insurance_parser_->post_CoverageEligibilityResponse_Insurance ();
              this->insurance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "preAuthRef" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preAuthRef_parser_)
            {
              this->preAuthRef_parser_->pre ();
              ctx.nested_parser (this->preAuthRef_parser_);
            }
          }
          else
          {
            if (this->preAuthRef_parser_ != 0)
            {
              this->preAuthRef_parser_->post_string ();
              this->preAuthRef ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "form" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->form_parser_)
            {
              this->form_parser_->pre ();
              ctx.nested_parser (this->form_parser_);
            }
          }
          else
          {
            if (this->form_parser_ != 0)
            {
              this->form_parser_->post_CodeableConcept ();
              this->form ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "error" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->error_parser_)
            {
              this->error_parser_->pre ();
              ctx.nested_parser (this->error_parser_);
            }
          }
          else
          {
            if (this->error_parser_ != 0)
            {
              this->error_parser_->post_CoverageEligibilityResponse_Error ();
              this->error ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityResponse_Insurance_pskel.
  //
  bool CoverageEligibilityResponse_Insurance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "coverage" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityResponse_Insurance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityResponse_Insurance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityResponse_Insurance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "coverage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverage_parser_)
            {
              this->coverage_parser_->pre ();
              ctx.nested_parser (this->coverage_parser_);
            }
          }
          else
          {
            if (this->coverage_parser_ != 0)
            {
              this->coverage_parser_->post_Reference ();
              this->coverage ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "inforce" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->inforce_parser_)
            {
              this->inforce_parser_->pre ();
              ctx.nested_parser (this->inforce_parser_);
            }
          }
          else
          {
            if (this->inforce_parser_ != 0)
            {
              this->inforce_parser_->post_boolean ();
              this->inforce ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "benefitPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->benefitPeriod_parser_)
            {
              this->benefitPeriod_parser_->pre ();
              ctx.nested_parser (this->benefitPeriod_parser_);
            }
          }
          else
          {
            if (this->benefitPeriod_parser_ != 0)
            {
              this->benefitPeriod_parser_->post_Period ();
              this->benefitPeriod ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_CoverageEligibilityResponse_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityResponse_Item_pskel.
  //
  bool CoverageEligibilityResponse_Item_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "productOrService" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "modifier" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "provider" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "excluded" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "description" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "network" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "unit" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "term" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "benefit" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "authorizationRequired" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "authorizationSupporting" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "authorizationUrl" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityResponse_Item_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityResponse_Item_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityResponse_Item_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityResponse_Item_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "excluded" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->excluded_parser_)
            {
              this->excluded_parser_->pre ();
              ctx.nested_parser (this->excluded_parser_);
            }
          }
          else
          {
            if (this->excluded_parser_ != 0)
            {
              this->excluded_parser_->post_boolean ();
              this->excluded ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "network" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->network_parser_)
            {
              this->network_parser_->pre ();
              ctx.nested_parser (this->network_parser_);
            }
          }
          else
          {
            if (this->network_parser_ != 0)
            {
              this->network_parser_->post_CodeableConcept ();
              this->network ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "unit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unit_parser_)
            {
              this->unit_parser_->pre ();
              ctx.nested_parser (this->unit_parser_);
            }
          }
          else
          {
            if (this->unit_parser_ != 0)
            {
              this->unit_parser_->post_CodeableConcept ();
              this->unit ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "term" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->term_parser_)
            {
              this->term_parser_->pre ();
              ctx.nested_parser (this->term_parser_);
            }
          }
          else
          {
            if (this->term_parser_ != 0)
            {
              this->term_parser_->post_CodeableConcept ();
              this->term ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "benefit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->benefit_parser_)
            {
              this->benefit_parser_->pre ();
              ctx.nested_parser (this->benefit_parser_);
            }
          }
          else
          {
            if (this->benefit_parser_ != 0)
            {
              this->benefit_parser_->post_CoverageEligibilityResponse_Benefit ();
              this->benefit ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "authorizationRequired" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authorizationRequired_parser_)
            {
              this->authorizationRequired_parser_->pre ();
              ctx.nested_parser (this->authorizationRequired_parser_);
            }
          }
          else
          {
            if (this->authorizationRequired_parser_ != 0)
            {
              this->authorizationRequired_parser_->post_boolean ();
              this->authorizationRequired ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "authorizationSupporting" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authorizationSupporting_parser_)
            {
              this->authorizationSupporting_parser_->pre ();
              ctx.nested_parser (this->authorizationSupporting_parser_);
            }
          }
          else
          {
            if (this->authorizationSupporting_parser_ != 0)
            {
              this->authorizationSupporting_parser_->post_CodeableConcept ();
              this->authorizationSupporting ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "authorizationUrl" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authorizationUrl_parser_)
            {
              this->authorizationUrl_parser_->pre ();
              ctx.nested_parser (this->authorizationUrl_parser_);
            }
          }
          else
          {
            if (this->authorizationUrl_parser_ != 0)
            {
              this->authorizationUrl_parser_->post_uri ();
              this->authorizationUrl ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityResponse_Benefit_pskel.
  //
  bool CoverageEligibilityResponse_Benefit_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityResponse_Benefit_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityResponse_Benefit_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityResponse_Benefit_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "allowedUnsignedInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedUnsignedInt_parser_)
            {
              this->allowedUnsignedInt_parser_->pre ();
              ctx.nested_parser (this->allowedUnsignedInt_parser_);
            }
          }
          else
          {
            if (this->allowedUnsignedInt_parser_ != 0)
            {
              this->allowedUnsignedInt_parser_->post_unsignedInt ();
              this->allowedUnsignedInt ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "allowedString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedString_parser_)
            {
              this->allowedString_parser_->pre ();
              ctx.nested_parser (this->allowedString_parser_);
            }
          }
          else
          {
            if (this->allowedString_parser_ != 0)
            {
              this->allowedString_parser_->post_string ();
              this->allowedString ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "allowedMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedMoney_parser_)
            {
              this->allowedMoney_parser_->pre ();
              ctx.nested_parser (this->allowedMoney_parser_);
            }
          }
          else
          {
            if (this->allowedMoney_parser_ != 0)
            {
              this->allowedMoney_parser_->post_Money ();
              this->allowedMoney ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "usedUnsignedInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usedUnsignedInt_parser_)
            {
              this->usedUnsignedInt_parser_->pre ();
              ctx.nested_parser (this->usedUnsignedInt_parser_);
            }
          }
          else
          {
            if (this->usedUnsignedInt_parser_ != 0)
            {
              this->usedUnsignedInt_parser_->post_unsignedInt ();
              this->usedUnsignedInt ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "usedString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usedString_parser_)
            {
              this->usedString_parser_->pre ();
              ctx.nested_parser (this->usedString_parser_);
            }
          }
          else
          {
            if (this->usedString_parser_ != 0)
            {
              this->usedString_parser_->post_string ();
              this->usedString ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "usedMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usedMoney_parser_)
            {
              this->usedMoney_parser_->pre ();
              ctx.nested_parser (this->usedMoney_parser_);
            }
          }
          else
          {
            if (this->usedMoney_parser_ != 0)
            {
              this->usedMoney_parser_->post_Money ();
              this->usedMoney ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityResponse_Error_pskel.
  //
  bool CoverageEligibilityResponse_Error_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityResponse_Error_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityResponse_Error_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityResponse_Error_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityResponse_Error_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityResponse_Error_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for EligibilityResponsePurpose_pskel.
  //
  bool EligibilityResponsePurpose_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EligibilityResponsePurpose_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

