// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "devicedefinition-pskel.hxx"

namespace fhir
{
  // DeviceDefinition_pskel
  //

  void DeviceDefinition_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  udiDeviceIdentifier_parser (::fhir::DeviceDefinition_UdiDeviceIdentifier_pskel& p)
  {
    this->udiDeviceIdentifier_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  manufacturerString_parser (::fhir::string_pskel& p)
  {
    this->manufacturerString_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  manufacturerReference_parser (::fhir::Reference_pskel& p)
  {
    this->manufacturerReference_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  deviceName_parser (::fhir::DeviceDefinition_DeviceName_pskel& p)
  {
    this->deviceName_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  modelNumber_parser (::fhir::string_pskel& p)
  {
    this->modelNumber_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  specialization_parser (::fhir::DeviceDefinition_Specialization_pskel& p)
  {
    this->specialization_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  safety_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->safety_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  shelfLifeStorage_parser (::fhir::ProductShelfLife_pskel& p)
  {
    this->shelfLifeStorage_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  physicalCharacteristics_parser (::fhir::ProdCharacteristic_pskel& p)
  {
    this->physicalCharacteristics_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  languageCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->languageCode_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  capability_parser (::fhir::DeviceDefinition_Capability_pskel& p)
  {
    this->capability_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  property_parser (::fhir::DeviceDefinition_Property_pskel& p)
  {
    this->property_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  owner_parser (::fhir::Reference_pskel& p)
  {
    this->owner_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  contact_parser (::fhir::ContactPoint_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  onlineInformation_parser (::fhir::uri_pskel& p)
  {
    this->onlineInformation_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  parentDevice_parser (::fhir::Reference_pskel& p)
  {
    this->parentDevice_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  material_parser (::fhir::DeviceDefinition_Material_pskel& p)
  {
    this->material_parser_ = &p;
  }

  void DeviceDefinition_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::DeviceDefinition_UdiDeviceIdentifier_pskel& udiDeviceIdentifier,
           ::fhir::string_pskel& manufacturerString,
           ::fhir::Reference_pskel& manufacturerReference,
           ::fhir::DeviceDefinition_DeviceName_pskel& deviceName,
           ::fhir::string_pskel& modelNumber,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::DeviceDefinition_Specialization_pskel& specialization,
           ::fhir::string_pskel& version,
           ::fhir::CodeableConcept_pskel& safety,
           ::fhir::ProductShelfLife_pskel& shelfLifeStorage,
           ::fhir::ProdCharacteristic_pskel& physicalCharacteristics,
           ::fhir::CodeableConcept_pskel& languageCode,
           ::fhir::DeviceDefinition_Capability_pskel& capability,
           ::fhir::DeviceDefinition_Property_pskel& property,
           ::fhir::Reference_pskel& owner,
           ::fhir::ContactPoint_pskel& contact,
           ::fhir::uri_pskel& url,
           ::fhir::uri_pskel& onlineInformation,
           ::fhir::Annotation_pskel& note,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Reference_pskel& parentDevice,
           ::fhir::DeviceDefinition_Material_pskel& material)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->udiDeviceIdentifier_parser_ = &udiDeviceIdentifier;
    this->manufacturerString_parser_ = &manufacturerString;
    this->manufacturerReference_parser_ = &manufacturerReference;
    this->deviceName_parser_ = &deviceName;
    this->modelNumber_parser_ = &modelNumber;
    this->type_parser_ = &type;
    this->specialization_parser_ = &specialization;
    this->version_parser_ = &version;
    this->safety_parser_ = &safety;
    this->shelfLifeStorage_parser_ = &shelfLifeStorage;
    this->physicalCharacteristics_parser_ = &physicalCharacteristics;
    this->languageCode_parser_ = &languageCode;
    this->capability_parser_ = &capability;
    this->property_parser_ = &property;
    this->owner_parser_ = &owner;
    this->contact_parser_ = &contact;
    this->url_parser_ = &url;
    this->onlineInformation_parser_ = &onlineInformation;
    this->note_parser_ = &note;
    this->quantity_parser_ = &quantity;
    this->parentDevice_parser_ = &parentDevice;
    this->material_parser_ = &material;
  }

  DeviceDefinition_pskel::
  DeviceDefinition_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    DeviceDefinition_impl_ (0),
    identifier_parser_ (0),
    udiDeviceIdentifier_parser_ (0),
    manufacturerString_parser_ (0),
    manufacturerReference_parser_ (0),
    deviceName_parser_ (0),
    modelNumber_parser_ (0),
    type_parser_ (0),
    specialization_parser_ (0),
    version_parser_ (0),
    safety_parser_ (0),
    shelfLifeStorage_parser_ (0),
    physicalCharacteristics_parser_ (0),
    languageCode_parser_ (0),
    capability_parser_ (0),
    property_parser_ (0),
    owner_parser_ (0),
    contact_parser_ (0),
    url_parser_ (0),
    onlineInformation_parser_ (0),
    note_parser_ (0),
    quantity_parser_ (0),
    parentDevice_parser_ (0),
    material_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceDefinition_pskel::
  DeviceDefinition_pskel (DeviceDefinition_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    DeviceDefinition_impl_ (impl),
    identifier_parser_ (0),
    udiDeviceIdentifier_parser_ (0),
    manufacturerString_parser_ (0),
    manufacturerReference_parser_ (0),
    deviceName_parser_ (0),
    modelNumber_parser_ (0),
    type_parser_ (0),
    specialization_parser_ (0),
    version_parser_ (0),
    safety_parser_ (0),
    shelfLifeStorage_parser_ (0),
    physicalCharacteristics_parser_ (0),
    languageCode_parser_ (0),
    capability_parser_ (0),
    property_parser_ (0),
    owner_parser_ (0),
    contact_parser_ (0),
    url_parser_ (0),
    onlineInformation_parser_ (0),
    note_parser_ (0),
    quantity_parser_ (0),
    parentDevice_parser_ (0),
    material_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceDefinition_UdiDeviceIdentifier_pskel
  //

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  deviceIdentifier_parser (::fhir::string_pskel& p)
  {
    this->deviceIdentifier_parser_ = &p;
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  issuer_parser (::fhir::uri_pskel& p)
  {
    this->issuer_parser_ = &p;
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  jurisdiction_parser (::fhir::uri_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& deviceIdentifier,
           ::fhir::uri_pskel& issuer,
           ::fhir::uri_pskel& jurisdiction)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->deviceIdentifier_parser_ = &deviceIdentifier;
    this->issuer_parser_ = &issuer;
    this->jurisdiction_parser_ = &jurisdiction;
  }

  DeviceDefinition_UdiDeviceIdentifier_pskel::
  DeviceDefinition_UdiDeviceIdentifier_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceDefinition_UdiDeviceIdentifier_impl_ (0),
    deviceIdentifier_parser_ (0),
    issuer_parser_ (0),
    jurisdiction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceDefinition_UdiDeviceIdentifier_pskel::
  DeviceDefinition_UdiDeviceIdentifier_pskel (DeviceDefinition_UdiDeviceIdentifier_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceDefinition_UdiDeviceIdentifier_impl_ (impl),
    deviceIdentifier_parser_ (0),
    issuer_parser_ (0),
    jurisdiction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceDefinition_DeviceName_pskel
  //

  void DeviceDefinition_DeviceName_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void DeviceDefinition_DeviceName_pskel::
  type_parser (::fhir::DeviceNameType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void DeviceDefinition_DeviceName_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::DeviceNameType_pskel& type)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->type_parser_ = &type;
  }

  DeviceDefinition_DeviceName_pskel::
  DeviceDefinition_DeviceName_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceDefinition_DeviceName_impl_ (0),
    name_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceDefinition_DeviceName_pskel::
  DeviceDefinition_DeviceName_pskel (DeviceDefinition_DeviceName_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceDefinition_DeviceName_impl_ (impl),
    name_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceDefinition_Specialization_pskel
  //

  void DeviceDefinition_Specialization_pskel::
  systemType_parser (::fhir::string_pskel& p)
  {
    this->systemType_parser_ = &p;
  }

  void DeviceDefinition_Specialization_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void DeviceDefinition_Specialization_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& systemType,
           ::fhir::string_pskel& version)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->systemType_parser_ = &systemType;
    this->version_parser_ = &version;
  }

  DeviceDefinition_Specialization_pskel::
  DeviceDefinition_Specialization_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceDefinition_Specialization_impl_ (0),
    systemType_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceDefinition_Specialization_pskel::
  DeviceDefinition_Specialization_pskel (DeviceDefinition_Specialization_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceDefinition_Specialization_impl_ (impl),
    systemType_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceDefinition_Capability_pskel
  //

  void DeviceDefinition_Capability_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void DeviceDefinition_Capability_pskel::
  description_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void DeviceDefinition_Capability_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& description)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->description_parser_ = &description;
  }

  DeviceDefinition_Capability_pskel::
  DeviceDefinition_Capability_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceDefinition_Capability_impl_ (0),
    type_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceDefinition_Capability_pskel::
  DeviceDefinition_Capability_pskel (DeviceDefinition_Capability_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceDefinition_Capability_impl_ (impl),
    type_parser_ (0),
    description_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceDefinition_Property_pskel
  //

  void DeviceDefinition_Property_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void DeviceDefinition_Property_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void DeviceDefinition_Property_pskel::
  valueCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCode_parser_ = &p;
  }

  void DeviceDefinition_Property_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::CodeableConcept_pskel& valueCode)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueCode_parser_ = &valueCode;
  }

  DeviceDefinition_Property_pskel::
  DeviceDefinition_Property_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceDefinition_Property_impl_ (0),
    type_parser_ (0),
    valueQuantity_parser_ (0),
    valueCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceDefinition_Property_pskel::
  DeviceDefinition_Property_pskel (DeviceDefinition_Property_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceDefinition_Property_impl_ (impl),
    type_parser_ (0),
    valueQuantity_parser_ (0),
    valueCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DeviceDefinition_Material_pskel
  //

  void DeviceDefinition_Material_pskel::
  substance_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->substance_parser_ = &p;
  }

  void DeviceDefinition_Material_pskel::
  alternate_parser (::fhir::boolean_pskel& p)
  {
    this->alternate_parser_ = &p;
  }

  void DeviceDefinition_Material_pskel::
  allergenicIndicator_parser (::fhir::boolean_pskel& p)
  {
    this->allergenicIndicator_parser_ = &p;
  }

  void DeviceDefinition_Material_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& substance,
           ::fhir::boolean_pskel& alternate,
           ::fhir::boolean_pskel& allergenicIndicator)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->substance_parser_ = &substance;
    this->alternate_parser_ = &alternate;
    this->allergenicIndicator_parser_ = &allergenicIndicator;
  }

  DeviceDefinition_Material_pskel::
  DeviceDefinition_Material_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DeviceDefinition_Material_impl_ (0),
    substance_parser_ (0),
    alternate_parser_ (0),
    allergenicIndicator_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DeviceDefinition_Material_pskel::
  DeviceDefinition_Material_pskel (DeviceDefinition_Material_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DeviceDefinition_Material_impl_ (impl),
    substance_parser_ (0),
    alternate_parser_ (0),
    allergenicIndicator_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // DeviceDefinition_pskel
  //

  void DeviceDefinition_pskel::
  identifier ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->identifier ();
  }

  void DeviceDefinition_pskel::
  udiDeviceIdentifier ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->udiDeviceIdentifier ();
  }

  void DeviceDefinition_pskel::
  manufacturerString ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->manufacturerString ();
  }

  void DeviceDefinition_pskel::
  manufacturerReference ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->manufacturerReference ();
  }

  void DeviceDefinition_pskel::
  deviceName ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->deviceName ();
  }

  void DeviceDefinition_pskel::
  modelNumber ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->modelNumber ();
  }

  void DeviceDefinition_pskel::
  type ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->type ();
  }

  void DeviceDefinition_pskel::
  specialization ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->specialization ();
  }

  void DeviceDefinition_pskel::
  version ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->version ();
  }

  void DeviceDefinition_pskel::
  safety ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->safety ();
  }

  void DeviceDefinition_pskel::
  shelfLifeStorage ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->shelfLifeStorage ();
  }

  void DeviceDefinition_pskel::
  physicalCharacteristics ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->physicalCharacteristics ();
  }

  void DeviceDefinition_pskel::
  languageCode ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->languageCode ();
  }

  void DeviceDefinition_pskel::
  capability ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->capability ();
  }

  void DeviceDefinition_pskel::
  property ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->property ();
  }

  void DeviceDefinition_pskel::
  owner ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->owner ();
  }

  void DeviceDefinition_pskel::
  contact ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->contact ();
  }

  void DeviceDefinition_pskel::
  url ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->url ();
  }

  void DeviceDefinition_pskel::
  onlineInformation ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->onlineInformation ();
  }

  void DeviceDefinition_pskel::
  note ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->note ();
  }

  void DeviceDefinition_pskel::
  quantity ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->quantity ();
  }

  void DeviceDefinition_pskel::
  parentDevice ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->parentDevice ();
  }

  void DeviceDefinition_pskel::
  material ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->material ();
  }

  void DeviceDefinition_pskel::
  post_DeviceDefinition ()
  {
    if (this->DeviceDefinition_impl_)
      this->DeviceDefinition_impl_->post_DeviceDefinition ();
    else
      post_DomainResource ();
  }

  void DeviceDefinition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->udiDeviceIdentifier_parser_)
      this->udiDeviceIdentifier_parser_->_reset ();

    if (this->manufacturerString_parser_)
      this->manufacturerString_parser_->_reset ();

    if (this->manufacturerReference_parser_)
      this->manufacturerReference_parser_->_reset ();

    if (this->deviceName_parser_)
      this->deviceName_parser_->_reset ();

    if (this->modelNumber_parser_)
      this->modelNumber_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->specialization_parser_)
      this->specialization_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->safety_parser_)
      this->safety_parser_->_reset ();

    if (this->shelfLifeStorage_parser_)
      this->shelfLifeStorage_parser_->_reset ();

    if (this->physicalCharacteristics_parser_)
      this->physicalCharacteristics_parser_->_reset ();

    if (this->languageCode_parser_)
      this->languageCode_parser_->_reset ();

    if (this->capability_parser_)
      this->capability_parser_->_reset ();

    if (this->property_parser_)
      this->property_parser_->_reset ();

    if (this->owner_parser_)
      this->owner_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->onlineInformation_parser_)
      this->onlineInformation_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->parentDevice_parser_)
      this->parentDevice_parser_->_reset ();

    if (this->material_parser_)
      this->material_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceDefinition_UdiDeviceIdentifier_pskel
  //

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  deviceIdentifier ()
  {
    if (this->DeviceDefinition_UdiDeviceIdentifier_impl_)
      this->DeviceDefinition_UdiDeviceIdentifier_impl_->deviceIdentifier ();
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  issuer ()
  {
    if (this->DeviceDefinition_UdiDeviceIdentifier_impl_)
      this->DeviceDefinition_UdiDeviceIdentifier_impl_->issuer ();
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  jurisdiction ()
  {
    if (this->DeviceDefinition_UdiDeviceIdentifier_impl_)
      this->DeviceDefinition_UdiDeviceIdentifier_impl_->jurisdiction ();
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  post_DeviceDefinition_UdiDeviceIdentifier ()
  {
    if (this->DeviceDefinition_UdiDeviceIdentifier_impl_)
      this->DeviceDefinition_UdiDeviceIdentifier_impl_->post_DeviceDefinition_UdiDeviceIdentifier ();
    else
      post_BackboneElement ();
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->deviceIdentifier_parser_)
      this->deviceIdentifier_parser_->_reset ();

    if (this->issuer_parser_)
      this->issuer_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceDefinition_DeviceName_pskel
  //

  void DeviceDefinition_DeviceName_pskel::
  name ()
  {
    if (this->DeviceDefinition_DeviceName_impl_)
      this->DeviceDefinition_DeviceName_impl_->name ();
  }

  void DeviceDefinition_DeviceName_pskel::
  type ()
  {
    if (this->DeviceDefinition_DeviceName_impl_)
      this->DeviceDefinition_DeviceName_impl_->type ();
  }

  void DeviceDefinition_DeviceName_pskel::
  post_DeviceDefinition_DeviceName ()
  {
    if (this->DeviceDefinition_DeviceName_impl_)
      this->DeviceDefinition_DeviceName_impl_->post_DeviceDefinition_DeviceName ();
    else
      post_BackboneElement ();
  }

  void DeviceDefinition_DeviceName_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceDefinition_Specialization_pskel
  //

  void DeviceDefinition_Specialization_pskel::
  systemType ()
  {
    if (this->DeviceDefinition_Specialization_impl_)
      this->DeviceDefinition_Specialization_impl_->systemType ();
  }

  void DeviceDefinition_Specialization_pskel::
  version ()
  {
    if (this->DeviceDefinition_Specialization_impl_)
      this->DeviceDefinition_Specialization_impl_->version ();
  }

  void DeviceDefinition_Specialization_pskel::
  post_DeviceDefinition_Specialization ()
  {
    if (this->DeviceDefinition_Specialization_impl_)
      this->DeviceDefinition_Specialization_impl_->post_DeviceDefinition_Specialization ();
    else
      post_BackboneElement ();
  }

  void DeviceDefinition_Specialization_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->systemType_parser_)
      this->systemType_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceDefinition_Capability_pskel
  //

  void DeviceDefinition_Capability_pskel::
  type ()
  {
    if (this->DeviceDefinition_Capability_impl_)
      this->DeviceDefinition_Capability_impl_->type ();
  }

  void DeviceDefinition_Capability_pskel::
  description ()
  {
    if (this->DeviceDefinition_Capability_impl_)
      this->DeviceDefinition_Capability_impl_->description ();
  }

  void DeviceDefinition_Capability_pskel::
  post_DeviceDefinition_Capability ()
  {
    if (this->DeviceDefinition_Capability_impl_)
      this->DeviceDefinition_Capability_impl_->post_DeviceDefinition_Capability ();
    else
      post_BackboneElement ();
  }

  void DeviceDefinition_Capability_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceDefinition_Property_pskel
  //

  void DeviceDefinition_Property_pskel::
  type ()
  {
    if (this->DeviceDefinition_Property_impl_)
      this->DeviceDefinition_Property_impl_->type ();
  }

  void DeviceDefinition_Property_pskel::
  valueQuantity ()
  {
    if (this->DeviceDefinition_Property_impl_)
      this->DeviceDefinition_Property_impl_->valueQuantity ();
  }

  void DeviceDefinition_Property_pskel::
  valueCode ()
  {
    if (this->DeviceDefinition_Property_impl_)
      this->DeviceDefinition_Property_impl_->valueCode ();
  }

  void DeviceDefinition_Property_pskel::
  post_DeviceDefinition_Property ()
  {
    if (this->DeviceDefinition_Property_impl_)
      this->DeviceDefinition_Property_impl_->post_DeviceDefinition_Property ();
    else
      post_BackboneElement ();
  }

  void DeviceDefinition_Property_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueCode_parser_)
      this->valueCode_parser_->_reset ();

    this->resetting_ = false;
  }

  // DeviceDefinition_Material_pskel
  //

  void DeviceDefinition_Material_pskel::
  substance ()
  {
    if (this->DeviceDefinition_Material_impl_)
      this->DeviceDefinition_Material_impl_->substance ();
  }

  void DeviceDefinition_Material_pskel::
  alternate ()
  {
    if (this->DeviceDefinition_Material_impl_)
      this->DeviceDefinition_Material_impl_->alternate ();
  }

  void DeviceDefinition_Material_pskel::
  allergenicIndicator ()
  {
    if (this->DeviceDefinition_Material_impl_)
      this->DeviceDefinition_Material_impl_->allergenicIndicator ();
  }

  void DeviceDefinition_Material_pskel::
  post_DeviceDefinition_Material ()
  {
    if (this->DeviceDefinition_Material_impl_)
      this->DeviceDefinition_Material_impl_->post_DeviceDefinition_Material ();
    else
      post_BackboneElement ();
  }

  void DeviceDefinition_Material_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->substance_parser_)
      this->substance_parser_->_reset ();

    if (this->alternate_parser_)
      this->alternate_parser_->_reset ();

    if (this->allergenicIndicator_parser_)
      this->allergenicIndicator_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for DeviceDefinition_pskel.
  //
  bool DeviceDefinition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "udiDeviceIdentifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "manufacturerString" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "manufacturerReference" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "deviceName" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "modelNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "specialization" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "safety" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "shelfLifeStorage" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "physicalCharacteristics" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "languageCode" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "capability" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "property" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "owner" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "contact" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "url" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;
        else if (n == "onlineInformation" &&
                 ns == "http://hl7.org/fhir")
          s = 18UL;
        else if (n == "note" &&
                 ns == "http://hl7.org/fhir")
          s = 19UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 20UL;
        else if (n == "parentDevice" &&
                 ns == "http://hl7.org/fhir")
          s = 21UL;
        else if (n == "material" &&
                 ns == "http://hl7.org/fhir")
          s = 22UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceDefinition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceDefinition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceDefinition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceDefinition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void DeviceDefinition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "udiDeviceIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->udiDeviceIdentifier_parser_)
            {
              this->udiDeviceIdentifier_parser_->pre ();
              ctx.nested_parser (this->udiDeviceIdentifier_parser_);
            }
          }
          else
          {
            if (this->udiDeviceIdentifier_parser_ != 0)
            {
              this->udiDeviceIdentifier_parser_->post_DeviceDefinition_UdiDeviceIdentifier ();
              this->udiDeviceIdentifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "manufacturerString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturerString_parser_)
            {
              this->manufacturerString_parser_->pre ();
              ctx.nested_parser (this->manufacturerString_parser_);
            }
          }
          else
          {
            if (this->manufacturerString_parser_ != 0)
            {
              this->manufacturerString_parser_->post_string ();
              this->manufacturerString ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "manufacturerReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturerReference_parser_)
            {
              this->manufacturerReference_parser_->pre ();
              ctx.nested_parser (this->manufacturerReference_parser_);
            }
          }
          else
          {
            if (this->manufacturerReference_parser_ != 0)
            {
              this->manufacturerReference_parser_->post_Reference ();
              this->manufacturerReference ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "deviceName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deviceName_parser_)
            {
              this->deviceName_parser_->pre ();
              ctx.nested_parser (this->deviceName_parser_);
            }
          }
          else
          {
            if (this->deviceName_parser_ != 0)
            {
              this->deviceName_parser_->post_DeviceDefinition_DeviceName ();
              this->deviceName ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "modelNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modelNumber_parser_)
            {
              this->modelNumber_parser_->pre ();
              ctx.nested_parser (this->modelNumber_parser_);
            }
          }
          else
          {
            if (this->modelNumber_parser_ != 0)
            {
              this->modelNumber_parser_->post_string ();
              this->modelNumber ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "specialization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specialization_parser_)
            {
              this->specialization_parser_->pre ();
              ctx.nested_parser (this->specialization_parser_);
            }
          }
          else
          {
            if (this->specialization_parser_ != 0)
            {
              this->specialization_parser_->post_DeviceDefinition_Specialization ();
              this->specialization ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "safety" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->safety_parser_)
            {
              this->safety_parser_->pre ();
              ctx.nested_parser (this->safety_parser_);
            }
          }
          else
          {
            if (this->safety_parser_ != 0)
            {
              this->safety_parser_->post_CodeableConcept ();
              this->safety ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "shelfLifeStorage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->shelfLifeStorage_parser_)
            {
              this->shelfLifeStorage_parser_->pre ();
              ctx.nested_parser (this->shelfLifeStorage_parser_);
            }
          }
          else
          {
            if (this->shelfLifeStorage_parser_ != 0)
            {
              this->shelfLifeStorage_parser_->post_ProductShelfLife ();
              this->shelfLifeStorage ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "physicalCharacteristics" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->physicalCharacteristics_parser_)
            {
              this->physicalCharacteristics_parser_->pre ();
              ctx.nested_parser (this->physicalCharacteristics_parser_);
            }
          }
          else
          {
            if (this->physicalCharacteristics_parser_ != 0)
            {
              this->physicalCharacteristics_parser_->post_ProdCharacteristic ();
              this->physicalCharacteristics ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "languageCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->languageCode_parser_)
            {
              this->languageCode_parser_->pre ();
              ctx.nested_parser (this->languageCode_parser_);
            }
          }
          else
          {
            if (this->languageCode_parser_ != 0)
            {
              this->languageCode_parser_->post_CodeableConcept ();
              this->languageCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "capability" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->capability_parser_)
            {
              this->capability_parser_->pre ();
              ctx.nested_parser (this->capability_parser_);
            }
          }
          else
          {
            if (this->capability_parser_ != 0)
            {
              this->capability_parser_->post_DeviceDefinition_Capability ();
              this->capability ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "property" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->property_parser_)
            {
              this->property_parser_->pre ();
              ctx.nested_parser (this->property_parser_);
            }
          }
          else
          {
            if (this->property_parser_ != 0)
            {
              this->property_parser_->post_DeviceDefinition_Property ();
              this->property ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "owner" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->owner_parser_)
            {
              this->owner_parser_->pre ();
              ctx.nested_parser (this->owner_parser_);
            }
          }
          else
          {
            if (this->owner_parser_ != 0)
            {
              this->owner_parser_->post_Reference ();
              this->owner ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactPoint ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "onlineInformation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onlineInformation_parser_)
            {
              this->onlineInformation_parser_->pre ();
              ctx.nested_parser (this->onlineInformation_parser_);
            }
          }
          else
          {
            if (this->onlineInformation_parser_ != 0)
            {
              this->onlineInformation_parser_->post_uri ();
              this->onlineInformation ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "parentDevice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parentDevice_parser_)
            {
              this->parentDevice_parser_->pre ();
              ctx.nested_parser (this->parentDevice_parser_);
            }
          }
          else
          {
            if (this->parentDevice_parser_ != 0)
            {
              this->parentDevice_parser_->post_Reference ();
              this->parentDevice ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "material" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->material_parser_)
            {
              this->material_parser_->pre ();
              ctx.nested_parser (this->material_parser_);
            }
          }
          else
          {
            if (this->material_parser_ != 0)
            {
              this->material_parser_->post_DeviceDefinition_Material ();
              this->material ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceDefinition_UdiDeviceIdentifier_pskel.
  //
  bool DeviceDefinition_UdiDeviceIdentifier_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "deviceIdentifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceDefinition_UdiDeviceIdentifier_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceDefinition_UdiDeviceIdentifier_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceDefinition_UdiDeviceIdentifier_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "deviceIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deviceIdentifier_parser_)
            {
              this->deviceIdentifier_parser_->pre ();
              ctx.nested_parser (this->deviceIdentifier_parser_);
            }
          }
          else
          {
            if (this->deviceIdentifier_parser_ != 0)
            {
              this->deviceIdentifier_parser_->post_string ();
              this->deviceIdentifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "issuer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issuer_parser_)
            {
              this->issuer_parser_->pre ();
              ctx.nested_parser (this->issuer_parser_);
            }
          }
          else
          {
            if (this->issuer_parser_ != 0)
            {
              this->issuer_parser_->post_uri ();
              this->issuer ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_uri ();
              this->jurisdiction ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceDefinition_DeviceName_pskel.
  //
  bool DeviceDefinition_DeviceName_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceDefinition_DeviceName_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceDefinition_DeviceName_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceDefinition_DeviceName_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceDefinition_DeviceName_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceDefinition_DeviceName_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_DeviceNameType ();
              this->type ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceDefinition_Specialization_pskel.
  //
  bool DeviceDefinition_Specialization_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "systemType" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceDefinition_Specialization_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceDefinition_Specialization_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceDefinition_Specialization_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceDefinition_Specialization_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceDefinition_Specialization_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "systemType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->systemType_parser_)
            {
              this->systemType_parser_->pre ();
              ctx.nested_parser (this->systemType_parser_);
            }
          }
          else
          {
            if (this->systemType_parser_ != 0)
            {
              this->systemType_parser_->post_string ();
              this->systemType ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceDefinition_Capability_pskel.
  //
  bool DeviceDefinition_Capability_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceDefinition_Capability_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceDefinition_Capability_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceDefinition_Capability_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceDefinition_Capability_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceDefinition_Capability_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_CodeableConcept ();
              this->description ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceDefinition_Property_pskel.
  //
  bool DeviceDefinition_Property_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceDefinition_Property_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceDefinition_Property_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceDefinition_Property_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceDefinition_Property_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceDefinition_Property_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCode_parser_)
            {
              this->valueCode_parser_->pre ();
              ctx.nested_parser (this->valueCode_parser_);
            }
          }
          else
          {
            if (this->valueCode_parser_ != 0)
            {
              this->valueCode_parser_->post_CodeableConcept ();
              this->valueCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DeviceDefinition_Material_pskel.
  //
  bool DeviceDefinition_Material_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "substance" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DeviceDefinition_Material_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DeviceDefinition_Material_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DeviceDefinition_Material_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DeviceDefinition_Material_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DeviceDefinition_Material_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "substance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substance_parser_)
            {
              this->substance_parser_->pre ();
              ctx.nested_parser (this->substance_parser_);
            }
          }
          else
          {
            if (this->substance_parser_ != 0)
            {
              this->substance_parser_->post_CodeableConcept ();
              this->substance ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "alternate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->alternate_parser_)
            {
              this->alternate_parser_->pre ();
              ctx.nested_parser (this->alternate_parser_);
            }
          }
          else
          {
            if (this->alternate_parser_ != 0)
            {
              this->alternate_parser_->post_boolean ();
              this->alternate ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "allergenicIndicator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allergenicIndicator_parser_)
            {
              this->allergenicIndicator_parser_->pre ();
              ctx.nested_parser (this->allergenicIndicator_parser_);
            }
          }
          else
          {
            if (this->allergenicIndicator_parser_ != 0)
            {
              this->allergenicIndicator_parser_->post_boolean ();
              this->allergenicIndicator ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

