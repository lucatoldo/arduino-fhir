// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "coverageeligibilityrequest-pskel.hxx"

namespace fhir
{
  // CoverageEligibilityRequest_pskel
  //

  void CoverageEligibilityRequest_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  status_parser (::fhir::FinancialResourceStatusCodes_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  priority_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  purpose_parser (::fhir::EligibilityRequestPurpose_pskel& p)
  {
    this->purpose_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  servicedDate_parser (::fhir::date_pskel& p)
  {
    this->servicedDate_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  servicedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->servicedPeriod_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  enterer_parser (::fhir::Reference_pskel& p)
  {
    this->enterer_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  insurer_parser (::fhir::Reference_pskel& p)
  {
    this->insurer_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  facility_parser (::fhir::Reference_pskel& p)
  {
    this->facility_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  supportingInfo_parser (::fhir::CoverageEligibilityRequest_SupportingInfo_pskel& p)
  {
    this->supportingInfo_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  insurance_parser (::fhir::CoverageEligibilityRequest_Insurance_pskel& p)
  {
    this->insurance_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  item_parser (::fhir::CoverageEligibilityRequest_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void CoverageEligibilityRequest_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::FinancialResourceStatusCodes_pskel& status,
           ::fhir::CodeableConcept_pskel& priority,
           ::fhir::EligibilityRequestPurpose_pskel& purpose,
           ::fhir::Reference_pskel& patient,
           ::fhir::date_pskel& servicedDate,
           ::fhir::Period_pskel& servicedPeriod,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& enterer,
           ::fhir::Reference_pskel& provider,
           ::fhir::Reference_pskel& insurer,
           ::fhir::Reference_pskel& facility,
           ::fhir::CoverageEligibilityRequest_SupportingInfo_pskel& supportingInfo,
           ::fhir::CoverageEligibilityRequest_Insurance_pskel& insurance,
           ::fhir::CoverageEligibilityRequest_Item_pskel& item)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->priority_parser_ = &priority;
    this->purpose_parser_ = &purpose;
    this->patient_parser_ = &patient;
    this->servicedDate_parser_ = &servicedDate;
    this->servicedPeriod_parser_ = &servicedPeriod;
    this->created_parser_ = &created;
    this->enterer_parser_ = &enterer;
    this->provider_parser_ = &provider;
    this->insurer_parser_ = &insurer;
    this->facility_parser_ = &facility;
    this->supportingInfo_parser_ = &supportingInfo;
    this->insurance_parser_ = &insurance;
    this->item_parser_ = &item;
  }

  CoverageEligibilityRequest_pskel::
  CoverageEligibilityRequest_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    CoverageEligibilityRequest_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    priority_parser_ (0),
    purpose_parser_ (0),
    patient_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    created_parser_ (0),
    enterer_parser_ (0),
    provider_parser_ (0),
    insurer_parser_ (0),
    facility_parser_ (0),
    supportingInfo_parser_ (0),
    insurance_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityRequest_pskel::
  CoverageEligibilityRequest_pskel (CoverageEligibilityRequest_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    CoverageEligibilityRequest_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    priority_parser_ (0),
    purpose_parser_ (0),
    patient_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    created_parser_ (0),
    enterer_parser_ (0),
    provider_parser_ (0),
    insurer_parser_ (0),
    facility_parser_ (0),
    supportingInfo_parser_ (0),
    insurance_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityRequest_SupportingInfo_pskel
  //

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  information_parser (::fhir::Reference_pskel& p)
  {
    this->information_parser_ = &p;
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  appliesToAll_parser (::fhir::boolean_pskel& p)
  {
    this->appliesToAll_parser_ = &p;
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::Reference_pskel& information,
           ::fhir::boolean_pskel& appliesToAll)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->information_parser_ = &information;
    this->appliesToAll_parser_ = &appliesToAll;
  }

  CoverageEligibilityRequest_SupportingInfo_pskel::
  CoverageEligibilityRequest_SupportingInfo_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityRequest_SupportingInfo_impl_ (0),
    sequence_parser_ (0),
    information_parser_ (0),
    appliesToAll_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityRequest_SupportingInfo_pskel::
  CoverageEligibilityRequest_SupportingInfo_pskel (CoverageEligibilityRequest_SupportingInfo_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityRequest_SupportingInfo_impl_ (impl),
    sequence_parser_ (0),
    information_parser_ (0),
    appliesToAll_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityRequest_Insurance_pskel
  //

  void CoverageEligibilityRequest_Insurance_pskel::
  focal_parser (::fhir::boolean_pskel& p)
  {
    this->focal_parser_ = &p;
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  coverage_parser (::fhir::Reference_pskel& p)
  {
    this->coverage_parser_ = &p;
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  businessArrangement_parser (::fhir::string_pskel& p)
  {
    this->businessArrangement_parser_ = &p;
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& focal,
           ::fhir::Reference_pskel& coverage,
           ::fhir::string_pskel& businessArrangement)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->focal_parser_ = &focal;
    this->coverage_parser_ = &coverage;
    this->businessArrangement_parser_ = &businessArrangement;
  }

  CoverageEligibilityRequest_Insurance_pskel::
  CoverageEligibilityRequest_Insurance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityRequest_Insurance_impl_ (0),
    focal_parser_ (0),
    coverage_parser_ (0),
    businessArrangement_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityRequest_Insurance_pskel::
  CoverageEligibilityRequest_Insurance_pskel (CoverageEligibilityRequest_Insurance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityRequest_Insurance_impl_ (impl),
    focal_parser_ (0),
    coverage_parser_ (0),
    businessArrangement_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityRequest_Item_pskel
  //

  void CoverageEligibilityRequest_Item_pskel::
  supportingInfoSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->supportingInfoSequence_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  facility_parser (::fhir::Reference_pskel& p)
  {
    this->facility_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  diagnosis_parser (::fhir::CoverageEligibilityRequest_Diagnosis_pskel& p)
  {
    this->diagnosis_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  detail_parser (::fhir::Reference_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void CoverageEligibilityRequest_Item_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& supportingInfoSequence,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::Reference_pskel& provider,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::Reference_pskel& facility,
           ::fhir::CoverageEligibilityRequest_Diagnosis_pskel& diagnosis,
           ::fhir::Reference_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->supportingInfoSequence_parser_ = &supportingInfoSequence;
    this->category_parser_ = &category;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->provider_parser_ = &provider;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->facility_parser_ = &facility;
    this->diagnosis_parser_ = &diagnosis;
    this->detail_parser_ = &detail;
  }

  CoverageEligibilityRequest_Item_pskel::
  CoverageEligibilityRequest_Item_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityRequest_Item_impl_ (0),
    supportingInfoSequence_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    provider_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    facility_parser_ (0),
    diagnosis_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityRequest_Item_pskel::
  CoverageEligibilityRequest_Item_pskel (CoverageEligibilityRequest_Item_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityRequest_Item_impl_ (impl),
    supportingInfoSequence_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    provider_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    facility_parser_ (0),
    diagnosis_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // CoverageEligibilityRequest_Diagnosis_pskel
  //

  void CoverageEligibilityRequest_Diagnosis_pskel::
  diagnosisCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->diagnosisCodeableConcept_parser_ = &p;
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  diagnosisReference_parser (::fhir::Reference_pskel& p)
  {
    this->diagnosisReference_parser_ = &p;
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& diagnosisCodeableConcept,
           ::fhir::Reference_pskel& diagnosisReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->diagnosisCodeableConcept_parser_ = &diagnosisCodeableConcept;
    this->diagnosisReference_parser_ = &diagnosisReference;
  }

  CoverageEligibilityRequest_Diagnosis_pskel::
  CoverageEligibilityRequest_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    CoverageEligibilityRequest_Diagnosis_impl_ (0),
    diagnosisCodeableConcept_parser_ (0),
    diagnosisReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  CoverageEligibilityRequest_Diagnosis_pskel::
  CoverageEligibilityRequest_Diagnosis_pskel (CoverageEligibilityRequest_Diagnosis_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    CoverageEligibilityRequest_Diagnosis_impl_ (impl),
    diagnosisCodeableConcept_parser_ (0),
    diagnosisReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EligibilityRequestPurpose_list_pskel
  //

  EligibilityRequestPurpose_list_pskel::
  EligibilityRequestPurpose_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EligibilityRequestPurpose_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EligibilityRequestPurpose_list_pskel_enums_, 4UL);
  }

  EligibilityRequestPurpose_list_pskel::
  EligibilityRequestPurpose_list_pskel (EligibilityRequestPurpose_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EligibilityRequestPurpose_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EligibilityRequestPurpose_list_pskel_enums_, 4UL);
  }

  // EligibilityRequestPurpose_pskel
  //

  void EligibilityRequestPurpose_pskel::
  value_parser (::fhir::EligibilityRequestPurpose_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EligibilityRequestPurpose_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EligibilityRequestPurpose_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EligibilityRequestPurpose_pskel::
  EligibilityRequestPurpose_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EligibilityRequestPurpose_impl_ (0),
    value_parser_ (0)
  {
  }

  EligibilityRequestPurpose_pskel::
  EligibilityRequestPurpose_pskel (EligibilityRequestPurpose_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EligibilityRequestPurpose_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // CoverageEligibilityRequest_pskel
  //

  void CoverageEligibilityRequest_pskel::
  identifier ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->identifier ();
  }

  void CoverageEligibilityRequest_pskel::
  status ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->status ();
  }

  void CoverageEligibilityRequest_pskel::
  priority ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->priority ();
  }

  void CoverageEligibilityRequest_pskel::
  purpose ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->purpose ();
  }

  void CoverageEligibilityRequest_pskel::
  patient ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->patient ();
  }

  void CoverageEligibilityRequest_pskel::
  servicedDate ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->servicedDate ();
  }

  void CoverageEligibilityRequest_pskel::
  servicedPeriod ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->servicedPeriod ();
  }

  void CoverageEligibilityRequest_pskel::
  created ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->created ();
  }

  void CoverageEligibilityRequest_pskel::
  enterer ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->enterer ();
  }

  void CoverageEligibilityRequest_pskel::
  provider ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->provider ();
  }

  void CoverageEligibilityRequest_pskel::
  insurer ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->insurer ();
  }

  void CoverageEligibilityRequest_pskel::
  facility ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->facility ();
  }

  void CoverageEligibilityRequest_pskel::
  supportingInfo ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->supportingInfo ();
  }

  void CoverageEligibilityRequest_pskel::
  insurance ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->insurance ();
  }

  void CoverageEligibilityRequest_pskel::
  item ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->item ();
  }

  void CoverageEligibilityRequest_pskel::
  post_CoverageEligibilityRequest ()
  {
    if (this->CoverageEligibilityRequest_impl_)
      this->CoverageEligibilityRequest_impl_->post_CoverageEligibilityRequest ();
    else
      post_DomainResource ();
  }

  void CoverageEligibilityRequest_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->purpose_parser_)
      this->purpose_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->servicedDate_parser_)
      this->servicedDate_parser_->_reset ();

    if (this->servicedPeriod_parser_)
      this->servicedPeriod_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->enterer_parser_)
      this->enterer_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->insurer_parser_)
      this->insurer_parser_->_reset ();

    if (this->facility_parser_)
      this->facility_parser_->_reset ();

    if (this->supportingInfo_parser_)
      this->supportingInfo_parser_->_reset ();

    if (this->insurance_parser_)
      this->insurance_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityRequest_SupportingInfo_pskel
  //

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  sequence ()
  {
    if (this->CoverageEligibilityRequest_SupportingInfo_impl_)
      this->CoverageEligibilityRequest_SupportingInfo_impl_->sequence ();
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  information ()
  {
    if (this->CoverageEligibilityRequest_SupportingInfo_impl_)
      this->CoverageEligibilityRequest_SupportingInfo_impl_->information ();
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  appliesToAll ()
  {
    if (this->CoverageEligibilityRequest_SupportingInfo_impl_)
      this->CoverageEligibilityRequest_SupportingInfo_impl_->appliesToAll ();
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  post_CoverageEligibilityRequest_SupportingInfo ()
  {
    if (this->CoverageEligibilityRequest_SupportingInfo_impl_)
      this->CoverageEligibilityRequest_SupportingInfo_impl_->post_CoverageEligibilityRequest_SupportingInfo ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->information_parser_)
      this->information_parser_->_reset ();

    if (this->appliesToAll_parser_)
      this->appliesToAll_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityRequest_Insurance_pskel
  //

  void CoverageEligibilityRequest_Insurance_pskel::
  focal ()
  {
    if (this->CoverageEligibilityRequest_Insurance_impl_)
      this->CoverageEligibilityRequest_Insurance_impl_->focal ();
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  coverage ()
  {
    if (this->CoverageEligibilityRequest_Insurance_impl_)
      this->CoverageEligibilityRequest_Insurance_impl_->coverage ();
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  businessArrangement ()
  {
    if (this->CoverageEligibilityRequest_Insurance_impl_)
      this->CoverageEligibilityRequest_Insurance_impl_->businessArrangement ();
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  post_CoverageEligibilityRequest_Insurance ()
  {
    if (this->CoverageEligibilityRequest_Insurance_impl_)
      this->CoverageEligibilityRequest_Insurance_impl_->post_CoverageEligibilityRequest_Insurance ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->focal_parser_)
      this->focal_parser_->_reset ();

    if (this->coverage_parser_)
      this->coverage_parser_->_reset ();

    if (this->businessArrangement_parser_)
      this->businessArrangement_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityRequest_Item_pskel
  //

  void CoverageEligibilityRequest_Item_pskel::
  supportingInfoSequence ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->supportingInfoSequence ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  category ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->category ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  productOrService ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->productOrService ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  modifier ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->modifier ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  provider ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->provider ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  quantity ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->quantity ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  unitPrice ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->unitPrice ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  facility ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->facility ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  diagnosis ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->diagnosis ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  detail ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->detail ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  post_CoverageEligibilityRequest_Item ()
  {
    if (this->CoverageEligibilityRequest_Item_impl_)
      this->CoverageEligibilityRequest_Item_impl_->post_CoverageEligibilityRequest_Item ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->supportingInfoSequence_parser_)
      this->supportingInfoSequence_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->facility_parser_)
      this->facility_parser_->_reset ();

    if (this->diagnosis_parser_)
      this->diagnosis_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // CoverageEligibilityRequest_Diagnosis_pskel
  //

  void CoverageEligibilityRequest_Diagnosis_pskel::
  diagnosisCodeableConcept ()
  {
    if (this->CoverageEligibilityRequest_Diagnosis_impl_)
      this->CoverageEligibilityRequest_Diagnosis_impl_->diagnosisCodeableConcept ();
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  diagnosisReference ()
  {
    if (this->CoverageEligibilityRequest_Diagnosis_impl_)
      this->CoverageEligibilityRequest_Diagnosis_impl_->diagnosisReference ();
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  post_CoverageEligibilityRequest_Diagnosis ()
  {
    if (this->CoverageEligibilityRequest_Diagnosis_impl_)
      this->CoverageEligibilityRequest_Diagnosis_impl_->post_CoverageEligibilityRequest_Diagnosis ();
    else
      post_BackboneElement ();
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->diagnosisCodeableConcept_parser_)
      this->diagnosisCodeableConcept_parser_->_reset ();

    if (this->diagnosisReference_parser_)
      this->diagnosisReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // EligibilityRequestPurpose_list_pskel
  //

  void EligibilityRequestPurpose_list_pskel::
  post_EligibilityRequestPurpose_list ()
  {
    if (this->EligibilityRequestPurpose_list_impl_)
      this->EligibilityRequestPurpose_list_impl_->post_EligibilityRequestPurpose_list ();
    else
      post_code_primitive ();
  }

  const char* const EligibilityRequestPurpose_list_pskel::_xsde_EligibilityRequestPurpose_list_pskel_enums_[4UL] = 
  {
    "auth-requirements",
    "benefits",
    "discovery",
    "validation"
  };

  // EligibilityRequestPurpose_pskel
  //

  void EligibilityRequestPurpose_pskel::
  value ()
  {
    if (this->EligibilityRequestPurpose_impl_)
      this->EligibilityRequestPurpose_impl_->value ();
  }

  void EligibilityRequestPurpose_pskel::
  post_EligibilityRequestPurpose ()
  {
    if (this->EligibilityRequestPurpose_impl_)
      this->EligibilityRequestPurpose_impl_->post_EligibilityRequestPurpose ();
    else
      post_Element ();
  }

  void EligibilityRequestPurpose_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for CoverageEligibilityRequest_pskel.
  //
  bool CoverageEligibilityRequest_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityRequest_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityRequest_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityRequest_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityRequest_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityRequest_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FinancialResourceStatusCodes ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_CodeableConcept ();
              this->priority ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "purpose" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->purpose_parser_)
            {
              this->purpose_parser_->pre ();
              ctx.nested_parser (this->purpose_parser_);
            }
          }
          else
          {
            if (this->purpose_parser_ != 0)
            {
              this->purpose_parser_->post_EligibilityRequestPurpose ();
              this->purpose ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "servicedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedDate_parser_)
            {
              this->servicedDate_parser_->pre ();
              ctx.nested_parser (this->servicedDate_parser_);
            }
          }
          else
          {
            if (this->servicedDate_parser_ != 0)
            {
              this->servicedDate_parser_->post_date ();
              this->servicedDate ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "servicedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedPeriod_parser_)
            {
              this->servicedPeriod_parser_->pre ();
              ctx.nested_parser (this->servicedPeriod_parser_);
            }
          }
          else
          {
            if (this->servicedPeriod_parser_ != 0)
            {
              this->servicedPeriod_parser_->post_Period ();
              this->servicedPeriod ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "enterer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enterer_parser_)
            {
              this->enterer_parser_->pre ();
              ctx.nested_parser (this->enterer_parser_);
            }
          }
          else
          {
            if (this->enterer_parser_ != 0)
            {
              this->enterer_parser_->post_Reference ();
              this->enterer ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "insurer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurer_parser_)
            {
              this->insurer_parser_->pre ();
              ctx.nested_parser (this->insurer_parser_);
            }
          }
          else
          {
            if (this->insurer_parser_ != 0)
            {
              this->insurer_parser_->post_Reference ();
              this->insurer ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "facility" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->facility_parser_)
            {
              this->facility_parser_->pre ();
              ctx.nested_parser (this->facility_parser_);
            }
          }
          else
          {
            if (this->facility_parser_ != 0)
            {
              this->facility_parser_->post_Reference ();
              this->facility ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "supportingInfo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInfo_parser_)
            {
              this->supportingInfo_parser_->pre ();
              ctx.nested_parser (this->supportingInfo_parser_);
            }
          }
          else
          {
            if (this->supportingInfo_parser_ != 0)
            {
              this->supportingInfo_parser_->post_CoverageEligibilityRequest_SupportingInfo ();
              this->supportingInfo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "insurance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurance_parser_)
            {
              this->insurance_parser_->pre ();
              ctx.nested_parser (this->insurance_parser_);
            }
          }
          else
          {
            if (this->insurance_parser_ != 0)
            {
              this->insurance_parser_->post_CoverageEligibilityRequest_Insurance ();
              this->insurance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_CoverageEligibilityRequest_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityRequest_SupportingInfo_pskel.
  //
  bool CoverageEligibilityRequest_SupportingInfo_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityRequest_SupportingInfo_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityRequest_SupportingInfo_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityRequest_SupportingInfo_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "information" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->information_parser_)
            {
              this->information_parser_->pre ();
              ctx.nested_parser (this->information_parser_);
            }
          }
          else
          {
            if (this->information_parser_ != 0)
            {
              this->information_parser_->post_Reference ();
              this->information ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "appliesToAll" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->appliesToAll_parser_)
            {
              this->appliesToAll_parser_->pre ();
              ctx.nested_parser (this->appliesToAll_parser_);
            }
          }
          else
          {
            if (this->appliesToAll_parser_ != 0)
            {
              this->appliesToAll_parser_->post_boolean ();
              this->appliesToAll ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityRequest_Insurance_pskel.
  //
  bool CoverageEligibilityRequest_Insurance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "focal" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "coverage" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityRequest_Insurance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityRequest_Insurance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityRequest_Insurance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "focal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focal_parser_)
            {
              this->focal_parser_->pre ();
              ctx.nested_parser (this->focal_parser_);
            }
          }
          else
          {
            if (this->focal_parser_ != 0)
            {
              this->focal_parser_->post_boolean ();
              this->focal ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "coverage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverage_parser_)
            {
              this->coverage_parser_->pre ();
              ctx.nested_parser (this->coverage_parser_);
            }
          }
          else
          {
            if (this->coverage_parser_ != 0)
            {
              this->coverage_parser_->post_Reference ();
              this->coverage ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "businessArrangement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->businessArrangement_parser_)
            {
              this->businessArrangement_parser_->pre ();
              ctx.nested_parser (this->businessArrangement_parser_);
            }
          }
          else
          {
            if (this->businessArrangement_parser_ != 0)
            {
              this->businessArrangement_parser_->post_string ();
              this->businessArrangement ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityRequest_Item_pskel.
  //
  bool CoverageEligibilityRequest_Item_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "supportingInfoSequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "category" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "productOrService" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "modifier" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "provider" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "unitPrice" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "facility" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "diagnosis" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "detail" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityRequest_Item_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityRequest_Item_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityRequest_Item_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityRequest_Item_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "supportingInfoSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInfoSequence_parser_)
            {
              this->supportingInfoSequence_parser_->pre ();
              ctx.nested_parser (this->supportingInfoSequence_parser_);
            }
          }
          else
          {
            if (this->supportingInfoSequence_parser_ != 0)
            {
              this->supportingInfoSequence_parser_->post_positiveInt ();
              this->supportingInfoSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "facility" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->facility_parser_)
            {
              this->facility_parser_->pre ();
              ctx.nested_parser (this->facility_parser_);
            }
          }
          else
          {
            if (this->facility_parser_ != 0)
            {
              this->facility_parser_->post_Reference ();
              this->facility ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "diagnosis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosis_parser_)
            {
              this->diagnosis_parser_->pre ();
              ctx.nested_parser (this->diagnosis_parser_);
            }
          }
          else
          {
            if (this->diagnosis_parser_ != 0)
            {
              this->diagnosis_parser_->post_CoverageEligibilityRequest_Diagnosis ();
              this->diagnosis ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_Reference ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for CoverageEligibilityRequest_Diagnosis_pskel.
  //
  bool CoverageEligibilityRequest_Diagnosis_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "diagnosisCodeableConcept" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "diagnosisReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &CoverageEligibilityRequest_Diagnosis_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool CoverageEligibilityRequest_Diagnosis_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void CoverageEligibilityRequest_Diagnosis_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "diagnosisCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosisCodeableConcept_parser_)
            {
              this->diagnosisCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->diagnosisCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->diagnosisCodeableConcept_parser_ != 0)
            {
              this->diagnosisCodeableConcept_parser_->post_CodeableConcept ();
              this->diagnosisCodeableConcept ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "diagnosisReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosisReference_parser_)
            {
              this->diagnosisReference_parser_->pre ();
              ctx.nested_parser (this->diagnosisReference_parser_);
            }
          }
          else
          {
            if (this->diagnosisReference_parser_ != 0)
            {
              this->diagnosisReference_parser_->post_Reference ();
              this->diagnosisReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for EligibilityRequestPurpose_pskel.
  //
  bool EligibilityRequestPurpose_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EligibilityRequestPurpose_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

