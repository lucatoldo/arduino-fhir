// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "medicationrequest-pskel.hxx"

namespace fhir
{
  // MedicationRequest_pskel
  //

  void MedicationRequest_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void MedicationRequest_pskel::
  status_parser (::fhir::medicationrequestStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void MedicationRequest_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void MedicationRequest_pskel::
  intent_parser (::fhir::medicationRequestIntent_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void MedicationRequest_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void MedicationRequest_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void MedicationRequest_pskel::
  doNotPerform_parser (::fhir::boolean_pskel& p)
  {
    this->doNotPerform_parser_ = &p;
  }

  void MedicationRequest_pskel::
  reportedBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->reportedBoolean_parser_ = &p;
  }

  void MedicationRequest_pskel::
  reportedReference_parser (::fhir::Reference_pskel& p)
  {
    this->reportedReference_parser_ = &p;
  }

  void MedicationRequest_pskel::
  medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->medicationCodeableConcept_parser_ = &p;
  }

  void MedicationRequest_pskel::
  medicationReference_parser (::fhir::Reference_pskel& p)
  {
    this->medicationReference_parser_ = &p;
  }

  void MedicationRequest_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void MedicationRequest_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void MedicationRequest_pskel::
  supportingInformation_parser (::fhir::Reference_pskel& p)
  {
    this->supportingInformation_parser_ = &p;
  }

  void MedicationRequest_pskel::
  authoredOn_parser (::fhir::dateTime_pskel& p)
  {
    this->authoredOn_parser_ = &p;
  }

  void MedicationRequest_pskel::
  requester_parser (::fhir::Reference_pskel& p)
  {
    this->requester_parser_ = &p;
  }

  void MedicationRequest_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void MedicationRequest_pskel::
  performerType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->performerType_parser_ = &p;
  }

  void MedicationRequest_pskel::
  recorder_parser (::fhir::Reference_pskel& p)
  {
    this->recorder_parser_ = &p;
  }

  void MedicationRequest_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void MedicationRequest_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void MedicationRequest_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void MedicationRequest_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void MedicationRequest_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void MedicationRequest_pskel::
  groupIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->groupIdentifier_parser_ = &p;
  }

  void MedicationRequest_pskel::
  courseOfTherapyType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->courseOfTherapyType_parser_ = &p;
  }

  void MedicationRequest_pskel::
  insurance_parser (::fhir::Reference_pskel& p)
  {
    this->insurance_parser_ = &p;
  }

  void MedicationRequest_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void MedicationRequest_pskel::
  dosageInstruction_parser (::fhir::Dosage_pskel& p)
  {
    this->dosageInstruction_parser_ = &p;
  }

  void MedicationRequest_pskel::
  dispenseRequest_parser (::fhir::MedicationRequest_DispenseRequest_pskel& p)
  {
    this->dispenseRequest_parser_ = &p;
  }

  void MedicationRequest_pskel::
  substitution_parser (::fhir::MedicationRequest_Substitution_pskel& p)
  {
    this->substitution_parser_ = &p;
  }

  void MedicationRequest_pskel::
  priorPrescription_parser (::fhir::Reference_pskel& p)
  {
    this->priorPrescription_parser_ = &p;
  }

  void MedicationRequest_pskel::
  detectedIssue_parser (::fhir::Reference_pskel& p)
  {
    this->detectedIssue_parser_ = &p;
  }

  void MedicationRequest_pskel::
  eventHistory_parser (::fhir::Reference_pskel& p)
  {
    this->eventHistory_parser_ = &p;
  }

  void MedicationRequest_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::medicationrequestStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::medicationRequestIntent_pskel& intent,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::boolean_pskel& doNotPerform,
           ::fhir::boolean_pskel& reportedBoolean,
           ::fhir::Reference_pskel& reportedReference,
           ::fhir::CodeableConcept_pskel& medicationCodeableConcept,
           ::fhir::Reference_pskel& medicationReference,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::Reference_pskel& supportingInformation,
           ::fhir::dateTime_pskel& authoredOn,
           ::fhir::Reference_pskel& requester,
           ::fhir::Reference_pskel& performer,
           ::fhir::CodeableConcept_pskel& performerType,
           ::fhir::Reference_pskel& recorder,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Identifier_pskel& groupIdentifier,
           ::fhir::CodeableConcept_pskel& courseOfTherapyType,
           ::fhir::Reference_pskel& insurance,
           ::fhir::Annotation_pskel& note,
           ::fhir::Dosage_pskel& dosageInstruction,
           ::fhir::MedicationRequest_DispenseRequest_pskel& dispenseRequest,
           ::fhir::MedicationRequest_Substitution_pskel& substitution,
           ::fhir::Reference_pskel& priorPrescription,
           ::fhir::Reference_pskel& detectedIssue,
           ::fhir::Reference_pskel& eventHistory)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->intent_parser_ = &intent;
    this->category_parser_ = &category;
    this->priority_parser_ = &priority;
    this->doNotPerform_parser_ = &doNotPerform;
    this->reportedBoolean_parser_ = &reportedBoolean;
    this->reportedReference_parser_ = &reportedReference;
    this->medicationCodeableConcept_parser_ = &medicationCodeableConcept;
    this->medicationReference_parser_ = &medicationReference;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->supportingInformation_parser_ = &supportingInformation;
    this->authoredOn_parser_ = &authoredOn;
    this->requester_parser_ = &requester;
    this->performer_parser_ = &performer;
    this->performerType_parser_ = &performerType;
    this->recorder_parser_ = &recorder;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->basedOn_parser_ = &basedOn;
    this->groupIdentifier_parser_ = &groupIdentifier;
    this->courseOfTherapyType_parser_ = &courseOfTherapyType;
    this->insurance_parser_ = &insurance;
    this->note_parser_ = &note;
    this->dosageInstruction_parser_ = &dosageInstruction;
    this->dispenseRequest_parser_ = &dispenseRequest;
    this->substitution_parser_ = &substitution;
    this->priorPrescription_parser_ = &priorPrescription;
    this->detectedIssue_parser_ = &detectedIssue;
    this->eventHistory_parser_ = &eventHistory;
  }

  MedicationRequest_pskel::
  MedicationRequest_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    MedicationRequest_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    intent_parser_ (0),
    category_parser_ (0),
    priority_parser_ (0),
    doNotPerform_parser_ (0),
    reportedBoolean_parser_ (0),
    reportedReference_parser_ (0),
    medicationCodeableConcept_parser_ (0),
    medicationReference_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    supportingInformation_parser_ (0),
    authoredOn_parser_ (0),
    requester_parser_ (0),
    performer_parser_ (0),
    performerType_parser_ (0),
    recorder_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    groupIdentifier_parser_ (0),
    courseOfTherapyType_parser_ (0),
    insurance_parser_ (0),
    note_parser_ (0),
    dosageInstruction_parser_ (0),
    dispenseRequest_parser_ (0),
    substitution_parser_ (0),
    priorPrescription_parser_ (0),
    detectedIssue_parser_ (0),
    eventHistory_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicationRequest_pskel::
  MedicationRequest_pskel (MedicationRequest_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    MedicationRequest_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    intent_parser_ (0),
    category_parser_ (0),
    priority_parser_ (0),
    doNotPerform_parser_ (0),
    reportedBoolean_parser_ (0),
    reportedReference_parser_ (0),
    medicationCodeableConcept_parser_ (0),
    medicationReference_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    supportingInformation_parser_ (0),
    authoredOn_parser_ (0),
    requester_parser_ (0),
    performer_parser_ (0),
    performerType_parser_ (0),
    recorder_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    groupIdentifier_parser_ (0),
    courseOfTherapyType_parser_ (0),
    insurance_parser_ (0),
    note_parser_ (0),
    dosageInstruction_parser_ (0),
    dispenseRequest_parser_ (0),
    substitution_parser_ (0),
    priorPrescription_parser_ (0),
    detectedIssue_parser_ (0),
    eventHistory_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicationRequest_DispenseRequest_pskel
  //

  void MedicationRequest_DispenseRequest_pskel::
  initialFill_parser (::fhir::MedicationRequest_InitialFill_pskel& p)
  {
    this->initialFill_parser_ = &p;
  }

  void MedicationRequest_DispenseRequest_pskel::
  dispenseInterval_parser (::fhir::Duration_pskel& p)
  {
    this->dispenseInterval_parser_ = &p;
  }

  void MedicationRequest_DispenseRequest_pskel::
  validityPeriod_parser (::fhir::Period_pskel& p)
  {
    this->validityPeriod_parser_ = &p;
  }

  void MedicationRequest_DispenseRequest_pskel::
  numberOfRepeatsAllowed_parser (::fhir::unsignedInt_pskel& p)
  {
    this->numberOfRepeatsAllowed_parser_ = &p;
  }

  void MedicationRequest_DispenseRequest_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void MedicationRequest_DispenseRequest_pskel::
  expectedSupplyDuration_parser (::fhir::Duration_pskel& p)
  {
    this->expectedSupplyDuration_parser_ = &p;
  }

  void MedicationRequest_DispenseRequest_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void MedicationRequest_DispenseRequest_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::MedicationRequest_InitialFill_pskel& initialFill,
           ::fhir::Duration_pskel& dispenseInterval,
           ::fhir::Period_pskel& validityPeriod,
           ::fhir::unsignedInt_pskel& numberOfRepeatsAllowed,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Duration_pskel& expectedSupplyDuration,
           ::fhir::Reference_pskel& performer)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->initialFill_parser_ = &initialFill;
    this->dispenseInterval_parser_ = &dispenseInterval;
    this->validityPeriod_parser_ = &validityPeriod;
    this->numberOfRepeatsAllowed_parser_ = &numberOfRepeatsAllowed;
    this->quantity_parser_ = &quantity;
    this->expectedSupplyDuration_parser_ = &expectedSupplyDuration;
    this->performer_parser_ = &performer;
  }

  MedicationRequest_DispenseRequest_pskel::
  MedicationRequest_DispenseRequest_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicationRequest_DispenseRequest_impl_ (0),
    initialFill_parser_ (0),
    dispenseInterval_parser_ (0),
    validityPeriod_parser_ (0),
    numberOfRepeatsAllowed_parser_ (0),
    quantity_parser_ (0),
    expectedSupplyDuration_parser_ (0),
    performer_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicationRequest_DispenseRequest_pskel::
  MedicationRequest_DispenseRequest_pskel (MedicationRequest_DispenseRequest_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicationRequest_DispenseRequest_impl_ (impl),
    initialFill_parser_ (0),
    dispenseInterval_parser_ (0),
    validityPeriod_parser_ (0),
    numberOfRepeatsAllowed_parser_ (0),
    quantity_parser_ (0),
    expectedSupplyDuration_parser_ (0),
    performer_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicationRequest_InitialFill_pskel
  //

  void MedicationRequest_InitialFill_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void MedicationRequest_InitialFill_pskel::
  duration_parser (::fhir::Duration_pskel& p)
  {
    this->duration_parser_ = &p;
  }

  void MedicationRequest_InitialFill_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Duration_pskel& duration)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->quantity_parser_ = &quantity;
    this->duration_parser_ = &duration;
  }

  MedicationRequest_InitialFill_pskel::
  MedicationRequest_InitialFill_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicationRequest_InitialFill_impl_ (0),
    quantity_parser_ (0),
    duration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicationRequest_InitialFill_pskel::
  MedicationRequest_InitialFill_pskel (MedicationRequest_InitialFill_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicationRequest_InitialFill_impl_ (impl),
    quantity_parser_ (0),
    duration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // MedicationRequest_Substitution_pskel
  //

  void MedicationRequest_Substitution_pskel::
  allowedBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->allowedBoolean_parser_ = &p;
  }

  void MedicationRequest_Substitution_pskel::
  allowedCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->allowedCodeableConcept_parser_ = &p;
  }

  void MedicationRequest_Substitution_pskel::
  reason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void MedicationRequest_Substitution_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& allowedBoolean,
           ::fhir::CodeableConcept_pskel& allowedCodeableConcept,
           ::fhir::CodeableConcept_pskel& reason)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->allowedBoolean_parser_ = &allowedBoolean;
    this->allowedCodeableConcept_parser_ = &allowedCodeableConcept;
    this->reason_parser_ = &reason;
  }

  MedicationRequest_Substitution_pskel::
  MedicationRequest_Substitution_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    MedicationRequest_Substitution_impl_ (0),
    allowedBoolean_parser_ (0),
    allowedCodeableConcept_parser_ (0),
    reason_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  MedicationRequest_Substitution_pskel::
  MedicationRequest_Substitution_pskel (MedicationRequest_Substitution_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    MedicationRequest_Substitution_impl_ (impl),
    allowedBoolean_parser_ (0),
    allowedCodeableConcept_parser_ (0),
    reason_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // medicationrequestStatus_list_pskel
  //

  medicationrequestStatus_list_pskel::
  medicationrequestStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    medicationrequestStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_medicationrequestStatus_list_pskel_enums_, 8UL);
  }

  medicationrequestStatus_list_pskel::
  medicationrequestStatus_list_pskel (medicationrequestStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    medicationrequestStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_medicationrequestStatus_list_pskel_enums_, 8UL);
  }

  // medicationrequestStatus_pskel
  //

  void medicationrequestStatus_pskel::
  value_parser (::fhir::medicationrequestStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void medicationrequestStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::medicationrequestStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  medicationrequestStatus_pskel::
  medicationrequestStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    medicationrequestStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  medicationrequestStatus_pskel::
  medicationrequestStatus_pskel (medicationrequestStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    medicationrequestStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // medicationRequestIntent_list_pskel
  //

  medicationRequestIntent_list_pskel::
  medicationRequestIntent_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    medicationRequestIntent_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_medicationRequestIntent_list_pskel_enums_, 8UL);
  }

  medicationRequestIntent_list_pskel::
  medicationRequestIntent_list_pskel (medicationRequestIntent_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    medicationRequestIntent_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_medicationRequestIntent_list_pskel_enums_, 8UL);
  }

  // medicationRequestIntent_pskel
  //

  void medicationRequestIntent_pskel::
  value_parser (::fhir::medicationRequestIntent_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void medicationRequestIntent_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::medicationRequestIntent_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  medicationRequestIntent_pskel::
  medicationRequestIntent_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    medicationRequestIntent_impl_ (0),
    value_parser_ (0)
  {
  }

  medicationRequestIntent_pskel::
  medicationRequestIntent_pskel (medicationRequestIntent_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    medicationRequestIntent_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // MedicationRequest_pskel
  //

  void MedicationRequest_pskel::
  identifier ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->identifier ();
  }

  void MedicationRequest_pskel::
  status ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->status ();
  }

  void MedicationRequest_pskel::
  statusReason ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->statusReason ();
  }

  void MedicationRequest_pskel::
  intent ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->intent ();
  }

  void MedicationRequest_pskel::
  category ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->category ();
  }

  void MedicationRequest_pskel::
  priority ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->priority ();
  }

  void MedicationRequest_pskel::
  doNotPerform ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->doNotPerform ();
  }

  void MedicationRequest_pskel::
  reportedBoolean ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->reportedBoolean ();
  }

  void MedicationRequest_pskel::
  reportedReference ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->reportedReference ();
  }

  void MedicationRequest_pskel::
  medicationCodeableConcept ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->medicationCodeableConcept ();
  }

  void MedicationRequest_pskel::
  medicationReference ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->medicationReference ();
  }

  void MedicationRequest_pskel::
  subject ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->subject ();
  }

  void MedicationRequest_pskel::
  encounter ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->encounter ();
  }

  void MedicationRequest_pskel::
  supportingInformation ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->supportingInformation ();
  }

  void MedicationRequest_pskel::
  authoredOn ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->authoredOn ();
  }

  void MedicationRequest_pskel::
  requester ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->requester ();
  }

  void MedicationRequest_pskel::
  performer ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->performer ();
  }

  void MedicationRequest_pskel::
  performerType ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->performerType ();
  }

  void MedicationRequest_pskel::
  recorder ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->recorder ();
  }

  void MedicationRequest_pskel::
  reasonCode ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->reasonCode ();
  }

  void MedicationRequest_pskel::
  reasonReference ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->reasonReference ();
  }

  void MedicationRequest_pskel::
  instantiatesCanonical ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->instantiatesCanonical ();
  }

  void MedicationRequest_pskel::
  instantiatesUri ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->instantiatesUri ();
  }

  void MedicationRequest_pskel::
  basedOn ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->basedOn ();
  }

  void MedicationRequest_pskel::
  groupIdentifier ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->groupIdentifier ();
  }

  void MedicationRequest_pskel::
  courseOfTherapyType ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->courseOfTherapyType ();
  }

  void MedicationRequest_pskel::
  insurance ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->insurance ();
  }

  void MedicationRequest_pskel::
  note ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->note ();
  }

  void MedicationRequest_pskel::
  dosageInstruction ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->dosageInstruction ();
  }

  void MedicationRequest_pskel::
  dispenseRequest ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->dispenseRequest ();
  }

  void MedicationRequest_pskel::
  substitution ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->substitution ();
  }

  void MedicationRequest_pskel::
  priorPrescription ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->priorPrescription ();
  }

  void MedicationRequest_pskel::
  detectedIssue ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->detectedIssue ();
  }

  void MedicationRequest_pskel::
  eventHistory ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->eventHistory ();
  }

  void MedicationRequest_pskel::
  post_MedicationRequest ()
  {
    if (this->MedicationRequest_impl_)
      this->MedicationRequest_impl_->post_MedicationRequest ();
    else
      post_DomainResource ();
  }

  void MedicationRequest_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->doNotPerform_parser_)
      this->doNotPerform_parser_->_reset ();

    if (this->reportedBoolean_parser_)
      this->reportedBoolean_parser_->_reset ();

    if (this->reportedReference_parser_)
      this->reportedReference_parser_->_reset ();

    if (this->medicationCodeableConcept_parser_)
      this->medicationCodeableConcept_parser_->_reset ();

    if (this->medicationReference_parser_)
      this->medicationReference_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->supportingInformation_parser_)
      this->supportingInformation_parser_->_reset ();

    if (this->authoredOn_parser_)
      this->authoredOn_parser_->_reset ();

    if (this->requester_parser_)
      this->requester_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->performerType_parser_)
      this->performerType_parser_->_reset ();

    if (this->recorder_parser_)
      this->recorder_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->groupIdentifier_parser_)
      this->groupIdentifier_parser_->_reset ();

    if (this->courseOfTherapyType_parser_)
      this->courseOfTherapyType_parser_->_reset ();

    if (this->insurance_parser_)
      this->insurance_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->dosageInstruction_parser_)
      this->dosageInstruction_parser_->_reset ();

    if (this->dispenseRequest_parser_)
      this->dispenseRequest_parser_->_reset ();

    if (this->substitution_parser_)
      this->substitution_parser_->_reset ();

    if (this->priorPrescription_parser_)
      this->priorPrescription_parser_->_reset ();

    if (this->detectedIssue_parser_)
      this->detectedIssue_parser_->_reset ();

    if (this->eventHistory_parser_)
      this->eventHistory_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicationRequest_DispenseRequest_pskel
  //

  void MedicationRequest_DispenseRequest_pskel::
  initialFill ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->initialFill ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  dispenseInterval ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->dispenseInterval ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  validityPeriod ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->validityPeriod ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  numberOfRepeatsAllowed ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->numberOfRepeatsAllowed ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  quantity ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->quantity ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  expectedSupplyDuration ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->expectedSupplyDuration ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  performer ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->performer ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  post_MedicationRequest_DispenseRequest ()
  {
    if (this->MedicationRequest_DispenseRequest_impl_)
      this->MedicationRequest_DispenseRequest_impl_->post_MedicationRequest_DispenseRequest ();
    else
      post_BackboneElement ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->initialFill_parser_)
      this->initialFill_parser_->_reset ();

    if (this->dispenseInterval_parser_)
      this->dispenseInterval_parser_->_reset ();

    if (this->validityPeriod_parser_)
      this->validityPeriod_parser_->_reset ();

    if (this->numberOfRepeatsAllowed_parser_)
      this->numberOfRepeatsAllowed_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->expectedSupplyDuration_parser_)
      this->expectedSupplyDuration_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicationRequest_InitialFill_pskel
  //

  void MedicationRequest_InitialFill_pskel::
  quantity ()
  {
    if (this->MedicationRequest_InitialFill_impl_)
      this->MedicationRequest_InitialFill_impl_->quantity ();
  }

  void MedicationRequest_InitialFill_pskel::
  duration ()
  {
    if (this->MedicationRequest_InitialFill_impl_)
      this->MedicationRequest_InitialFill_impl_->duration ();
  }

  void MedicationRequest_InitialFill_pskel::
  post_MedicationRequest_InitialFill ()
  {
    if (this->MedicationRequest_InitialFill_impl_)
      this->MedicationRequest_InitialFill_impl_->post_MedicationRequest_InitialFill ();
    else
      post_BackboneElement ();
  }

  void MedicationRequest_InitialFill_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    this->resetting_ = false;
  }

  // MedicationRequest_Substitution_pskel
  //

  void MedicationRequest_Substitution_pskel::
  allowedBoolean ()
  {
    if (this->MedicationRequest_Substitution_impl_)
      this->MedicationRequest_Substitution_impl_->allowedBoolean ();
  }

  void MedicationRequest_Substitution_pskel::
  allowedCodeableConcept ()
  {
    if (this->MedicationRequest_Substitution_impl_)
      this->MedicationRequest_Substitution_impl_->allowedCodeableConcept ();
  }

  void MedicationRequest_Substitution_pskel::
  reason ()
  {
    if (this->MedicationRequest_Substitution_impl_)
      this->MedicationRequest_Substitution_impl_->reason ();
  }

  void MedicationRequest_Substitution_pskel::
  post_MedicationRequest_Substitution ()
  {
    if (this->MedicationRequest_Substitution_impl_)
      this->MedicationRequest_Substitution_impl_->post_MedicationRequest_Substitution ();
    else
      post_BackboneElement ();
  }

  void MedicationRequest_Substitution_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->allowedBoolean_parser_)
      this->allowedBoolean_parser_->_reset ();

    if (this->allowedCodeableConcept_parser_)
      this->allowedCodeableConcept_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    this->resetting_ = false;
  }

  // medicationrequestStatus_list_pskel
  //

  void medicationrequestStatus_list_pskel::
  post_medicationrequestStatus_list ()
  {
    if (this->medicationrequestStatus_list_impl_)
      this->medicationrequestStatus_list_impl_->post_medicationrequestStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const medicationrequestStatus_list_pskel::_xsde_medicationrequestStatus_list_pskel_enums_[8UL] = 
  {
    "active",
    "cancelled",
    "completed",
    "draft",
    "entered-in-error",
    "on-hold",
    "stopped",
    "unknown"
  };

  // medicationrequestStatus_pskel
  //

  void medicationrequestStatus_pskel::
  value ()
  {
    if (this->medicationrequestStatus_impl_)
      this->medicationrequestStatus_impl_->value ();
  }

  void medicationrequestStatus_pskel::
  post_medicationrequestStatus ()
  {
    if (this->medicationrequestStatus_impl_)
      this->medicationrequestStatus_impl_->post_medicationrequestStatus ();
    else
      post_Element ();
  }

  void medicationrequestStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // medicationRequestIntent_list_pskel
  //

  void medicationRequestIntent_list_pskel::
  post_medicationRequestIntent_list ()
  {
    if (this->medicationRequestIntent_list_impl_)
      this->medicationRequestIntent_list_impl_->post_medicationRequestIntent_list ();
    else
      post_code_primitive ();
  }

  const char* const medicationRequestIntent_list_pskel::_xsde_medicationRequestIntent_list_pskel_enums_[8UL] = 
  {
    "filler-order",
    "instance-order",
    "option",
    "order",
    "original-order",
    "plan",
    "proposal",
    "reflex-order"
  };

  // medicationRequestIntent_pskel
  //

  void medicationRequestIntent_pskel::
  value ()
  {
    if (this->medicationRequestIntent_impl_)
      this->medicationRequestIntent_impl_->value ();
  }

  void medicationRequestIntent_pskel::
  post_medicationRequestIntent ()
  {
    if (this->medicationRequestIntent_impl_)
      this->medicationRequestIntent_impl_->post_medicationRequestIntent ();
    else
      post_Element ();
  }

  void medicationRequestIntent_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for MedicationRequest_pskel.
  //
  bool MedicationRequest_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicationRequest_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicationRequest_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicationRequest_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void MedicationRequest_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void MedicationRequest_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_medicationrequestStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_medicationRequestIntent ();
              this->intent ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "doNotPerform" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doNotPerform_parser_)
            {
              this->doNotPerform_parser_->pre ();
              ctx.nested_parser (this->doNotPerform_parser_);
            }
          }
          else
          {
            if (this->doNotPerform_parser_ != 0)
            {
              this->doNotPerform_parser_->post_boolean ();
              this->doNotPerform ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "reportedBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reportedBoolean_parser_)
            {
              this->reportedBoolean_parser_->pre ();
              ctx.nested_parser (this->reportedBoolean_parser_);
            }
          }
          else
          {
            if (this->reportedBoolean_parser_ != 0)
            {
              this->reportedBoolean_parser_->post_boolean ();
              this->reportedBoolean ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "reportedReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reportedReference_parser_)
            {
              this->reportedReference_parser_->pre ();
              ctx.nested_parser (this->reportedReference_parser_);
            }
          }
          else
          {
            if (this->reportedReference_parser_ != 0)
            {
              this->reportedReference_parser_->post_Reference ();
              this->reportedReference ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "medicationCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->medicationCodeableConcept_parser_)
            {
              this->medicationCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->medicationCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->medicationCodeableConcept_parser_ != 0)
            {
              this->medicationCodeableConcept_parser_->post_CodeableConcept ();
              this->medicationCodeableConcept ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "medicationReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->medicationReference_parser_)
            {
              this->medicationReference_parser_->pre ();
              ctx.nested_parser (this->medicationReference_parser_);
            }
          }
          else
          {
            if (this->medicationReference_parser_ != 0)
            {
              this->medicationReference_parser_->post_Reference ();
              this->medicationReference ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "supportingInformation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInformation_parser_)
            {
              this->supportingInformation_parser_->pre ();
              ctx.nested_parser (this->supportingInformation_parser_);
            }
          }
          else
          {
            if (this->supportingInformation_parser_ != 0)
            {
              this->supportingInformation_parser_->post_Reference ();
              this->supportingInformation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "authoredOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authoredOn_parser_)
            {
              this->authoredOn_parser_->pre ();
              ctx.nested_parser (this->authoredOn_parser_);
            }
          }
          else
          {
            if (this->authoredOn_parser_ != 0)
            {
              this->authoredOn_parser_->post_dateTime ();
              this->authoredOn ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "requester" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requester_parser_)
            {
              this->requester_parser_->pre ();
              ctx.nested_parser (this->requester_parser_);
            }
          }
          else
          {
            if (this->requester_parser_ != 0)
            {
              this->requester_parser_->post_Reference ();
              this->requester ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "performerType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performerType_parser_)
            {
              this->performerType_parser_->pre ();
              ctx.nested_parser (this->performerType_parser_);
            }
          }
          else
          {
            if (this->performerType_parser_ != 0)
            {
              this->performerType_parser_->post_CodeableConcept ();
              this->performerType ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "recorder" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recorder_parser_)
            {
              this->recorder_parser_->pre ();
              ctx.nested_parser (this->recorder_parser_);
            }
          }
          else
          {
            if (this->recorder_parser_ != 0)
            {
              this->recorder_parser_->post_Reference ();
              this->recorder ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "groupIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupIdentifier_parser_)
            {
              this->groupIdentifier_parser_->pre ();
              ctx.nested_parser (this->groupIdentifier_parser_);
            }
          }
          else
          {
            if (this->groupIdentifier_parser_ != 0)
            {
              this->groupIdentifier_parser_->post_Identifier ();
              this->groupIdentifier ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "courseOfTherapyType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->courseOfTherapyType_parser_)
            {
              this->courseOfTherapyType_parser_->pre ();
              ctx.nested_parser (this->courseOfTherapyType_parser_);
            }
          }
          else
          {
            if (this->courseOfTherapyType_parser_ != 0)
            {
              this->courseOfTherapyType_parser_->post_CodeableConcept ();
              this->courseOfTherapyType ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "insurance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurance_parser_)
            {
              this->insurance_parser_->pre ();
              ctx.nested_parser (this->insurance_parser_);
            }
          }
          else
          {
            if (this->insurance_parser_ != 0)
            {
              this->insurance_parser_->post_Reference ();
              this->insurance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "dosageInstruction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dosageInstruction_parser_)
            {
              this->dosageInstruction_parser_->pre ();
              ctx.nested_parser (this->dosageInstruction_parser_);
            }
          }
          else
          {
            if (this->dosageInstruction_parser_ != 0)
            {
              this->dosageInstruction_parser_->post_Dosage ();
              this->dosageInstruction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "dispenseRequest" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dispenseRequest_parser_)
            {
              this->dispenseRequest_parser_->pre ();
              ctx.nested_parser (this->dispenseRequest_parser_);
            }
          }
          else
          {
            if (this->dispenseRequest_parser_ != 0)
            {
              this->dispenseRequest_parser_->post_MedicationRequest_DispenseRequest ();
              this->dispenseRequest ();
            }

            count = 0;
            state = 30UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "substitution" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->substitution_parser_)
            {
              this->substitution_parser_->pre ();
              ctx.nested_parser (this->substitution_parser_);
            }
          }
          else
          {
            if (this->substitution_parser_ != 0)
            {
              this->substitution_parser_->post_MedicationRequest_Substitution ();
              this->substitution ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "priorPrescription" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priorPrescription_parser_)
            {
              this->priorPrescription_parser_->pre ();
              ctx.nested_parser (this->priorPrescription_parser_);
            }
          }
          else
          {
            if (this->priorPrescription_parser_ != 0)
            {
              this->priorPrescription_parser_->post_Reference ();
              this->priorPrescription ();
            }

            count = 0;
            state = 32UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "detectedIssue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detectedIssue_parser_)
            {
              this->detectedIssue_parser_->pre ();
              ctx.nested_parser (this->detectedIssue_parser_);
            }
          }
          else
          {
            if (this->detectedIssue_parser_ != 0)
            {
              this->detectedIssue_parser_->post_Reference ();
              this->detectedIssue ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "eventHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->eventHistory_parser_)
            {
              this->eventHistory_parser_->pre ();
              ctx.nested_parser (this->eventHistory_parser_);
            }
          }
          else
          {
            if (this->eventHistory_parser_ != 0)
            {
              this->eventHistory_parser_->post_Reference ();
              this->eventHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicationRequest_DispenseRequest_pskel.
  //
  bool MedicationRequest_DispenseRequest_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "initialFill" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "dispenseInterval" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "validityPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "numberOfRepeatsAllowed" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "expectedSupplyDuration" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "performer" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicationRequest_DispenseRequest_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicationRequest_DispenseRequest_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicationRequest_DispenseRequest_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MedicationRequest_DispenseRequest_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "initialFill" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->initialFill_parser_)
            {
              this->initialFill_parser_->pre ();
              ctx.nested_parser (this->initialFill_parser_);
            }
          }
          else
          {
            if (this->initialFill_parser_ != 0)
            {
              this->initialFill_parser_->post_MedicationRequest_InitialFill ();
              this->initialFill ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "dispenseInterval" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dispenseInterval_parser_)
            {
              this->dispenseInterval_parser_->pre ();
              ctx.nested_parser (this->dispenseInterval_parser_);
            }
          }
          else
          {
            if (this->dispenseInterval_parser_ != 0)
            {
              this->dispenseInterval_parser_->post_Duration ();
              this->dispenseInterval ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "validityPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->validityPeriod_parser_)
            {
              this->validityPeriod_parser_->pre ();
              ctx.nested_parser (this->validityPeriod_parser_);
            }
          }
          else
          {
            if (this->validityPeriod_parser_ != 0)
            {
              this->validityPeriod_parser_->post_Period ();
              this->validityPeriod ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "numberOfRepeatsAllowed" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->numberOfRepeatsAllowed_parser_)
            {
              this->numberOfRepeatsAllowed_parser_->pre ();
              ctx.nested_parser (this->numberOfRepeatsAllowed_parser_);
            }
          }
          else
          {
            if (this->numberOfRepeatsAllowed_parser_ != 0)
            {
              this->numberOfRepeatsAllowed_parser_->post_unsignedInt ();
              this->numberOfRepeatsAllowed ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "expectedSupplyDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expectedSupplyDuration_parser_)
            {
              this->expectedSupplyDuration_parser_->pre ();
              ctx.nested_parser (this->expectedSupplyDuration_parser_);
            }
          }
          else
          {
            if (this->expectedSupplyDuration_parser_ != 0)
            {
              this->expectedSupplyDuration_parser_->post_Duration ();
              this->expectedSupplyDuration ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicationRequest_InitialFill_pskel.
  //
  bool MedicationRequest_InitialFill_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "duration" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicationRequest_InitialFill_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicationRequest_InitialFill_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicationRequest_InitialFill_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicationRequest_InitialFill_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MedicationRequest_InitialFill_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "duration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->duration_parser_)
            {
              this->duration_parser_->pre ();
              ctx.nested_parser (this->duration_parser_);
            }
          }
          else
          {
            if (this->duration_parser_ != 0)
            {
              this->duration_parser_->post_Duration ();
              this->duration ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for MedicationRequest_Substitution_pskel.
  //
  bool MedicationRequest_Substitution_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "allowedBoolean" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "allowedCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "reason" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &MedicationRequest_Substitution_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool MedicationRequest_Substitution_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void MedicationRequest_Substitution_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void MedicationRequest_Substitution_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void MedicationRequest_Substitution_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "allowedBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedBoolean_parser_)
            {
              this->allowedBoolean_parser_->pre ();
              ctx.nested_parser (this->allowedBoolean_parser_);
            }
          }
          else
          {
            if (this->allowedBoolean_parser_ != 0)
            {
              this->allowedBoolean_parser_->post_boolean ();
              this->allowedBoolean ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "allowedCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedCodeableConcept_parser_)
            {
              this->allowedCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->allowedCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->allowedCodeableConcept_parser_ != 0)
            {
              this->allowedCodeableConcept_parser_->post_CodeableConcept ();
              this->allowedCodeableConcept ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_CodeableConcept ();
              this->reason ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for medicationrequestStatus_pskel.
  //
  bool medicationrequestStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_medicationrequestStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for medicationRequestIntent_pskel.
  //
  bool medicationRequestIntent_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_medicationRequestIntent_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

