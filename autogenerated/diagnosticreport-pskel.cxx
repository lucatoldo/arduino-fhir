// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "diagnosticreport-pskel.hxx"

namespace fhir
{
  // DiagnosticReport_pskel
  //

  void DiagnosticReport_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  status_parser (::fhir::DiagnosticReportStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  effectiveDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->effectiveDateTime_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  issued_parser (::fhir::instant_pskel& p)
  {
    this->issued_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  performer_parser (::fhir::Reference_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  resultsInterpreter_parser (::fhir::Reference_pskel& p)
  {
    this->resultsInterpreter_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  specimen_parser (::fhir::Reference_pskel& p)
  {
    this->specimen_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  result_parser (::fhir::Reference_pskel& p)
  {
    this->result_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  imagingStudy_parser (::fhir::Reference_pskel& p)
  {
    this->imagingStudy_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  media_parser (::fhir::DiagnosticReport_Media_pskel& p)
  {
    this->media_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  conclusion_parser (::fhir::string_pskel& p)
  {
    this->conclusion_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  conclusionCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->conclusionCode_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  presentedForm_parser (::fhir::Attachment_pskel& p)
  {
    this->presentedForm_parser_ = &p;
  }

  void DiagnosticReport_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::DiagnosticReportStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& effectiveDateTime,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::instant_pskel& issued,
           ::fhir::Reference_pskel& performer,
           ::fhir::Reference_pskel& resultsInterpreter,
           ::fhir::Reference_pskel& specimen,
           ::fhir::Reference_pskel& result,
           ::fhir::Reference_pskel& imagingStudy,
           ::fhir::DiagnosticReport_Media_pskel& media,
           ::fhir::string_pskel& conclusion,
           ::fhir::CodeableConcept_pskel& conclusionCode,
           ::fhir::Attachment_pskel& presentedForm)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->basedOn_parser_ = &basedOn;
    this->status_parser_ = &status;
    this->category_parser_ = &category;
    this->code_parser_ = &code;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->effectiveDateTime_parser_ = &effectiveDateTime;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->issued_parser_ = &issued;
    this->performer_parser_ = &performer;
    this->resultsInterpreter_parser_ = &resultsInterpreter;
    this->specimen_parser_ = &specimen;
    this->result_parser_ = &result;
    this->imagingStudy_parser_ = &imagingStudy;
    this->media_parser_ = &media;
    this->conclusion_parser_ = &conclusion;
    this->conclusionCode_parser_ = &conclusionCode;
    this->presentedForm_parser_ = &presentedForm;
  }

  DiagnosticReport_pskel::
  DiagnosticReport_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    DiagnosticReport_impl_ (0),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    status_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    issued_parser_ (0),
    performer_parser_ (0),
    resultsInterpreter_parser_ (0),
    specimen_parser_ (0),
    result_parser_ (0),
    imagingStudy_parser_ (0),
    media_parser_ (0),
    conclusion_parser_ (0),
    conclusionCode_parser_ (0),
    presentedForm_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DiagnosticReport_pskel::
  DiagnosticReport_pskel (DiagnosticReport_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    DiagnosticReport_impl_ (impl),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    status_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    effectiveDateTime_parser_ (0),
    effectivePeriod_parser_ (0),
    issued_parser_ (0),
    performer_parser_ (0),
    resultsInterpreter_parser_ (0),
    specimen_parser_ (0),
    result_parser_ (0),
    imagingStudy_parser_ (0),
    media_parser_ (0),
    conclusion_parser_ (0),
    conclusionCode_parser_ (0),
    presentedForm_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DiagnosticReport_Media_pskel
  //

  void DiagnosticReport_Media_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void DiagnosticReport_Media_pskel::
  link_parser (::fhir::Reference_pskel& p)
  {
    this->link_parser_ = &p;
  }

  void DiagnosticReport_Media_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& comment,
           ::fhir::Reference_pskel& link)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->comment_parser_ = &comment;
    this->link_parser_ = &link;
  }

  DiagnosticReport_Media_pskel::
  DiagnosticReport_Media_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DiagnosticReport_Media_impl_ (0),
    comment_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DiagnosticReport_Media_pskel::
  DiagnosticReport_Media_pskel (DiagnosticReport_Media_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DiagnosticReport_Media_impl_ (impl),
    comment_parser_ (0),
    link_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DiagnosticReportStatus_list_pskel
  //

  DiagnosticReportStatus_list_pskel::
  DiagnosticReportStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DiagnosticReportStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DiagnosticReportStatus_list_pskel_enums_, 10UL);
  }

  DiagnosticReportStatus_list_pskel::
  DiagnosticReportStatus_list_pskel (DiagnosticReportStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DiagnosticReportStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DiagnosticReportStatus_list_pskel_enums_, 10UL);
  }

  // DiagnosticReportStatus_pskel
  //

  void DiagnosticReportStatus_pskel::
  value_parser (::fhir::DiagnosticReportStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DiagnosticReportStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DiagnosticReportStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DiagnosticReportStatus_pskel::
  DiagnosticReportStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DiagnosticReportStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  DiagnosticReportStatus_pskel::
  DiagnosticReportStatus_pskel (DiagnosticReportStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DiagnosticReportStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // DiagnosticReport_pskel
  //

  void DiagnosticReport_pskel::
  identifier ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->identifier ();
  }

  void DiagnosticReport_pskel::
  basedOn ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->basedOn ();
  }

  void DiagnosticReport_pskel::
  status ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->status ();
  }

  void DiagnosticReport_pskel::
  category ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->category ();
  }

  void DiagnosticReport_pskel::
  code ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->code ();
  }

  void DiagnosticReport_pskel::
  subject ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->subject ();
  }

  void DiagnosticReport_pskel::
  encounter ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->encounter ();
  }

  void DiagnosticReport_pskel::
  effectiveDateTime ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->effectiveDateTime ();
  }

  void DiagnosticReport_pskel::
  effectivePeriod ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->effectivePeriod ();
  }

  void DiagnosticReport_pskel::
  issued ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->issued ();
  }

  void DiagnosticReport_pskel::
  performer ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->performer ();
  }

  void DiagnosticReport_pskel::
  resultsInterpreter ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->resultsInterpreter ();
  }

  void DiagnosticReport_pskel::
  specimen ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->specimen ();
  }

  void DiagnosticReport_pskel::
  result ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->result ();
  }

  void DiagnosticReport_pskel::
  imagingStudy ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->imagingStudy ();
  }

  void DiagnosticReport_pskel::
  media ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->media ();
  }

  void DiagnosticReport_pskel::
  conclusion ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->conclusion ();
  }

  void DiagnosticReport_pskel::
  conclusionCode ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->conclusionCode ();
  }

  void DiagnosticReport_pskel::
  presentedForm ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->presentedForm ();
  }

  void DiagnosticReport_pskel::
  post_DiagnosticReport ()
  {
    if (this->DiagnosticReport_impl_)
      this->DiagnosticReport_impl_->post_DiagnosticReport ();
    else
      post_DomainResource ();
  }

  void DiagnosticReport_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->effectiveDateTime_parser_)
      this->effectiveDateTime_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->issued_parser_)
      this->issued_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->resultsInterpreter_parser_)
      this->resultsInterpreter_parser_->_reset ();

    if (this->specimen_parser_)
      this->specimen_parser_->_reset ();

    if (this->result_parser_)
      this->result_parser_->_reset ();

    if (this->imagingStudy_parser_)
      this->imagingStudy_parser_->_reset ();

    if (this->media_parser_)
      this->media_parser_->_reset ();

    if (this->conclusion_parser_)
      this->conclusion_parser_->_reset ();

    if (this->conclusionCode_parser_)
      this->conclusionCode_parser_->_reset ();

    if (this->presentedForm_parser_)
      this->presentedForm_parser_->_reset ();

    this->resetting_ = false;
  }

  // DiagnosticReport_Media_pskel
  //

  void DiagnosticReport_Media_pskel::
  comment ()
  {
    if (this->DiagnosticReport_Media_impl_)
      this->DiagnosticReport_Media_impl_->comment ();
  }

  void DiagnosticReport_Media_pskel::
  link ()
  {
    if (this->DiagnosticReport_Media_impl_)
      this->DiagnosticReport_Media_impl_->link ();
  }

  void DiagnosticReport_Media_pskel::
  post_DiagnosticReport_Media ()
  {
    if (this->DiagnosticReport_Media_impl_)
      this->DiagnosticReport_Media_impl_->post_DiagnosticReport_Media ();
    else
      post_BackboneElement ();
  }

  void DiagnosticReport_Media_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->link_parser_)
      this->link_parser_->_reset ();

    this->resetting_ = false;
  }

  // DiagnosticReportStatus_list_pskel
  //

  void DiagnosticReportStatus_list_pskel::
  post_DiagnosticReportStatus_list ()
  {
    if (this->DiagnosticReportStatus_list_impl_)
      this->DiagnosticReportStatus_list_impl_->post_DiagnosticReportStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const DiagnosticReportStatus_list_pskel::_xsde_DiagnosticReportStatus_list_pskel_enums_[10UL] = 
  {
    "amended",
    "appended",
    "cancelled",
    "corrected",
    "entered-in-error",
    "final",
    "partial",
    "preliminary",
    "registered",
    "unknown"
  };

  // DiagnosticReportStatus_pskel
  //

  void DiagnosticReportStatus_pskel::
  value ()
  {
    if (this->DiagnosticReportStatus_impl_)
      this->DiagnosticReportStatus_impl_->value ();
  }

  void DiagnosticReportStatus_pskel::
  post_DiagnosticReportStatus ()
  {
    if (this->DiagnosticReportStatus_impl_)
      this->DiagnosticReportStatus_impl_->post_DiagnosticReportStatus ();
    else
      post_Element ();
  }

  void DiagnosticReportStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for DiagnosticReport_pskel.
  //
  bool DiagnosticReport_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DiagnosticReport_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DiagnosticReport_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DiagnosticReport_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void DiagnosticReport_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DiagnosticReport_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_DiagnosticReportStatus ();
              this->status ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "effectiveDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectiveDateTime_parser_)
            {
              this->effectiveDateTime_parser_->pre ();
              ctx.nested_parser (this->effectiveDateTime_parser_);
            }
          }
          else
          {
            if (this->effectiveDateTime_parser_ != 0)
            {
              this->effectiveDateTime_parser_->post_dateTime ();
              this->effectiveDateTime ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "issued" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issued_parser_)
            {
              this->issued_parser_->pre ();
              ctx.nested_parser (this->issued_parser_);
            }
          }
          else
          {
            if (this->issued_parser_ != 0)
            {
              this->issued_parser_->post_instant ();
              this->issued ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_Reference ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "resultsInterpreter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->resultsInterpreter_parser_)
            {
              this->resultsInterpreter_parser_->pre ();
              ctx.nested_parser (this->resultsInterpreter_parser_);
            }
          }
          else
          {
            if (this->resultsInterpreter_parser_ != 0)
            {
              this->resultsInterpreter_parser_->post_Reference ();
              this->resultsInterpreter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "specimen" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specimen_parser_)
            {
              this->specimen_parser_->pre ();
              ctx.nested_parser (this->specimen_parser_);
            }
          }
          else
          {
            if (this->specimen_parser_ != 0)
            {
              this->specimen_parser_->post_Reference ();
              this->specimen ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "result" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->result_parser_)
            {
              this->result_parser_->pre ();
              ctx.nested_parser (this->result_parser_);
            }
          }
          else
          {
            if (this->result_parser_ != 0)
            {
              this->result_parser_->post_Reference ();
              this->result ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "imagingStudy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->imagingStudy_parser_)
            {
              this->imagingStudy_parser_->pre ();
              ctx.nested_parser (this->imagingStudy_parser_);
            }
          }
          else
          {
            if (this->imagingStudy_parser_ != 0)
            {
              this->imagingStudy_parser_->post_Reference ();
              this->imagingStudy ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "media" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->media_parser_)
            {
              this->media_parser_->pre ();
              ctx.nested_parser (this->media_parser_);
            }
          }
          else
          {
            if (this->media_parser_ != 0)
            {
              this->media_parser_->post_DiagnosticReport_Media ();
              this->media ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "conclusion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->conclusion_parser_)
            {
              this->conclusion_parser_->pre ();
              ctx.nested_parser (this->conclusion_parser_);
            }
          }
          else
          {
            if (this->conclusion_parser_ != 0)
            {
              this->conclusion_parser_->post_string ();
              this->conclusion ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "conclusionCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->conclusionCode_parser_)
            {
              this->conclusionCode_parser_->pre ();
              ctx.nested_parser (this->conclusionCode_parser_);
            }
          }
          else
          {
            if (this->conclusionCode_parser_ != 0)
            {
              this->conclusionCode_parser_->post_CodeableConcept ();
              this->conclusionCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "presentedForm" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->presentedForm_parser_)
            {
              this->presentedForm_parser_->pre ();
              ctx.nested_parser (this->presentedForm_parser_);
            }
          }
          else
          {
            if (this->presentedForm_parser_ != 0)
            {
              this->presentedForm_parser_->post_Attachment ();
              this->presentedForm ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DiagnosticReport_Media_pskel.
  //
  bool DiagnosticReport_Media_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "link" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DiagnosticReport_Media_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DiagnosticReport_Media_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DiagnosticReport_Media_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DiagnosticReport_Media_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DiagnosticReport_Media_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "link" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->link_parser_)
            {
              this->link_parser_->pre ();
              ctx.nested_parser (this->link_parser_);
            }
          }
          else
          {
            if (this->link_parser_ != 0)
            {
              this->link_parser_->post_Reference ();
              this->link ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for DiagnosticReportStatus_pskel.
  //
  bool DiagnosticReportStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DiagnosticReportStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

