// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "evidencevariable-pskel.hxx"

namespace fhir
{
  // EvidenceVariable_pskel
  //

  void EvidenceVariable_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  title_parser (::fhir::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  shortTitle_parser (::fhir::string_pskel& p)
  {
    this->shortTitle_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  subtitle_parser (::fhir::string_pskel& p)
  {
    this->subtitle_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  copyright_parser (::fhir::markdown_pskel& p)
  {
    this->copyright_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  approvalDate_parser (::fhir::date_pskel& p)
  {
    this->approvalDate_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  lastReviewDate_parser (::fhir::date_pskel& p)
  {
    this->lastReviewDate_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  effectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->effectivePeriod_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  topic_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->topic_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  author_parser (::fhir::ContactDetail_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  editor_parser (::fhir::ContactDetail_pskel& p)
  {
    this->editor_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  reviewer_parser (::fhir::ContactDetail_pskel& p)
  {
    this->reviewer_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  endorser_parser (::fhir::ContactDetail_pskel& p)
  {
    this->endorser_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  relatedArtifact_parser (::fhir::RelatedArtifact_pskel& p)
  {
    this->relatedArtifact_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  type_parser (::fhir::EvidenceVariableType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  characteristic_parser (::fhir::EvidenceVariable_Characteristic_pskel& p)
  {
    this->characteristic_parser_ = &p;
  }

  void EvidenceVariable_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::uri_pskel& url,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::string_pskel& version,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& title,
           ::fhir::string_pskel& shortTitle,
           ::fhir::string_pskel& subtitle,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::markdown_pskel& description,
           ::fhir::Annotation_pskel& note,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::markdown_pskel& copyright,
           ::fhir::date_pskel& approvalDate,
           ::fhir::date_pskel& lastReviewDate,
           ::fhir::Period_pskel& effectivePeriod,
           ::fhir::CodeableConcept_pskel& topic,
           ::fhir::ContactDetail_pskel& author,
           ::fhir::ContactDetail_pskel& editor,
           ::fhir::ContactDetail_pskel& reviewer,
           ::fhir::ContactDetail_pskel& endorser,
           ::fhir::RelatedArtifact_pskel& relatedArtifact,
           ::fhir::EvidenceVariableType_pskel& type,
           ::fhir::EvidenceVariable_Characteristic_pskel& characteristic)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->url_parser_ = &url;
    this->identifier_parser_ = &identifier;
    this->version_parser_ = &version;
    this->name_parser_ = &name;
    this->title_parser_ = &title;
    this->shortTitle_parser_ = &shortTitle;
    this->subtitle_parser_ = &subtitle;
    this->status_parser_ = &status;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->description_parser_ = &description;
    this->note_parser_ = &note;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->copyright_parser_ = &copyright;
    this->approvalDate_parser_ = &approvalDate;
    this->lastReviewDate_parser_ = &lastReviewDate;
    this->effectivePeriod_parser_ = &effectivePeriod;
    this->topic_parser_ = &topic;
    this->author_parser_ = &author;
    this->editor_parser_ = &editor;
    this->reviewer_parser_ = &reviewer;
    this->endorser_parser_ = &endorser;
    this->relatedArtifact_parser_ = &relatedArtifact;
    this->type_parser_ = &type;
    this->characteristic_parser_ = &characteristic;
  }

  EvidenceVariable_pskel::
  EvidenceVariable_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    EvidenceVariable_impl_ (0),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    shortTitle_parser_ (0),
    subtitle_parser_ (0),
    status_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    note_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    type_parser_ (0),
    characteristic_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  EvidenceVariable_pskel::
  EvidenceVariable_pskel (EvidenceVariable_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    EvidenceVariable_impl_ (impl),
    url_parser_ (0),
    identifier_parser_ (0),
    version_parser_ (0),
    name_parser_ (0),
    title_parser_ (0),
    shortTitle_parser_ (0),
    subtitle_parser_ (0),
    status_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    description_parser_ (0),
    note_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    copyright_parser_ (0),
    approvalDate_parser_ (0),
    lastReviewDate_parser_ (0),
    effectivePeriod_parser_ (0),
    topic_parser_ (0),
    author_parser_ (0),
    editor_parser_ (0),
    reviewer_parser_ (0),
    endorser_parser_ (0),
    relatedArtifact_parser_ (0),
    type_parser_ (0),
    characteristic_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EvidenceVariable_Characteristic_pskel
  //

  void EvidenceVariable_Characteristic_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionReference_parser (::fhir::Reference_pskel& p)
  {
    this->definitionReference_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->definitionCanonical_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->definitionCodeableConcept_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionExpression_parser (::fhir::Expression_pskel& p)
  {
    this->definitionExpression_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionDataRequirement_parser (::fhir::DataRequirement_pskel& p)
  {
    this->definitionDataRequirement_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionTriggerDefinition_parser (::fhir::TriggerDefinition_pskel& p)
  {
    this->definitionTriggerDefinition_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  usageContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->usageContext_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  exclude_parser (::fhir::boolean_pskel& p)
  {
    this->exclude_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectiveDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->participantEffectiveDateTime_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectivePeriod_parser (::fhir::Period_pskel& p)
  {
    this->participantEffectivePeriod_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectiveDuration_parser (::fhir::Duration_pskel& p)
  {
    this->participantEffectiveDuration_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectiveTiming_parser (::fhir::Timing_pskel& p)
  {
    this->participantEffectiveTiming_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  timeFromStart_parser (::fhir::Duration_pskel& p)
  {
    this->timeFromStart_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  groupMeasure_parser (::fhir::GroupMeasure_pskel& p)
  {
    this->groupMeasure_parser_ = &p;
  }

  void EvidenceVariable_Characteristic_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::Reference_pskel& definitionReference,
           ::fhir::canonical_pskel& definitionCanonical,
           ::fhir::CodeableConcept_pskel& definitionCodeableConcept,
           ::fhir::Expression_pskel& definitionExpression,
           ::fhir::DataRequirement_pskel& definitionDataRequirement,
           ::fhir::TriggerDefinition_pskel& definitionTriggerDefinition,
           ::fhir::UsageContext_pskel& usageContext,
           ::fhir::boolean_pskel& exclude,
           ::fhir::dateTime_pskel& participantEffectiveDateTime,
           ::fhir::Period_pskel& participantEffectivePeriod,
           ::fhir::Duration_pskel& participantEffectiveDuration,
           ::fhir::Timing_pskel& participantEffectiveTiming,
           ::fhir::Duration_pskel& timeFromStart,
           ::fhir::GroupMeasure_pskel& groupMeasure)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->definitionReference_parser_ = &definitionReference;
    this->definitionCanonical_parser_ = &definitionCanonical;
    this->definitionCodeableConcept_parser_ = &definitionCodeableConcept;
    this->definitionExpression_parser_ = &definitionExpression;
    this->definitionDataRequirement_parser_ = &definitionDataRequirement;
    this->definitionTriggerDefinition_parser_ = &definitionTriggerDefinition;
    this->usageContext_parser_ = &usageContext;
    this->exclude_parser_ = &exclude;
    this->participantEffectiveDateTime_parser_ = &participantEffectiveDateTime;
    this->participantEffectivePeriod_parser_ = &participantEffectivePeriod;
    this->participantEffectiveDuration_parser_ = &participantEffectiveDuration;
    this->participantEffectiveTiming_parser_ = &participantEffectiveTiming;
    this->timeFromStart_parser_ = &timeFromStart;
    this->groupMeasure_parser_ = &groupMeasure;
  }

  EvidenceVariable_Characteristic_pskel::
  EvidenceVariable_Characteristic_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    EvidenceVariable_Characteristic_impl_ (0),
    description_parser_ (0),
    definitionReference_parser_ (0),
    definitionCanonical_parser_ (0),
    definitionCodeableConcept_parser_ (0),
    definitionExpression_parser_ (0),
    definitionDataRequirement_parser_ (0),
    definitionTriggerDefinition_parser_ (0),
    usageContext_parser_ (0),
    exclude_parser_ (0),
    participantEffectiveDateTime_parser_ (0),
    participantEffectivePeriod_parser_ (0),
    participantEffectiveDuration_parser_ (0),
    participantEffectiveTiming_parser_ (0),
    timeFromStart_parser_ (0),
    groupMeasure_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  EvidenceVariable_Characteristic_pskel::
  EvidenceVariable_Characteristic_pskel (EvidenceVariable_Characteristic_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    EvidenceVariable_Characteristic_impl_ (impl),
    description_parser_ (0),
    definitionReference_parser_ (0),
    definitionCanonical_parser_ (0),
    definitionCodeableConcept_parser_ (0),
    definitionExpression_parser_ (0),
    definitionDataRequirement_parser_ (0),
    definitionTriggerDefinition_parser_ (0),
    usageContext_parser_ (0),
    exclude_parser_ (0),
    participantEffectiveDateTime_parser_ (0),
    participantEffectivePeriod_parser_ (0),
    participantEffectiveDuration_parser_ (0),
    participantEffectiveTiming_parser_ (0),
    timeFromStart_parser_ (0),
    groupMeasure_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EvidenceVariableType_list_pskel
  //

  EvidenceVariableType_list_pskel::
  EvidenceVariableType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EvidenceVariableType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EvidenceVariableType_list_pskel_enums_, 3UL);
  }

  EvidenceVariableType_list_pskel::
  EvidenceVariableType_list_pskel (EvidenceVariableType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EvidenceVariableType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EvidenceVariableType_list_pskel_enums_, 3UL);
  }

  // EvidenceVariableType_pskel
  //

  void EvidenceVariableType_pskel::
  value_parser (::fhir::EvidenceVariableType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EvidenceVariableType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EvidenceVariableType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EvidenceVariableType_pskel::
  EvidenceVariableType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EvidenceVariableType_impl_ (0),
    value_parser_ (0)
  {
  }

  EvidenceVariableType_pskel::
  EvidenceVariableType_pskel (EvidenceVariableType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EvidenceVariableType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // GroupMeasure_list_pskel
  //

  GroupMeasure_list_pskel::
  GroupMeasure_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    GroupMeasure_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_GroupMeasure_list_pskel_enums_, 6UL);
  }

  GroupMeasure_list_pskel::
  GroupMeasure_list_pskel (GroupMeasure_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    GroupMeasure_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_GroupMeasure_list_pskel_enums_, 6UL);
  }

  // GroupMeasure_pskel
  //

  void GroupMeasure_pskel::
  value_parser (::fhir::GroupMeasure_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void GroupMeasure_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::GroupMeasure_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  GroupMeasure_pskel::
  GroupMeasure_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    GroupMeasure_impl_ (0),
    value_parser_ (0)
  {
  }

  GroupMeasure_pskel::
  GroupMeasure_pskel (GroupMeasure_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    GroupMeasure_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // EvidenceVariable_pskel
  //

  void EvidenceVariable_pskel::
  url ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->url ();
  }

  void EvidenceVariable_pskel::
  identifier ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->identifier ();
  }

  void EvidenceVariable_pskel::
  version ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->version ();
  }

  void EvidenceVariable_pskel::
  name ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->name ();
  }

  void EvidenceVariable_pskel::
  title ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->title ();
  }

  void EvidenceVariable_pskel::
  shortTitle ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->shortTitle ();
  }

  void EvidenceVariable_pskel::
  subtitle ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->subtitle ();
  }

  void EvidenceVariable_pskel::
  status ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->status ();
  }

  void EvidenceVariable_pskel::
  date ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->date ();
  }

  void EvidenceVariable_pskel::
  publisher ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->publisher ();
  }

  void EvidenceVariable_pskel::
  contact ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->contact ();
  }

  void EvidenceVariable_pskel::
  description ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->description ();
  }

  void EvidenceVariable_pskel::
  note ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->note ();
  }

  void EvidenceVariable_pskel::
  useContext ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->useContext ();
  }

  void EvidenceVariable_pskel::
  jurisdiction ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->jurisdiction ();
  }

  void EvidenceVariable_pskel::
  copyright ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->copyright ();
  }

  void EvidenceVariable_pskel::
  approvalDate ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->approvalDate ();
  }

  void EvidenceVariable_pskel::
  lastReviewDate ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->lastReviewDate ();
  }

  void EvidenceVariable_pskel::
  effectivePeriod ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->effectivePeriod ();
  }

  void EvidenceVariable_pskel::
  topic ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->topic ();
  }

  void EvidenceVariable_pskel::
  author ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->author ();
  }

  void EvidenceVariable_pskel::
  editor ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->editor ();
  }

  void EvidenceVariable_pskel::
  reviewer ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->reviewer ();
  }

  void EvidenceVariable_pskel::
  endorser ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->endorser ();
  }

  void EvidenceVariable_pskel::
  relatedArtifact ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->relatedArtifact ();
  }

  void EvidenceVariable_pskel::
  type ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->type ();
  }

  void EvidenceVariable_pskel::
  characteristic ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->characteristic ();
  }

  void EvidenceVariable_pskel::
  post_EvidenceVariable ()
  {
    if (this->EvidenceVariable_impl_)
      this->EvidenceVariable_impl_->post_EvidenceVariable ();
    else
      post_DomainResource ();
  }

  void EvidenceVariable_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->shortTitle_parser_)
      this->shortTitle_parser_->_reset ();

    if (this->subtitle_parser_)
      this->subtitle_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->copyright_parser_)
      this->copyright_parser_->_reset ();

    if (this->approvalDate_parser_)
      this->approvalDate_parser_->_reset ();

    if (this->lastReviewDate_parser_)
      this->lastReviewDate_parser_->_reset ();

    if (this->effectivePeriod_parser_)
      this->effectivePeriod_parser_->_reset ();

    if (this->topic_parser_)
      this->topic_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->editor_parser_)
      this->editor_parser_->_reset ();

    if (this->reviewer_parser_)
      this->reviewer_parser_->_reset ();

    if (this->endorser_parser_)
      this->endorser_parser_->_reset ();

    if (this->relatedArtifact_parser_)
      this->relatedArtifact_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->characteristic_parser_)
      this->characteristic_parser_->_reset ();

    this->resetting_ = false;
  }

  // EvidenceVariable_Characteristic_pskel
  //

  void EvidenceVariable_Characteristic_pskel::
  description ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->description ();
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionReference ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->definitionReference ();
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionCanonical ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->definitionCanonical ();
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionCodeableConcept ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->definitionCodeableConcept ();
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionExpression ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->definitionExpression ();
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionDataRequirement ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->definitionDataRequirement ();
  }

  void EvidenceVariable_Characteristic_pskel::
  definitionTriggerDefinition ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->definitionTriggerDefinition ();
  }

  void EvidenceVariable_Characteristic_pskel::
  usageContext ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->usageContext ();
  }

  void EvidenceVariable_Characteristic_pskel::
  exclude ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->exclude ();
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectiveDateTime ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->participantEffectiveDateTime ();
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectivePeriod ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->participantEffectivePeriod ();
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectiveDuration ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->participantEffectiveDuration ();
  }

  void EvidenceVariable_Characteristic_pskel::
  participantEffectiveTiming ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->participantEffectiveTiming ();
  }

  void EvidenceVariable_Characteristic_pskel::
  timeFromStart ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->timeFromStart ();
  }

  void EvidenceVariable_Characteristic_pskel::
  groupMeasure ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->groupMeasure ();
  }

  void EvidenceVariable_Characteristic_pskel::
  post_EvidenceVariable_Characteristic ()
  {
    if (this->EvidenceVariable_Characteristic_impl_)
      this->EvidenceVariable_Characteristic_impl_->post_EvidenceVariable_Characteristic ();
    else
      post_BackboneElement ();
  }

  void EvidenceVariable_Characteristic_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->definitionReference_parser_)
      this->definitionReference_parser_->_reset ();

    if (this->definitionCanonical_parser_)
      this->definitionCanonical_parser_->_reset ();

    if (this->definitionCodeableConcept_parser_)
      this->definitionCodeableConcept_parser_->_reset ();

    if (this->definitionExpression_parser_)
      this->definitionExpression_parser_->_reset ();

    if (this->definitionDataRequirement_parser_)
      this->definitionDataRequirement_parser_->_reset ();

    if (this->definitionTriggerDefinition_parser_)
      this->definitionTriggerDefinition_parser_->_reset ();

    if (this->usageContext_parser_)
      this->usageContext_parser_->_reset ();

    if (this->exclude_parser_)
      this->exclude_parser_->_reset ();

    if (this->participantEffectiveDateTime_parser_)
      this->participantEffectiveDateTime_parser_->_reset ();

    if (this->participantEffectivePeriod_parser_)
      this->participantEffectivePeriod_parser_->_reset ();

    if (this->participantEffectiveDuration_parser_)
      this->participantEffectiveDuration_parser_->_reset ();

    if (this->participantEffectiveTiming_parser_)
      this->participantEffectiveTiming_parser_->_reset ();

    if (this->timeFromStart_parser_)
      this->timeFromStart_parser_->_reset ();

    if (this->groupMeasure_parser_)
      this->groupMeasure_parser_->_reset ();

    this->resetting_ = false;
  }

  // EvidenceVariableType_list_pskel
  //

  void EvidenceVariableType_list_pskel::
  post_EvidenceVariableType_list ()
  {
    if (this->EvidenceVariableType_list_impl_)
      this->EvidenceVariableType_list_impl_->post_EvidenceVariableType_list ();
    else
      post_code_primitive ();
  }

  const char* const EvidenceVariableType_list_pskel::_xsde_EvidenceVariableType_list_pskel_enums_[3UL] = 
  {
    "continuous",
    "descriptive",
    "dichotomous"
  };

  // EvidenceVariableType_pskel
  //

  void EvidenceVariableType_pskel::
  value ()
  {
    if (this->EvidenceVariableType_impl_)
      this->EvidenceVariableType_impl_->value ();
  }

  void EvidenceVariableType_pskel::
  post_EvidenceVariableType ()
  {
    if (this->EvidenceVariableType_impl_)
      this->EvidenceVariableType_impl_->post_EvidenceVariableType ();
    else
      post_Element ();
  }

  void EvidenceVariableType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // GroupMeasure_list_pskel
  //

  void GroupMeasure_list_pskel::
  post_GroupMeasure_list ()
  {
    if (this->GroupMeasure_list_impl_)
      this->GroupMeasure_list_impl_->post_GroupMeasure_list ();
    else
      post_code_primitive ();
  }

  const char* const GroupMeasure_list_pskel::_xsde_GroupMeasure_list_pskel_enums_[6UL] = 
  {
    "mean",
    "mean-of-mean",
    "mean-of-median",
    "median",
    "median-of-mean",
    "median-of-median"
  };

  // GroupMeasure_pskel
  //

  void GroupMeasure_pskel::
  value ()
  {
    if (this->GroupMeasure_impl_)
      this->GroupMeasure_impl_->value ();
  }

  void GroupMeasure_pskel::
  post_GroupMeasure ()
  {
    if (this->GroupMeasure_impl_)
      this->GroupMeasure_impl_->post_GroupMeasure ();
    else
      post_Element ();
  }

  void GroupMeasure_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for EvidenceVariable_pskel.
  //
  bool EvidenceVariable_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "url" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "name" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "title" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "shortTitle" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "subtitle" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &EvidenceVariable_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool EvidenceVariable_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void EvidenceVariable_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void EvidenceVariable_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void EvidenceVariable_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "title" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->title_parser_)
            {
              this->title_parser_->pre ();
              ctx.nested_parser (this->title_parser_);
            }
          }
          else
          {
            if (this->title_parser_ != 0)
            {
              this->title_parser_->post_string ();
              this->title ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "shortTitle" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->shortTitle_parser_)
            {
              this->shortTitle_parser_->pre ();
              ctx.nested_parser (this->shortTitle_parser_);
            }
          }
          else
          {
            if (this->shortTitle_parser_ != 0)
            {
              this->shortTitle_parser_->post_string ();
              this->shortTitle ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "subtitle" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subtitle_parser_)
            {
              this->subtitle_parser_->pre ();
              ctx.nested_parser (this->subtitle_parser_);
            }
          }
          else
          {
            if (this->subtitle_parser_ != 0)
            {
              this->subtitle_parser_->post_string ();
              this->subtitle ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "copyright" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->copyright_parser_)
            {
              this->copyright_parser_->pre ();
              ctx.nested_parser (this->copyright_parser_);
            }
          }
          else
          {
            if (this->copyright_parser_ != 0)
            {
              this->copyright_parser_->post_markdown ();
              this->copyright ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "approvalDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->approvalDate_parser_)
            {
              this->approvalDate_parser_->pre ();
              ctx.nested_parser (this->approvalDate_parser_);
            }
          }
          else
          {
            if (this->approvalDate_parser_ != 0)
            {
              this->approvalDate_parser_->post_date ();
              this->approvalDate ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "lastReviewDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lastReviewDate_parser_)
            {
              this->lastReviewDate_parser_->pre ();
              ctx.nested_parser (this->lastReviewDate_parser_);
            }
          }
          else
          {
            if (this->lastReviewDate_parser_ != 0)
            {
              this->lastReviewDate_parser_->post_date ();
              this->lastReviewDate ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "effectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->effectivePeriod_parser_)
            {
              this->effectivePeriod_parser_->pre ();
              ctx.nested_parser (this->effectivePeriod_parser_);
            }
          }
          else
          {
            if (this->effectivePeriod_parser_ != 0)
            {
              this->effectivePeriod_parser_->post_Period ();
              this->effectivePeriod ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "topic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topic_parser_)
            {
              this->topic_parser_->pre ();
              ctx.nested_parser (this->topic_parser_);
            }
          }
          else
          {
            if (this->topic_parser_ != 0)
            {
              this->topic_parser_->post_CodeableConcept ();
              this->topic ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_ContactDetail ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "editor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->editor_parser_)
            {
              this->editor_parser_->pre ();
              ctx.nested_parser (this->editor_parser_);
            }
          }
          else
          {
            if (this->editor_parser_ != 0)
            {
              this->editor_parser_->post_ContactDetail ();
              this->editor ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "reviewer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reviewer_parser_)
            {
              this->reviewer_parser_->pre ();
              ctx.nested_parser (this->reviewer_parser_);
            }
          }
          else
          {
            if (this->reviewer_parser_ != 0)
            {
              this->reviewer_parser_->post_ContactDetail ();
              this->reviewer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "endorser" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->endorser_parser_)
            {
              this->endorser_parser_->pre ();
              ctx.nested_parser (this->endorser_parser_);
            }
          }
          else
          {
            if (this->endorser_parser_ != 0)
            {
              this->endorser_parser_->post_ContactDetail ();
              this->endorser ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "relatedArtifact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatedArtifact_parser_)
            {
              this->relatedArtifact_parser_->pre ();
              ctx.nested_parser (this->relatedArtifact_parser_);
            }
          }
          else
          {
            if (this->relatedArtifact_parser_ != 0)
            {
              this->relatedArtifact_parser_->post_RelatedArtifact ();
              this->relatedArtifact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_EvidenceVariableType ();
              this->type ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "characteristic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->characteristic_parser_)
            {
              this->characteristic_parser_->pre ();
              ctx.nested_parser (this->characteristic_parser_);
            }
          }
          else
          {
            if (this->characteristic_parser_ != 0)
            {
              this->characteristic_parser_->post_EvidenceVariable_Characteristic ();
              this->characteristic ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for EvidenceVariable_Characteristic_pskel.
  //
  bool EvidenceVariable_Characteristic_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "definitionReference" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "definitionCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "definitionCodeableConcept" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "definitionExpression" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "definitionDataRequirement" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "definitionTriggerDefinition" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "usageContext" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "exclude" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "participantEffectiveDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "participantEffectivePeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "participantEffectiveDuration" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "participantEffectiveTiming" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "timeFromStart" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "groupMeasure" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &EvidenceVariable_Characteristic_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool EvidenceVariable_Characteristic_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void EvidenceVariable_Characteristic_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void EvidenceVariable_Characteristic_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void EvidenceVariable_Characteristic_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "definitionReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionReference_parser_)
            {
              this->definitionReference_parser_->pre ();
              ctx.nested_parser (this->definitionReference_parser_);
            }
          }
          else
          {
            if (this->definitionReference_parser_ != 0)
            {
              this->definitionReference_parser_->post_Reference ();
              this->definitionReference ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "definitionCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionCanonical_parser_)
            {
              this->definitionCanonical_parser_->pre ();
              ctx.nested_parser (this->definitionCanonical_parser_);
            }
          }
          else
          {
            if (this->definitionCanonical_parser_ != 0)
            {
              this->definitionCanonical_parser_->post_canonical ();
              this->definitionCanonical ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "definitionCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionCodeableConcept_parser_)
            {
              this->definitionCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->definitionCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->definitionCodeableConcept_parser_ != 0)
            {
              this->definitionCodeableConcept_parser_->post_CodeableConcept ();
              this->definitionCodeableConcept ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "definitionExpression" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionExpression_parser_)
            {
              this->definitionExpression_parser_->pre ();
              ctx.nested_parser (this->definitionExpression_parser_);
            }
          }
          else
          {
            if (this->definitionExpression_parser_ != 0)
            {
              this->definitionExpression_parser_->post_Expression ();
              this->definitionExpression ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "definitionDataRequirement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionDataRequirement_parser_)
            {
              this->definitionDataRequirement_parser_->pre ();
              ctx.nested_parser (this->definitionDataRequirement_parser_);
            }
          }
          else
          {
            if (this->definitionDataRequirement_parser_ != 0)
            {
              this->definitionDataRequirement_parser_->post_DataRequirement ();
              this->definitionDataRequirement ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "definitionTriggerDefinition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionTriggerDefinition_parser_)
            {
              this->definitionTriggerDefinition_parser_->pre ();
              ctx.nested_parser (this->definitionTriggerDefinition_parser_);
            }
          }
          else
          {
            if (this->definitionTriggerDefinition_parser_ != 0)
            {
              this->definitionTriggerDefinition_parser_->post_TriggerDefinition ();
              this->definitionTriggerDefinition ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "usageContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usageContext_parser_)
            {
              this->usageContext_parser_->pre ();
              ctx.nested_parser (this->usageContext_parser_);
            }
          }
          else
          {
            if (this->usageContext_parser_ != 0)
            {
              this->usageContext_parser_->post_UsageContext ();
              this->usageContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "exclude" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->exclude_parser_)
            {
              this->exclude_parser_->pre ();
              ctx.nested_parser (this->exclude_parser_);
            }
          }
          else
          {
            if (this->exclude_parser_ != 0)
            {
              this->exclude_parser_->post_boolean ();
              this->exclude ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "participantEffectiveDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participantEffectiveDateTime_parser_)
            {
              this->participantEffectiveDateTime_parser_->pre ();
              ctx.nested_parser (this->participantEffectiveDateTime_parser_);
            }
          }
          else
          {
            if (this->participantEffectiveDateTime_parser_ != 0)
            {
              this->participantEffectiveDateTime_parser_->post_dateTime ();
              this->participantEffectiveDateTime ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "participantEffectivePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participantEffectivePeriod_parser_)
            {
              this->participantEffectivePeriod_parser_->pre ();
              ctx.nested_parser (this->participantEffectivePeriod_parser_);
            }
          }
          else
          {
            if (this->participantEffectivePeriod_parser_ != 0)
            {
              this->participantEffectivePeriod_parser_->post_Period ();
              this->participantEffectivePeriod ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "participantEffectiveDuration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participantEffectiveDuration_parser_)
            {
              this->participantEffectiveDuration_parser_->pre ();
              ctx.nested_parser (this->participantEffectiveDuration_parser_);
            }
          }
          else
          {
            if (this->participantEffectiveDuration_parser_ != 0)
            {
              this->participantEffectiveDuration_parser_->post_Duration ();
              this->participantEffectiveDuration ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "participantEffectiveTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participantEffectiveTiming_parser_)
            {
              this->participantEffectiveTiming_parser_->pre ();
              ctx.nested_parser (this->participantEffectiveTiming_parser_);
            }
          }
          else
          {
            if (this->participantEffectiveTiming_parser_ != 0)
            {
              this->participantEffectiveTiming_parser_->post_Timing ();
              this->participantEffectiveTiming ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "timeFromStart" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timeFromStart_parser_)
            {
              this->timeFromStart_parser_->pre ();
              ctx.nested_parser (this->timeFromStart_parser_);
            }
          }
          else
          {
            if (this->timeFromStart_parser_ != 0)
            {
              this->timeFromStart_parser_->post_Duration ();
              this->timeFromStart ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "groupMeasure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->groupMeasure_parser_)
            {
              this->groupMeasure_parser_->pre ();
              ctx.nested_parser (this->groupMeasure_parser_);
            }
          }
          else
          {
            if (this->groupMeasure_parser_ != 0)
            {
              this->groupMeasure_parser_->post_GroupMeasure ();
              this->groupMeasure ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for EvidenceVariableType_pskel.
  //
  bool EvidenceVariableType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EvidenceVariableType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for GroupMeasure_pskel.
  //
  bool GroupMeasure_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_GroupMeasure_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

